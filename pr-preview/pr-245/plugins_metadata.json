{
  "plugins": {
    "aiida-QECpWorkChain": {
      "code_home": "https://github.com/rikigigi/aiida-QECpWorkChain",
      "development_status": "beta",
      "entry_point_prefix": "qecpworkchain",
      "pip_url": "git+https://github.com/rikigigi/aiida-QECpWorkChain",
      "name": "aiida-QECpWorkChain",
      "package_name": "aiida_QECpWorkChain",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Riccardo Bertossa",
        "author_email": "rbertoss@sissa.it",
        "version": "0.2.0a0",
        "description": "Car-Parrinello Work Chain with Quantum Espresso. This workchain does a full CP simulation, from the choice of the electronic mass and the timestep, to the choice of the best parallelization options, and then it does the NPT equilibration and a final NVE simulation at the prescribed P and T. Automates as much as possible.",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=2.0.0,<3.0.0",
      "entry_points": {
        "aiida.workflows": {
          "qecpworkchain.cp": {
            "description": [
              "No description available"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cp_code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "cp_resources_cg_list",
                  "required": true,
                  "valid_types": "List",
                  "info": "Same as cp_resources_cp_list but when doing a CG. The CG uses a different a ..."
                },
                {
                  "name": "cp_resources_cp_list",
                  "required": true,
                  "valid_types": "List",
                  "info": "List of dictionary like the following:\n{\n 'resources' : {\n   'num_machines' ..."
                },
                {
                  "name": "ecutwfc",
                  "required": true,
                  "valid_types": "Float",
                  "info": "wavefunction cutoff (Ry), like in the QE input"
                },
                {
                  "name": "pseudo_family",
                  "required": true,
                  "valid_types": "Str",
                  "info": "pseudopotential family to use, as in usual aiida operations"
                },
                {
                  "name": "pw_code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "input pw code (used to calculate force ratio)"
                },
                {
                  "name": "pw_resources_list",
                  "required": true,
                  "valid_types": "List",
                  "info": "Same as cp_resources_cp_list but for pw.x code."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, TrajectoryData",
                  "info": "Input structure. If a trajectory is given, the workchain will use its last  ..."
                },
                {
                  "name": "thermobarostat_points",
                  "required": true,
                  "valid_types": "List",
                  "info": "List of dicts, each with the format [ { \"temperature_K\": 1000, \"pressure_KB ..."
                },
                {
                  "name": "additional_parameters_cp",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "parameters that will be included in the settings input of the QE CP plugin. ..."
                },
                {
                  "name": "adjust_ionic_mass",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "Multiply the mass of the ions by the corresponding force ration between the ..."
                },
                {
                  "name": "benchmark_emass_dt_walltime_s",
                  "required": false,
                  "valid_types": "Float",
                  "info": "same as benchmark_parallel_walltime_s but for dermining the best electronic ..."
                },
                {
                  "name": "benchmark_parallel_walltime_s",
                  "required": false,
                  "valid_types": "Float",
                  "info": "time requested to the scheduler during the test for finding the best parall ..."
                },
                {
                  "name": "cmdline_cp",
                  "required": false,
                  "valid_types": "List, NoneType",
                  "info": "additional command line parameters of the cp verlet caclulations only (for  ..."
                },
                {
                  "name": "default_nose_frequency",
                  "required": false,
                  "valid_types": "Float",
                  "info": "default nose frequency when a frequency cannot be estimated from the vibrat ..."
                },
                {
                  "name": "dt",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "timestep in atomic units, if not automatically chosen."
                },
                {
                  "name": "dt_start_stop_step",
                  "required": false,
                  "valid_types": "List",
                  "info": "list of timesteps to try. Timesteps are changed to better integrate the equ ..."
                },
                {
                  "name": "emass",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "electronic mass, atomic mass units, if not automatically chosen"
                },
                {
                  "name": "emass_list",
                  "required": false,
                  "valid_types": "List",
                  "info": "list of electronic masses to try. The emass is selected in order to satisfy ..."
                },
                {
                  "name": "initial_atomic_velocities_A_ps",
                  "required": false,
                  "valid_types": "ArrayData, NoneType",
                  "info": "optional input initial velocities in angstrom over picoseconds"
                },
                {
                  "name": "max_slope_const",
                  "required": false,
                  "valid_types": "Float",
                  "info": "max slope in K/ps of the constant of motion linear fit."
                },
                {
                  "name": "max_slope_ekinc",
                  "required": false,
                  "valid_types": "Float",
                  "info": "max slope in K/ps of the ekinc linear fit. If not satisfied try to change e ..."
                },
                {
                  "name": "max_slope_min_emass",
                  "required": false,
                  "valid_types": "Float",
                  "info": "minimum possible value of electronic mass that can be set by the max_slope  ..."
                },
                {
                  "name": "max_slope_min_ps",
                  "required": false,
                  "valid_types": "Float",
                  "info": "minimum required lenght in ps of the last trajectory to do the linear fit o ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "min_traj_steps_vdos",
                  "required": false,
                  "valid_types": "Int",
                  "info": "minimum number of steps to consider the calculated vibrational spectrum max ..."
                },
                {
                  "name": "minimum_nose_frequency",
                  "required": false,
                  "valid_types": "Float",
                  "info": "minimum nose frequency: if the frequency estimated from the vibrational spe ..."
                },
                {
                  "name": "nstep_initial_cg",
                  "required": false,
                  "valid_types": "Int",
                  "info": "At the beginning of the simulation the CP algorithm is not used. This is th ..."
                },
                {
                  "name": "nstep_parallel_test",
                  "required": false,
                  "valid_types": "Int",
                  "info": "the benchmark simulations will be that long, if performed"
                },
                {
                  "name": "number_of_pw_per_trajectory",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Number of pw submitted for every trajectory during calculation of force rat ..."
                },
                {
                  "name": "nve_required_picoseconds",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The equilibrated NVE simulation will last at least this number of picosecon ..."
                },
                {
                  "name": "pressure_tolerance",
                  "required": false,
                  "valid_types": "Float",
                  "info": "Pressure tolerance in kBar used to say if the npt is equilibrated. If not s ..."
                },
                {
                  "name": "skip_emass_dt_test",
                  "required": false,
                  "valid_types": "Bool",
                  "info": ""
                },
                {
                  "name": "skip_parallel_test",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "do not run run benchmarks to discover a good internal Quantum Espresso para ..."
                },
                {
                  "name": "skip_thermobarostat",
                  "required": false,
                  "valid_types": "Bool",
                  "info": ""
                },
                {
                  "name": "structure_kinds",
                  "required": false,
                  "valid_types": "List, NoneType",
                  "info": "These kinds will be used to override or set the masses of the various atomi ..."
                },
                {
                  "name": "target_force_ratio",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The forces calculated by the Car-Parrinello method are affected by two type ..."
                },
                {
                  "name": "temperature_tolerance",
                  "required": false,
                  "valid_types": "Float",
                  "info": "Temperature tolerance in K used to say if the npt is equilibrated. If not s ..."
                },
                {
                  "name": "tempw_initial_random",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "If provided, sets the initial temperature when randomly initializing the st ..."
                }
              ],
              "outputs": [
                {
                  "name": "cmdline_cp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "dt",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "emass",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "full_traj",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "kinds",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nve_prod_traj",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 401,
                  "message": "The initial cg steps failed. I cannot start to work."
                },
                {
                  "status": 402,
                  "message": "Nose-Hoover thermostat failed."
                },
                {
                  "status": 403,
                  "message": "Final cg after Nose-Hoover failed."
                },
                {
                  "status": 404,
                  "message": "Error in the NVE simulation"
                },
                {
                  "status": 405,
                  "message": "The simulations are calculating very expensive random numbers. There is something wrong (cutoff? metal? boo?)"
                },
                {
                  "status": 406,
                  "message": "Wrong input parameters"
                },
                {
                  "status": 407,
                  "message": "Parallel test was not succesful, maybe there is something more wrong."
                },
                {
                  "status": 408,
                  "message": "Multiple errors in the simulation that cannot fix."
                },
                {
                  "status": 409,
                  "message": "This is a bug in the workchain."
                }
              ]
            },
            "class": "aiida_QECpWorkChain.workflow:CpWorkChain"
          }
        }
      },
      "commits_count": 5,
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/rikigigi/aiida-QECpWorkChain"
    },
    "aiida-abinit": {
      "code_home": "https://github.com/sponce24/aiida-abinit",
      "entry_point_prefix": "abinit",
      "pip_url": "aiida-abinit",
      "plugin_info": "https://raw.github.com/sponce24/aiida-abinit/master/setup.json",
      "name": "aiida-abinit",
      "package_name": "aiida_abinit",
      "hosted_on": "github.com",
      "metadata": {
        "description": "The AiiDA plugin for ABINIT.",
        "author_email": "Samuel Ponce <samuel.pon@gmail.com>",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "version": "0.4.0"
      },
      "aiida_version": ">=1.6.3,<1.7.0",
      "entry_points": {
        "aiida.calculations": {
          "abinit": {
            "description": [
              "AiiDA calculation plugin wrapping the abinit executable."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The k-point mesh or path"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The ABINIT input parameters."
                },
                {
                  "name": "pseudos",
                  "required": true,
                  "valid_types": "Psp8Data, JthXmlData",
                  "info": "The pseudopotentials."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "parent_calc_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "A remote folder used for restarts."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Various special settings."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Various output quantities."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "Final electronic bands if present."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "Final structure of the calculation if present."
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "Trajectory of various output quantities over the calculation if present."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "Calculation did not produce all expected output files."
                },
                {
                  "status": 101,
                  "message": "Calculation did not produce the expected `[prefix]o_GSR.nc` output file."
                },
                {
                  "status": 102,
                  "message": "Calculation did not produce the expected `[prefix]o_HIST.nc` output file."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "The retrieved folder did not contain the `stdout` output file."
                },
                {
                  "status": 301,
                  "message": "The `stdout` output file could not be read."
                },
                {
                  "status": 302,
                  "message": "The `stdout` output file could not be parsed."
                },
                {
                  "status": 303,
                  "message": "The `abipy` `EventsParser` reports that the runw as not completed."
                },
                {
                  "status": 304,
                  "message": "The output file contains one or more error messages."
                },
                {
                  "status": 305,
                  "message": "The output file contains one or more warning messages."
                },
                {
                  "status": 312,
                  "message": "The output structure could not be parsed."
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 500,
                  "message": "The SCF minimization cycle did not converge."
                },
                {
                  "status": 501,
                  "message": "The ionic minimization cycle did not converge."
                }
              ]
            },
            "class": "aiida_abinit.calculations:AbinitCalculation"
          }
        },
        "aiida.parsers": {
          "abinit": "aiida_abinit.parsers:AbinitParser"
        },
        "aiida.workflows": {
          "abinit.base": {
            "description": [
              "Base Abinit Workchain to perform a DFT calculation. Validates parameters and restart."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "abinit",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "An explicit k-points mesh or list. Either this or `kpoints_distance` must b ..."
                },
                {
                  "name": "kpoints_distance",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Various output quantities."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "Final electronic bands if present."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "Final structure of the calculation if present."
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "Trajectory of various output quantities over the calculation if present."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 201,
                  "message": "`pseudos` could not be used to get the necessary pseudos."
                },
                {
                  "status": 202,
                  "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
                },
                {
                  "status": 203,
                  "message": "Neither the `options` nor `automatic_parallelization` input was specified."
                },
                {
                  "status": 204,
                  "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_abinit.workflows.base:AbinitBaseWorkChain"
          }
        }
      },
      "commits_count": 19,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-abinit"
    },
    "aiida-aenet": {
      "code_home": "https://gitlab.com/lattice737/aiida-aenet",
      "development_status": "planning",
      "entry_point_prefix": "aenet",
      "pip_url": "https://gitlab.com/lattice737/aiida-aenet",
      "name": "aiida-aenet",
      "package_name": "aiida_aenet",
      "hosted_on": "gitlab.com",
      "metadata": {
        "author": "Nicholas Martinez",
        "author_email": "nicholasmartinez@my.unt.edu",
        "version": "0.1.0",
        "description": "AiiDA plugin to construct machine-learning potentials using aenet",
        "classifiers": [
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Development Status :: 0 - Alpha"
        ]
      },
      "aiida_version": "~=1.2",
      "entry_points": {
        "aiida.data": {
          "aenet.algorithm": "aiida_aenet.data.algorithm:AenetAlgorithm",
          "aenet.potential": "aiida_aenet.data.potentials:AenetPotential"
        },
        "aiida.calculations": {
          "aenet.cur": "aiida_aenet.calculations.cur:CurCalculation",
          "aenet.generate": "aiida_aenet.calculations.generate:AenetGenerateCalculation",
          "aenet.predict": "aiida_aenet.calculations.predict:AenetPredictCalculation",
          "aenet.simulate": "aiida_aenet.calculations.simulate:AenetLammpsMdCalculation",
          "aenet.train": "aiida_aenet.calculations.train:AenetTrainCalculation",
          "aenet.transform": "aiida_aenet.calculations.transform:TransformCalculation"
        },
        "aiida.parsers": {
          "aenet.generate": "aiida_aenet.parsers.generate:AenetGenerateParser",
          "aenet.predict": "aiida_aenet.parsers.predict:AenetPredictParser",
          "aenet.simulate": "aiida_aenet.parsers.simulate:AenetLammpsMdParser",
          "aenet.train": "aiida_aenet.parsers.train:AenetTrainParser"
        },
        "aiida.workflows": {
          "aenet.build_reference": "aiida_aenet.workflows.build_reference:BuildReferenceWorkChain",
          "aenet.compare_simulations": "aiida_aenet.workflows.compare_simulations:CompareSimulationsWorkChain",
          "aenet.make_potential": "aiida_aenet.workflows.make_potential:MakePotentialWorkChain",
          "aenet.make_structures": "aiida_aenet.workflows.make_structures:MakeStructuresWorkChain"
        },
        "aenet.potentials": {
          "lammps.ann": "aiida_aenet.data.potentials.lammps:ANN"
        }
      },
      "commits_count": 3,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 6
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 4
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 4
        },
        {
          "colorclass": "orange",
          "text": "Other (Aenet potentials)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install https://gitlab.com/lattice737/aiida-aenet"
    },
    "aiida-alloy": {
      "code_home": "https://github.com/DanielMarchand/aiida-alloy",
      "development_status": "beta",
      "entry_point_prefix": "alloy",
      "pip_url": "git+https://github.com/DanielMarchand/aiida-alloy",
      "name": "aiida-alloy",
      "package_name": "aiida_alloy",
      "hosted_on": "github.com",
      "metadata": {
        "author": "The AiiDA developers group",
        "author_email": "",
        "version": "0.1.0a0",
        "description": "Aiida Workflows for Elastic Constants using Quantum Espresso",
        "classifiers": [
          "Programming Language :: Python"
        ]
      },
      "aiida_version": ">=1.0.0a0",
      "entry_points": {
        "aiida.workflows": {
          "elastic": "aiida_alloy.workflows.ElasticWorkChain:ElasticWorkChain"
        }
      },
      "commits_count": 1,
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/DanielMarchand/aiida-alloy"
    },
    "aiida-ase": {
      "code_home": "https://github.com/aiidateam/aiida-ase",
      "documentation_url": "https://aiida-ase.readthedocs.io/",
      "entry_point_prefix": "ase",
      "pip_url": "aiida-ase",
      "plugin_info": "https://raw.github.com/aiidateam/aiida-ase/master/setup.json",
      "name": "aiida-ase",
      "package_name": "aiida_ase",
      "hosted_on": "github.com",
      "metadata": {
        "description": "The official AiiDA plugin for ASE.",
        "author_email": "The AiiDA team <developers@aiida.net>",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering"
        ],
        "version": "2.0.0"
      },
      "aiida_version": ">=1.6,<2.0",
      "entry_points": {
        "aiida.calculations": {
          "ase.ase": {
            "description": [
              "`CalcJob` implementation that can be used to wrap around the ASE calculators."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Input parameters for the namelists."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "The k-points to use for the calculation."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Optional settings that control the plugin."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "array",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 300,
                  "message": "One of the expected output files was missing."
                },
                {
                  "status": 301,
                  "message": "The log file from the DFT code was not written out."
                },
                {
                  "status": 302,
                  "message": "Relaxation did not complete."
                },
                {
                  "status": 303,
                  "message": "SCF Failed."
                },
                {
                  "status": 305,
                  "message": "Cannot identify what went wrong."
                },
                {
                  "status": 306,
                  "message": "gpaw could not find the PAW potentials."
                },
                {
                  "status": 307,
                  "message": "Attribute Error found in the stderr file."
                },
                {
                  "status": 308,
                  "message": "Fermi level is infinite."
                },
                {
                  "status": 400,
                  "message": "The calculation ran out of walltime."
                }
              ]
            },
            "class": "aiida_ase.calculations.ase:AseCalculation"
          }
        },
        "aiida.parsers": {
          "ase.ase": "aiida_ase.parsers.ase:AseParser",
          "ase.gpaw": "aiida_ase.parsers.gpaw:GpawParser"
        },
        "aiida.workflows": {
          "ase.gpaw.base": {
            "description": [
              "Workchain to run a GPAW calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "gpaw",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "k-points to use for the calculation."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "array",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_ase.workflows.base:GpawBaseWorkChain"
          }
        }
      },
      "commits_count": 8,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 2
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-ase"
    },
    "aiida-autocas": {
      "entry_point_prefix": "autocas",
      "code_home": "https://github.com/microsoft/aiida-autocas",
      "version_file": "https://raw.githubusercontent.com/microsoft/aiida-autocas/main/aiida_autocas/__init__.py",
      "pip_url": "git+https://github.com/microsoft/aiida-autocas",
      "name": "aiida-autocas",
      "package_name": "aiida_autocas",
      "hosted_on": "github.com",
      "metadata": {
        "version": "0.1.0",
        "description": "AiiDA AutoCAS Plugin",
        "classifiers": []
      },
      "aiida_version": ">=2.0,<3",
      "entry_points": {
        "aiida.calculations": {
          "autocas": "aiida_autocas.calculations:AutoCASCalculation"
        },
        "aiida.parsers": {
          "autocas": "aiida_autocas.parsers:AutoCASParser"
        }
      },
      "commits_count": 11,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/microsoft/aiida-autocas"
    },
    "aiida-bands-inspect": {
      "code_home": "https://github.com/greschd/aiida-bands-inspect",
      "documentation_url": "https://aiida-bands-inspect.readthedocs.io",
      "entry_point_prefix": "bands_inspect",
      "pip_url": "aiida-bands-inspect",
      "name": "aiida-bands-inspect",
      "package_name": "aiida_bands_inspect",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Plugin for running bands_inspect",
        "author": "Dominik Gresch",
        "author_email": "greschd@gmx.ch",
        "license": "Apache 2.0",
        "home_page": "https://aiida-bands-inspect.readthedocs.io",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "0.4.0"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.calculations": {
          "bands_inspect.align": {
            "description": [
              "Calculation class for the ``bands-inspect align`` command.",
              "",
              "    Arguments",
              "    ---------",
              "    bands1 : aiida.orm.data.array.bands.BandsData",
              "        First band structure to compare.",
              "    bands2 : aiida.orm.data.array.bands.BandsData",
              "        Second band structure to compare."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "bands1",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "First bandstructure which is to be aligned"
                },
                {
                  "name": "bands2",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "Second bandstructure which is to be aligned"
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "bands1_shifted",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "bands2_shifted",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "difference",
                  "required": true,
                  "valid_types": "Float",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "shift",
                  "required": true,
                  "valid_types": "Float",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "At least one of the expected output files is missing from the retrieved folder."
                },
                {
                  "status": 220,
                  "message": "The text output file content is not in the expected format."
                }
              ]
            },
            "class": "aiida_bands_inspect.calculations.align:AlignCalculation"
          },
          "bands_inspect.difference": {
            "description": [
              "Calculation class for the ``bands-inspect difference`` command.",
              "",
              "    Arguments",
              "    ---------",
              "    bands1 : aiida.orm.nodes.data.array.bands.BandsData",
              "        First band structure to compare.",
              "    bands2 : aiida.orm.nodes.data.array.bands.BandsData",
              "        Second band structure to compare."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "bands1",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "First bandstructure which is to be compared"
                },
                {
                  "name": "bands2",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "Second bandstructure which is to be compared"
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "difference",
                  "required": true,
                  "valid_types": "Float",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "The retrieved folder does not contain the difference output file."
                }
              ]
            },
            "class": "aiida_bands_inspect.calculations.difference:DifferenceCalculation"
          },
          "bands_inspect.plot": {
            "description": [
              "Calculation class for the ``bands_inspect plot`` command.",
              "",
              "    Arguments",
              "    ---------",
              "    bands1 : aiida.orm.nodes.data.array.bands.BandsData",
              "        First band structure to plot.",
              "    bands2 : aiida.orm.nodes.data.array.bands.BandsData",
              "        Second band structure to plot."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "bands1",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "First bandstructure which is to be plotted"
                },
                {
                  "name": "bands2",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "Second bandstructure which is to be plotted"
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "plot",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "The created band-structure comparison plot."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "The retrieved folder does not contain the plot output file."
                }
              ]
            },
            "class": "aiida_bands_inspect.calculations.plot:PlotCalculation"
          }
        },
        "aiida.parsers": {
          "bands_inspect.bands": "aiida_bands_inspect.parsers.bands:BandsParser",
          "bands_inspect.difference": "aiida_bands_inspect.parsers.difference:DifferenceParser",
          "bands_inspect.align": "aiida_bands_inspect.parsers.align:AlignParser",
          "bands_inspect.plot": "aiida_bands_inspect.parsers.plot:PlotParser"
        }
      },
      "commits_count": 0,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 3
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 4
        }
      ],
      "pip_install_cmd": "pip install aiida-bands-inspect"
    },
    "aiida-bigdft": {
      "code_home": "https://github.com/BigDFT-group/aiida-bigdft-plugin",
      "development_status": "beta",
      "entry_point_prefix": "bigdft",
      "pip_url": "aiida-bigdft",
      "plugin_info": "https://raw.github.com/BigDFT-group/aiida-bigdft-plugin/master/setup.json",
      "name": "aiida-bigdft",
      "package_name": "aiida_bigdft",
      "hosted_on": "github.com",
      "metadata": {
        "description": "Aiida plugin for BigDFT code",
        "author": "The BigDFT Team",
        "author_email": "bigdft-developers@lists.launchpad.net",
        "license": "MIT",
        "home_page": "https://github.com/BigDFT-group/aiida-bigdft-plugin",
        "classifiers": [
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "0.2.6"
      },
      "aiida_version": ">=1.1.1,<2.0.0",
      "entry_points": {
        "aiida.calculations": {
          "bigdft": {
            "description": [
              "AiiDA calculation plugin wrapping the BigDFT python interface."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "BigDFTParameters",
                  "info": "Command line parameters for BigDFT"
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "StructureData struct"
                },
                {
                  "name": "extra_retrieved_files",
                  "required": false,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "kpoint mesh or kpoint path"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "pseudos",
                  "required": false,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "structurefile",
                  "required": false,
                  "valid_types": "Str",
                  "info": "xyz file"
                }
              ],
              "outputs": [
                {
                  "name": "bigdft_logfile",
                  "required": true,
                  "valid_types": "BigDFTLogfile",
                  "info": "BigDFT log file as a dict"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 100,
                  "message": "Calculation did not produce all expected output files."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                }
              ]
            },
            "class": "aiida_bigdft.calculations.bigdft:BigDFTCalculation"
          },
          "bigdft.postscript": {
            "description": [
              "AiiDA calculation to add post treatments to a computation workcahin.",
              "    post treatment scripts are to be registered as codes in aiida.",
              "    They are python scripts accepting one argument : a remotefolder where data is stored",
              "    Output files are not specified and can be added to the extra_retrieved_files list"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "bigdft_data_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Folder to the BigDFT data folder"
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "retrieved_files",
                  "required": false,
                  "valid_types": "List",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 101,
                  "message": "Script execution failed"
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                }
              ]
            },
            "class": "aiida_bigdft.calculations.postscript:ScriptCalculation"
          }
        },
        "aiida.cmdline.data": {
          "bigdft": "aiida_bigdft.cli:data_cli"
        },
        "aiida.data": {
          "bigdft": "aiida_bigdft.data:BigDFTParameters",
          "bigdft_logfile": "aiida_bigdft.data:BigDFTLogfile"
        },
        "aiida.parsers": {
          "bigdft": "aiida_bigdft.parsers:BigDFTParser"
        },
        "aiida.workflows": {
          "bigdft": {
            "description": [
              "No description available"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "BigDFTParameters",
                  "info": "Command line parameters for BigDFT"
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "StructureData struct"
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "extra_retrieved_files",
                  "required": false,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "kpoint mesh or kpoint path"
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "pseudos",
                  "required": false,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "run_opts",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "metadata"
                },
                {
                  "name": "show_warnings",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "turn the warnings on/off."
                },
                {
                  "name": "structurefile",
                  "required": false,
                  "valid_types": "Str",
                  "info": "xyz file"
                }
              ],
              "outputs": [
                {
                  "name": "bigdft_logfile",
                  "required": true,
                  "valid_types": "BigDFTLogfile",
                  "info": "BigDFT log file as a dict"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "BigDFT input error"
                },
                {
                  "status": 200,
                  "message": "BigDFT runtime error"
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_bigdft.workflows.base:BigDFTBaseWorkChain"
          },
          "bigdft.relax": {
            "description": [
              "Structure relaxation workchain."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "relax",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "StructureData struct"
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "extra_retrieved_files",
                  "required": false,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "kpoint mesh or kpoint path"
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "BigDFTParameters",
                  "info": "param dictionary"
                },
                {
                  "name": "pseudos",
                  "required": false,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "run_opts",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "metadata"
                },
                {
                  "name": "show_warnings",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "turn the warnings on/off."
                },
                {
                  "name": "structurefile",
                  "required": false,
                  "valid_types": "Str",
                  "info": "xyz file"
                }
              ],
              "outputs": [
                {
                  "name": "bigdft_logfile",
                  "required": true,
                  "valid_types": "BigDFTLogfile",
                  "info": "BigDFT log file as a dict"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "relaxed_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "total_energy",
                  "required": false,
                  "valid_types": "Float",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 101,
                  "message": "Subprocess failed for relaxation"
                }
              ]
            },
            "class": "aiida_bigdft.workflows.relax:BigDFTRelaxWorkChain"
          }
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 2
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 2
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-bigdft"
    },
    "aiida-castep": {
      "code_home": "https://gitlab.com/bz1/aiida-castep",
      "development_status": "stable",
      "documentation_url": "https://aiida-castep.readthedocs.io/",
      "entry_point_prefix": "castep",
      "pip_url": "aiida-castep",
      "plugin_info": "https://gitlab.com/bz1/aiida-castep/raw/master/setup.json",
      "name": "aiida-castep",
      "package_name": "aiida_castep",
      "hosted_on": "gitlab.com",
      "metadata": {
        "description": "AiiDA plugin for CASTEP",
        "author": "Bonan Zhu",
        "author_email": "zhubonan@outlook.com",
        "license": "MIT License",
        "home_page": "https://github.com/zhubonan/aiida-castep",
        "classifiers": [
          "Framework :: AiiDA",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "version": "2.0.1"
      },
      "aiida_version": ">=2.0,<3.0",
      "entry_points": {
        "aiida.calculations": {
          "castep.castep": {
            "description": [
              "Class representing a generic CASTEP calculation -",
              "    This class should work for all types of calculations."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "A node that defines the input parameters"
                },
                {
                  "name": "pseudos",
                  "required": true,
                  "valid_types": "",
                  "info": "Use nodes for the pseudopotentails of one ofthe element in the structure. Y ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure"
                },
                {
                  "name": "bs_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: bandstructure"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "elnes_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: elnes"
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Use a node defining the kpoints for the calculation"
                },
                {
                  "name": "magres_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: magres"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "optics_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: optics"
                },
                {
                  "name": "parent_calc_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Use a remote folder as the parent folder. Useful for restarts."
                },
                {
                  "name": "phonon_fine_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: phonon, phonon+efield"
                },
                {
                  "name": "phonon_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: phonon, phonon+efield"
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "A node for additional settings"
                },
                {
                  "name": "spectral_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: spectral"
                },
                {
                  "name": "supercell_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: phonon"
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Parsed results in a dictionary format."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "Calculation terminated gracefully, end found"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 101,
                  "message": "SCF Cycles failed to reach convergence"
                },
                {
                  "status": 103,
                  "message": "Stopped execuation due to detection of 'stop ' keyword in param file."
                },
                {
                  "status": 104,
                  "message": "CASTEP generate error files. Check them for details"
                },
                {
                  "status": 105,
                  "message": "Cannot find the end of calculation"
                },
                {
                  "status": 106,
                  "message": "No output .castep files found"
                },
                {
                  "status": 107,
                  "message": "Calculation self-terminated due to time limit"
                },
                {
                  "status": 108,
                  "message": "No retrieve folder is found"
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 200,
                  "message": "UNKOWN ERROR"
                },
                {
                  "status": 501,
                  "message": "At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."
                }
              ]
            },
            "class": "aiida_castep.calculations.castep:CastepCalculation"
          },
          "castep.ts": {
            "description": [
              "CASTEP calculation for transition state search. Use an extra input product structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "A node that defines the input parameters"
                },
                {
                  "name": "product_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Product structure for transition state search."
                },
                {
                  "name": "pseudos",
                  "required": true,
                  "valid_types": "",
                  "info": "Use nodes for the pseudopotentails of one ofthe element in the structure. Y ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure"
                },
                {
                  "name": "bs_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: bandstructure"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "elnes_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: elnes"
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Use a node defining the kpoints for the calculation"
                },
                {
                  "name": "magres_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: magres"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "optics_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: optics"
                },
                {
                  "name": "parent_calc_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Use a remote folder as the parent folder. Useful for restarts."
                },
                {
                  "name": "phonon_fine_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: phonon, phonon+efield"
                },
                {
                  "name": "phonon_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: phonon, phonon+efield"
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "A node for additional settings"
                },
                {
                  "name": "spectral_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: spectral"
                },
                {
                  "name": "supercell_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Extra kpoints input for task: phonon"
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Parsed results in a dictionary format."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "Calculation terminated gracefully, end found"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 101,
                  "message": "SCF Cycles failed to reach convergence"
                },
                {
                  "status": 103,
                  "message": "Stopped execuation due to detection of 'stop ' keyword in param file."
                },
                {
                  "status": 104,
                  "message": "CASTEP generate error files. Check them for details"
                },
                {
                  "status": 105,
                  "message": "Cannot find the end of calculation"
                },
                {
                  "status": 106,
                  "message": "No output .castep files found"
                },
                {
                  "status": 107,
                  "message": "Calculation self-terminated due to time limit"
                },
                {
                  "status": 108,
                  "message": "No retrieve folder is found"
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 200,
                  "message": "UNKOWN ERROR"
                },
                {
                  "status": 501,
                  "message": "At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."
                }
              ]
            },
            "class": "aiida_castep.calculations.castep:CastepTSCalculation"
          }
        },
        "aiida.cmdline.data": {
          "castep-helper": "aiida_castep.cmdline.helper_cmd:helper_cmd",
          "castep-pseudos": "aiida_castep.cmdline.otfg_cmd:pseudos_cmd"
        },
        "aiida.data": {
          "castep.otfgdata": "aiida_castep.data.otfg:OTFGData",
          "castep.uspdata": "aiida_castep.data.usp:UspData"
        },
        "aiida.groups": {
          "castep.otfg": "aiida_castep.data.otfg:OTFGGroup"
        },
        "aiida.parsers": {
          "castep.castep": "aiida_castep.parsers.castep:CastepParser"
        },
        "aiida.tests": {
          "castep.calculation": "aiida_castep.tests.dbtests.dbtestcalculation"
        },
        "aiida.tools.calculations": {
          "castep.castep": "aiida_castep.calculations.tools:CastepCalcTools"
        },
        "aiida.workflows": {
          "castep.altrelax": {
            "description": [
              "A relaxation workflow that alternates between fixed cell and unfixed cell",
              "    This is meidate the problem in CASTEP where if the cell is partially constraints",
              "    the convergence would be very slow.",
              "",
              "    To overcome this problem, the structure should be relaxed with cell constraints",
              "    then restart with fixed cell and repeat.",
              "",
              "    Following fields can be used in ``relax_options``",
              "",
              "    :var_cell_iter_max: Maximum iterations in variable cell relaxation, default to 10",
              "",
              "    :fix_cell_iter_max: Maximum iterations in fixed cell relaxation, default to 20"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "base",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "calc",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Structure to be used for relaxation."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Wether to clean the workdir of the calculations at the end of the workchain ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "relax_options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Options for relaxation."
                }
              ],
              "outputs": [
                {
                  "name": "output_bands",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": ""
                },
                {
                  "name": "output_array",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The relaxed structure."
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 101,
                  "message": "Subprocess lauched has failed in the relax stage"
                },
                {
                  "status": 102,
                  "message": "Geometry optimisation is not converged but the maximum iteration is exceeded."
                },
                {
                  "status": 201,
                  "message": "NO cell_constraints find in the input"
                }
              ]
            },
            "class": "aiida_castep.workflows.relax:CastepAlterRelaxWorkChain"
          },
          "castep.bands": {
            "description": [
              "Workchain for running bands calculation.",
              "",
              "    This workchain does the following:",
              "",
              "    1. Relax the structure if requested (eg. inputs passed to the relax namespace).",
              "    2. Optionally: Do a SCF singlepoint calculation",
              "    3. Do combined SCF + non-SCF calculation for bands and dos.",
              "",
              "    Inputs must be passed for the SCF calculation (dispatched to bands and DOS),",
              "    others are optional.",
              "",
              "    Input for bands and dos calculations are optional. However, if they are needed, the full list of inputs must",
              "    be passed. For the `parameters` node, one may choose to only specify those fields that need to be updated."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for SCF workchain, mandatory. Used as template for bands/dos if not  ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure"
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for bands calculation, if needed"
                },
                {
                  "name": "bands_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Explicit kpoints for the bands"
                },
                {
                  "name": "bands_kpoints_distance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "Spacing for band distances, used by seekpath"
                },
                {
                  "name": "clean_children_workdir",
                  "required": false,
                  "valid_types": "Str, NoneType",
                  "info": "What part of the called children to clean"
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for DOS calculation, if needed"
                },
                {
                  "name": "dos_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Kpoints for running DOS calculations"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "only_dos",
                  "required": false,
                  "valid_types": "",
                  "info": "Flag for running only DOS calculations"
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "",
                  "info": "Options for this workchain. Supported keywords: dos_smearing, dos_npoints."
                },
                {
                  "name": "relax",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for Relaxation workchain, if needed"
                },
                {
                  "name": "run_separate_scf",
                  "required": false,
                  "valid_types": "",
                  "info": "Flag for running a separate SCF calculation, default to False"
                }
              ],
              "outputs": [
                {
                  "name": "band_structure",
                  "required": true,
                  "valid_types": "",
                  "info": "Computed band structure with labels"
                },
                {
                  "name": "dos_bands",
                  "required": false,
                  "valid_types": "",
                  "info": "Bands from the DOS calculation"
                },
                {
                  "name": "primitive_structure",
                  "required": false,
                  "valid_types": "",
                  "info": "Primitive structure used for band structure calculations"
                },
                {
                  "name": "seekpath_parameters",
                  "required": false,
                  "valid_types": "",
                  "info": "Parameters used by seekpath"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 501,
                  "message": "Relaxation workchain failed"
                },
                {
                  "status": 502,
                  "message": "SCF workchain failed"
                },
                {
                  "status": 503,
                  "message": "Band structure workchain failed"
                },
                {
                  "status": 504,
                  "message": "DOS workchain failed"
                }
              ]
            },
            "class": "aiida_castep.workflows.bands:CastepBandsWorkChain"
          },
          "castep.base": {
            "description": [
              "A basic workchain for generic CASTEP calculations.",
              "    We try to handle erros such as walltime exceeded or SCF not converged"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "calc",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "calc_options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Options to be passed to calculations's metadata.options"
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Wether to clean the workdir of the calculations or not, the default is not  ..."
                },
                {
                  "name": "continuation_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Use a remote folder as the parent folder. Useful for restarts."
                },
                {
                  "name": "ensure_gamma_centering",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Ensure the kpoint grid is gamma centred."
                },
                {
                  "name": "kpoints_spacing",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "Kpoint spacing"
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of restarts"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Options specific to the workchain.Avaliable options: queue_wallclock_limit, ..."
                },
                {
                  "name": "pseudos_family",
                  "required": false,
                  "valid_types": "Str, NoneType",
                  "info": "Pseudopotential family to be used"
                },
                {
                  "name": "reuse_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Use a remote folder as the parent folder. Useful for restarts."
                }
              ],
              "outputs": [
                {
                  "name": "output_bands",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": ""
                },
                {
                  "name": "output_array",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 200,
                  "message": "The maximum number of iterations has been exceeded"
                },
                {
                  "status": 201,
                  "message": "The maximum length of the wallclocks has been exceeded"
                },
                {
                  "status": 301,
                  "message": "CASTEP generated error files and is not recoverable"
                },
                {
                  "status": 302,
                  "message": "Cannot reach SCF convergence despite restart efforts"
                },
                {
                  "status": 400,
                  "message": "The stop flag has been put in the .param file to request termination of the calculation."
                },
                {
                  "status": 900,
                  "message": "Input validate is failed"
                },
                {
                  "status": 901,
                  "message": "Completed one iteration but found not calculation returned"
                },
                {
                  "status": 1000,
                  "message": "Error is not known"
                }
              ]
            },
            "class": "aiida_castep.workflows.base:CastepBaseWorkChain"
          },
          "castep.relax": {
            "description": [
              "WorkChain to relax structures.",
              "    Restart the relaxation calculation until the structure is fully relaxed.",
              "    Each CASTEP relaxation may finish without error with not fully relaxed structure",
              "    if the number of iteration is exceeded (*geom_max_iter*).",
              "    This workchain try to restart such calculations (wrapped in CastepBaseWorkChain)",
              "    until the structure is fully relaxed",
              "",
              "    ``relax_options`` is a Dict of the options avaliable fields are:",
              "",
              "    - restart_mode: mode of restart, choose from ``reuse`` (default), ``structure``,",
              "      ``continuation``.",
              "    - bypass: Bypass relaxation control - e.g. no checking of the convergence.",
              "      Can be used for doing singlepoint calculation."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "base",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "calc",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Structure to be used for relaxation."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Wether to clean the workdir of the calculations at the end of the workchain ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "relax_options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Options for relaxation."
                }
              ],
              "outputs": [
                {
                  "name": "output_bands",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": ""
                },
                {
                  "name": "output_array",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The relaxed structure."
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 101,
                  "message": "Subprocess lauched has failed in the relax stage"
                },
                {
                  "status": 102,
                  "message": "Geometry optimisation is not converged but the maximum iteration is exceeded."
                }
              ]
            },
            "class": "aiida_castep.workflows.relax:CastepRelaxWorkChain"
          }
        },
        "console_scripts": {
          "castep.mock": "aiida_castep.cmdline.mock_castep:mock_castep"
        }
      },
      "commits_count": 10,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 2
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 4
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands, Groups, Tests, ...)",
          "count": 5
        }
      ],
      "pip_install_cmd": "pip install aiida-castep"
    },
    "aiida-catmap": {
      "code_home": "https://github.com/sudarshanv01/aiida-catmap",
      "entry_point_prefix": "catmap",
      "name": "aiida-catmap",
      "package_name": "aiida_catmap",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Sudarshan Vijay",
        "author_email": "vijays@fysik.dtu.dk",
        "version": "0.2.0a0",
        "description": "AiiDA package that interfaces with Kinetic modelling code CatMAP",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.1.0,<2.0.0",
      "entry_points": {
        "aiida.calculations": {
          "catmap": "aiida_catmap.calculations.catmap:CatMAPCalculation"
        },
        "aiida.parsers": {
          "catmap": "aiida_catmap.parsers.catmap:CatMAPParser"
        }
      },
      "commits_count": 0,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "See source code repository."
    },
    "aiida-catmat": {
      "code_home": "https://github.com/pzarabadip/aiida-catmat",
      "entry_point_prefix": "catmat",
      "development_status": "beta",
      "documentation_url": "https://aiida-catmat.readthedocs.io/",
      "pip_url": "aiida-catmat",
      "name": "aiida-catmat",
      "package_name": "aiida_catmat",
      "hosted_on": "github.com",
      "metadata": {
        "description": "Collection of AiiDA WorkChains Developed in Morgan Group",
        "author": "Pezhman Zarabadi-Poor",
        "author_email": "pzarabadip@gmail.com",
        "license": "MIT License",
        "home_page": "https://github.com/pzarabadip/aiida-catmat",
        "classifiers": [
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "version": "1.0.0b0"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.parsers": {
          "vasp_base_parser": "aiida_catmat.parsers:VaspBaseParser"
        },
        "aiida.workflows": {
          "vasp.base": "aiida_catmat.workchains:VaspBaseWorkChain",
          "catmat.vasp_multistage": "aiida_catmat.workchains:VaspMultiStageWorkChain",
          "catmat.vasp_converge": "aiida_catmat.workchains:VaspConvergeWorkChain",
          "catmat.vasp_catmat": "aiida_catmat.workchains:VaspCatMatWorkChain",
          "catmat.vasp_multistage_ddec": "aiida_catmat.workchains:VaspMultiStageDdecWorkChain"
        }
      },
      "commits_count": 19,
      "summaryinfo": [
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 5
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-catmat"
    },
    "aiida-ce": {
      "code_home": "https://github.com/unkcpz/aiida-ce",
      "development_status": "beta",
      "entry_point_prefix": "ce",
      "pip_url": "git+https://github.com/unkcpz/aiida-ce",
      "name": "aiida-ce",
      "package_name": "aiida_ce",
      "hosted_on": "github.com",
      "metadata": {
        "author": "unkcpz",
        "author_email": "morty.yu@yahoo.com",
        "version": "0.1.0a0",
        "description": "AiiDA plugin for running cluster expansion using icet.",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.0.0,<2.0.0",
      "entry_points": {
        "aiida.data": {
          "ce": "aiida_ce.data:DiffParameters",
          "ce.structures": "aiida_ce.data.structure_set:StructureSet",
          "ce.cluster": "aiida_ce.data.cluster:ClusterSpaceData"
        },
        "aiida.calculations": {
          "ce.genenum": "aiida_ce.calculations.genenum:EnumCalculation",
          "ce.gensqs": "aiida_ce.calculations.gensqs:SqsCalculation",
          "ce.train": "aiida_ce.calculations.train:TrainCalculation"
        },
        "aiida.parsers": {
          "ce.genenum": "aiida_ce.parsers.genenum:EnumParser",
          "ce.gensqs": "aiida_ce.parsers.gensqs:SqsParser",
          "ce.train": "aiida_ce.parsers.train:TrainParser"
        },
        "aiida.cmdline.data": {
          "ce": "aiida_ce.cli:data_cli"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 3
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 3
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 3
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/unkcpz/aiida-ce"
    },
    "aiida-champ": {
      "code_home": "https://github.com/TREX-CoE/aiida-champ",
      "development_status": "beta",
      "documentation_url": "http://aiida-champ.readthedocs.io/",
      "entry_point_prefix": "champ",
      "pip_url": "aiida-champ",
      "name": "aiida-champ",
      "package_name": "aiida_champ",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin that wraps the vmc executable of CHAMP code for computing the total energy and much more stuff.",
        "author": "Ravindra Shinde",
        "author_email": "r.l.shinde@utwente.nl",
        "license": "MIT",
        "home_page": "https://github.com/neelravi/aiida-champ",
        "classifiers": [
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "1.2.6"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.data": {
          "CHAMP": "aiida_champ.data:CHAMPParameters"
        },
        "aiida.calculations": {
          "CHAMP": {
            "description": [
              "AiiDA calculation plugin wrapping the CHAMP's vmc executable.",
              "",
              "    aiida-champ can be used to manage the workflow of a vmc/dmc calculation of the CHAMP code.",
              "",
              "    Author :: Ravindra Shinde",
              "    Email  :: r.l.shinde@utwente.nl"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "determinants",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input determinants file"
                },
                {
                  "name": "filemain",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input File"
                },
                {
                  "name": "molecule",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Molecule structure File"
                },
                {
                  "name": "ecp1",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input ECP file for atom type 1"
                },
                {
                  "name": "ecp2",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input ECP file for atom type 2"
                },
                {
                  "name": "jastrow",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input jastrow file"
                },
                {
                  "name": "jastrowder",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input jastrowder file"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "numericalbasis1",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input numerical basis file atom 1"
                },
                {
                  "name": "numericalbasis2",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input numerical basis file atom 2"
                },
                {
                  "name": "numericalbasisinfo",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input numerical basis information file"
                },
                {
                  "name": "orbitals",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input orbitals file"
                },
                {
                  "name": "symmetry",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input symmetry file"
                },
                {
                  "name": "trexio",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input trexio hdf5 file"
                }
              ],
              "outputs": [
                {
                  "name": "Output",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output file of the VMC/DMC calculation"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "Energy",
                  "required": false,
                  "valid_types": "Float",
                  "info": "Output total energy of the VMC/DMC calculation"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                }
              ]
            },
            "class": "aiida_champ.calculations:CHAMPCalculation"
          }
        },
        "aiida.parsers": {
          "CHAMP": "aiida_champ.parsers:CHAMPParser"
        },
        "aiida.cmdline.data": {
          "CHAMP": "aiida_champ.cli:data_cli"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-champ"
    },
    "aiida-codtools": {
      "code_home": "https://github.com/aiidateam/aiida-codtools",
      "documentation_url": "https://aiida-codtools.readthedocs.io/",
      "entry_point_prefix": "codtools",
      "pip_url": "aiida-codtools",
      "plugin_info": "https://raw.githubusercontent.com/aiidateam/aiida-codtools/master/setup.json",
      "name": "aiida-codtools",
      "package_name": "aiida_codtools",
      "hosted_on": "github.com",
      "metadata": {
        "description": "The Official AiiDA plugin for the cod-tools package.",
        "author_email": "The AiiDA team <developers@aiida.net>",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "version": "3.1.0"
      },
      "aiida_version": ">=2.1,<3.0",
      "entry_points": {
        "aiida.calculations": {
          "codtools.cif_base": {
            "description": [
              "Generic `CalcJob` implementation that can easily be extended to work with any of the `cod-tools` scripts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF to be processed."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Command line parameters."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "messages",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Warning and error messages returned by script."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Neither the output for the error file could be read from the retrieved folder."
                },
                {
                  "status": 311,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 312,
                  "message": "The error file could not be read from the retrieved folder."
                },
                {
                  "status": 313,
                  "message": "The output file is empty."
                },
                {
                  "status": 320,
                  "message": "Invalid command line option passed."
                },
                {
                  "status": 400,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 410,
                  "message": "The output file could not be parsed into a CifData object."
                }
              ]
            },
            "class": "aiida_codtools.calculations.cif_base:CifBaseCalculation"
          },
          "codtools.cif_cell_contents": {
            "description": [
              "CalcJob plugin for the `cif_cell_contents` script of the `cod-tools` package."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF to be processed."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Command line parameters."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "formulae",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "A dictionary of formulae present in the CIF."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "messages",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Warning and error messages returned by script."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Neither the output for the error file could be read from the retrieved folder."
                },
                {
                  "status": 311,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 312,
                  "message": "The error file could not be read from the retrieved folder."
                },
                {
                  "status": 313,
                  "message": "The output file is empty."
                },
                {
                  "status": 320,
                  "message": "Invalid command line option passed."
                },
                {
                  "status": 400,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 410,
                  "message": "The output file could not be parsed into a CifData object."
                }
              ]
            },
            "class": "aiida_codtools.calculations.cif_cell_contents:CifCellContentsCalculation"
          },
          "codtools.cif_cod_check": {
            "description": [
              "CalcJob plugin for the `cif_cod_check` script of the `cod-tools` package."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF to be processed."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Command line parameters."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "messages",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Warning and error messages returned by the script."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Neither the output for the error file could be read from the retrieved folder."
                },
                {
                  "status": 311,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 312,
                  "message": "The error file could not be read from the retrieved folder."
                },
                {
                  "status": 313,
                  "message": "The output file is empty."
                },
                {
                  "status": 320,
                  "message": "Invalid command line option passed."
                },
                {
                  "status": 400,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 410,
                  "message": "The output file could not be parsed into a CifData object."
                }
              ]
            },
            "class": "aiida_codtools.calculations.cif_cod_check:CifCodCheckCalculation"
          },
          "codtools.cif_cod_deposit": {
            "description": [
              "CalcJob plugin for the `cif_cod_deposit` script of the `cod-tools` package."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF to be processed."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Command line parameters."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "messages",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Warning and error messages returned by script."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Neither the output for the error file could be read from the retrieved folder."
                },
                {
                  "status": 300,
                  "message": "The deposition failed for unknown reasons."
                },
                {
                  "status": 310,
                  "message": "The deposition failed because the input was invalid."
                },
                {
                  "status": 311,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 312,
                  "message": "The error file could not be read from the retrieved folder."
                },
                {
                  "status": 313,
                  "message": "The output file is empty."
                },
                {
                  "status": 320,
                  "message": "Invalid command line option passed."
                },
                {
                  "status": 400,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 410,
                  "message": "The output file could not be parsed into a CifData object."
                },
                {
                  "status": 410,
                  "message": "The deposition failed because one or more CIFs already exist in the COD."
                },
                {
                  "status": 420,
                  "message": "The structure is unchanged and so deposition is unnecessary."
                }
              ]
            },
            "class": "aiida_codtools.calculations.cif_cod_deposit:CifCodDepositCalculation"
          },
          "codtools.cif_cod_numbers": {
            "description": [
              "CalcJob plugin for the `cif_cod_numbers` script of the `cod-tools` package."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF to be processed."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Command line parameters."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "numbers",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Mapping of COD IDs found with their formula and count."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "messages",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Warning and error messages returned by script."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Neither the output for the error file could be read from the retrieved folder."
                },
                {
                  "status": 311,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 312,
                  "message": "The error file could not be read from the retrieved folder."
                },
                {
                  "status": 313,
                  "message": "The output file is empty."
                },
                {
                  "status": 320,
                  "message": "Invalid command line option passed."
                },
                {
                  "status": 400,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 410,
                  "message": "The output file could not be parsed into a CifData object."
                }
              ]
            },
            "class": "aiida_codtools.calculations.cif_cod_numbers:CifCodNumbersCalculation"
          },
          "codtools.cif_filter": {
            "description": [
              "CalcJob plugin for the `cif_filter` script of the `cod-tools` package."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF to be processed."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Command line parameters."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF produced by the script."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "messages",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Warning and error messages returned by script."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Neither the output for the error file could be read from the retrieved folder."
                },
                {
                  "status": 311,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 312,
                  "message": "The error file could not be read from the retrieved folder."
                },
                {
                  "status": 313,
                  "message": "The output file is empty."
                },
                {
                  "status": 320,
                  "message": "Invalid command line option passed."
                },
                {
                  "status": 400,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 410,
                  "message": "The output file could not be parsed into a CifData object."
                }
              ]
            },
            "class": "aiida_codtools.calculations.cif_filter:CifFilterCalculation"
          },
          "codtools.cif_select": {
            "description": [
              "CalcJob plugin for the `cif_select` script of the `cod-tools` package."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF to be processed."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Command line parameters."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF produced by the script."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "messages",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Warning and error messages returned by script."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Neither the output for the error file could be read from the retrieved folder."
                },
                {
                  "status": 311,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 312,
                  "message": "The error file could not be read from the retrieved folder."
                },
                {
                  "status": 313,
                  "message": "The output file is empty."
                },
                {
                  "status": 320,
                  "message": "Invalid command line option passed."
                },
                {
                  "status": 400,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 410,
                  "message": "The output file could not be parsed into a CifData object."
                }
              ]
            },
            "class": "aiida_codtools.calculations.cif_select:CifSelectCalculation"
          },
          "codtools.cif_split_primitive": {
            "description": [
              "CalcJob plugin for the `cif_split_primitive` script of the `cod-tools` package."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIF to be processed."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Command line parameters."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "cifs",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CIFs produced by the script."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "messages",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Warning and error messages returned by script."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Neither the output for the error file could be read from the retrieved folder."
                },
                {
                  "status": 311,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 312,
                  "message": "The error file could not be read from the retrieved folder."
                },
                {
                  "status": 313,
                  "message": "The output file is empty."
                },
                {
                  "status": 320,
                  "message": "Invalid command line option passed."
                },
                {
                  "status": 400,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 410,
                  "message": "The output file could not be parsed into a CifData object."
                }
              ]
            },
            "class": "aiida_codtools.calculations.cif_split_primitive:CifSplitPrimitiveCalculation"
          },
          "codtools.primitive_structure_from_cif": {
            "description": [
              "Attempt to parse the given `CifData` and create a `StructureData` from it.",
              "",
              "    First the raw CIF file is parsed with the given `parse_engine`. The resulting `StructureData` is then passed through",
              "    SeeKpath to try and get the primitive cell. If that is successful, important structural parameters as determined by",
              "    SeeKpath will be set as extras on the structure node which is then returned as output.",
              "",
              "    :param cif: the `CifData` node",
              "    :param parse_engine: the parsing engine, supported libraries 'ase' and 'pymatgen'",
              "    :param symprec: a `Float` node with symmetry precision for determining primitive cell in SeeKpath",
              "    :param site_tolerance: a `Float` node with the fractional coordinate distance tolerance for finding overlapping",
              "        sites. This will only be used if the parse_engine is pymatgen",
              "    :return: the primitive `StructureData` as determined by SeeKpath"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "Data",
                  "info": "the `CifData` node"
                },
                {
                  "name": "parse_engine",
                  "required": true,
                  "valid_types": "Data",
                  "info": "the parsing engine, supported libraries 'ase' and 'pymatgen'"
                },
                {
                  "name": "site_tolerance",
                  "required": true,
                  "valid_types": "Data",
                  "info": "a `Float` node with the fractional coordinate distance tolerance for findin ..."
                },
                {
                  "name": "symprec",
                  "required": true,
                  "valid_types": "Data",
                  "info": "a `Float` node with symmetry precision for determining primitive cell in Se ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_codtools.calculations.functions.primitive_structure_from_cif:primitive_structure_from_cif"
          }
        },
        "aiida.parsers": {
          "codtools.cif_base": "aiida_codtools.parsers.cif_base:CifBaseParser",
          "codtools.cif_cell_contents": "aiida_codtools.parsers.cif_cell_contents:CifCellContentsParser",
          "codtools.cif_cod_check": "aiida_codtools.parsers.cif_cod_check:CifCodCheckParser",
          "codtools.cif_cod_deposit": "aiida_codtools.parsers.cif_cod_deposit:CifCodDepositParser",
          "codtools.cif_cod_numbers": "aiida_codtools.parsers.cif_cod_numbers:CifCodNumbersParser",
          "codtools.cif_split_primitive": "aiida_codtools.parsers.cif_split_primitive:CifSplitPrimitiveParser"
        },
        "aiida.workflows": {
          "codtools.cif_clean": {
            "description": [
              "WorkChain to clean a `CifData` node using the `cif_filter` and `cif_select` scripts of `cod-tools`.",
              "",
              "    It will first run `cif_filter` to correct syntax errors, followed by `cif_select` which will canonicalize the tags.",
              "    If a group is passed for the `group_structure` input, the atomic structure library defined by the `engine` input",
              "    will be used to parse the final cleaned `CifData` to construct a `StructureData` object, which will then be passed",
              "    to the `SeeKpath` library to analyze it and return the primitive structure"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The CifData node that is to be cleaned."
                },
                {
                  "name": "cif_filter",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "cif_select",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "group_cif",
                  "required": false,
                  "valid_types": "Group, NoneType",
                  "info": "An optional Group to which the final cleaned CifData node will be added."
                },
                {
                  "name": "group_structure",
                  "required": false,
                  "valid_types": "Group, NoneType",
                  "info": "An optional Group to which the final reduced StructureData node will be add ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "parse_engine",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The atomic structure engine to parse the cif and create the structure."
                },
                {
                  "name": "site_tolerance",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The fractional coordinate distance tolerance for finding overlapping sites  ..."
                },
                {
                  "name": "symprec",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The symmetry precision used by SeeKpath for crystal symmetry refinement."
                }
              ],
              "outputs": [
                {
                  "name": "cif",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "The cleaned CifData node."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The primitive cell structure created with SeeKpath from the cleaned CifData ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 401,
                  "message": "The CifFilterCalculation step failed."
                },
                {
                  "status": 402,
                  "message": "The CifSelectCalculation step failed."
                },
                {
                  "status": 410,
                  "message": "The cleaned CifData contains sites with unknown species."
                },
                {
                  "status": 411,
                  "message": "The cleaned CifData defines no atomic sites."
                },
                {
                  "status": 412,
                  "message": "The cleaned CifData defines sites with attached hydrogens with incomplete positional data."
                },
                {
                  "status": 413,
                  "message": "The cleaned CifData defines sites with invalid atomic occupancies."
                },
                {
                  "status": 414,
                  "message": "Failed to parse a StructureData from the cleaned CifData."
                },
                {
                  "status": 420,
                  "message": "SeeKpath failed to determine the primitive structure."
                },
                {
                  "status": 421,
                  "message": "SeeKpath detected inconsistent symmetry operations."
                }
              ]
            },
            "class": "aiida_codtools.workflows.cif_clean:CifCleanWorkChain"
          }
        },
        "console_scripts": {
          "aiida-codtools": "aiida_codtools.cli:cmd_root"
        }
      },
      "commits_count": 4,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 9
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 6
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-codtools"
    },
    "aiida-core": {
      "code_home": "https://github.com/aiidateam/aiida-core",
      "development_status": "stable",
      "documentation_url": "https://aiida-core.readthedocs.io/",
      "entry_point_prefix": "",
      "package_name": "aiida",
      "pip_url": "aiida-core",
      "plugin_info": "https://raw.githubusercontent.com/aiidateam/aiida-core/master/setup.json",
      "name": "aiida-core",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA is a workflow manager for computational science with a strong focus on provenance, performance and extensibility.",
        "author_email": "The AiiDA team <developers@aiida.net>",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering"
        ],
        "version": "2.4.0"
      },
      "aiida_version": "==2.4.0",
      "entry_points": {
        "aiida.calculations": {
          "core.arithmetic.add": {
            "description": [
              "`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "x",
                  "required": true,
                  "valid_types": "Int, Float",
                  "info": "The left operand."
                },
                {
                  "name": "y",
                  "required": true,
                  "valid_types": "Int, Float",
                  "info": "The right operand."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "sum",
                  "required": true,
                  "valid_types": "Int, Float",
                  "info": "The sum of the left and right operand."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 310,
                  "message": "The output file could not be read."
                },
                {
                  "status": 320,
                  "message": "The output file contains invalid output."
                },
                {
                  "status": 410,
                  "message": "The sum of the operands is a negative number."
                }
              ]
            },
            "class": "aiida.calculations.arithmetic.add:ArithmeticAddCalculation"
          },
          "core.templatereplacer": {
            "description": [
              "Simple stub of a plugin that can be used to replace some text in a given template.",
              "    Can be used for many different codes, or as a starting point to develop a new plugin.",
              "",
              "    This simple plugin takes two node inputs, both of type Dict, with the labels",
              "    'parameters' and 'template'",
              "",
              "    You can also add other SinglefileData nodes as input, that will be copied according to",
              "    what is written in 'template' (see below).",
              "",
              "    * parameters: a set of parameters that will be used for substitution.",
              "",
              "    * template: can contain the following parameters:",
              "",
              "        * input_file_template: a string with substitutions to be managed with the format()",
              "          function of python, i.e. if you want to substitute a variable called 'varname', you write",
              "          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more",
              "          details. The replaced file will be the input file.",
              "",
              "        * input_file_name: a string with the file name for the input. If it is not provided, no",
              "          file will be created.",
              "",
              "        * output_file_name: a string with the file name for the output. If it is not provided, no",
              "          redirection will be done and the output will go in the scheduler output file.",
              "",
              "        * cmdline_params: a list of strings, to be passed as command line parameters.",
              "          Each one is substituted with the same rule of input_file_template. Optional",
              "",
              "        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.",
              "",
              "        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');",
              "            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',",
              "            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'",
              "            Errors are raised in the input links are non-existent, or of the wrong type, or if there are",
              "            unused input files.",
              "",
              "        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and",
              "            temporarily stored in an unstored FolderData node that will be available during the",
              "            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "template",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "A template for the input file."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "files",
                  "required": false,
                  "valid_types": "RemoteData, SinglefileData",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters used to replace placeholders in the template."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 301,
                  "message": "The temporary retrieved folder data node could not be accessed."
                },
                {
                  "status": 305,
                  "message": "The `template` input node did not specify the key `output_file_name`."
                },
                {
                  "status": 310,
                  "message": "The output file could not be read from the retrieved folder."
                },
                {
                  "status": 311,
                  "message": "A temporary retrieved file could not be read from the temporary retrieved folder."
                },
                {
                  "status": 320,
                  "message": "The output file contains invalid output."
                }
              ]
            },
            "class": "aiida.calculations.templatereplacer:TemplatereplacerCalculation"
          },
          "core.transfer": {
            "description": [
              "Utility to copy files from different FolderData and RemoteData nodes into a single place.",
              "",
              "    The final destination for these files can be either the local repository (by creating a",
              "    new FolderData node to store them) or in the remote computer (by leaving the files in a",
              "    new remote folder saved in a RemoteData node).",
              "",
              "    Only files from the local computer and from remote folders in the same external computer",
              "    can be moved at the same time with a single instance of this CalcJob.",
              "",
              "    The user needs to provide three inputs:",
              "",
              "        * ``instructions``: a dict node specifying which files to copy from which nodes.",
              "        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.",
              "        * ``metadata.computer``: the computer that contains the remote files and will contain",
              "          the final RemoteData node.",
              "",
              "    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a",
              "    new folder in the remote machine (``RemoteData``) and put all the files there and will either:",
              "",
              "        (1) leave them there (``retrieve_files = False``) or ...",
              "        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)",
              "",
              "    The `instructions` dict must also contain at least one list with specifications of which files",
              "    to copy and from where. All these lists take tuples of 3 that have the following format:",
              "",
              "    .. code-block:: python",
              "",
              "        ( source_node_key, path_to_file_in_source, path_to_file_in_target)",
              "",
              "    where the ``source_node_key`` has to be the respective one used when providing the node in the",
              "    ``source_nodes`` input nodes dictionary.",
              "",
              "",
              "    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)",
              "    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside",
              "    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that",
              "    files from the first list will be fully copied in the target RemoteData folder, whereas for the",
              "    files in second list only a symlink to the original file will be created there. This will only",
              "    affect the content of the final RemoteData target folder, but in both cases the full file will",
              "    be copied back in the local target FolderData (if ``retrieve_files = True``)."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "instructions",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "A dictionary containing the `retrieve_files` flag and at least one of the f ..."
                },
                {
                  "name": "source_nodes",
                  "required": true,
                  "valid_types": "FolderData, RemoteData",
                  "info": "All the nodes that contain files referenced in the instructions."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                }
              ]
            },
            "class": "aiida.calculations.transfer:TransferCalculation"
          }
        },
        "aiida.calculations.importers": {
          "core.arithmetic.add": "aiida.calculations.importers.arithmetic.add:ArithmeticAddCalculationImporter"
        },
        "aiida.calculations.monitors": {
          "core.always_kill": "aiida.calculations.monitors.base:always_kill"
        },
        "aiida.cmdline.computer.configure": {
          "core.local": "aiida.transports.plugins.local:CONFIGURE_LOCAL_CMD",
          "core.ssh": "aiida.transports.plugins.ssh:CONFIGURE_SSH_CMD"
        },
        "aiida.cmdline.data": {
          "core.array": "aiida.cmdline.commands.cmd_data.cmd_array:array",
          "core.bands": "aiida.cmdline.commands.cmd_data.cmd_bands:bands",
          "core.cif": "aiida.cmdline.commands.cmd_data.cmd_cif:cif",
          "core.dict": "aiida.cmdline.commands.cmd_data.cmd_dict:dictionary",
          "core.remote": "aiida.cmdline.commands.cmd_data.cmd_remote:remote",
          "core.singlefile": "aiida.cmdline.commands.cmd_data.cmd_singlefile:singlefile",
          "core.structure": "aiida.cmdline.commands.cmd_data.cmd_structure:structure",
          "core.trajectory": "aiida.cmdline.commands.cmd_data.cmd_trajectory:trajectory",
          "core.upf": "aiida.cmdline.commands.cmd_data.cmd_upf:upf"
        },
        "aiida.cmdline.data.structure.import": {},
        "aiida.data": {
          "core.array": "aiida.orm.nodes.data.array.array:ArrayData",
          "core.array.bands": "aiida.orm.nodes.data.array.bands:BandsData",
          "core.array.kpoints": "aiida.orm.nodes.data.array.kpoints:KpointsData",
          "core.array.projection": "aiida.orm.nodes.data.array.projection:ProjectionData",
          "core.array.trajectory": "aiida.orm.nodes.data.array.trajectory:TrajectoryData",
          "core.array.xy": "aiida.orm.nodes.data.array.xy:XyData",
          "core.base": "aiida.orm.nodes.data:BaseType",
          "core.bool": "aiida.orm.nodes.data.bool:Bool",
          "core.cif": "aiida.orm.nodes.data.cif:CifData",
          "core.code": "aiida.orm.nodes.data.code.legacy:Code",
          "core.code.containerized": "aiida.orm.nodes.data.code.containerized:ContainerizedCode",
          "core.code.installed": "aiida.orm.nodes.data.code.installed:InstalledCode",
          "core.code.portable": "aiida.orm.nodes.data.code.portable:PortableCode",
          "core.dict": "aiida.orm.nodes.data.dict:Dict",
          "core.enum": "aiida.orm.nodes.data.enum:EnumData",
          "core.float": "aiida.orm.nodes.data.float:Float",
          "core.folder": "aiida.orm.nodes.data.folder:FolderData",
          "core.int": "aiida.orm.nodes.data.int:Int",
          "core.jsonable": "aiida.orm.nodes.data.jsonable:JsonableData",
          "core.list": "aiida.orm.nodes.data.list:List",
          "core.numeric": "aiida.orm.nodes.data.numeric:NumericType",
          "core.orbital": "aiida.orm.nodes.data.orbital:OrbitalData",
          "core.remote": "aiida.orm.nodes.data.remote.base:RemoteData",
          "core.remote.stash": "aiida.orm.nodes.data.remote.stash.base:RemoteStashData",
          "core.remote.stash.folder": "aiida.orm.nodes.data.remote.stash.folder:RemoteStashFolderData",
          "core.singlefile": "aiida.orm.nodes.data.singlefile:SinglefileData",
          "core.str": "aiida.orm.nodes.data.str:Str",
          "core.structure": "aiida.orm.nodes.data.structure:StructureData",
          "core.upf": "aiida.orm.nodes.data.upf:UpfData"
        },
        "aiida.groups": {
          "core": "aiida.orm.groups:Group",
          "core.auto": "aiida.orm.groups:AutoGroup",
          "core.import": "aiida.orm.groups:ImportGroup",
          "core.upf": "aiida.orm.groups:UpfFamily"
        },
        "aiida.node": {
          "data": "aiida.orm.nodes.data.data:Data",
          "process": "aiida.orm.nodes.process.process:ProcessNode",
          "process.calculation": "aiida.orm.nodes.process.calculation.calculation:CalculationNode",
          "process.calculation.calcfunction": "aiida.orm.nodes.process.calculation.calcfunction:CalcFunctionNode",
          "process.calculation.calcjob": "aiida.orm.nodes.process.calculation.calcjob:CalcJobNode",
          "process.workflow": "aiida.orm.nodes.process.workflow.workflow:WorkflowNode",
          "process.workflow.workchain": "aiida.orm.nodes.process.workflow.workchain:WorkChainNode",
          "process.workflow.workfunction": "aiida.orm.nodes.process.workflow.workfunction:WorkFunctionNode"
        },
        "aiida.parsers": {
          "core.arithmetic.add": "aiida.parsers.plugins.arithmetic.add:ArithmeticAddParser",
          "core.templatereplacer": "aiida.parsers.plugins.templatereplacer.parser:TemplatereplacerParser"
        },
        "aiida.schedulers": {
          "core.direct": "aiida.schedulers.plugins.direct:DirectScheduler",
          "core.lsf": "aiida.schedulers.plugins.lsf:LsfScheduler",
          "core.pbspro": "aiida.schedulers.plugins.pbspro:PbsproScheduler",
          "core.sge": "aiida.schedulers.plugins.sge:SgeScheduler",
          "core.slurm": "aiida.schedulers.plugins.slurm:SlurmScheduler",
          "core.torque": "aiida.schedulers.plugins.torque:TorqueScheduler"
        },
        "aiida.storage": {
          "core.psql_dos": "aiida.storage.psql_dos.backend:PsqlDosBackend",
          "core.sqlite_temp": "aiida.storage.sqlite_temp.backend:SqliteTempBackend",
          "core.sqlite_zip": "aiida.storage.sqlite_zip.backend:SqliteZipBackend"
        },
        "aiida.tools.calculations": {},
        "aiida.tools.data.orbitals": {
          "core.orbital": "aiida.tools.data.orbital.orbital:Orbital",
          "core.realhydrogen": "aiida.tools.data.orbital.realhydrogen:RealhydrogenOrbital"
        },
        "aiida.tools.dbexporters": {},
        "aiida.tools.dbimporters": {
          "core.cod": "aiida.tools.dbimporters.plugins.cod:CodDbImporter",
          "core.icsd": "aiida.tools.dbimporters.plugins.icsd:IcsdDbImporter",
          "core.materialsproject": "aiida.tools.dbimporters.plugins.materialsproject:MaterialsProjectImporter",
          "core.mpds": "aiida.tools.dbimporters.plugins.mpds:MpdsDbImporter",
          "core.mpod": "aiida.tools.dbimporters.plugins.mpod:MpodDbImporter",
          "core.nninc": "aiida.tools.dbimporters.plugins.nninc:NnincDbImporter",
          "core.oqmd": "aiida.tools.dbimporters.plugins.oqmd:OqmdDbImporter",
          "core.pcod": "aiida.tools.dbimporters.plugins.pcod:PcodDbImporter",
          "core.tcod": "aiida.tools.dbimporters.plugins.tcod:TcodDbImporter"
        },
        "aiida.transports": {
          "core.local": "aiida.transports.plugins.local:LocalTransport",
          "core.ssh": "aiida.transports.plugins.ssh:SshTransport"
        },
        "aiida.workflows": {
          "core.arithmetic.add_multiply": {
            "description": [
              "Add two numbers and multiply it with a third."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "x",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "y",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "z",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida.workflows.arithmetic.add_multiply:add_multiply"
          },
          "core.arithmetic.multiply_add": {
            "description": [
              "WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "AbstractCode",
                  "info": ""
                },
                {
                  "name": "x",
                  "required": true,
                  "valid_types": "Int",
                  "info": ""
                },
                {
                  "name": "y",
                  "required": true,
                  "valid_types": "Int",
                  "info": ""
                },
                {
                  "name": "z",
                  "required": true,
                  "valid_types": "Int",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "result",
                  "required": true,
                  "valid_types": "Int",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 400,
                  "message": "The result is a negative number."
                }
              ]
            },
            "class": "aiida.workflows.arithmetic.multiply_add:MultiplyAddWorkChain"
          }
        },
        "console_scripts": {
          "runaiida": "aiida.cmdline.commands.cmd_run:run",
          "verdi": "aiida.cmdline.commands.cmd_verdi:verdi"
        }
      },
      "commits_count": 347,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 3
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 2
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 29
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 2
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 2
        },
        {
          "colorclass": "orange",
          "text": "Other (Calculations importers, Calculations monitors, Cmdline computer configure, ...)",
          "count": 47
        }
      ],
      "pip_install_cmd": "pip install aiida-core"
    },
    "aiida-cp2k": {
      "code_home": "https://github.com/cp2k/aiida-cp2k",
      "entry_point_prefix": "cp2k",
      "pip_url": "aiida-cp2k",
      "plugin_info": "https://raw.githubusercontent.com/cp2k/aiida-cp2k/master/setup.json",
      "name": "aiida-cp2k",
      "package_name": "aiida_cp2k",
      "hosted_on": "github.com",
      "metadata": {
        "description": "The official AiiDA plugin for CP2K.",
        "author": "The AiiDA team",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python :: 3"
        ],
        "version": "2.0.0"
      },
      "aiida_version": ">=2.0.0,<3.0.0",
      "entry_points": {
        "aiida.calculations": {
          "cp2k": {
            "description": [
              "This is a Cp2kCalculation, subclass of JobCalculation, to prepare input for an ab-initio CP2K calculation.",
              "",
              "    For information on CP2K, refer to: https://www.cp2k.org."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The input parameters."
                },
                {
                  "name": "basissets",
                  "required": false,
                  "valid_types": "",
                  "info": "A dictionary of basissets to be used in the calculations: key is the atomic ..."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "file",
                  "required": false,
                  "valid_types": "SinglefileData, StructureData",
                  "info": "Additional input files."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Input kpoint mesh."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parent_calc_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Working directory of a previously ran calculation to restart from."
                },
                {
                  "name": "pseudos",
                  "required": false,
                  "valid_types": "",
                  "info": "A dictionary of pseudopotentials to be used in the calculations: key is the ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional input parameters."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData, NoneType",
                  "info": "The main input structure."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output dictionary containing results of the calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "Computed electronic band structure."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The relaxed output structure."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "The retrieved folder did not contain the required output file."
                },
                {
                  "status": 301,
                  "message": "The output file could not be read."
                },
                {
                  "status": 302,
                  "message": "The output file could not be parsed."
                },
                {
                  "status": 303,
                  "message": "The output file was incomplete."
                },
                {
                  "status": 304,
                  "message": "The output file contains the word \"ABORT\"."
                },
                {
                  "status": 312,
                  "message": "The output structure could not be parsed."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception."
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 500,
                  "message": "The ionic minimization cycle did not converge for the given thresholds."
                },
                {
                  "status": 501,
                  "message": "The maximum number of optimization steps reached."
                }
              ]
            },
            "class": "aiida_cp2k.calculations:Cp2kCalculation"
          }
        },
        "aiida.parsers": {
          "cp2k_advanced_parser": "aiida_cp2k.parsers:Cp2kAdvancedParser",
          "cp2k_base_parser": "aiida_cp2k.parsers:Cp2kBaseParser",
          "cp2k_tools_parser": "aiida_cp2k.parsers:Cp2kToolsParser"
        },
        "aiida.workflows": {
          "cp2k.base": {
            "description": [
              "Workchain to run a CP2K calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cp2k",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output dictionary containing results of the calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "final_input_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The input parameters used for the final calculation."
                },
                {
                  "name": "output_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "Computed electronic band structure."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The relaxed output structure."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unidentified unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 310,
                  "message": "The calculation failed with a known unrecoverable error."
                },
                {
                  "status": 400,
                  "message": "The calculation didn't produce any data to restart from."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_cp2k.workchains:Cp2kBaseWorkChain"
          }
        }
      },
      "commits_count": 17,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 3
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-cp2k"
    },
    "aiida-crystal-dft": {
      "code_home": "https://github.com/tilde-lab/aiida-crystal-dft",
      "development_status": "beta",
      "documentation_url": "https://github.com/tilde-lab/aiida-crystal-dft",
      "entry_point_prefix": "crystal_dft",
      "pip_url": "git+https://github.com/tilde-lab/aiida-crystal-dft",
      "name": "aiida-crystal-dft",
      "package_name": "aiida_crystal_dft",
      "hosted_on": "github.com",
      "metadata": {
        "description": "Yet another AiiDA plugin for CRYSTAL code, mainly intended for use with the cloud infrastructures\n(currently, MPDS)",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Intended Audience :: Science/Research",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Topic :: Scientific/Engineering",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Physics",
          "Topic :: Scientific/Engineering :: Information Analysis"
        ],
        "author": "Andrey Sobolev, based on aiida-crystal17 plugin by Chris Sewell",
        "author_email": "as@tilde.pro"
      },
      "aiida_version": ">=2.0.2",
      "entry_points": {
        "aiida.data": {
          "crystal_dft.basis": "aiida_crystal_dft.data.basis:CrystalBasisData",
          "crystal_dft.basis_family": "aiida_crystal_dft.data.basis_family:CrystalBasisFamilyData"
        },
        "aiida.calculations": {
          "crystal_dft.serial": {
            "description": [
              "No description available"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "basis",
                  "required": false,
                  "valid_types": "CrystalBasisData",
                  "info": ""
                },
                {
                  "name": "basis_family",
                  "required": false,
                  "valid_types": "CrystalBasisFamilyData, NoneType",
                  "info": ""
                },
                {
                  "name": "guess_oxistates",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": ""
                },
                {
                  "name": "high_spin_preferred",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": ""
                },
                {
                  "name": "is_magnetic",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "spinlock_steps",
                  "required": false,
                  "valid_types": "Int, NoneType",
                  "info": ""
                },
                {
                  "name": "use_oxistates",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "oxidation_states",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "output_wavefunction",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "SCF calculation not converged"
                },
                {
                  "status": 301,
                  "message": "Geometry optimization failed"
                },
                {
                  "status": 302,
                  "message": "Unit cell not neutral"
                },
                {
                  "status": 303,
                  "message": "Basis set linearly dependent"
                },
                {
                  "status": 304,
                  "message": "Neighbour list too large"
                },
                {
                  "status": 305,
                  "message": "No G-vectors left"
                },
                {
                  "status": 306,
                  "message": "Collapsed geometry"
                },
                {
                  "status": 307,
                  "message": "Closed shell run - spin polarization not allowed"
                },
                {
                  "status": 308,
                  "message": "Parameters for model hessian not defined"
                },
                {
                  "status": 309,
                  "message": "Fermi energy not in interval"
                },
                {
                  "status": 310,
                  "message": "Insufficient indices for Madelung sums"
                },
                {
                  "status": 350,
                  "message": "Internal memory error"
                },
                {
                  "status": 360,
                  "message": "Inadequate elastic calculation: additional optimization needed"
                },
                {
                  "status": 400,
                  "message": "Unknown error"
                },
                {
                  "status": 401,
                  "message": "The retrieved folder data node could not be accessed"
                }
              ]
            },
            "class": "aiida_crystal_dft.calculations.serial:CrystalSerialCalculation"
          },
          "crystal_dft.parallel": {
            "description": [
              "No description available"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "basis",
                  "required": false,
                  "valid_types": "CrystalBasisData",
                  "info": ""
                },
                {
                  "name": "basis_family",
                  "required": false,
                  "valid_types": "CrystalBasisFamilyData, NoneType",
                  "info": ""
                },
                {
                  "name": "guess_oxistates",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": ""
                },
                {
                  "name": "high_spin_preferred",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": ""
                },
                {
                  "name": "is_magnetic",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "spinlock_steps",
                  "required": false,
                  "valid_types": "Int, NoneType",
                  "info": ""
                },
                {
                  "name": "use_oxistates",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "oxidation_states",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "output_wavefunction",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "SCF calculation not converged"
                },
                {
                  "status": 301,
                  "message": "Geometry optimization failed"
                },
                {
                  "status": 302,
                  "message": "Unit cell not neutral"
                },
                {
                  "status": 303,
                  "message": "Basis set linearly dependent"
                },
                {
                  "status": 304,
                  "message": "Neighbour list too large"
                },
                {
                  "status": 305,
                  "message": "No G-vectors left"
                },
                {
                  "status": 306,
                  "message": "Collapsed geometry"
                },
                {
                  "status": 307,
                  "message": "Closed shell run - spin polarization not allowed"
                },
                {
                  "status": 308,
                  "message": "Parameters for model hessian not defined"
                },
                {
                  "status": 309,
                  "message": "Fermi energy not in interval"
                },
                {
                  "status": 310,
                  "message": "Insufficient indices for Madelung sums"
                },
                {
                  "status": 350,
                  "message": "Internal memory error"
                },
                {
                  "status": 360,
                  "message": "Inadequate elastic calculation: additional optimization needed"
                },
                {
                  "status": 400,
                  "message": "Unknown error"
                },
                {
                  "status": 401,
                  "message": "The retrieved folder data node could not be accessed"
                }
              ]
            },
            "class": "aiida_crystal_dft.calculations.parallel:CrystalParallelCalculation"
          },
          "crystal_dft.properties": {
            "description": [
              "AiiDA calculation plugin wrapping the properties executable."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "wavefunction",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "output_bands_down",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "output_dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The retrieved folder data node could not be accessed"
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                }
              ]
            },
            "class": "aiida_crystal_dft.calculations.properties:PropertiesCalculation"
          }
        },
        "aiida.parsers": {
          "crystal_dft": "aiida_crystal_dft.parsers.cry_pycrystal:CrystalParser",
          "crystal_dft.properties": "aiida_crystal_dft.parsers.properties:PropertiesParser"
        },
        "aiida.workflows": {
          "crystal_dft.base": {
            "description": [
              "Run CRYSTAL calculation"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "basis_family",
                  "required": true,
                  "valid_types": "CrystalBasisFamilyData",
                  "info": ""
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Calculation options"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "restart_params",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "output_wavefunction",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": ""
                },
                {
                  "name": "oxidation_states",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "primitive_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "CRYSTAL error"
                },
                {
                  "status": 400,
                  "message": "Unknown error"
                }
              ]
            },
            "class": "aiida_crystal_dft.workflows.base:BaseCrystalWorkChain"
          }
        },
        "aiida.cmdline.data": {
          "crystal_dft": "aiida_crystal_dft.cli.basis:basis_set"
        }
      },
      "commits_count": 24,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 3
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 2
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/tilde-lab/aiida-crystal-dft"
    },
    "aiida-crystal17": {
      "code_home": "https://github.com/aiidaplugins/aiida-crystal17",
      "development_status": "beta",
      "documentation_url": "https://aiida-crystal17.readthedocs.io",
      "entry_point_prefix": "crystal17",
      "pip_url": "aiida-crystal17",
      "plugin_info": "https://raw.githubusercontent.com/aiidaplugins/aiida-crystal17/master/setup.json",
      "name": "aiida-crystal17",
      "package_name": "aiida_crystal17",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for running the CRYSTAL17 code",
        "author": "Chris Sewell",
        "author_email": "chrisj_sewell@hotmail.com",
        "license": "MIT",
        "home_page": "https://github.com/chrisjsewell/aiida-crystal17",
        "classifiers": [
          "Framework :: AiiDA",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3.6",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "0.11.0"
      },
      "aiida_version": ">=1.4.0,<2.0.0",
      "entry_points": {
        "aiida.calculations": {
          "crystal17.basic": {
            "description": [
              "AiiDA calculation plugin to run the crystal17 executable,",
              "    by supplying a normal .d12 input file and (optional) .gui file"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "input_file",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "the input .d12 file content."
                },
                {
                  "name": "input_external",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "optional input fort.34 (gui) file content (for use with EXTERNAL keyword)."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "results",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the data extracted from the main output file"
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "the structure output from the calculation"
                },
                {
                  "name": "symmetry",
                  "required": false,
                  "valid_types": "SymmetryData",
                  "info": "the symmetry data from the calculation"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "the main (stdout) output file was not found"
                },
                {
                  "status": 211,
                  "message": "the temporary retrieved folder was not found"
                },
                {
                  "status": 300,
                  "message": "An error was flagged trying to parse the crystal exec stdout file"
                },
                {
                  "status": 301,
                  "message": "An error occurred parsing the 'opta'/'optc' geometry files"
                },
                {
                  "status": 302,
                  "message": "The crystal exec stdout file denoted that the run was a testgeom"
                },
                {
                  "status": 350,
                  "message": "the input file could not be read by CRYSTAL"
                },
                {
                  "status": 351,
                  "message": "CRYSTAL could not find the required wavefunction file"
                },
                {
                  "status": 352,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 353,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 354,
                  "message": "Error in CHEMOD basis set modification"
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 401,
                  "message": "The calculation stopped prematurely because it ran out of memory."
                },
                {
                  "status": 402,
                  "message": "The calculation stopped prematurely because it ran out of virtual memory."
                },
                {
                  "status": 411,
                  "message": "SCF convergence did not finalise (usually due to reaching step limit)"
                },
                {
                  "status": 412,
                  "message": "Geometry convergence did not finalise (usually due to reaching step limit)"
                },
                {
                  "status": 413,
                  "message": "an error encountered usually during geometry optimisation"
                },
                {
                  "status": 414,
                  "message": "an error was encountered during an SCF computation"
                },
                {
                  "status": 415,
                  "message": "an unknown error was encountered, causing the MPI to abort"
                },
                {
                  "status": 499,
                  "message": "The main crystal output file flagged an unhandled error"
                },
                {
                  "status": 510,
                  "message": "inconsistency in the input and output symmetry"
                },
                {
                  "status": 520,
                  "message": "primitive symmops were not found in the output file"
                }
              ]
            },
            "class": "aiida_crystal17.calculations.cry_basic:CryBasicCalculation"
          },
          "crystal17.doss": {
            "description": [
              "AiiDA calculation plugin to run the ``properties`` executable,",
              "    for DOSS calculations."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the input parameters to create the properties input file."
                },
                {
                  "name": "wf_folder",
                  "required": true,
                  "valid_types": "FolderData, RemoteData, SinglefileData",
                  "info": "the folder containing the wavefunction fort.9 file"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "results",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Summary Data extracted from the output file(s)"
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "arrays",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "energies and DoS arrays"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "the main (stdout) output file was not found"
                },
                {
                  "status": 211,
                  "message": "the temporary retrieved folder was not found"
                },
                {
                  "status": 300,
                  "message": "An error was flagged trying to parse the crystal exec stdout file"
                },
                {
                  "status": 350,
                  "message": "the input file could not be read by CRYSTAL"
                },
                {
                  "status": 351,
                  "message": "CRYSTAL could not find the required wavefunction file"
                },
                {
                  "status": 352,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 352,
                  "message": "parser could not find the output isovalue (fort.25) file"
                },
                {
                  "status": 353,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 353,
                  "message": "error parsing output isovalue (fort.25) file"
                },
                {
                  "status": 354,
                  "message": "Error in CHEMOD basis set modification"
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 401,
                  "message": "The calculation stopped prematurely because it ran out of memory."
                },
                {
                  "status": 402,
                  "message": "The calculation stopped prematurely because it ran out of virtual memory."
                },
                {
                  "status": 413,
                  "message": "an error encountered usually during geometry optimisation"
                },
                {
                  "status": 414,
                  "message": "an error was encountered during an SCF computation"
                },
                {
                  "status": 415,
                  "message": "an unknown error was encountered, causing the MPI to abort"
                },
                {
                  "status": 499,
                  "message": "The main crystal output file flagged an unhandled error"
                }
              ]
            },
            "class": "aiida_crystal17.calculations.prop_doss:CryDossCalculation"
          },
          "crystal17.ech3": {
            "description": [
              "AiiDA calculation plugin to run the ``properties`` executable, for 3D charge density (ECH3)."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the input parameters to create the properties input file."
                },
                {
                  "name": "wf_folder",
                  "required": true,
                  "valid_types": "FolderData, RemoteData, SinglefileData",
                  "info": "the folder containing the wavefunction fort.9 file"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "charge",
                  "required": true,
                  "valid_types": "GaussianCube",
                  "info": "The charge density cube"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "results",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Summary Data extracted from the output file(s)"
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "spin",
                  "required": false,
                  "valid_types": "GaussianCube",
                  "info": "The spin density cube"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "the main (stdout) output file was not found"
                },
                {
                  "status": 211,
                  "message": "the temporary retrieved folder was not found"
                },
                {
                  "status": 300,
                  "message": "An error was flagged trying to parse the crystal exec stdout file"
                },
                {
                  "status": 350,
                  "message": "the input file could not be read by CRYSTAL"
                },
                {
                  "status": 351,
                  "message": "CRYSTAL could not find the required wavefunction file"
                },
                {
                  "status": 352,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 352,
                  "message": "parser could not find the output density file"
                },
                {
                  "status": 353,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 353,
                  "message": "error parsing output density file"
                },
                {
                  "status": 354,
                  "message": "Error in CHEMOD basis set modification"
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 401,
                  "message": "The calculation stopped prematurely because it ran out of memory."
                },
                {
                  "status": 402,
                  "message": "The calculation stopped prematurely because it ran out of virtual memory."
                },
                {
                  "status": 413,
                  "message": "an error encountered usually during geometry optimisation"
                },
                {
                  "status": 414,
                  "message": "an error was encountered during an SCF computation"
                },
                {
                  "status": 415,
                  "message": "an unknown error was encountered, causing the MPI to abort"
                },
                {
                  "status": 499,
                  "message": "The main crystal output file flagged an unhandled error"
                }
              ]
            },
            "class": "aiida_crystal17.calculations.prop_ech3:CryEch3Calculation"
          },
          "crystal17.main": {
            "description": [
              "AiiDA calculation plugin to run the crystal17 executable,",
              "    by supplying aiida nodes, with data sufficient to create the",
              "    .d12 input file and .gui file"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "basissets",
                  "required": true,
                  "valid_types": "BasisSetData",
                  "info": "Use a node for the basis set of one of the elements in the structure. You h ..."
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "CryInputParamsData",
                  "info": "the input parameters to create the .d12 file content."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "structure used to construct the input fort.34 (gui) file"
                },
                {
                  "name": "kinds",
                  "required": false,
                  "valid_types": "KindData",
                  "info": "additional structure kind specific data (e.g. initial spin)"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "symmetry",
                  "required": false,
                  "valid_types": "SymmetryData",
                  "info": "the symmetry of the structure, used to construct the input .gui file (fort. ..."
                },
                {
                  "name": "wf_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "An optional working directory, of a previously completed calculation, conta ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "results",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the data extracted from the main output file"
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "optimisation",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "atomic configurations, for each optimisation step"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "the structure output from the calculation"
                },
                {
                  "name": "symmetry",
                  "required": false,
                  "valid_types": "SymmetryData",
                  "info": "the symmetry data from the calculation"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "the main (stdout) output file was not found"
                },
                {
                  "status": 211,
                  "message": "the temporary retrieved folder was not found"
                },
                {
                  "status": 300,
                  "message": "An error was flagged trying to parse the crystal exec stdout file"
                },
                {
                  "status": 301,
                  "message": "An error occurred parsing the 'opta'/'optc' geometry files"
                },
                {
                  "status": 302,
                  "message": "The crystal exec stdout file denoted that the run was a testgeom"
                },
                {
                  "status": 350,
                  "message": "the input file could not be read by CRYSTAL"
                },
                {
                  "status": 351,
                  "message": "CRYSTAL could not find the required wavefunction file"
                },
                {
                  "status": 352,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 353,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 354,
                  "message": "Error in CHEMOD basis set modification"
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 401,
                  "message": "The calculation stopped prematurely because it ran out of memory."
                },
                {
                  "status": 402,
                  "message": "The calculation stopped prematurely because it ran out of virtual memory."
                },
                {
                  "status": 411,
                  "message": "SCF convergence did not finalise (usually due to reaching step limit)"
                },
                {
                  "status": 412,
                  "message": "Geometry convergence did not finalise (usually due to reaching step limit)"
                },
                {
                  "status": 413,
                  "message": "an error encountered usually during geometry optimisation"
                },
                {
                  "status": 414,
                  "message": "an error was encountered during an SCF computation"
                },
                {
                  "status": 415,
                  "message": "an unknown error was encountered, causing the MPI to abort"
                },
                {
                  "status": 499,
                  "message": "The main crystal output file flagged an unhandled error"
                },
                {
                  "status": 510,
                  "message": "inconsistency in the input and output symmetry"
                },
                {
                  "status": 520,
                  "message": "primitive symmops were not found in the output file"
                }
              ]
            },
            "class": "aiida_crystal17.calculations.cry_main:CryMainCalculation"
          },
          "crystal17.newk": {
            "description": [
              "AiiDA calculation plugin to run the properties17 executable,",
              "    for NEWK calculations (to return the fermi energy)"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the input parameters to create the properties input file."
                },
                {
                  "name": "wf_folder",
                  "required": true,
                  "valid_types": "FolderData, RemoteData, SinglefileData",
                  "info": "the folder containing the wavefunction fort.9 file"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "results",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Summary Data extracted from the output file(s)"
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "the main (stdout) output file was not found"
                },
                {
                  "status": 211,
                  "message": "the temporary retrieved folder was not found"
                },
                {
                  "status": 300,
                  "message": "An error was flagged trying to parse the crystal exec stdout file"
                },
                {
                  "status": 350,
                  "message": "the input file could not be read by CRYSTAL"
                },
                {
                  "status": 351,
                  "message": "CRYSTAL could not find the required wavefunction file"
                },
                {
                  "status": 352,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 353,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 354,
                  "message": "Error in CHEMOD basis set modification"
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 401,
                  "message": "The calculation stopped prematurely because it ran out of memory."
                },
                {
                  "status": 402,
                  "message": "The calculation stopped prematurely because it ran out of virtual memory."
                },
                {
                  "status": 413,
                  "message": "an error encountered usually during geometry optimisation"
                },
                {
                  "status": 414,
                  "message": "an error was encountered during an SCF computation"
                },
                {
                  "status": 415,
                  "message": "an unknown error was encountered, causing the MPI to abort"
                },
                {
                  "status": 499,
                  "message": "The main crystal output file flagged an unhandled error"
                }
              ]
            },
            "class": "aiida_crystal17.calculations.prop_newk:CryNewkCalculation"
          },
          "crystal17.ppan": {
            "description": [
              "AiiDA calculation plugin to run the ``properties`` executable,",
              "    for PPAN (Mulliken population analysis) calculations."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the input parameters to create the properties input file."
                },
                {
                  "name": "wf_folder",
                  "required": true,
                  "valid_types": "FolderData, RemoteData, SinglefileData",
                  "info": "the folder containing the wavefunction fort.9 file"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "results",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Summary Data extracted from the output file(s)"
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "the main (stdout) output file was not found"
                },
                {
                  "status": 211,
                  "message": "the temporary retrieved folder was not found"
                },
                {
                  "status": 300,
                  "message": "An error was flagged trying to parse the crystal exec stdout file"
                },
                {
                  "status": 350,
                  "message": "the input file could not be read by CRYSTAL"
                },
                {
                  "status": 351,
                  "message": "CRYSTAL could not find the required wavefunction file"
                },
                {
                  "status": 352,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 352,
                  "message": "parser could not find the output PPAN.dat file"
                },
                {
                  "status": 353,
                  "message": "Possibly due to erroneous CHEMOD basis set modification"
                },
                {
                  "status": 353,
                  "message": "error parsing output PPAN.dat file"
                },
                {
                  "status": 354,
                  "message": "Error in CHEMOD basis set modification"
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 401,
                  "message": "The calculation stopped prematurely because it ran out of memory."
                },
                {
                  "status": 402,
                  "message": "The calculation stopped prematurely because it ran out of virtual memory."
                },
                {
                  "status": 413,
                  "message": "an error encountered usually during geometry optimisation"
                },
                {
                  "status": 414,
                  "message": "an error was encountered during an SCF computation"
                },
                {
                  "status": 415,
                  "message": "an unknown error was encountered, causing the MPI to abort"
                },
                {
                  "status": 499,
                  "message": "The main crystal output file flagged an unhandled error"
                }
              ]
            },
            "class": "aiida_crystal17.calculations.prop_ppan:CryPpanCalculation"
          }
        },
        "aiida.cmdline.data": {
          "crystal17.basis": "aiida_crystal17.cmndline.basis_set:basisset",
          "crystal17.parse": "aiida_crystal17.cmndline.cmd_parser:parse",
          "crystal17.symmetry": "aiida_crystal17.cmndline.symmetry:symmetry"
        },
        "aiida.data": {
          "crystal17.basisset": "aiida_crystal17.data.basis_set:BasisSetData",
          "crystal17.gcube": "aiida_crystal17.data.gcube:GaussianCube",
          "crystal17.kinds": "aiida_crystal17.data.kinds:KindData",
          "crystal17.parameters": "aiida_crystal17.data.input_params:CryInputParamsData",
          "crystal17.symmetry": "aiida_crystal17.data.symmetry:SymmetryData"
        },
        "aiida.groups": {
          "crystal17.basisset": "aiida_crystal17.data.basis_set:BasisSetFamily"
        },
        "aiida.parsers": {
          "crystal17.doss": "aiida_crystal17.parsers.cry_doss:CryDossParser",
          "crystal17.ech3": "aiida_crystal17.parsers.cry_ech3:CryEch3Parser",
          "crystal17.main": "aiida_crystal17.parsers.cry_main:CryMainParser",
          "crystal17.newk": "aiida_crystal17.parsers.cry_newk:CryNewkParser",
          "crystal17.ppan": "aiida_crystal17.parsers.cry_ppan:CryPpanParser"
        },
        "aiida.workflows": {
          "crystal17.main.base": {
            "description": [
              "Workchain to run a standard CRYSTAL17 calculation,",
              "    with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cry",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "basis_family",
                  "required": false,
                  "valid_types": "Str",
                  "info": "An alternative to specifying the basis sets manually: one can specify the n ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "kpoints_distance",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
                },
                {
                  "name": "kpoints_force_parity",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "results",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the data extracted from the main output file"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "the structure output from the calculation"
                },
                {
                  "name": "symmetry",
                  "required": false,
                  "valid_types": "SymmetryData",
                  "info": "the symmetry data from the calculation"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 201,
                  "message": "The parameters could not be validated against the jsonschema."
                },
                {
                  "status": 202,
                  "message": "The explicit `basis_sets` or `basis_family` could not be used to get the necessary basis sets."
                },
                {
                  "status": 204,
                  "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 320,
                  "message": "The initialization calculation failed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_crystal17.workflows.crystal_main.base:CryMainBaseWorkChain"
          },
          "crystal17.properties": {
            "description": [
              "A WorkChain to compute properties of a structure, using CRYSTAL.",
              "",
              "    Either a pre-computed wavefunction (fort.9) file,",
              "    or inputs for a CryMainCalculation, should be supplied.",
              "    Inputs for property calculations can then be added",
              "    (currently available; doss, ech3)."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "check_remote",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If a RemoteData wf_folder is input, check it contains the wavefunction file ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
                },
                {
                  "name": "doss",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "ech3",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "ppan",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "test_run",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "break off the workchain before submitting a calculation"
                },
                {
                  "name": "wf_folder",
                  "required": false,
                  "valid_types": "FolderData, RemoteData, SinglefileData",
                  "info": "the folder containing the wavefunction fort.9 file"
                }
              ],
              "outputs": [
                {
                  "name": "doss",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "ech3",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "ppan",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 200,
                  "message": "Workchain ended before submitting calculation."
                },
                {
                  "status": 201,
                  "message": "Neither a wf_folder nor scf calculation was supplied."
                },
                {
                  "status": 202,
                  "message": "No property calculation inputs were supplied."
                },
                {
                  "status": 203,
                  "message": "The supplied folder does contain the wavefunction file."
                },
                {
                  "status": 210,
                  "message": "The SCF calculation submission failed."
                },
                {
                  "status": 301,
                  "message": "The SCF calculation failed."
                },
                {
                  "status": 302,
                  "message": "One or more property calculations failed."
                }
              ]
            },
            "class": "aiida_crystal17.workflows.crystal_props.base:CryPropertiesWorkChain"
          },
          "crystal17.sym3d": {
            "description": [
              "modify an AiiDa structure instance and compute its symmetry",
              "",
              "    Inequivalent atomic sites are dictated by atom kinds"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "settings",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "cif",
                  "required": false,
                  "valid_types": "CifData",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "symmetry",
                  "required": true,
                  "valid_types": "SymmetryData",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "one of either a structure or cif input must be supplied"
                },
                {
                  "status": 301,
                  "message": "the supplied structure must be 3D (i.e. have all dimensions pbc=True)\""
                },
                {
                  "status": 302,
                  "message": "idealize can only be used when standardize=True"
                },
                {
                  "status": 303,
                  "message": "the kind names supplied are not compatible with the structure"
                },
                {
                  "status": 304,
                  "message": "error creating new structure"
                },
                {
                  "status": 305,
                  "message": "error computing symmetry operations"
                }
              ]
            },
            "class": "aiida_crystal17.workflows.symmetrise_3d_struct:Symmetrise3DStructure"
          }
        },
        "console_scripts": {
          "mock_crystal17": "aiida_crystal17.tests.mock_crystal17:main",
          "mock_properties17": "aiida_crystal17.tests.mock_properties17:main"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 6
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 5
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 5
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 3
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 2
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands, Groups)",
          "count": 4
        }
      ],
      "pip_install_cmd": "pip install aiida-crystal17"
    },
    "aiida-cusp": {
      "code_home": "https://github.com/aiida-cusp/aiida-cusp",
      "documentation_url": "https://aiida-cusp.readthedocs.io",
      "entry_point_prefix": "cusp",
      "pip_url": "https://pypi.org/project/aiida-cusp",
      "name": "aiida-cusp",
      "package_name": "aiida_cusp",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Andreas Stamminger",
        "author_email": "stammingera@gmail.com",
        "version": "0.1.0b2",
        "description": "Custodian based VASP Plugin for AiiDA",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Topic :: Scientific/Engineering :: Physics",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Environment :: Plugins",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.3.0,<2.0.0",
      "entry_points": {
        "aiida.data": {
          "cusp.kpoints": "aiida_cusp.data.inputs.vasp_kpoint:VaspKpointData",
          "cusp.poscar": "aiida_cusp.data.inputs.vasp_poscar:VaspPoscarData",
          "cusp.incar": "aiida_cusp.data.inputs.vasp_incar:VaspIncarData",
          "cusp.potcar": "aiida_cusp.data.inputs.vasp_potcar:VaspPotcarData",
          "cusp.vasprun": "aiida_cusp.data.outputs.vasp_vasprun:VaspVasprunData",
          "cusp.outcar": "aiida_cusp.data.outputs.vasp_outcar:VaspOutcarData",
          "cusp.contcar": "aiida_cusp.data.outputs.vasp_contcar:VaspContcarData",
          "cusp.chgcar": "aiida_cusp.data.outputs.vasp_chgcar:VaspChgcarData",
          "cusp.wavecar": "aiida_cusp.data.outputs.vasp_wavecar:VaspWavecarData",
          "cusp.generic": "aiida_cusp.data.outputs.vasp_generic:VaspGenericData",
          "cusp.potcarfile": "aiida_cusp.data.inputs.vasp_potcar:VaspPotcarFile"
        },
        "aiida.calculations": {
          "cusp.vasp": "aiida_cusp.calculators.vasp_calculation:VaspCalculation"
        },
        "aiida.parsers": {
          "cusp.default": "aiida_cusp.parsers.vasp_file_parser:VaspFileParser"
        },
        "aiida.cmdline.data": {
          "potcar": "aiida_cusp.cli.potcar_cmd:potcar"
        }
      },
      "commits_count": 70,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 11
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install https://pypi.org/project/aiida-cusp"
    },
    "aiida-dataframe": {
      "entry_point_prefix": "dataframe",
      "plugin_info": "https://raw.github.com/janssenhenning/aiida-dataframe/main/pyproject.toml",
      "code_home": "https://github.com/janssenhenning/aiida-dataframe",
      "version_file": "https://raw.githubusercontent.com/janssenhenning/aiida-dataframe/main/aiida_dataframe/__init__.py",
      "pip_url": "aiida-dataframe",
      "documentation_url": "https://aiida-dataframe.readthedocs.io/en/latest/",
      "name": "aiida-dataframe",
      "package_name": "aiida_dataframe",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA data plugin for pandas DataFrame objects",
        "author_email": "Henning Jan\u00dfen <henning.janssen@gmx.net>",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "version": "0.1.3"
      },
      "aiida_version": ">=1.0,<3",
      "entry_points": {
        "aiida.cmdline.data": {
          "dataframe": "aiida_dataframe.cli:data_cli"
        },
        "aiida.data": {
          "dataframe.frame": "aiida_dataframe.data.dataframe:PandasFrameData"
        }
      },
      "commits_count": 37,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-dataframe"
    },
    "aiida-ddec": {
      "code_home": "https://github.com/lsmo-epfl/aiida-ddec",
      "entry_point_prefix": "ddec",
      "pip_url": "git+https://github.com/yakutovicha/aiida-ddec",
      "name": "aiida-ddec",
      "package_name": "aiida_ddec",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Aliaksandr Yakutovich",
        "author_email": "aliaksandr.yakutovich@epfl.ch",
        "version": "1.1.0",
        "description": "AiiDA plugin for DDEC code",
        "classifiers": [
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Framework :: AiiDA",
          "Development Status :: 5 - Production/Stable"
        ]
      },
      "aiida_version": ">=1.1.0,<3",
      "entry_points": {
        "aiida.calculations": {
          "ddec": {
            "description": [
              "AiiDA plugin for the ddec code that performs density derived",
              "    electrostatic and chemical atomic population analysis."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Input parameters such as net charge, protocol, atomic densities path, ..."
                },
                {
                  "name": "charge_density_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Use a remote folder (for restarts and similar)"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "structure_ddec",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "structure with DDEC charges"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 101,
                  "message": "The retrieved folder does not contain an output file."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                }
              ]
            },
            "class": "aiida_ddec.calculations:DdecCalculation"
          }
        },
        "aiida.parsers": {
          "ddec": "aiida_ddec.parsers:DdecParser"
        },
        "aiida.workflows": {
          "ddec.cp2k_ddec": "aiida_ddec.workchains:Cp2kDdecWorkChain"
        }
      },
      "commits_count": 9,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/yakutovicha/aiida-ddec"
    },
    "aiida-defects": {
      "code_home": "https://github.com/epfl-theos/aiida-defects",
      "entry_point_prefix": "defects",
      "pip_url": "aiida-defects",
      "plugin_info": "https://raw.githubusercontent.com/epfl-theos/aiida-defects/master/pyproject.toml",
      "name": "aiida-defects",
      "package_name": "aiida_defects",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA-Defects is a plugin for the AiiDA computational materials science framework, and provides tools and automated workflows for the study of defects in materials.",
        "author": "The AiiDA-Defects developers",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "1.0.1"
      },
      "aiida_version": ">=2.0,<3",
      "entry_points": {
        "aiida.data": {
          "defects.array.stability": "aiida_defects.data.data:StabilityData"
        },
        "aiida.workflows": {
          "defects.formation_energy.chemical_potential": "aiida_defects.formation_energy.chemical_potential.chemical_potential:ChemicalPotentialWorkchain",
          "defects.formation_energy.corrections.gaussian_countercharge": "aiida_defects.formation_energy.corrections.gaussian_countercharge.gaussian_countercharge:GaussianCounterChargeWorkchain",
          "defects.formation_energy.corrections.gaussian_countercharge.model_potential": "aiida_defects.formation_energy.corrections.gaussian_countercharge.model_potential.model_potential:ModelPotentialWorkchain",
          "defects.formation_energy.corrections.point_countercharge": "aiida_defects.formation_energy.corrections.point_countercharge.point_countercharge:PointCounterChargeWorkchain",
          "defects.formation_energy.potential_alignment": "aiida_defects.formation_energy.potential_alignment.potential_alignment:PotentialAlignmentWorkchain",
          "defects.formation_energy.qe": "aiida_defects.formation_energy.formation_energy_qe:FormationEnergyWorkchainQE",
          "defects.formation_energy.siesta": "aiida_defects.formation_energy.formation_energy_siesta:FormatonEnergyWorkchainSiesta"
        }
      },
      "commits_count": 10,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 7
        }
      ],
      "pip_install_cmd": "pip install aiida-defects"
    },
    "aiida-diff": {
      "code_home": "https://github.com/aiidateam/aiida-diff",
      "development_status": "stable",
      "documentation_url": "https://aiida-diff.readthedocs.io/",
      "entry_point_prefix": "diff",
      "pip_url": "git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0",
      "name": "aiida-diff",
      "package_name": "aiida_diff",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA demo plugin that wraps the `diff` executable for computing the difference between two files.",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Development Status :: 3 - Alpha",
          "Framework :: AiiDA"
        ],
        "author": "The AiiDA Team"
      },
      "aiida_version": ">=2.0,<3",
      "entry_points": {
        "aiida.data": {
          "diff": "aiida_diff.data:DiffParameters"
        },
        "aiida.calculations": {
          "diff": "aiida_diff.calculations:DiffCalculation"
        },
        "aiida.parsers": {
          "diff": "aiida_diff.parsers:DiffParser"
        },
        "aiida.cmdline.data": {
          "diff": "aiida_diff.cli:data_cli"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0"
    },
    "aiida-donothing": {
      "code_home": "https://github.com/atztogo/aiida-donothing",
      "entry_point_prefix": "donothing",
      "name": "aiida-donothing",
      "package_name": "aiida_donothing",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Atsushi Togo",
        "author_email": "atz.togo@gmail.com",
        "version": "0.1",
        "description": "AiiDA calculation plugin for doing nothing",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.6.5,<2.0.0",
      "entry_points": {
        "aiida.calculations": {
          "donothing.donothing": "aiida_donothing.calculations.donothing:DoNothingCalculation"
        },
        "aiida.parsers": {
          "donothing.donothing": "aiida_donothing.parsers.donothing:DoNothingParser"
        }
      },
      "commits_count": 1,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "See source code repository."
    },
    "aiida-dynamic-workflows": {
      "code_home": "https://github.com/microsoft/aiida-dynamic-workflows",
      "entry_point_prefix": "dynamic_workflows",
      "name": "aiida-dynamic-workflows",
      "package_name": "aiida_dynamic_workflows",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 0,
      "development_status": "planning",
      "summaryinfo": [],
      "pip_install_cmd": "See source code repository."
    },
    "aiida-environ": {
      "code_home": "https://github.com/environ-developers/aiida-environ",
      "entry_point_prefix": "environ",
      "pip_url": "git+https://github.com/environ-developers/aiida-environ",
      "name": "aiida-environ",
      "package_name": "aiida_environ",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 0,
      "development_status": "planning",
      "summaryinfo": [],
      "pip_install_cmd": "pip install git+https://github.com/environ-developers/aiida-environ"
    },
    "aiida-eon": {
      "code_home": "https://github.com/HaoZeke/aiida-eon",
      "entry_point_prefix": "eon",
      "name": "aiida-eon",
      "package_name": "aiida_eon",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 0,
      "development_status": "planning",
      "summaryinfo": [],
      "pip_install_cmd": "See source code repository."
    },
    "aiida-eonclient": {
      "code_home": "https://github.com/HaoZeke/aiida-eonclient",
      "entry_point_prefix": "eonclient",
      "name": "aiida-eonclient",
      "package_name": "aiida_eonclient",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 0,
      "development_status": "planning",
      "summaryinfo": [],
      "pip_install_cmd": "See source code repository."
    },
    "aiida-fenics": {
      "code_home": "https://github.com/sphuber/aiida-fenics/tree/master",
      "entry_point_prefix": "fenics",
      "pip_url": "git+https://github.com/sphuber/aiida-fenics",
      "name": "aiida-fenics",
      "package_name": "aiida_fenics",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": -1,
      "development_status": "planning",
      "summaryinfo": [],
      "pip_install_cmd": "pip install git+https://github.com/sphuber/aiida-fenics"
    },
    "aiida-firecrest": {
      "code_home": "https://github.com/aiidateam/aiida-firecrest",
      "entry_point_prefix": "firecrest",
      "pip_url": "aiida-firecrest",
      "plugin_info": "https://raw.githubusercontent.com/aiidateam/aiida-firecrest/main/pyproject.toml",
      "name": "aiida-firecrest",
      "package_name": "aiida_firecrest",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Transport/Scheduler plugins for interfacing with FirecREST.",
        "author_email": "Chris Sewell <chrisj_sewell@hotmail.com>",
        "classifiers": [
          "Development Status :: 3 - Alpha",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: Implementation :: CPython",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "version": "0.1.0a1"
      },
      "aiida_version": "<2",
      "entry_points": {
        "aiida.schedulers": {
          "firecrest": "aiida_firecrest.scheduler:FirecrestScheduler"
        },
        "aiida.transports": {
          "firecrest": "aiida_firecrest.transport:FirecrestTransport"
        },
        "console_scripts": {
          "aiida-firecrest-cli": "aiida_firecrest.cli:main"
        }
      },
      "commits_count": 19,
      "development_status": "alpha",
      "summaryinfo": [
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Schedulers, Transports)",
          "count": 2
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-firecrest"
    },
    "aiida-fireworks-scheduler": {
      "code_home": "https://github.com/zhubonan/aiida-fireworks-scheduler",
      "development_status": "beta",
      "documentation_url": "https://aiida-fireworks-scheduler.readthedocs.io",
      "entry_point_prefix": "fireworks_scheduler",
      "pip_url": "git+https://github.com/zhubonan/aiida-fireworks-scheduler",
      "name": "aiida-fireworks-scheduler",
      "package_name": "aiida_fireworks_scheduler",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Bonan Zhu",
        "author_email": "zhubonan@outlook.com",
        "version": "1.2.0",
        "description": "AiiDA plugin to allow using `fireworks` as the execution engine for `CalcJob`.",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.schedulers": {
          "fireworks": "aiida_fireworks_scheduler.fwscheduler:FwScheduler",
          "fireworks_scheduler.default": "aiida_fireworks_scheduler.fwscheduler:FwScheduler",
          "fireworks_scheduler.keepenv": "aiida_fireworks_scheduler.fwscheduler:FwSchedulerKeepEnv"
        },
        "aiida.cmdline.data": {
          "fireworks-scheduler": "aiida_fireworks_scheduler.cmdline:fw_cli"
        },
        "console_scripts": {
          "arlaunch": "aiida_fireworks_scheduler.scripts.arlaunch_run:arlaunch"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands, Schedulers)",
          "count": 4
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/zhubonan/aiida-fireworks-scheduler"
    },
    "aiida-fleur": {
      "code_home": "https://github.com/JuDFTteam/aiida-fleur/tree/develop",
      "development_status": "stable",
      "documentation_url": "https://aiida-fleur.readthedocs.io/",
      "entry_point_prefix": "fleur",
      "pip_url": "aiida-fleur",
      "plugin_info": "https://raw.github.com/JuDFTteam/aiida-fleur/develop/setup.json",
      "name": "aiida-fleur",
      "package_name": "aiida_fleur",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Plugin for running the FLEUR code and its input generator. Also includes high-level workchains and utilities",
        "author_email": "The JuDFT team <j.broeder@fz-juelich.de>",
        "classifiers": [
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "2.0.0"
      },
      "aiida_version": ">=2.0.1,<3.0.0",
      "entry_points": {
        "aiida.calculations": {
          "fleur.fleur": {
            "description": [
              "A CalcJob class that represents FLEUR DFT calculation.",
              "    For more information about the FLEUR-code family go to http://www.flapw.de/"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": "Use a FleurinpData node that specifies the input parametersusually copy fro ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Use a remote or local repository folder as parent folder (also for restarts ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "This parameter data node is used to specify for some advanced features how  ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "error_params",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_params_complex",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "relax_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "No retrieved folder found."
                },
                {
                  "status": 301,
                  "message": "One of the output files can not be opened."
                },
                {
                  "status": 302,
                  "message": "FLEUR calculation failed for unknown reason."
                },
                {
                  "status": 303,
                  "message": "XML output file was not found."
                },
                {
                  "status": 304,
                  "message": "Parsing of XML output file failed."
                },
                {
                  "status": 305,
                  "message": "Parsing of relax XML output file failed."
                },
                {
                  "status": 310,
                  "message": "FLEUR calculation failed due to lack of memory."
                },
                {
                  "status": 311,
                  "message": "FLEUR calculation failed because an atom spilled to thevacuum during relaxation"
                },
                {
                  "status": 312,
                  "message": "FLEUR calculation failed due to MT overlap."
                },
                {
                  "status": 313,
                  "message": "Overlapping MT-spheres during relaxation."
                },
                {
                  "status": 314,
                  "message": "Problem with cdn is suspected. Consider removing cdn"
                },
                {
                  "status": 315,
                  "message": "The LDA+U density matrix contains invalid elements."
                },
                {
                  "status": 316,
                  "message": "Calculation failed due to time limits."
                },
                {
                  "status": 318,
                  "message": "Calculation failed due to missing dependency ({name}) for given calculation."
                }
              ]
            },
            "class": "aiida_fleur.calculation.fleur:FleurCalculation"
          },
          "fleur.inpgen": {
            "description": [
              "JobCalculationClass for the inpgen, which is a preprocessor for a FLEUR calculation.",
              "    For more information about produced files and the FLEUR-code family, go to http://www.flapw.de/."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Choose the input structure to use"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use a node that specifies the input parameters for the namelists"
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "This parameter data node is used to specify for some advanced features how  ..."
                }
              ],
              "outputs": [
                {
                  "name": "fleurinp",
                  "required": true,
                  "valid_types": "FleurinpData",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "No retrieved folder found."
                },
                {
                  "status": 301,
                  "message": "One of the output files can not be opened."
                },
                {
                  "status": 306,
                  "message": "XML input file was not found."
                },
                {
                  "status": 307,
                  "message": "Some required files were not retrieved."
                },
                {
                  "status": 308,
                  "message": "During parsing: FleurinpData could not be initialized, see log. "
                },
                {
                  "status": 309,
                  "message": "During parsing: FleurinpData failed validation."
                },
                {
                  "status": 310,
                  "message": "The profile {profile} is not known to the used inpgen code"
                }
              ]
            },
            "class": "aiida_fleur.calculation.fleurinputgen:FleurinputgenCalculation"
          }
        },
        "aiida.data": {
          "fleur.fleurinp": "aiida_fleur.data.fleurinp:FleurinpData"
        },
        "aiida.parsers": {
          "fleur.fleurinpgenparser": "aiida_fleur.parsers.fleur_inputgen:Fleur_inputgenParser",
          "fleur.fleurparser": "aiida_fleur.parsers.fleur:FleurParser"
        },
        "aiida.workflows": {
          "fleur.banddos": {
            "description": [
              "This workflow calculated a bandstructure from a Fleur calculation",
              "",
              "    :Params: a Fleurcalculation node",
              "    :returns: Success, last result node, list with convergence behavior"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "remote",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "banddos_calc",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "output_banddos_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_banddos_wc_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "output_banddos_wc_dos",
                  "required": false,
                  "valid_types": "XyData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "Invalid input configuration."
                },
                {
                  "status": 233,
                  "message": "Invalid code node specified, check inpgen and fleur code nodes."
                },
                {
                  "status": 235,
                  "message": "Input file modification failed."
                },
                {
                  "status": 236,
                  "message": "Input file was corrupted after user's modifications."
                },
                {
                  "status": 334,
                  "message": "SCF calculation failed."
                },
                {
                  "status": 335,
                  "message": "Found no SCF calculation remote repository."
                }
              ]
            },
            "class": "aiida_fleur.workflows.banddos:FleurBandDosWorkChain"
          },
          "fleur.base": {
            "description": [
              "Workchain to run a FLEUR calculation with automated error handling and restarts"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Optional parameters to set up computational details."
                },
                {
                  "name": "add_comp_para",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Gives additional control over computational parametersonly_even_MPI: set to ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "description",
                  "required": false,
                  "valid_types": "str, NoneType",
                  "info": "Calculation description."
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": "Use a FleurinpData node that specifies the input parametersusually copy fro ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "label",
                  "required": false,
                  "valid_types": "str, NoneType",
                  "info": "Calculation label."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Use a remote or local repository folder as parent folder (also for restarts ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "This parameter data node is used to specify for some advanced features how  ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "error_params",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_params_complex",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "relax_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 311,
                  "message": "FLEUR calculation failed because an atom spilled to thevacuum during relaxation"
                },
                {
                  "status": 313,
                  "message": "Overlapping MT-spheres during relaxation."
                },
                {
                  "status": 388,
                  "message": "Computational resources are not optimal."
                },
                {
                  "status": 389,
                  "message": "Computational resources are not optimal."
                },
                {
                  "status": 390,
                  "message": "Computational resources are not optimal."
                },
                {
                  "status": 399,
                  "message": "FleurCalculation failed and FleurBaseWorkChain has no strategy to resolve this"
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_fleur.workflows.base_fleur:FleurBaseWorkChain"
          },
          "fleur.base_relax": {
            "description": [
              "Workchain to run Relax WorkChain with automated error handling and restarts"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "description",
                  "required": false,
                  "valid_types": "str, NoneType",
                  "info": "Calculation description."
                },
                {
                  "name": "final_scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "label",
                  "required": false,
                  "valid_types": "str, NoneType",
                  "info": "Calculation label."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "last_scf",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "optimized_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "output_relax_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 399,
                  "message": "FleurRelaxWorkChain failed and FleurBaseRelaxWorkChain has no strategy to resolve this"
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_fleur.workflows.base_relax:FleurBaseRelaxWorkChain"
          },
          "fleur.cfcoeff": {
            "description": [
              "Workflow for calculating rare-earth crystal field coefficients"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "orbcontrol",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "scf_rare_earth_analogue",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_cfcoeff_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_cfcoeff_wc_charge_densities",
                  "required": false,
                  "valid_types": "XyData",
                  "info": ""
                },
                {
                  "name": "output_cfcoeff_wc_potentials",
                  "required": false,
                  "valid_types": "XyData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "Invalid input configuration."
                },
                {
                  "status": 235,
                  "message": "Input file modification failed."
                },
                {
                  "status": 236,
                  "message": "Input file was corrupted after user's modifications."
                },
                {
                  "status": 345,
                  "message": "Convergence scf workflow failed."
                },
                {
                  "status": 451,
                  "message": "Convergence orbcontrol workflow failed."
                },
                {
                  "status": 452,
                  "message": "CF calculation failed."
                }
              ]
            },
            "class": "aiida_fleur.workflows.cfcoeff:FleurCFCoeffWorkChain"
          },
          "fleur.corehole": {
            "description": [
              "Turn key solution for a corehole calculation with the FLEUR code.",
              "    Has different protocols for different core-hole types (valence, charge).",
              "",
              "    Calculates supercells. Extracts binding energies",
              "    for certain corelevels from the total energy differences a the calculation with",
              "    corehole and without.",
              "",
              "    Documentation:",
              "    See help for details.",
              "",
              "    Two paths are possible:",
              "",
              "    (1) Start from a structure -> workchains run inpgen first (recommended)",
              "    (2) Start from a Fleurinp data object",
              "",
              "    Also it is recommended to provide a calc parameter node for the structure",
              "",
              "    :param wf_parameters: Dict node, specify, resources and what should be calculated",
              "    :param structure: structureData node, crystal structure",
              "    :param calc_parameters: Dict node, inpgen parameters for the crystal structure",
              "    :param fleurinp:  fleurinpData node,",
              "    :param inpgen: Code node,",
              "    :param fleur: Code node,",
              "",
              "    :return: output_corehole_wc_para Dict node,  successful=True if no error",
              "",
              "    :uses workchains: fleur_scf_wc, fleur_relax_wc",
              "    :uses calcfunctions: supercell, create_corehole_result_node, prepare_struc_corehole_wf"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "inpgen",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "calc_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData, NoneType",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_corehole_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 1,
                  "message": "The input resources are invalid."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 2,
                  "message": "Input resources are missing."
                },
                {
                  "status": 3,
                  "message": "The code provided is invalid, or not of the right kind."
                },
                {
                  "status": 4,
                  "message": "Inpgen calculation FAILED, check output"
                },
                {
                  "status": 5,
                  "message": "Changing of the FLEURINP data went wrong, check log."
                },
                {
                  "status": 6,
                  "message": "The FLEUR input file for the calculation did not validate."
                },
                {
                  "status": 7,
                  "message": "At least one FLEUR calculation FAILED, check the output and log."
                },
                {
                  "status": 8,
                  "message": "At least one FLEUR calculation did not/could not reach thedesired convergece Criteria, with the current parameters."
                },
                {
                  "status": 9,
                  "message": "Something went wrong in the determiation what coreholes to calculate, probably the input format was not correct. Check log."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_fleur.workflows.corehole:FleurCoreholeWorkChain"
          },
          "fleur.create_magnetic": {
            "description": [
              "This workflow creates relaxed magnetic film on a substrate."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "distance_suggestion",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "eos",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "eos_output",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "interlayer_dist",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "optimized_structure",
                  "required": false,
                  "valid_types": "StructureData, NoneType",
                  "info": ""
                },
                {
                  "name": "relax",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "magnetic_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "Invalid input configuration."
                },
                {
                  "status": 380,
                  "message": "Specified substrate has to be bcc or fcc."
                },
                {
                  "status": 382,
                  "message": "Relaxation calculation failed."
                },
                {
                  "status": 383,
                  "message": "EOS WorkChain failed."
                }
              ]
            },
            "class": "aiida_fleur.workflows.create_magnetic_film:FleurCreateMagneticWorkChain"
          },
          "fleur.dmi": {
            "description": [
              "This workflow calculates DMI energy dispersion of a structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "remote",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_dmi_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "Invalid input configuration."
                },
                {
                  "status": 233,
                  "message": "Invalid code node specified, check inpgen and fleur code nodes."
                },
                {
                  "status": 235,
                  "message": "Input file modification failed."
                },
                {
                  "status": 236,
                  "message": "Input file was corrupted after user's modifications."
                },
                {
                  "status": 334,
                  "message": "Reference calculation failed."
                },
                {
                  "status": 335,
                  "message": "Found no reference calculation remote repository."
                },
                {
                  "status": 336,
                  "message": "Force theorem calculation failed."
                }
              ]
            },
            "class": "aiida_fleur.workflows.dmi:FleurDMIWorkChain"
          },
          "fleur.dos": {
            "description": [
              "DEPRECATED: Use FleurBandDosWorkChain instead (entrypoint fleur.banddos)",
              "    This workflow calculated a DOS from a Fleur calculation",
              "",
              "    :Params: a Fleurcalculation node",
              "    :returns: Success, last result node, list with convergence behavior",
              "",
              "    wf_parameters: {  'tria', 'nkpts', 'sigma', 'emin', 'emax'}",
              "    defaults : tria = True, nkpts = 800, sigma=0.005, emin= -0.3, emax = 0.8"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "calc_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "remote_data",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": ""
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_fleur.workflows.dos:fleur_dos_wc"
          },
          "fleur.eos": {
            "description": [
              "This workflow calculates the equation of states of a structure.",
              "    Calculates several unit cells with different volumes.",
              "    A Birch_Murnaghan  equation of states fit determines the Bulk modulus and the",
              "    groundstate volume of the cell.",
              "",
              "    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict",
              "    :params structure: StructureData node, 'structure' crystal structure",
              "    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen",
              "    :params inpgen: Code node,",
              "    :params fleur: Code node,",
              "",
              "",
              "    :return output_eos_wc_para: Dict node, contains relevant output information.",
              "                                about general succeed, fit results and so on."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_eos_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_eos_wc_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 400,
                  "message": "At least one of the SCF sub processes did not finish successfully."
                }
              ]
            },
            "class": "aiida_fleur.workflows.eos:FleurEosWorkChain"
          },
          "fleur.init_cls": {
            "description": [
              "Turn key solution for the calculation of core level shift"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "calc_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "inpgen",
                  "required": false,
                  "valid_types": "Code, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData, NoneType",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_initial_cls_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_fleur.workflows.initial_cls:FleurInitialCLSWorkChain"
          },
          "fleur.mae": {
            "description": [
              "This workflow calculates the Magnetic Anisotropy Energy of a structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "remote",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_mae_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "Invalid input configuration."
                },
                {
                  "status": 233,
                  "message": "Invalid code node specified, check inpgen and fleur code nodes."
                },
                {
                  "status": 235,
                  "message": "Input file modification failed."
                },
                {
                  "status": 236,
                  "message": "Input file was corrupted after user's modifications."
                },
                {
                  "status": 334,
                  "message": "Reference calculation failed."
                },
                {
                  "status": 335,
                  "message": "Found no reference calculation remote repository."
                },
                {
                  "status": 336,
                  "message": "Force theorem calculation failed."
                }
              ]
            },
            "class": "aiida_fleur.workflows.mae:FleurMaeWorkChain"
          },
          "fleur.mae_conv": {
            "description": [
              "This workflow calculates the Magnetic Anisotropy Energy of a structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_mae_conv_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 343,
                  "message": "Convergence MAE calculation failed for all SQAs."
                },
                {
                  "status": 344,
                  "message": "Convergence MAE calculation failed for some SQAs."
                }
              ]
            },
            "class": "aiida_fleur.workflows.mae_conv:FleurMaeConvWorkChain"
          },
          "fleur.orbcontrol": {
            "description": [
              "Workchain for determining the groundstate density matrix in an DFT+U",
              "    calculation. This is done in 2 or 3 steps:",
              "",
              "        1. Converge the system without DFT+U (a converged calculation can be",
              "           provided to skip this step)",
              "        2. A fixed number of iterations is run with fixed density matrices",
              "           either generated as all distinct permutations for the given occupations",
              "           or the explicitly given configurations",
              "        3. The system and density matrix is relaxed",
              "",
              "    :param wf_parameters: (Dict), Workchain Specifications",
              "    :param scf_no_ldau: (Dict), Inputs to a FleurScfWorkChain providing the initial system",
              "                                either converged or staring from a structure",
              "    :param scf_with_ldau: (Dict), Inputs to a FleurScfWorkChain. Only the wf_parameters are valid",
              "    :param fleurinp: (FleurinpData) FleurinpData to start from if no SCF should be done",
              "    :param remote: (RemoteData) RemoteData to start from if no SCF should be done",
              "    :param structure: (StructureData) Structure to start from if no SCF should be done",
              "    :param calc_parameters: (Dict), Inpgen Parameters",
              "    :param settings: (Dict), additional settings for e.g retrieving files",
              "    :param options: (Dict), Options for the submission of the jobs",
              "    :param inpgen: (Code)",
              "    :param fleur: (Code)"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "calc_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "fixed_remotes",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "inpgen",
                  "required": false,
                  "valid_types": "Code, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "options_inpgen",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "relaxed_remotes",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": ""
                },
                {
                  "name": "remote",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": ""
                },
                {
                  "name": "scf_no_ldau",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for SCF Workchain before adding LDA+U"
                },
                {
                  "name": "scf_with_ldau",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for SCF Workchain after the LDA+U matrix was fixed"
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "settings_inpgen",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData, NoneType",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "groundstate_scf",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "output_orbcontrol_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "groundstate_denmat",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "Invalid input configuration."
                },
                {
                  "status": 233,
                  "message": "Input codes do not correspond to fleur or inpgen respectively."
                },
                {
                  "status": 235,
                  "message": "Input file modification failed."
                },
                {
                  "status": 236,
                  "message": "Input file was corrupted after user's modifications."
                },
                {
                  "status": 342,
                  "message": "Convergence LDA+U calculation failed for some Initial configurations."
                },
                {
                  "status": 343,
                  "message": "Convergence LDA+U calculation failed for all Initial configurations."
                },
                {
                  "status": 360,
                  "message": "Inpgen calculation failed."
                },
                {
                  "status": 450,
                  "message": "Convergence workflow without LDA+U failed."
                }
              ]
            },
            "class": "aiida_fleur.workflows.orbcontrol:FleurOrbControlWorkChain"
          },
          "fleur.relax": {
            "description": [
              "This workflow performs structure optimization."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "final_scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "last_scf",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "optimized_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "output_relax_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "If you want to run a final scf inpgen has to be there."
                },
                {
                  "status": 311,
                  "message": "FLEUR calculation failed because an atom spilled to thevacuum during relaxation"
                },
                {
                  "status": 313,
                  "message": "Overlapping MT-spheres during relaxation."
                },
                {
                  "status": 350,
                  "message": "Optimization cycle did not lead to convergence of forces."
                },
                {
                  "status": 351,
                  "message": "SCF Workchains failed for some reason."
                },
                {
                  "status": 352,
                  "message": "Found no relaxed structure info in the output of SCF"
                },
                {
                  "status": 353,
                  "message": "Found no SCF output"
                },
                {
                  "status": 354,
                  "message": "Force is small, switch to BFGS"
                }
              ]
            },
            "class": "aiida_fleur.workflows.relax:FleurRelaxWorkChain"
          },
          "fleur.relax_torque": {
            "description": [
              "This workflow performs spin structure optimization."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "final_scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_relax_torque_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "If you want to run a final scf inpgen has to be there."
                },
                {
                  "status": 350,
                  "message": "Optimization cycle did not lead to convergence."
                },
                {
                  "status": 351,
                  "message": "An SCF Workchain failed for some reason."
                }
              ]
            },
            "class": "aiida_fleur.workflows.relax_torque:FleurRelaxTorqueWorkChain"
          },
          "fleur.scf": {
            "description": [
              "Workchain for converging a FLEUR calculation (SCF).",
              "",
              "    It converges the charge density, total energy or the largest force.",
              "    Two paths are possible:",
              "",
              "    (1) Start from a structure and run the inpgen first optional with calc_parameters",
              "    (2) Start from a Fleur calculation, with optional remoteData",
              "",
              "    :param wf_parameters: (Dict), Workchain Specifications",
              "    :param structure: (StructureData), Crystal structure",
              "    :param calc_parameters: (Dict), Inpgen Parameters",
              "    :param fleurinp: (FleurinpData), to start with a Fleur calculation",
              "    :param remote_data: (RemoteData), from a Fleur calculation",
              "    :param inpgen: (Code)",
              "    :param fleur: (Code)",
              "",
              "    :return: output_scf_wc_para (Dict), Information of workflow results",
              "        like Success, last result node, list with convergence behavior"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "calc_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "inpgen",
                  "required": false,
                  "valid_types": "Code, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "remote_data",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": ""
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "settings_inpgen",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData, NoneType",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "fleurinp",
                  "required": true,
                  "valid_types": "FleurinpData",
                  "info": ""
                },
                {
                  "name": "last_calc",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "output_scf_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "Invalid input configuration."
                },
                {
                  "status": 233,
                  "message": "Input codes do not correspond to fleur or inpgen respectively."
                },
                {
                  "status": 235,
                  "message": "Input file modification failed."
                },
                {
                  "status": 236,
                  "message": "Input file was corrupted after user's modifications."
                },
                {
                  "status": 360,
                  "message": "Inpgen calculation failed."
                },
                {
                  "status": 361,
                  "message": "Fleur calculation failed."
                },
                {
                  "status": 362,
                  "message": "SCF cycle did not lead to convergence."
                }
              ]
            },
            "class": "aiida_fleur.workflows.scf:FleurScfWorkChain"
          },
          "fleur.ssdisp": {
            "description": [
              "This workflow calculates spin spiral dispersion of a structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "fleurinp",
                  "required": false,
                  "valid_types": "FleurinpData, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "remote",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_ssdisp_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 231,
                  "message": "Invalid input configuration."
                },
                {
                  "status": 233,
                  "message": "Invalid code node specified, check inpgen and fleur code nodes."
                },
                {
                  "status": 235,
                  "message": "Input file modification failed."
                },
                {
                  "status": 236,
                  "message": "Input file was corrupted after user's modifications."
                },
                {
                  "status": 334,
                  "message": "Reference calculation failed."
                },
                {
                  "status": 335,
                  "message": "Found no reference calculation remote repository."
                },
                {
                  "status": 336,
                  "message": "Force theorem calculation failed."
                }
              ]
            },
            "class": "aiida_fleur.workflows.ssdisp:FleurSSDispWorkChain"
          },
          "fleur.ssdisp_conv": {
            "description": [
              "This workflow calculates the Spin Spiral Dispersion of a structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_ssdisp_conv_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 230,
                  "message": "Invalid workchain parameters."
                },
                {
                  "status": 340,
                  "message": "Convergence SSDisp calculation failed for all q-vectors."
                },
                {
                  "status": 341,
                  "message": "Convergence SSDisp calculation failed for some q-vectors."
                }
              ]
            },
            "class": "aiida_fleur.workflows.ssdisp_conv:FleurSSDispConvWorkChain"
          },
          "fleur.strain": {
            "description": [
              "This workflow calculates the deformation potential a structure = -BdEg/dP = d(Eg)/d(ln(V)).",
              "    Calculates several unit cells with different volumes.",
              "    A Birch_Murnaghan  equation of states fit determines the Bulk modulus(B) and the",
              "    ground-state volume of the cell.",
              "",
              "    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict",
              "    :params structure: StructureData node, 'structure' crystal structure",
              "    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen",
              "    :params inpgen: Code node,",
              "    :params fleur: Code node,",
              "",
              "",
              "    :return output_strain_wc_para: Dict node, contains relevant output information.",
              "                                about general succeed, fit results and so on."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "fleur",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "inpgen",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "calc_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "wf_parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_strain_wc_para",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 331,
                  "message": "Invalid code node specified, check inpgen and fleur code nodes."
                }
              ]
            },
            "class": "aiida_fleur.workflows.strain:FleurStrainWorkChain"
          }
        },
        "console_scripts": {
          "aiida-fleur": "aiida_fleur.cmdline:cmd_root"
        }
      },
      "commits_count": 244,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 2
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 2
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 19
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-fleur"
    },
    "aiida-flexpart": {
      "code_home": "https://github.com/aiidaplugins/aiida-flexpart",
      "entry_point_prefix": "flexpart",
      "pip_url": "git+https://github.com/aiidaplugins/aiida-flexpart",
      "name": "aiida-flexpart",
      "package_name": "aiida_flexpart",
      "hosted_on": "github.com",
      "metadata": {
        "author": "The AiiDA Team",
        "author_email": "aliaksandr.yakutovich@empa.ch",
        "version": "0.1.0a0",
        "description": "AiiDA plugin for the FLEXPART code (simulation of atmospheric transport processes).",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.6.5,<3.0.0",
      "entry_points": {
        "aiida.calculations": {
          "flexpart.cosmo": "aiida_flexpart.calculations.cosmo:FlexpartCosmoCalculation"
        },
        "aiida.parsers": {
          "flexpart.cosmo": "aiida_flexpart.parsers.cosmo:FlexpartCosmoParser"
        },
        "aiida.workflows": {
          "flexpart.multi_dates": "aiida_flexpart.workflows.multi_dates_workflow:FlexpartMultipleDatesWorkflow"
        }
      },
      "commits_count": 9,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/aiidaplugins/aiida-flexpart"
    },
    "aiida-gaussian": {
      "code_home": "https://github.com/nanotech-empa/aiida-gaussian",
      "entry_point_prefix": "gaussian",
      "pip_url": "aiida-gaussian",
      "plugin_info": "https://raw.githubusercontent.com/nanotech-empa/aiida-gaussian/master/pyproject.toml",
      "name": "aiida-gaussian",
      "package_name": "aiida_gaussian",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for the Gaussian quantum chemistry software.",
        "author": "Kristjan Eimre, Pezhman Zarabadi-Poor, Aliaksandr Yakutovich",
        "license": "MIT",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Physics",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "version": "2.0.4"
      },
      "aiida_version": ">=2.0.0,<3.0.0",
      "entry_points": {
        "aiida.calculations": {
          "gaussian": "aiida_gaussian.calculations:GaussianCalculation",
          "gaussian.cubegen": "aiida_gaussian.calculations:CubegenCalculation",
          "gaussian.formchk": "aiida_gaussian.calculations:FormchkCalculation"
        },
        "aiida.parsers": {
          "gaussian.advanced": "aiida_gaussian.parsers.gaussian:GaussianAdvancedParser",
          "gaussian.base": "aiida_gaussian.parsers.gaussian:GaussianBaseParser",
          "gaussian.cubegen_base": "aiida_gaussian.parsers.cubegen:CubegenBaseParser"
        },
        "aiida.workflows": {
          "gaussian.base": "aiida_gaussian.workchains:GaussianBaseWorkChain",
          "gaussian.cubes": "aiida_gaussian.workchains:GaussianCubesWorkChain"
        }
      },
      "commits_count": 23,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 3
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 3
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 2
        }
      ],
      "pip_install_cmd": "pip install aiida-gaussian"
    },
    "aiida-gaussian-datatypes": {
      "code_home": "https://github.com/dev-zero/aiida-gaussian-datatypes",
      "documentation_url": "https://github.com/dev-zero/aiida-gaussian-datatypes/blob/master/README.md",
      "entry_point_prefix": "gaussian",
      "pip_url": "aiida-gaussian-datatypes",
      "plugin_info": "https://raw.github.com/dev-zero/aiida-gaussian-datatypes/master/setup.json",
      "name": "aiida-gaussian-datatypes",
      "package_name": "aiida_gaussian_datatypes",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA data plugin to manage gaussian datatypes (basis sets and pseudopotentials) as first-class citizens",
        "author": "Tiziano M\u00fcller",
        "author_email": "tiziano.mueller@chem.uzh.ch",
        "license": "MIT License",
        "home_page": "https://github.com/dev-zero/aiida-gaussian-datatypes",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "version": "0.5.1"
      },
      "aiida_version": ">=1.6.2",
      "entry_points": {
        "aiida.cmdline.data": {
          "gaussian.basisset": "aiida_gaussian_datatypes.basisset.cli:cli",
          "gaussian.pseudo": "aiida_gaussian_datatypes.pseudopotential.cli:cli"
        },
        "aiida.data": {
          "gaussian.basisset": "aiida_gaussian_datatypes.basisset.data:BasisSet",
          "gaussian.pseudo": "aiida_gaussian_datatypes.pseudopotential.data:Pseudopotential"
        },
        "aiida.groups": {
          "gaussian.basisset": "aiida_gaussian_datatypes.groups:BasisSetGroup",
          "gaussian.pseudo": "aiida_gaussian_datatypes.groups:PseudopotentialGroup"
        }
      },
      "commits_count": 10,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands, Groups)",
          "count": 4
        }
      ],
      "pip_install_cmd": "pip install aiida-gaussian-datatypes"
    },
    "aiida-gollum": {
      "code_home": "https://github.com/garsua/aiida-gollum/",
      "documentation_url": "https://aiida-gollum.readthedocs.io/",
      "entry_point_prefix": "gollum",
      "pip_url": "git+https://github.com/garsua/aiida-gollum",
      "name": "aiida-gollum",
      "package_name": "aiida_gollum",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Victor M. Garcia-Suarez",
        "author_email": "vm.garcia@cinn.es",
        "version": "0.12.0",
        "description": "A plugin for Gollum functionality within AiiDA framework.",
        "classifiers": [
          "License :: OSI Approved :: MIT License",
          "Framework :: AiiDA",
          "Programming Language :: Python :: 2.7",
          "Development Status :: 1 - Alpha"
        ]
      },
      "aiida_version": ">=0.12.0",
      "entry_points": {
        "aiida.calculations": {
          "gollum.gollum": "aiida_gollum.calculations.gollum:GollumCalculation"
        },
        "aiida.parsers": {
          "gollum.parser": "aiida_gollum.parsers.gollum:GollumParser"
        }
      },
      "commits_count": 0,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/garsua/aiida-gollum"
    },
    "aiida-graphql": {
      "code_home": "https://github.com/dev-zero/aiida-graphql",
      "entry_point_prefix": "graphql",
      "pip_url": "aiida-graphql",
      "name": "aiida-graphql",
      "package_name": "aiida_graphql",
      "hosted_on": "github.com",
      "metadata": {
        "description": "Strawberry-based GraphQL API Server for AiiDA",
        "author": "Tiziano M\u00fcller",
        "author_email": "tiziano.mueller@chem.uzh.ch",
        "license": "MIT",
        "home_page": "https://github.com/dev-zero/aiida-graphql",
        "classifiers": [
          "Development Status :: 3 - Alpha",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "version": "0.0.2"
      },
      "aiida_version": ">=1.0.0b6,<2.0.0",
      "entry_points": {},
      "commits_count": 0,
      "development_status": "alpha",
      "summaryinfo": [],
      "pip_install_cmd": "pip install aiida-graphql"
    },
    "aiida-gromacs": {
      "code_home": "https://github.com/jimboid/aiida-gromacs",
      "documentation_url": "https://aiida-gromacs.readthedocs.io/",
      "entry_point_prefix": "gromacs",
      "pip_url": "git+https://github.com/jimboid/aiida-gromacs",
      "name": "aiida-gromacs",
      "package_name": "aiida_gromacs",
      "hosted_on": "github.com",
      "metadata": {
        "description": "A plugin for using GROMACS with AiiDA for molecular dymanics simulations.",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Development Status :: 3 - Alpha",
          "Framework :: AiiDA"
        ],
        "author": "James Gebbie-Rayet",
        "author_email": "james.gebbie@stfc.ac.uk"
      },
      "aiida_version": ">=2.0,<3",
      "entry_points": {
        "aiida.data": {
          "gromacs.pdb2gmx": "aiida_gromacs.data.pdb2gmx:Pdb2gmxParameters",
          "gromacs.editconf": "aiida_gromacs.data.editconf:EditconfParameters",
          "gromacs.genion": "aiida_gromacs.data.genion:GenionParameters",
          "gromacs.grompp": "aiida_gromacs.data.grompp:GromppParameters",
          "gromacs.mdrun": "aiida_gromacs.data.mdrun:MdrunParameters",
          "gromacs.solvate": "aiida_gromacs.data.solvate:SolvateParameters"
        },
        "aiida.calculations": {
          "gromacs.pdb2gmx": {
            "description": [
              "AiiDA calculation plugin wrapping the 'gmx pdb2gmx' executable.",
              "",
              "    AiiDA plugin wrapper for converting PDB files to GRO files."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Pdb2gmxParameters",
                  "info": "Command line parameters for gmx pdb2gmx"
                },
                {
                  "name": "pdbfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input structure."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "grofile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output forcefield compliant file."
                },
                {
                  "name": "itpfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output forcefield compliant file."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "stdout",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "stdout"
                },
                {
                  "name": "topfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output forcefield compliant file."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                }
              ]
            },
            "class": "aiida_gromacs.calculations.pdb2gmx:Pdb2gmxCalculation"
          },
          "gromacs.editconf": {
            "description": [
              "AiiDA calculation plugin wrapping the 'gmx editconf' executable.",
              "",
              "    AiiDA plugin wrapper for adding a simulation box to structure file."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "grofile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input structure file."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "EditconfParameters",
                  "info": "Command line parameters for gmx editconf."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "grofile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output file containing simulation box."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "stdout",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "stdout"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                }
              ]
            },
            "class": "aiida_gromacs.calculations.editconf:EditconfCalculation"
          },
          "gromacs.genion": {
            "description": [
              "AiiDA calculation plugin wrapping the 'gmx genion' executable.",
              "",
              "    AiiDA plugin wrapper for converting PDB files to GRO files."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "GenionParameters",
                  "info": "Command line parameters for gmx genion"
                },
                {
                  "name": "topfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input topology file."
                },
                {
                  "name": "tprfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input tpr file."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "grofile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output gro file with ions added."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "stdout",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "stdout"
                },
                {
                  "name": "topfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output topology with ions added."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                }
              ]
            },
            "class": "aiida_gromacs.calculations.genion:GenionCalculation"
          },
          "gromacs.grompp": {
            "description": [
              "AiiDA calculation plugin wrapping the 'gmx grompp' executable.",
              "",
              "    AiiDA plugin wrapper for converting PDB files to GRO files."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "grofile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input structure"
                },
                {
                  "name": "mdpfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "grompp run file."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "GromppParameters",
                  "info": "Command line parameters for gmx grompp"
                },
                {
                  "name": "topfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input topology"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "itpfile",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "Restraints file"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "stdout",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "stdout"
                },
                {
                  "name": "tprfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output gro file ready for adding ions."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                }
              ]
            },
            "class": "aiida_gromacs.calculations.grompp:GromppCalculation"
          },
          "gromacs.mdrun": {
            "description": [
              "AiiDA calculation plugin wrapping the 'gmx mdrun' executable.",
              "",
              "    AiiDA plugin wrapper for converting PDB files to GRO files."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "MdrunParameters",
                  "info": "Command line parameters for gmx mdrun"
                },
                {
                  "name": "tprfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input structure."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "enfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output energy file."
                },
                {
                  "name": "grofile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output structure file."
                },
                {
                  "name": "logfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output log file."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "stdout",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "stdout"
                },
                {
                  "name": "trrfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output trajectory."
                },
                {
                  "name": "cptfile",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Checkpoint file."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                }
              ]
            },
            "class": "aiida_gromacs.calculations.mdrun:MdrunCalculation"
          },
          "gromacs.solvate": {
            "description": [
              "AiiDA calculation plugin wrapping the 'gmx solvate' executable.",
              "",
              "    AiiDA plugin wrapper for solvating a molecular system."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "grofile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input structure"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "SolvateParameters",
                  "info": "Command line parameters for gmx solvate."
                },
                {
                  "name": "topfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input topology"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "grofile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output solvated gro file."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "stdout",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "stdout"
                },
                {
                  "name": "topfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output topology file."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                }
              ]
            },
            "class": "aiida_gromacs.calculations.solvate:SolvateCalculation"
          },
          "general-MD": {
            "description": [
              "AiiDA calculation plugin wrapping an executable with user defined",
              "    input and output files."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "command",
                  "required": false,
                  "valid_types": "Str, NoneType",
                  "info": "The command used to execute the job."
                },
                {
                  "name": "input_files",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Dictionary of input files."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "output_files",
                  "required": false,
                  "valid_types": "List, NoneType",
                  "info": "List of output file names."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "log",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "link to the default file.log."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                },
                {
                  "status": 301,
                  "message": "Specified output file not produced by command."
                }
              ]
            },
            "class": "aiida_gromacs.calculations.generalMD:GeneralCalculation"
          }
        },
        "aiida.parsers": {
          "gromacs.pdb2gmx": "aiida_gromacs.parsers.pdb2gmx:Pdb2gmxParser",
          "gromacs.editconf": "aiida_gromacs.parsers.editconf:EditconfParser",
          "gromacs.genion": "aiida_gromacs.parsers.genion:GenionParser",
          "gromacs.grompp": "aiida_gromacs.parsers.grompp:GromppParser",
          "gromacs.mdrun": "aiida_gromacs.parsers.mdrun:MdrunParser",
          "gromacs.solvate": "aiida_gromacs.parsers.solvate:SolvateParser",
          "general-MD": "aiida_gromacs.parsers.generalMD:GeneralParser"
        },
        "aiida.workflows": {
          "gromacs.setup": {
            "description": [
              "WorkChain for setting up a gromacs simulation automatically."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "editconfparameters",
                  "required": true,
                  "valid_types": "EditconfParameters",
                  "info": "Command line parameters for gmx editconf"
                },
                {
                  "name": "genionparameters",
                  "required": true,
                  "valid_types": "GenionParameters",
                  "info": "Command line parameters for gmx genion"
                },
                {
                  "name": "gromppionsparameters",
                  "required": true,
                  "valid_types": "GromppParameters",
                  "info": "Command line parameters for gmx grompp"
                },
                {
                  "name": "gromppminparameters",
                  "required": true,
                  "valid_types": "GromppParameters",
                  "info": "Command line parameters for gmx grompp minimisation run"
                },
                {
                  "name": "gromppnptparameters",
                  "required": true,
                  "valid_types": "GromppParameters",
                  "info": "Command line parameters for gmx grompp npt equilibration run"
                },
                {
                  "name": "gromppnvtparameters",
                  "required": true,
                  "valid_types": "GromppParameters",
                  "info": "Command line parameters for gmx grompp nvt equilibration run"
                },
                {
                  "name": "gromppprodparameters",
                  "required": true,
                  "valid_types": "GromppParameters",
                  "info": "Command line parameters for gmx grompp production run"
                },
                {
                  "name": "ionsmdp",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "MD parameters for adding ions."
                },
                {
                  "name": "local_code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "mdrunparameters",
                  "required": true,
                  "valid_types": "MdrunParameters",
                  "info": "Command line parameters for gmx mdrun production run"
                },
                {
                  "name": "minimiseparameters",
                  "required": true,
                  "valid_types": "MdrunParameters",
                  "info": "Command line parameters for gmx mdrun minimisation run"
                },
                {
                  "name": "minmdp",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "MD parameters for minimisation."
                },
                {
                  "name": "nptmdp",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "MD parameters for NPT equilibration."
                },
                {
                  "name": "nptparameters",
                  "required": true,
                  "valid_types": "MdrunParameters",
                  "info": "Command line parameters for gmx mdrun npt equilibration run"
                },
                {
                  "name": "nvtmdp",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "MD parameters for NVT equilibration."
                },
                {
                  "name": "nvtparameters",
                  "required": true,
                  "valid_types": "MdrunParameters",
                  "info": "Command line parameters for gmx mdrun nvt equilibration run"
                },
                {
                  "name": "pdb2gmxparameters",
                  "required": true,
                  "valid_types": "Pdb2gmxParameters",
                  "info": "Command line parameters for gmx pdb2gmx"
                },
                {
                  "name": "pdbfile",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input structure."
                },
                {
                  "name": "prodmdp",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "MD parameters for production run."
                },
                {
                  "name": "solvateparameters",
                  "required": true,
                  "valid_types": "SolvateParameters",
                  "info": "Command line parameters for gmx solvate"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "remote_code",
                  "required": false,
                  "valid_types": "Code, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "result",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_gromacs.workflows.simsetup:SetupWorkChain"
          }
        }
      },
      "commits_count": 54,
      "development_status": "alpha",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 7
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 7
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 6
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/jimboid/aiida-gromacs"
    },
    "aiida-grouppathx": {
      "code_home": "https://github.com/zhubonan/aiida-grouppathx",
      "development_status": "beta",
      "entry_point_prefix": "grouppathx",
      "pip_url": "aiida-grouppathx",
      "name": "aiida-grouppathx",
      "package_name": "aiida_grouppathx",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin provides the GroupPathX class",
        "author_email": "Bonan Zhu <zhubonan@outlook.com>",
        "classifiers": [
          "Development Status :: 3 - Alpha",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "0.2.0"
      },
      "aiida_version": ">=1.6.4,<3",
      "entry_points": {
        "aiida.cmdline.data": {
          "gpx": "aiida_grouppathx.cli:grouppathx_cli"
        }
      },
      "commits_count": 7,
      "summaryinfo": [
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-grouppathx"
    },
    "aiida-gudhi": {
      "code_home": "https://github.com/ltalirz/aiida-gudhi",
      "development_status": "beta",
      "entry_point_prefix": "gudhi",
      "pip_url": "aiida-gudhi",
      "plugin_info": "https://raw.github.com/ltalirz/aiida-gudhi/master/setup.json",
      "name": "aiida-gudhi",
      "package_name": "aiida_gudhi",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for the [GUDHI](http://gudhi.gforge.inria.fr/) library for topological data analysis.",
        "author": "Leopold Talirz",
        "author_email": "leopold.talirz@gmail.com",
        "license": "MIT",
        "home_page": "https://github.com/ltalirz/aiida-gudhi",
        "classifiers": [
          "Programming Language :: Python"
        ],
        "version": "0.1.0a3"
      },
      "aiida_version": "*",
      "entry_points": {
        "aiida.calculations": {
          "gudhi.rdm": "aiida_gudhi.calculations.rips:RipsDistanceMatrixCalculation"
        },
        "aiida.data": {
          "gudhi.rdm": "aiida_gudhi.data.rips:RipsDistanceMatrixParameters"
        },
        "aiida.parsers": {
          "gudhi.rdm": "aiida_gudhi.parsers.rips:RipsParser"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-gudhi"
    },
    "aiida-gulp": {
      "code_home": "https://github.com/aiidaplugins/aiida-gulp",
      "development_status": "beta",
      "documentation_url": "https://aiida-gulp.readthedocs.io",
      "entry_point_prefix": "gulp",
      "pip_url": "aiida-gulp",
      "plugin_info": "https://raw.githubusercontent.com/aiidaplugins/aiida-gulp/master/setup.json",
      "name": "aiida-gulp",
      "package_name": "aiida_gulp",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for running the GULP MD code",
        "author": "Chris Sewell",
        "author_email": "chrisj_sewell@hotmail.com",
        "license": "MIT",
        "home_page": "https://github.com/chrisjsewell/aiida-gulp",
        "classifiers": [
          "Framework :: AiiDA",
          "Programming Language :: Python",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3.6",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "0.10.0b5"
      },
      "aiida_version": "1.0.0b5",
      "entry_points": {
        "aiida.calculations": {
          "gulp.fitting": "aiida_gulp.calculations.gulp_fitting:GulpFittingCalculation",
          "gulp.optimize": "aiida_gulp.calculations.gulp_optimize:GulpOptCalculation",
          "gulp.single": "aiida_gulp.calculations.gulp_single:GulpSingleCalculation"
        },
        "aiida.cmdline.data": {
          "gulp.potentials": "aiida_gulp.cmndline.potentials:potentials"
        },
        "aiida.data": {
          "gulp.potential": "aiida_gulp.data.potential:EmpiricalPotential",
          "gulp.symmetry": "aiida_gulp.data.symmetry:SymmetryData"
        },
        "aiida.parsers": {
          "gulp.fitting": "aiida_gulp.parsers.parse_fitting:GulpFittingParser",
          "gulp.optimize": "aiida_gulp.parsers.parse_opt:GulpOptParser",
          "gulp.single": "aiida_gulp.parsers.parse_single:GulpSingleParser"
        },
        "aiida.workflows": {},
        "console_scripts": {
          "gulp_mock": "aiida_gulp.tests.mock_gulp:main"
        },
        "gulp.potentials": {
          "lj": "aiida_gulp.potentials.lj:PotentialWriterLJ",
          "reaxff": "aiida_gulp.potentials.reaxff:PotentialWriterReaxff"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 3
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 3
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands, Gulp potentials)",
          "count": 3
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-gulp"
    },
    "aiida-kkr": {
      "code_home": "https://github.com/JuDFTteam/aiida-kkr/tree/develop",
      "development_status": "stable",
      "documentation_url": "https://aiida-kkr.readthedocs.io/",
      "entry_point_prefix": "kkr",
      "pip_url": "aiida-kkr",
      "name": "aiida-kkr",
      "package_name": "aiida_kkr",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for the JuKKR codes",
        "author_email": "Philipp Ruessmann <p.ruessmann@fz-juelich.de>, Jens Broeder <j.broeder@fz-juelich.de>, Fabian Bertoldo <f.bertoldo@fz-juelich.de>",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "2.0.0"
      },
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 131,
      "summaryinfo": [],
      "pip_install_cmd": "pip install aiida-kkr"
    },
    "aiida-lammps": {
      "code_home": "https://github.com/aiidaplugins/aiida-lammps",
      "development_status": "beta",
      "entry_point_prefix": "lammps",
      "pip_url": "git+https://github.com/aiidaplugins/aiida-lammps",
      "name": "aiida-lammps",
      "package_name": "aiida_lammps",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Abel Carreras, Chris Sewell",
        "author_email": "chrisj_sewell@hotmail.com",
        "version": "0.8.0",
        "description": "AiiDA plugin for LAMMPS",
        "classifiers": [
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Physics",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.4.0,<2.0.0",
      "entry_points": {
        "aiida.calculations": {
          "lammps.combinate": "aiida_lammps.calculations.lammps.combinate:CombinateCalculation",
          "lammps.force": "aiida_lammps.calculations.lammps.force:ForceCalculation",
          "lammps.md": "aiida_lammps.calculations.lammps.md:MdCalculation",
          "lammps.md.multi": "aiida_lammps.calculations.lammps.md_multi:MdMultiCalculation",
          "lammps.optimize": "aiida_lammps.calculations.lammps.optimize:OptimizeCalculation",
          "dynaphopy": "aiida_lammps.calculations.dynaphopy: DynaphopyCalculation"
        },
        "aiida.parsers": {
          "lammps.force": "aiida_lammps.parsers.lammps.force:ForceParser",
          "lammps.md": "aiida_lammps.parsers.lammps.md:MdParser",
          "lammps.md.multi": "aiida_lammps.parsers.lammps.md_multi:MdMultiParser",
          "lammps.optimize": "aiida_lammps.parsers.lammps.optimize:OptimizeParser",
          "dynaphopy": "aiida_lammps.parsers.dynaphopy: DynaphopyParser"
        },
        "aiida.data": {
          "lammps.potential": "aiida_lammps.data.potential:EmpiricalPotential",
          "lammps.trajectory": "aiida_lammps.data.trajectory:LammpsTrajectory"
        },
        "lammps.potentials": {
          "eam": "aiida_lammps.data.pot_plugins.eam:EAM",
          "lennard_jones": "aiida_lammps.data.pot_plugins.lennard_jones:LennardJones",
          "reaxff": "aiida_lammps.data.pot_plugins.reaxff:Reaxff",
          "tersoff": "aiida_lammps.data.pot_plugins.tersoff:Tersoff"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 6
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 5
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        },
        {
          "colorclass": "orange",
          "text": "Other (Lammps potentials)",
          "count": 4
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/aiidaplugins/aiida-lammps"
    },
    "aiida-lsmo": {
      "code_home": "https://github.com/lsmo-epfl/aiida-lsmo",
      "development_status": "stable",
      "entry_point_prefix": "lsmo",
      "pip_url": "git+https://github.com/lsmo-epfl/aiida-lsmo",
      "name": "aiida-lsmo",
      "package_name": "aiida_lsmo",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Aliaksandr Yakutovich, Daniele Ongari, Leopold Talirz",
        "author_email": "aliaksandr.yakutovich@epfl.ch",
        "version": "1.0.0",
        "description": "AiiDA workflows for the LSMO laboratory at EPFL",
        "classifiers": [
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7"
        ]
      },
      "aiida_version": ">=1.0.0",
      "entry_points": {
        "aiida.calculations": {
          "lsmo.ff_builder": {
            "description": [
              "AiiDA calcfunction to assemble force filed parameters into SinglefileData for Raspa."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "params",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "cif_molecule",
                  "required": false,
                  "valid_types": "Data, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.calcfunctions:ff_builder"
          },
          "lsmo.calc_ch4_working_cap": {
            "description": [
              "Compute the CH4 working capacity from the output_parameters Dict of IsothermWorkChain.",
              "    This must have run calculations at 5.8 and 65.0 bar (at 298K), which are the standard reference for the evaluation.",
              "",
              "    The results can be compared with Simon2015 (10.1039/C4EE03515A)."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "isot_dict",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.calcfunctions:calc_ch4_working_cap"
          },
          "lsmo.calc_h2_working_cap": {
            "description": [
              "Compute the H2 working capacity from the output_parameters Dict of MultiTempIsothermWorkChain.",
              "    This must have run calculations at 1, 5 and 100 bar at 77, 198, 298 K.",
              "    The US DOE Target for the Onboard Storage of Hydrogen Vehicles set the bar to 4.5 wt% and 30 g/L (Kapelewski2018).",
              "    Case-A: near-ambient-T adsorption, 100bar/198K to 5bar/298K (cf. Kapelewski2018, 10.1021/acs.chemmater.8b03276)",
              "    ....... Ni2(m-dobdc), experimental: 23.0 g/L",
              "    Case-B: low T adsorption, 100-5bar at 77K (cf. Ahmed2019, 10.1038/s41467-019-09365-w)",
              "    ....... NU-100, best experimental: 35.5 g/L",
              "    Case-C: low T adsorption at low discharge, 100-1bar at 77K (cf. Thornton2017, 10.1021/acs.chemmater.6b04933)",
              "    ....... hypMOF-5059389, best simulated: 40.0 g/L"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "isotmt_dict",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.calcfunctions:calc_h2_working_cap"
          },
          "lsmo.calc_o2_working_cap": {
            "description": [
              "Compute the O2 working capacity from the output_parameters Dict of IsothermWorkChain.",
              "    This must have run calculations at 5 and 140.0 bar (at 298K), to be consistent with the screening of Moghadam2018",
              "    (10.1038/s41467-018-03892-8), for which the MOF ANUGIA (UMCM-152) was found to have a volumetric working capacity",
              "    of 249 vSTP/v (simulations are nearly identical to experiments).",
              "    Consider that, at the same conditions, an empty thank can only store 136 vSTP/v, and a comparable working capacity",
              "    can only br obtained compressing till 300bar."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "isot_dict",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.calcfunctions:calc_o2_working_cap"
          },
          "lsmo.calc_selectivity": {
            "description": [
              "Compute the selectivity of gas A on gas B as S = kH_a/kH_b.",
              "    Note that if the material is not porous to one of the materials, the result is simply {'is_porous': False}.",
              "    To maintain the comptaibility with v1, intead of checking 'is_porous', it checks for the henry_coefficient_average",
              "    key in the Dict."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "isot_dict_a",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "isot_dict_b",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.calcfunctions:calc_selectivity"
          }
        },
        "aiida.parsers": {
          "lsmo.cp2k_bsse_parser": "aiida_lsmo.parsers:Cp2kBsseParser",
          "lsmo.cp2k_advanced_parser": "aiida_lsmo.parsers:Cp2kAdvancedParser"
        },
        "aiida.workflows": {
          "lsmo.binding_site": {
            "description": [
              "A workchain that combines SimAnnealing & Cp2kBindingEnergy"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cp2k_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "molecule",
                  "required": true,
                  "valid_types": "Str, Dict",
                  "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Parameters for the SimAnnealing workchain: will be merged with default ones ..."
                },
                {
                  "name": "raspa_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "Adsorbent framework CIF."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "protocol_modify",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Specify custom settings that overvrite the yaml settings"
                },
                {
                  "name": "protocol_tag",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The tag of the protocol tag.yaml. NOTE: only the settings are read, stage i ..."
                },
                {
                  "name": "protocol_yaml",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Specify a custom yaml file. NOTE: only the settings are read, stage is set  ..."
                },
                {
                  "name": "starting_settings_idx",
                  "required": false,
                  "valid_types": "Int",
                  "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
                }
              ],
              "outputs": [
                {
                  "name": "dft",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "ff",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.workchains:BindingSiteWorkChain"
          },
          "lsmo.cp2k_binding_energy": {
            "description": [
              "Submits Cp2kBase work chain for structure + molecule system, first optimizing the geometry of the molecule and",
              "    later computing the BSSE corrected interaction energy.",
              "    This work chain is inspired to Cp2kMultistage, and shares some logics and data from it."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cp2k_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "molecule",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Input molecule in the unit cell of the structure."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Input structure that contains the molecule."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "protocol_modify",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Specify custom settings that overvrite the yaml settings"
                },
                {
                  "name": "protocol_tag",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The tag of the protocol tag.yaml. NOTE: only the settings are read, stage i ..."
                },
                {
                  "name": "protocol_yaml",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Specify a custom yaml file. NOTE: only the settings are read, stage is set  ..."
                },
                {
                  "name": "starting_settings_idx",
                  "required": false,
                  "valid_types": "Int",
                  "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
                }
              ],
              "outputs": [
                {
                  "name": "loaded_molecule",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Molecule geometry in the unit cell."
                },
                {
                  "name": "loaded_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Geometry of the system with both fragments."
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Info regarding the binding energy of the system."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 901,
                  "message": "Specified starting_settings_idx that is not existing, or any in between 0 and idx is missing"
                },
                {
                  "status": 902,
                  "message": "Settings for Stage0 are not ok but there are no more robust settings to try"
                },
                {
                  "status": 903,
                  "message": "Something important was not printed correctly and the parsing of the first calculation failed"
                }
              ]
            },
            "class": "aiida_lsmo.workchains.cp2k_binding_energy:Cp2kBindingEnergyWorkChain"
          },
          "lsmo.cp2k_multistage": {
            "description": [
              "Submits Cp2kBase workchains for ENERGY, GEO_OPT, CELL_OPT and MD jobs iteratively",
              "    The protocol_yaml file contains a series of settings_x and stage_x:",
              "    the workchains starts running the settings_0/stage_0 calculation, and, in case of a failure, changes the settings",
              "    untill the SCF of stage_0 converges. Then it uses the same settings to run the next stages (i.e., stage_1, etc.)."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cp2k_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "min_cell_size",
                  "required": false,
                  "valid_types": "Float",
                  "info": "To avoid using k-points, extend the cell so that min(perp_width)>min_cell_s ..."
                },
                {
                  "name": "parent_calc_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "Provide an initial parent folder that contains the wavefunction for restart"
                },
                {
                  "name": "protocol_modify",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Specify custom settings that overvrite the yaml settings"
                },
                {
                  "name": "protocol_tag",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The tag of the protocol to be read from {tag}.yaml unless protocol_yaml inp ..."
                },
                {
                  "name": "protocol_yaml",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Specify a custom yaml file with the multistage settings (and ignore protoco ..."
                },
                {
                  "name": "starting_settings_idx",
                  "required": false,
                  "valid_types": "Int",
                  "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "Input structure"
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "last_input_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "CP2K input parameters used (and possibly working) used in the last stage"
                },
                {
                  "name": "output_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Output CP2K parameters of all the stages, merged together"
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "Processed structure (missing if only ENERGY calculation is performed)"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 901,
                  "message": "Specified starting_settings_idx that is not existing, or any in between 0 and idx is missing"
                },
                {
                  "status": 902,
                  "message": "Settings for Stage0 are not ok but there are no more robust settings to try"
                },
                {
                  "status": 903,
                  "message": "Something important was not printed correctly and the parsing of the first calculation failed"
                }
              ]
            },
            "class": "aiida_lsmo.workchains:Cp2kMultistageWorkChain"
          },
          "lsmo.cp2k_multistage_ddec": {
            "description": [
              "A workchain that combines: Cp2kMultistageWorkChain + Cp2kDdecWorkChain"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cp2k_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "ddec",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "min_cell_size",
                  "required": false,
                  "valid_types": "Float",
                  "info": "To avoid using k-points, extend the cell so that min(perp_width)>min_cell_s ..."
                },
                {
                  "name": "parent_calc_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "Provide an initial parent folder that contains the wavefunction for restart"
                },
                {
                  "name": "protocol_modify",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Specify custom settings that overvrite the yaml settings"
                },
                {
                  "name": "protocol_tag",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The tag of the protocol to be read from {tag}.yaml unless protocol_yaml inp ..."
                },
                {
                  "name": "protocol_yaml",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Specify a custom yaml file with the multistage settings (and ignore protoco ..."
                },
                {
                  "name": "starting_settings_idx",
                  "required": false,
                  "valid_types": "Int",
                  "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "Input structure"
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "structure_ddec",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "structure with DDEC charges"
                },
                {
                  "name": "last_input_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "CP2K input parameters used (and possibly working) used in the last stage"
                },
                {
                  "name": "output_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Output CP2K parameters of all the stages, merged together"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.workchains:Cp2kMultistageDdecWorkChain"
          },
          "lsmo.isotherm": {
            "description": [
              "Workchain that computes volpo and blocking spheres: if accessible volpo>0",
              "    it also runs a raspa widom calculation for the Henry coefficient."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "molecule",
                  "required": true,
                  "valid_types": "Str, Dict",
                  "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Parameters for the Isotherm workchain (see workchain.schema for default val ..."
                },
                {
                  "name": "raspa_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "Adsorbent framework CIF."
                },
                {
                  "name": "zeopp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "geometric",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Results of the single temperature wc: keys can vay depending on is_porous a ..."
                },
                {
                  "name": "block",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Blocked pockets fileoutput file."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.workchains:IsothermWorkChain"
          },
          "lsmo.isotherm_multi_temp": {
            "description": [
              "Run IsothermWorkChain for multiple temperatures: first compute geometric properties",
              "    and then submit Widom+GCMC at different temperatures in parallel"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "molecule",
                  "required": true,
                  "valid_types": "Str, Dict",
                  "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Parameters for the Isotherm workchain (see workchain.schema for default val ..."
                },
                {
                  "name": "raspa_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "Adsorbent framework CIF."
                },
                {
                  "name": "zeopp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "geometric",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Results of isotherms run at different temperatures."
                },
                {
                  "name": "block",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Blocked pockets fileoutput file."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.workchains:IsothermMultiTempWorkChain"
          },
          "lsmo.isotherm_calc_pe": {
            "description": [
              "Compute CO2 parassitic energy (PE) after running IsothermWorkChain for CO2 and N2 at 300K."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "raspa_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "Adsorbent framework CIF."
                },
                {
                  "name": "zeopp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "geometric",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Parameters for Isotherm work chain"
                },
                {
                  "name": "pe_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Parameters for PE process modelling"
                }
              ],
              "outputs": [
                {
                  "name": "co2",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "n2",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Output parmaters of a calc_PE calculations"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.workchains:IsothermCalcPEWorkChain"
          },
          "lsmo.zeopp_multistage_ddec": {
            "description": [
              "A workchain that combines: Zeopp + Cp2kMultistageWorkChain + Cp2kDdecWorkChain + Zeopp"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cp2k_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "ddec",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "input structure"
                },
                {
                  "name": "zeopp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "min_cell_size",
                  "required": false,
                  "valid_types": "Float",
                  "info": "To avoid using k-points, extend the cell so that min(perp_width)>min_cell_s ..."
                },
                {
                  "name": "parent_calc_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "Provide an initial parent folder that contains the wavefunction for restart"
                },
                {
                  "name": "protocol_modify",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Specify custom settings that overvrite the yaml settings"
                },
                {
                  "name": "protocol_tag",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The tag of the protocol to be read from {tag}.yaml unless protocol_yaml inp ..."
                },
                {
                  "name": "protocol_yaml",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Specify a custom yaml file with the multistage settings (and ignore protoco ..."
                },
                {
                  "name": "starting_settings_idx",
                  "required": false,
                  "valid_types": "Int",
                  "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "structure_ddec",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "structure with DDEC charges"
                },
                {
                  "name": "zeopp_after_opt",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "zeopp_before_opt",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "last_input_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "CP2K input parameters used (and possibly working) used in the last stage"
                },
                {
                  "name": "output_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Output CP2K parameters of all the stages, merged together"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.workchains:ZeoppMultistageDdecWorkChain"
          },
          "lsmo.sim_annealing": {
            "description": [
              "A work chain to compute the minimum energy geometry of a molecule inside a framework, using simulated annealing,",
              "    i.e., decreasing the temperature of a Monte Carlo simulation and finally running and energy minimization step."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "molecule",
                  "required": true,
                  "valid_types": "Str, Dict",
                  "info": "Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dic ..."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Parameters for the SimAnnealing workchain: will be merged with default ones ..."
                },
                {
                  "name": "raspa_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "Adsorbent framework CIF."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "loaded_molecule",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "CIF containing the final postition of the molecule."
                },
                {
                  "name": "loaded_structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "CIF containing the loaded structure."
                },
                {
                  "name": "output_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Information about the final configuration."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.workchains.sim_annealing:SimAnnealingWorkChain"
          },
          "lsmo.nanoporous_screening_1": {
            "description": [
              "A workchain that combines: ZeoppMultistageDdecWorkChain wc1 and IsothermCalcPEWorkChain wc2.",
              "    In future I will use this to include more applications to run in parallel."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "cp2k_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "ddec",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "raspa_base",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "input structure"
                },
                {
                  "name": "zeopp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "geometric",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "[Only used by IsothermMultiTempWorkChain] Already computed geometric proper ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "min_cell_size",
                  "required": false,
                  "valid_types": "Float",
                  "info": "To avoid using k-points, extend the cell so that min(perp_width)>min_cell_s ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Parameters for Isotherm work chain"
                },
                {
                  "name": "parent_calc_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "Provide an initial parent folder that contains the wavefunction for restart"
                },
                {
                  "name": "pe_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Parameters for PE process modelling"
                },
                {
                  "name": "protocol_modify",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Specify custom settings that overvrite the yaml settings"
                },
                {
                  "name": "protocol_tag",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The tag of the protocol to be read from {tag}.yaml unless protocol_yaml inp ..."
                },
                {
                  "name": "protocol_yaml",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Specify a custom yaml file with the multistage settings (and ignore protoco ..."
                },
                {
                  "name": "starting_settings_idx",
                  "required": false,
                  "valid_types": "Int",
                  "info": "If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{i ..."
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_lsmo.workchains:NanoporousScreening1WorkChain"
          }
        }
      },
      "commits_count": 17,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 5
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 2
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 10
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/lsmo-epfl/aiida-lsmo"
    },
    "aiida-metavo-scheduler": {
      "code_home": "https://github.com/pzarabadip/aiida-metavo-scheduler",
      "development_status": "stable",
      "entry_point_prefix": "metavo_scheduler",
      "pip_url": "git+https://github.com/pzarabadip/aiida-metavo-scheduler",
      "name": "aiida-metavo-scheduler",
      "package_name": "aiida_metavo_scheduler",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Pezhman Zarabadi-Poor",
        "author_email": "pzarabadip@gmail.com",
        "version": "1.0.0",
        "description": "",
        "classifiers": [
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Topic :: Scientific/Engineering"
        ]
      },
      "aiida_version": ">=1.0.0,<1.6",
      "entry_points": {
        "aiida.cmdline.computer.configure": {
          "sshmetavo": "aiida_metavo_scheduler.metavo.ssh_metavo:CONFIGURE_SSH_CMD"
        },
        "aiida.schedulers": {
          "pbsprometavo": "aiida_metavo_scheduler.metavo.pbspro_metavo:PbsproSchedulerMetaVO"
        },
        "aiida.transports": {
          "sshmetavo": "aiida_metavo_scheduler.metavo.ssh_metavo:SshTransport"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "orange",
          "text": "Other (Cmdline computer configure, Schedulers, Transports)",
          "count": 3
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/pzarabadip/aiida-metavo-scheduler"
    },
    "aiida-mpds": {
      "code_home": "https://github.com/mpds-io/mpds-aiida",
      "development_status": "beta",
      "documentation_url": "https://github.com/mpds-io/mpds-aiida",
      "entry_point_prefix": "mpds",
      "pip_url": "git+https://github.com/mpds-io/mpds-aiida",
      "name": "aiida-mpds",
      "package_name": "aiida_mpds",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Andrey Sobolev",
        "author_email": "as@tilde.pro",
        "version": "",
        "description": "Aiida workflows for MPDS based on CRYSTAL",
        "classifiers": [
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Physics",
          "Topic :: Scientific/Engineering :: Information Analysis",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.0.1",
      "entry_points": {
        "aiida.workflows": {
          "crystal.mpds": "mpds_aiida.workflows.mpds:MPDSStructureWorkchain",
          "crystal.cif": "mpds_aiida.workflows.cif:CIFStructureWorkchain",
          "crystal.aiida": "mpds_aiida.workflows.aiida:AiidaStructureWorkchain"
        }
      },
      "commits_count": 13,
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 3
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/mpds-io/mpds-aiida"
    },
    "aiida-muon": {
      "entry_point_prefix": "muon",
      "code_home": "https://github.com/positivemuon/aiida-muon",
      "version_file": "https://github.com/positivemuon/aiida-muon/blob/main/aiida_muon/__init__.py",
      "pip_url": "git+https://github.com/positivemuon/aiida-muon",
      "name": "aiida-muon",
      "package_name": "aiida_muon",
      "hosted_on": "github.com",
      "metadata": {
        "description": "aiida-muon is allows to find candiate muon implantation sites and hyperfine field by DFT supercell relaxations and from further symmetry and kinetics analysis.  ",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Development Status :: 2 - Pre-Alpha",
          "Framework :: AiiDA"
        ],
        "author": "Muon  group Parma"
      },
      "aiida_version": ">=2.0,<3",
      "entry_points": {
        "aiida.workflows": {
          "muon.find_muon": {
            "description": [
              "FindMuonWorkChain finds the candidate implantation site for a positive muon.",
              "    It first performs DFT relaxation calculations for a set of initial muon sites.",
              "    It then analyzes the results of these calculations and finds candidate muon sites.",
              "    If there are magnetic inequivalent sites not initially, they are recalculated",
              "    It further calculates the muon contact hyperfine field at these candidate sites."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "sc_matrix",
                  "required": true,
                  "valid_types": "List",
                  "info": " List of length 1 for supercell size "
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Input initial structure"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "mu_spacing",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "Minimum distance in Angstrom between two starting muon positions  generated ..."
                },
                {
                  "name": "qe",
                  "required": false,
                  "valid_types": "",
                  "info": "Input parameters, settings and options for QE DFT calculations"
                }
              ],
              "outputs": [
                {
                  "name": "all_index_uuid",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "all_sites",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "unique_sites",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "unique_sites_dipolar",
                  "required": false,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "unique_sites_hyperfine",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 405,
                  "message": "One of the PwRelaxWorkChain subprocesses failed"
                },
                {
                  "status": 406,
                  "message": "One of the PwBaseWorkChain subprocesses failed"
                },
                {
                  "status": 407,
                  "message": "One of the PPWorkChain subprocesses failed"
                }
              ]
            },
            "class": "aiida_muon.workflows.find_muon:FindMuonWorkChain"
          }
        }
      },
      "commits_count": 15,
      "development_status": "pre-alpha",
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/positivemuon/aiida-muon"
    },
    "aiida-musconv": {
      "entry_point_prefix": "musconv",
      "code_home": "https://github.com/positivemuon/aiida-musconv",
      "version_file": "https://github.com/positivemuon/aiida-musconv/blob/main/aiida_musconv/__init__.py",
      "pip_url": "git+https://github.com/positivemuon/aiida-musconv",
      "name": "aiida-musconv",
      "package_name": "aiida_musconv",
      "hosted_on": "github.com",
      "metadata": {
        "description": "aiida-musconv is a plugin that allows to obtain converged supercell size for an interstitial impurity calculation.",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Development Status :: 2 - Pre-Alpha",
          "Framework :: AiiDA"
        ],
        "author": "Muon  group Parma"
      },
      "aiida_version": ">=2.0,<3",
      "entry_points": {
        "aiida.workflows": {
          "musconv": {
            "description": [
              "WorkChain for finding converged supercell for interstitial impurity calculation"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "pwscf",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Input initial structure"
                },
                {
                  "name": "kpoints_distance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "The minimum desired distance in 1/\u00c5 between k-points in reciprocal space."
                },
                {
                  "name": "max_iter_num",
                  "required": false,
                  "valid_types": "Int, NoneType",
                  "info": "Maximum number of iteration in the supercell convergence loop"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "min_length",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "The minimum length of the smallest lattice vector for the first generated s ..."
                },
                {
                  "name": "pseudofamily",
                  "required": false,
                  "valid_types": "Str, NoneType",
                  "info": "The label of the pseudo family"
                }
              ],
              "outputs": [
                {
                  "name": "Converged_SCmatrix",
                  "required": true,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "Converged_supercell",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 402,
                  "message": "one of the PwCalculation subprocesses failed"
                },
                {
                  "status": 702,
                  "message": "Max number of supercell convergence reached "
                },
                {
                  "status": 704,
                  "message": "Error in fitting the forces to an exponential"
                }
              ]
            },
            "class": "aiida_musconv.workflows.musconv:MusconvWorkChain"
          }
        }
      },
      "commits_count": 43,
      "development_status": "pre-alpha",
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/positivemuon/aiida-musconv"
    },
    "aiida-nanotech-empa": {
      "code_home": "https://github.com/nanotech-empa/aiida-nanotech-empa",
      "development_status": "beta",
      "entry_point_prefix": "nanotech_empa",
      "pip_url": "git+https://github.com/nanotech-empa/aiida-nanotech-empa",
      "name": "aiida-nanotech-empa",
      "package_name": "aiida_nanotech_empa",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 31,
      "summaryinfo": [],
      "pip_install_cmd": "pip install git+https://github.com/nanotech-empa/aiida-nanotech-empa"
    },
    "aiida-nims-scheduler": {
      "code_home": "https://github.com/atztogo/aiida-nims-scheduler",
      "development_status": "stable",
      "documentation_url": "https://github.com/atztogo/aiida-nims-scheduler",
      "entry_point_prefix": "nims_scheduler",
      "pip_url": "git+https://github.com/atztogo/aiida-nims-scheduler",
      "name": "aiida-nims-scheduler",
      "package_name": "aiida_nims_scheduler",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 19,
      "summaryinfo": [],
      "pip_install_cmd": "pip install git+https://github.com/atztogo/aiida-nims-scheduler"
    },
    "aiida-nwchem": {
      "code_home": "https://github.com/aiidateam/aiida-nwchem",
      "documentation_url": "https://aiida-nwchem.readthedocs.io/",
      "entry_point_prefix": "nwchem",
      "pip_url": "aiida-nwchem",
      "plugin_info": "https://raw.githubusercontent.com/aiidateam/aiida-nwchem/master/setup.json",
      "name": "aiida-nwchem",
      "package_name": "aiida_nwchem",
      "hosted_on": "github.com",
      "metadata": {
        "description": "The official AiiDA plugin for NWChem",
        "author_email": "The AiiDA team <developers@aiida.net>",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering"
        ],
        "version": "3.0.0"
      },
      "aiida_version": ">=2.0,<3.0",
      "entry_points": {
        "aiida.calculations": {
          "nwchem.base": {
            "description": [
              "Base calculation class for NWChem."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "input_file",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "NWChem input file"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData, FolderData, NoneType",
                  "info": "Remote directory of a completed NWChem calculation to restart from."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The relaxed output structure."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Required output files are missing."
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                },
                {
                  "status": 302,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete."
                },
                {
                  "status": 313,
                  "message": "The stdout contains multiple calculations"
                },
                {
                  "status": 340,
                  "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception."
                }
              ]
            },
            "class": "aiida_nwchem.calculations.nwchem:NwchemBaseCalculation"
          },
          "nwchem.nwchem": {
            "description": [
              "Base calculation class for NWChem.",
              "",
              "    Synthesizes NWChem input file from parameter dictionary and StructureData."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Input parameters"
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure, with or without a cell"
                },
                {
                  "name": "add_cell",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "The input structure, with or without a cell"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData, FolderData, NoneType",
                  "info": "Remote directory of a completed NWChem calculation to restart from."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The relaxed output structure."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Required output files are missing."
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                },
                {
                  "status": 302,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete."
                },
                {
                  "status": 313,
                  "message": "The stdout contains multiple calculations"
                },
                {
                  "status": 340,
                  "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception."
                }
              ]
            },
            "class": "aiida_nwchem.calculations.nwchem:NwchemCalculation"
          }
        },
        "aiida.parsers": {
          "nwchem.nwchem": "aiida_nwchem.parsers.nwchem:NwchemBaseParser"
        },
        "aiida.workflows": {
          "nwchem.base": {
            "description": [
              "Workchain to run an NWChem calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "nwchem",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The relaxed output structure."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_nwchem.workflows.base:NwchemBaseWorkChain"
          }
        }
      },
      "commits_count": 20,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 2
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-nwchem"
    },
    "aiida-open_circuit_voltage": {
      "entry_point_prefix": "quantumespresso.ocv",
      "code_home": "https://github.com/tsthakur/aiida-open_circuit_voltage",
      "name": "aiida-open_circuit_voltage",
      "package_name": "aiida_open_circuit_voltage",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Tushar Thakur",
        "author_email": "tushar.thakur@epfl.ch",
        "version": "0.1.0",
        "description": "The AiiDA plugin to calculate ocv at various charge of states using QE",
        "classifiers": [
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Development Status :: 3 - Alpha",
          "Natural Language :: English",
          "Intended Audience :: Science/Research"
        ]
      },
      "aiida_version": ">=1.1.0,<2.0.0",
      "entry_points": {
        "aiida.workflows": {
          "quantumespresso.ocv.ocvwc": "aiida_open_circuit_voltage.workflows.workchain:OCVWorkChain"
        }
      },
      "commits_count": 31,
      "development_status": "alpha",
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "See source code repository."
    },
    "aiida-optimize": {
      "code_home": "https://github.com/greschd/aiida-optimize",
      "documentation_url": "https://aiida-optimize.readthedocs.io",
      "entry_point_prefix": "optimize",
      "pip_url": "aiida-optimize",
      "plugin_info": "https://raw.githubusercontent.com/greschd/aiida-optimize/master/setup.json",
      "name": "aiida-optimize",
      "package_name": "aiida_optimize",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Plugin for running optimization algorithms.",
        "author": "Dominik Gresch",
        "author_email": "greschd@gmx.ch",
        "license": "Apache 2.0",
        "home_page": "https://aiida-optimize.readthedocs.io/",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "1.0.2"
      },
      "aiida_version": ">=2.0.0,<3.0.0",
      "entry_points": {
        "aiida.workflows": {
          "optimize.optimize": {
            "description": [
              "Runs an optimization procedure, given an optimization engine that defines the optimization",
              "    algorithm, and a process which evaluates the function to be optimized."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "engine",
                  "required": true,
                  "valid_types": "Str",
                  "info": "Engine that runs the optimization."
                },
                {
                  "name": "engine_kwargs",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Keyword arguments passed to the optimization engine."
                },
                {
                  "name": "evaluate_process",
                  "required": true,
                  "valid_types": "Str",
                  "info": "Process which produces the result to be optimized."
                },
                {
                  "name": "evaluate",
                  "required": false,
                  "valid_types": "",
                  "info": "Inputs that are passed to all evaluation processes."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "optimal_process_output",
                  "required": true,
                  "valid_types": "",
                  "info": "Output value of the optimal evaluation process."
                },
                {
                  "name": "optimal_process_uuid",
                  "required": true,
                  "valid_types": "",
                  "info": "UUID of the optimal evaluation process."
                },
                {
                  "name": "engine_outputs",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "optimal_process_input",
                  "required": false,
                  "valid_types": "",
                  "info": "Input value of the optimal evaluation process."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 201,
                  "message": "Optimization failed because one of the evaluate processes did not finish ok."
                },
                {
                  "status": 202,
                  "message": "Optimization failed because the engine did not finish ok."
                }
              ]
            },
            "class": "aiida_optimize._optimization_workchain:OptimizationWorkChain"
          },
          "optimize.wrappers.add_inputs": {
            "description": [
              "Wrapper workchain that takes inputs as keys and values and passes it",
              "    on to a sub-process. This enables taking a process which was not",
              "    designed to be used in optimization, and optimize with respect to",
              "    some arbitrary input. Inputs which always remain the same can be",
              "    specified in the ``inputs`` namespace, whereas the inputs to be",
              "    optimized are given through the ``added_input_keys`` and",
              "    ``added_input_values`` inputs.",
              "",
              "    The outputs of the wrapper workchain are the same as those of",
              "    the wrapped process.",
              "",
              "    The \"added\" inputs can only be BaseType sub-classes, or",
              "    attributes of a Dict. For each input, its port location is given",
              "    in the \"added_input_keys\" input. For example, ``x.y`` would set",
              "    the ``y`` input in the ``x`` namespace.",
              "",
              "    For cases where the input is a Dict attribute, the (possibly nested) attribute name is given after a colon. That means ``x:a.b`` would",
              "    set the ``['a']['b']`` attribute of the ``Dict`` given in the ``x``",
              "    input.",
              "",
              "    In cases where only a single input needs to be added, they can be",
              "    specified directly instead of wrapped in a List."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "added_input_keys",
                  "required": true,
                  "valid_types": "List, Str",
                  "info": "Specifies the location of each added input."
                },
                {
                  "name": "added_input_values",
                  "required": true,
                  "valid_types": "List, BaseType",
                  "info": "Values of the added inputs to be passed into the sub-process."
                },
                {
                  "name": "sub_process",
                  "required": true,
                  "valid_types": "Str",
                  "info": "The class of the process that should be wrapped."
                },
                {
                  "name": "inputs",
                  "required": false,
                  "valid_types": "",
                  "info": "Inputs to be passed on to the sub-process."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 201,
                  "message": "Workchain failed because the sub-process did not finish ok."
                }
              ]
            },
            "class": "aiida_optimize.wrappers._add_inputs:AddInputsWorkChain"
          },
          "optimize.wrappers.concatenate": {
            "description": [
              "Allows concatenating an arbitrary number of sub-processes.",
              "",
              "    A wrapper workchain that allows concatenating an arbitrary number",
              "    of sub-processes. Outputs of one processes can be configured to",
              "    be passed to the next one."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "output_input_mappings",
                  "required": true,
                  "valid_types": "List",
                  "info": "Defines how inputs are passed between sub-processes. Each list entry entry  ..."
                },
                {
                  "name": "process_inputs",
                  "required": true,
                  "valid_types": "",
                  "info": "Inputs which are passed on to the sub-processes. The inputs should be group ..."
                },
                {
                  "name": "process_labels",
                  "required": true,
                  "valid_types": "List",
                  "info": "A list of pairs (label, process_name). The labels can be any string, the pr ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "process_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 200,
                  "message": "Workchain failed because a sub-process failed."
                }
              ]
            },
            "class": "aiida_optimize.wrappers._concatenate:ConcatenateWorkChain"
          },
          "optimize.wrappers.create_evaluate": {
            "description": [
              "Wrapper workchain to combine two processes: The first process _creates_",
              "    a result, and the second _evaluates_ that result.",
              "",
              "    The purpose of this workchain is to facilitate optimization of processes",
              "    which don't natively produce an output that can be optimized, by only",
              "    having to add the 'evaluation' part."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "create",
                  "required": true,
                  "valid_types": "",
                  "info": "Inputs which are passed on to the create sub-process."
                },
                {
                  "name": "create_process",
                  "required": true,
                  "valid_types": "Str",
                  "info": "The sub-process which performs the create step."
                },
                {
                  "name": "evaluate_process",
                  "required": true,
                  "valid_types": "Str",
                  "info": "The sub-process which performs the evaluate step."
                },
                {
                  "name": "output_input_mapping",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "A mapping from output names of the create process to input names of the eva ..."
                },
                {
                  "name": "evaluate",
                  "required": false,
                  "valid_types": "",
                  "info": "Inputs which are passed on to the evaluate sub-process."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "create",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "evaluate",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 201,
                  "message": "Workchain failed because the 'create' sub-process failed."
                },
                {
                  "status": 202,
                  "message": "Workchain failed because the 'evaluate' sub-process failed."
                }
              ]
            },
            "class": "aiida_optimize.wrappers._create_evaluate:CreateEvaluateWorkChain"
          }
        }
      },
      "commits_count": 2,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 4
        }
      ],
      "pip_install_cmd": "pip install aiida-optimize"
    },
    "aiida-orca": {
      "code_home": "https://github.com/pzarabadip/aiida-orca",
      "development_status": "stable",
      "documentation_url": "https://aiida-orca.readthedocs.io/",
      "entry_point_prefix": "orca",
      "pip_url": "git+https://github.com/pzarabadip/aiida-orca",
      "name": "aiida-orca",
      "package_name": "aiida_orca",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Pezhman Zarabadi-Poor",
        "author_email": "pzarabadip@gmail.com",
        "version": "0.5.1",
        "description": "AiiDA plugin for ORCA code",
        "classifiers": [
          "Environment :: Plugins",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.0.0,<2.0.0",
      "entry_points": {
        "aiida.calculations": {
          "orca_main": "aiida_orca.calculations:OrcaCalculation",
          "orca_asa": "aiida_orca.calculations:OrcaAsaCalculation"
        },
        "aiida.parsers": {
          "orca_base_parser": "aiida_orca.parsers:OrcaBaseParser"
        },
        "aiida.workflows": {
          "orca.base": {
            "description": [
              "Workchain to run a orca calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "orca",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the results of the calculation"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "relaxed_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "relaxed structure"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unidentified unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 301,
                  "message": "The calculation failed with an unrecoverable error coming from aiida-orca."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_orca.workchains:OrcaBaseWorkChain"
          }
        }
      },
      "commits_count": 58,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 2
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/pzarabadip/aiida-orca"
    },
    "aiida-phonopy": {
      "code_home": "https://github.com/aiida-phonopy/aiida-phonopy",
      "documentation_url": "https://aiida-phonopy.readthedocs.io/",
      "entry_point_prefix": "phonopy",
      "pip_url": "aiida-phonopy",
      "plugin_info": "https://raw.githubusercontent.com/aiida-phonopy/aiida-phonopy/master/setup.json",
      "name": "aiida-phonopy",
      "package_name": "aiida_phonopy",
      "hosted_on": "github.com",
      "metadata": {
        "description": "The official AiiDA plugin for Phonopy",
        "author_email": "Lorenzo Bastonero <bastonero.lorenzo@gmail.com>",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "1.1.3"
      },
      "aiida_version": ">=2.0.0,<3.0.0",
      "entry_points": {
        "aiida.calculations": {
          "phonopy.phonopy": {
            "description": [
              "Base `CalcJob` implementation for Phonopy post-processing."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Phonopy parameters (`setting tags`) for post processing. The following tags ..."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "force_constants",
                  "required": false,
                  "valid_types": "ForceConstantsData, NoneType",
                  "info": "Force constants of the input structure."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "phonopy_data",
                  "required": false,
                  "valid_types": "PhonopyData, NoneType",
                  "info": "The preprocess output info of a previous ForceConstantsWorkChain."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Settings for phonopy calculation."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "irreducible_representations",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Irreducible representation output."
                },
                {
                  "name": "modulation",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Modulation information."
                },
                {
                  "name": "output_force_constants",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "Calculated force constants."
                },
                {
                  "name": "output_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Sum up info of phonopy calculation."
                },
                {
                  "name": "phonon_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "Calculated phonon band structure."
                },
                {
                  "name": "projected_phonon_dos",
                  "required": false,
                  "valid_types": "XyData",
                  "info": "Calculated projected DOS."
                },
                {
                  "name": "qpoints",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "Calculated qpoints."
                },
                {
                  "name": "qpoints_mesh",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "Calculated qpoint mesh."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "thermal_displacement_matrices",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Calculated thermal displacements matrices."
                },
                {
                  "name": "thermal_displacements",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Calculated thermal displacements."
                },
                {
                  "name": "thermal_properties",
                  "required": false,
                  "valid_types": "XyData",
                  "info": "Calculated thermal properties."
                },
                {
                  "name": "total_phonon_dos",
                  "required": false,
                  "valid_types": "XyData",
                  "info": "Calculated total DOS."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                },
                {
                  "status": 302,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 303,
                  "message": "The retrieved folder did not contain the required phonopy file."
                },
                {
                  "status": 304,
                  "message": "The retrieved folder did not contain one or more expected output files."
                },
                {
                  "status": 305,
                  "message": "No run mode has been selected."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 311,
                  "message": "The stdout output file could not be parsed."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 320,
                  "message": "The loading of yaml file got an unexpected error."
                },
                {
                  "status": 321,
                  "message": "The file loading via numpy got an unexpected error."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception."
                },
                {
                  "status": 400,
                  "message": "The parser was not able to parse one or more files."
                }
              ]
            },
            "class": "aiida_phonopy.calculations.phonopy:PhonopyCalculation"
          }
        },
        "aiida.data": {
          "phonopy.force_constants": "aiida_phonopy.data.force_constants:ForceConstantsData",
          "phonopy.phonopy": "aiida_phonopy.data.phonopy:PhonopyData",
          "phonopy.preprocess": "aiida_phonopy.data.preprocess:PreProcessData",
          "phonopy.raw": "aiida_phonopy.data.raw:RawData"
        },
        "aiida.parsers": {
          "phonopy.phonopy": "aiida_phonopy.parsers.phonopy:PhonopyParser"
        },
        "aiida.workflows": {
          "phonopy.phonopy": {
            "description": [
              "Abstract workflow for automated frozen phonons.",
              "",
              "    Phonopy is used to produce structures with displacements,",
              "    while the forces are calculated with a quantum engine of choice.",
              "",
              "    This workchain is meant to be used as a base for other specific force calculato plugin workchains,",
              "    or as an example on how to set a possible workchain/workflow. For this reason, the outline of",
              "    this class is not defined, while it provides the inputs and a `setup` method, which can be used",
              "    in a specific workflow outline. Ideally, the workflow would look like:",
              "",
              "    1. Setup the preprocess data.",
              "",
              "        This is already provided in this class. It setups a `PreProcessData` node, from where",
              "        supercell, primitive cell and supercells with displacements can be easily extracted using",
              "        the methods of the nodes. This node can be taken from `self.ctx.preprocess_data`, and used",
              "        during the outline of the workflow.",
              "",
              "    2. Run supercells using the selected quantum engine/force calculator code.",
              "",
              "        In specific code implementations, a force calculation on supercells needs to be run.",
              "        To get these supercells, one need simply to run:",
              "",
              "        ```self.ctx.preprocess_data.calcfunctions.get_supercells_with_displacements()```",
              "",
              "        This will return a dictionary with all the supercells as StructureData to run for the phonon calculation.",
              "        The keys of this dictionary are of the type `supercell_{number}`, where `number` is an integer.",
              "        These numbers are essentials since the `phonopy` force sets is generated following these numbers,",
              "        in order to make sure to refer to the correct displacement. Thus, it is required to keep track",
              "        of them.",
              "        Moreover,a calculation over the pristine supercell structure should be run before hand as reference.",
              "        This structure can instead be gotten via:",
              "",
              "        ```self.ctx.preprocess_data.calcfunctions.get_supercell()```",
              "",
              "        This will return a StructureData without any label.",
              "",
              "        For an example of implementation, refer to aiidateam/aiida-common-worfklows.",
              "",
              "        * Note: some type of force calculation needs to map some variables from the unitcell to the supercell",
              "        (and in certain case even the primitive cell), e.g. the atomic spin in VASP. Since this is code dependent,",
              "        you will need to map these parameters before launching the force calculation of a certain supercell",
              "        with displacement. This information can be gotten via:",
              "",
              "        ```self.ctx.preprocess_data.get_cells_mappings()```",
              "",
              "        Moreover, consider that cells in phonopy will always (re)fold the atoms in order to have positive coordinates.",
              "",
              "    3. Inspect all runs and expose the forces and energies (not mandatory) outputs.",
              "",
              "        * Suggested: when the calculation on each supercell has finished (correctly)",
              "        expose the output forces (and energies) in the dynamical `supercells_forces(energies)` namespace(s).",
              "        Provide each supercell forces as an `ArrayData` with the forces stored as `forces`",
              "        (e.g. if your code plugin stores  the forces in `TrajectoryData`, extract them with a `calcfunction`).",
              "        Expose each `ArrayData` choosing a **common prefix**, while as **suffix use",
              "        _{number}**, with `{number}` referring to the correspective supercell label suffix (that you are supposed to",
              "        keep track somewhere, e.g. in the label of the code calculation/workchain).",
              "        Now you can gather all the information in one data noe, i.e. in a `PhonopyData` node.",
              "        To do so, you can simple run:",
              "",
              "        ```self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(**self.outputs.supercells_forces)```",
              "",
              "        and then expose it as output in the `output_phonopy_data` namespace.",
              "",
              "        * Alternatively: instead of exposing the supercell forces as outputs, you can directly gather all the forces",
              "        in a dictionary and run directly to the `generate_phonopy_data` method using this dictionary (always using",
              "        the double *).",
              "",
              "        See the implementation in aiidateam/aiida-common-workflows for an example.",
              "",
              "    4. (optional) Run the non-analytical constants on the primitive cell.",
              "",
              "        Non-analytical constants should be run for polar insulators. These require usually a linear response code",
              "        or a finite difference approach (e.g. using the electric enthalpy). Since this is usually the most expensive",
              "        part, you should run them on the primitive cell. To get it, use:",
              "",
              "        ```self.ctx.preprocess_data.calcfunctions.get_primitive_cell()```",
              "",
              "        If you compute also these, collect the dielectric tensor and the effectic born charges in an ArrayData,",
              "        with the arraynames `dielectric` and `born_charges` (in Cartesian coordinates!).",
              "        Then, gather all the information of nac and forces in a unique `PhonopyData` via:",
              "",
              "        ```",
              "        self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(",
              "            nac_parameters=nac_paramters,",
              "            **self.outputs.supercells_forces",
              "            )",
              "        ```",
              "",
              "        and expose the output.",
              "",
              "        * Note: we require in the input for generating the full phonopy data, to give the nac in the primitive cell.",
              "        The primitive cell of phonopy will just rotate the lattice vectors, thus mantaining the Cartasian coordinate",
              "        system. It can happen, though, that the unitcell is not the primitive cell of the system, meaning that the",
              "        primitive cell will contain less atoms. We expect in input the nac computed on this number of atoms. If you",
              "        want, for some reason, compute the nac on the unitcell, you will need to get the reduced nac.",
              "        To do so, you can consider using a built-in function in phonopy, namely:",
              "",
              "        :py:func:`phonopy.structure.symmetry.elaborate_borns_and_epsilon`"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "",
                  "info": "Options for how to run the workflow."
                },
                {
                  "name": "displacement_generator",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Info for displacements generation. The following flags are allowed:\n distan ..."
                },
                {
                  "name": "fc_options",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Options for force constants calculation (optional). The following flags are ..."
                },
                {
                  "name": "is_symmetry",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Whether using or not the space group symmetries."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nac_parameters",
                  "required": false,
                  "valid_types": "ArrayData, NoneType",
                  "info": "Non-analytical parameters."
                },
                {
                  "name": "preprocess_data",
                  "required": false,
                  "valid_types": "PhonopyData, PreProcessData, NoneType",
                  "info": "The preprocess data for frozen phonon calcualtion."
                },
                {
                  "name": "primitive_matrix",
                  "required": false,
                  "valid_types": "List, NoneType",
                  "info": "The matrix used to generate the primitive cell from the input structure in  ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData, NoneType",
                  "info": "The structure at equilibrium volume."
                },
                {
                  "name": "supercell_matrix",
                  "required": false,
                  "valid_types": "List, NoneType",
                  "info": "The matrix used to generate the supercell from the input structure in the L ..."
                },
                {
                  "name": "symmetry_tolerance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "Symmetry tolerance for space group analysis on the input structure."
                }
              ],
              "outputs": [
                {
                  "name": "output_phonopy_data",
                  "required": true,
                  "valid_types": "PhonopyData",
                  "info": "The phonopy data with supercells displacements, forces and (optionally)nac  ..."
                },
                {
                  "name": "supercells_forces",
                  "required": true,
                  "valid_types": "ArrayData",
                  "info": "The forces acting on the atoms of each supercell."
                },
                {
                  "name": "output_force_constants",
                  "required": false,
                  "valid_types": "ForceConstantsData",
                  "info": "The matrix of force constants computed with finite displacements."
                },
                {
                  "name": "supercells",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The supercells with displacements."
                },
                {
                  "name": "supercells_energies",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The total energy of each supercell."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_phonopy.workflows.phonopy:PhonopyWorkChain"
          }
        }
      },
      "commits_count": 70,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 4
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-phonopy"
    },
    "aiida-phtools": {
      "code_home": "https://github.com/ltalirz/aiida-phtools",
      "entry_point_prefix": "phtools",
      "pip_url": "aiida-phtools",
      "plugin_info": "https://raw.github.com/ltalirz/aiida-phtools/master/setup.json",
      "name": "aiida-phtools",
      "package_name": "aiida_phtools",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for persistence homology tools, used to analyze nanoporous materials.",
        "author": "Leopold Talirz",
        "author_email": "leopold.talirz@gmail.com",
        "license": "MIT",
        "home_page": "https://github.com/ltalirz/aiida-phtools",
        "classifiers": [
          "Programming Language :: Python"
        ],
        "version": "0.1.0a1"
      },
      "aiida_version": "*",
      "entry_points": {
        "aiida.calculations": {
          "phtools.dmatrix": "aiida_phtools.calculations.distance_matrix:DistanceMatrixCalculation",
          "phtools.surface": "aiida_phtools.calculations.pore_surface:PoreSurfaceCalculation"
        },
        "aiida.data": {
          "phtools.surface": "aiida_phtools.data.pore_surface:PoreSurfaceParameters"
        },
        "aiida.parsers": {
          "phtools.dmatrix": "aiida_phtools.parsers.distance_matrix:DistanceMatrixParser",
          "phtools.surface": "aiida_phtools.parsers.pore_surface:PoreSurfaceParser"
        }
      },
      "commits_count": 0,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 2
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 2
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-phtools"
    },
    "aiida-plumed": {
      "code_home": "https://github.com/ConradJohnston/aiida-plumed",
      "entry_point_prefix": "plumed",
      "pip_url": "aiida-plumed",
      "plugin_info": "https://raw.github.com/ConradJohnston/aiida-plumed/AiiDA-v1.0-compatibility/setup.json",
      "name": "aiida-plumed",
      "package_name": "aiida_plumed",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin providing support for Plumed2",
        "author": "Conrad Johnston",
        "author_email": "conrad.s.johnston@googlemail.com",
        "license": "MIT",
        "home_page": "https://github.com/ConradJohnston/aiida-plumed",
        "classifiers": [
          "Development Status :: 2 - Pre-Alpha",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "0.1.0a0"
      },
      "aiida_version": ">=1.0.0b3,<2.0.0",
      "entry_points": {
        "aiida.calculations": {
          "plumed": "aiida_plumed.calculations:DiffCalculation"
        },
        "aiida.cmdline.data": {
          "plumed": "aiida_plumed.cli:data_cli"
        },
        "aiida.data": {
          "plumed": "aiida_plumed.data:DiffParameters"
        },
        "aiida.parsers": {
          "plumed": "aiida_plumed.parsers:DiffParser"
        }
      },
      "commits_count": 0,
      "development_status": "pre-alpha",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-plumed"
    },
    "aiida-porousmaterials": {
      "code_home": "https://github.com/pzarabadip/aiida-porousmaterials",
      "development_status": "stable",
      "entry_point_prefix": "porousmaterials",
      "pip_url": "aiida-porousmaterials",
      "name": "aiida-porousmaterials",
      "package_name": "aiida_porousmaterials",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for PorousMaterials code",
        "author": "Pezhman Zarabadi-Poor",
        "author_email": "pzarabadip@gmail.com",
        "license": "MIT",
        "home_page": "https://github.com/pzarabadip/aiida-porousmaterials",
        "classifiers": [
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8"
        ],
        "version": "1.0.0a3"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.calculations": {
          "porousmaterials": {
            "description": [
              "This is PorousMaterialsCalculation as the subclass",
              "    of AiiDA CalcJob to prepare input for the PorousMaterials",
              "    suite of Julia codes.",
              "    Please refer to : https://github.com/SimonEnsemble/PorousMaterials.jl"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "acc_voronoi_nodes",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Accessible Voronoi nodes calculated by Zeo++"
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "parameters such as cutoff and mixing rules."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "Framework input file as CIF"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Additional input parameters"
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "dictionary of calculated Voronoi energies"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "ev_output_file",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 101,
                  "message": "The retrieved folder does not contain an output file."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                }
              ]
            },
            "class": "aiida_porousmaterials.calculations:PorousMaterialsCalculation"
          }
        },
        "aiida.parsers": {
          "porousmaterials": "aiida_porousmaterials.parser:PorousMaterialsParser"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-porousmaterials"
    },
    "aiida-pseudo": {
      "code_home": "https://github.com/aiidateam/aiida-pseudo",
      "entry_point_prefix": "pseudo",
      "pip_url": "aiida-pseudo",
      "plugin_info": "https://raw.github.com/aiidateam/aiida-pseudo/master/setup.cfg",
      "name": "aiida-pseudo",
      "package_name": "aiida_pseudo",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin that simplifies working with pseudo potentials.",
        "author_email": "\"Sebastiaan P. Huber\" <mail@sphuber.net>",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "version": "1.1.0"
      },
      "aiida_version": ">=2.1,<3.0",
      "entry_points": {
        "aiida.data": {
          "pseudo": "aiida_pseudo.data.pseudo.pseudo:PseudoPotentialData",
          "pseudo.jthxml": "aiida_pseudo.data.pseudo.jthxml:JthXmlData",
          "pseudo.psf": "aiida_pseudo.data.pseudo.psf:PsfData",
          "pseudo.psml": "aiida_pseudo.data.pseudo.psml:PsmlData",
          "pseudo.psp8": "aiida_pseudo.data.pseudo.psp8:Psp8Data",
          "pseudo.upf": "aiida_pseudo.data.pseudo.upf:UpfData",
          "pseudo.vps": "aiida_pseudo.data.pseudo.vps:VpsData"
        },
        "aiida.groups": {
          "pseudo.family": "aiida_pseudo.groups.family.pseudo:PseudoPotentialFamily",
          "pseudo.family.cutoffs": "aiida_pseudo.groups.family.cutoffs:CutoffsPseudoPotentialFamily",
          "pseudo.family.pseudo_dojo": "aiida_pseudo.groups.family.pseudo_dojo:PseudoDojoFamily",
          "pseudo.family.sssp": "aiida_pseudo.groups.family.sssp:SsspFamily"
        },
        "console_scripts": {
          "aiida-pseudo": "aiida_pseudo.cli:cmd_root"
        }
      },
      "commits_count": 24,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "red",
          "text": "Data",
          "count": 7
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Groups)",
          "count": 4
        }
      ],
      "pip_install_cmd": "pip install aiida-pseudo"
    },
    "aiida-psi4": {
      "code_home": "https://github.com/ltalirz/aiida-psi4/tree/master",
      "development_status": "beta",
      "entry_point_prefix": "psi4",
      "pip_url": "git+https://github.com/ltalirz/aiida-psi4",
      "name": "aiida-psi4",
      "package_name": "aiida_psi4",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Leopold Talirz",
        "author_email": "leopold.talirz@gmail.com",
        "version": "0.1.0a0",
        "description": "AiiDA plugin for the Psi4 Quantum Chemistry package.",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.6.4,<2.0.0",
      "entry_points": {
        "aiida.data": {
          "psi4.atomic_input": "aiida_psi4.data:AtomicInput"
        },
        "aiida.calculations": {
          "psi4": {
            "description": [
              "AiiDA calculation plugin wrapping the psi4 executable."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "psiapi",
                  "required": false,
                  "valid_types": "Str, SinglefileData",
                  "info": "Psi4 input in PsiAPI python format"
                },
                {
                  "name": "qcschema",
                  "required": false,
                  "valid_types": "Dict, AtomicInput",
                  "info": "Psi4 input in QCSchema JSON format"
                }
              ],
              "outputs": [
                {
                  "name": "qcschema",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Psi4 output in QCSchema JSON format"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "stdout",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Psi4 logfile"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 100,
                  "message": "Calculation did not produce all expected output files."
                },
                {
                  "status": 101,
                  "message": "Psi4 reported calculation as unsuccessful."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                }
              ]
            },
            "class": "aiida_psi4.calculations:Psi4Calculation"
          }
        },
        "aiida.parsers": {
          "psi4": "aiida_psi4.parsers:QCSchemaParser"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/ltalirz/aiida-psi4"
    },
    "aiida-pyscf": {
      "code_home": "https://github.com/microsoft/aiida-pyscf",
      "entry_point_prefix": "pyscf",
      "pip_url": "aiida-pyscf",
      "plugin_info": "https://github.com/microsoft/aiida-pyscf/blob/main/pyproject.toml",
      "name": "aiida-pyscf",
      "package_name": "aiida_pyscf",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for the Python-based Simulations of Chemistry Framework (PySCF).",
        "author_email": "\"Sebastiaan P. Huber\" <mail@sphuber.net>, Adam Grofe <v-adamgrofe@microsoft.com>",
        "classifiers": [
          "Development Status :: 3 - Alpha",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering"
        ],
        "version": "0.4.0"
      },
      "aiida_version": ">=2.3,<3.0",
      "entry_points": {
        "aiida.calculations": {
          "pyscf.base": {
            "description": [
              "``CalcJob`` plugin for PySCF."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Input structure with molecular structure definition."
                },
                {
                  "name": "checkpoint",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "Checkpoint of a previously completed calculation that failed to converge."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Input parameters used to render the PySCF script template."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "cubegen",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "checkpoint",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "The checkpoint file in case the calculation did not converge. Can be used a ..."
                },
                {
                  "name": "fcidump",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Computed fcidump files."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Various computed properties parsed from the `FILENAME_RESULTS` output file."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The optimized structure if the input parameters contained the `optimizer` k ..."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The geometry optimization trajectory if the input parameters contained the  ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 302,
                  "message": "The stdout output file was not retrieved."
                },
                {
                  "status": 303,
                  "message": "The results JSON file was not retrieved."
                },
                {
                  "status": 410,
                  "message": "The electronic minimization cycle did not reach self-consistency."
                },
                {
                  "status": 500,
                  "message": "The ionic minimization cycle did not converge for the given thresholds."
                }
              ]
            },
            "class": "aiida_pyscf.calculations.base:PyscfCalculation"
          }
        },
        "aiida.parsers": {
          "pyscf.base": "aiida_pyscf.parsers.base:PyscfParser"
        },
        "aiida.workflows": {
          "pyscf.base": {
            "description": [
              "Workchain to run a pyscf calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "pyscf",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "cubegen",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "checkpoint",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "The checkpoint file in case the calculation did not converge. Can be used a ..."
                },
                {
                  "name": "fcidump",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Computed fcidump files."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Various computed properties parsed from the `FILENAME_RESULTS` output file."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The optimized structure if the input parameters contained the `optimizer` k ..."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The geometry optimization trajectory if the input parameters contained the  ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 310,
                  "message": "The calculation failed and did not retrieve a checkpoint file from which can be restarted."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_pyscf.workflows.base:PyscfBaseWorkChain"
          }
        }
      },
      "commits_count": 63,
      "development_status": "alpha",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-pyscf"
    },
    "aiida-python": {
      "entry_point_prefix": "aiidapython",
      "code_home": "https://github.com/addman2/aiida-python",
      "name": "aiida-python",
      "package_name": "aiida_python",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 59,
      "development_status": "planning",
      "summaryinfo": [],
      "pip_install_cmd": "See source code repository."
    },
    "aiida-qeq": {
      "code_home": "https://github.com/ltalirz/aiida-qeq",
      "development_status": "stable",
      "entry_point_prefix": "qeq",
      "pip_url": "aiida-qeq",
      "plugin_info": "https://raw.githubusercontent.com/ltalirz/aiida-qeq/master/setup.json",
      "name": "aiida-qeq",
      "package_name": "aiida_qeq",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for computing electronic charges on atoms using equilibration-type models (QEq, EQEq, ...).",
        "author": "Leopold Talirz, Daniele Ongari",
        "author_email": "leopold.talirz@gmail.com",
        "license": "MIT",
        "home_page": "https://github.com/ltalirz/aiida-qeq",
        "classifiers": [
          "Programming Language :: Python"
        ],
        "version": "0.1.0"
      },
      "aiida_version": ">=0.12.2,<1.0.0",
      "entry_points": {
        "aiida.calculations": {
          "qeq.eqeq": {
            "description": [
              "AiiDA calculation plugin for the EQeq code."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "charge_data",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "File containing information on common oxidation state of the elements."
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "ionization_data",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "File containing ionization data on the elements."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "EQeqParameters",
                  "info": "Command line parameters for EQEQ"
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "Input structure, for which atomic charges are to be computed."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                }
              ]
            },
            "class": "aiida_qeq.calculations.eqeq:EQeqCalculation"
          },
          "qeq.qeq": {
            "description": [
              "AiiDA calculation plugin for the Qeq code."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "File containing electronegativity and Idempotential data of the elements."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "Input structure, for which atomic charges are to be computed."
                },
                {
                  "name": "configure",
                  "required": false,
                  "valid_types": "QeqParameters",
                  "info": "Configuration input for QEQ (configure.input file)"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                }
              ]
            },
            "class": "aiida_qeq.calculations.qeq:QeqCalculation"
          }
        },
        "aiida.data": {
          "qeq.eqeq": "aiida_qeq.data.eqeq:EQeqParameters",
          "qeq.qeq": "aiida_qeq.data.qeq:QeqParameters"
        },
        "aiida.parsers": {
          "qeq.eqeq": "aiida_qeq.parsers.eqeq:EQeqParser",
          "qeq.qeq": "aiida_qeq.parsers.qeq:QeqParser"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 2
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 2
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        }
      ],
      "pip_install_cmd": "pip install aiida-qeq"
    },
    "aiida-qp2": {
      "code_home": "https://github.com/TREX-CoE/aiida-qp2",
      "entry_point_prefix": "qp2",
      "pip_url": "aiida-qp2",
      "documentation_url": "https://trex-coe.github.io/aiida-qp2/index.html",
      "name": "aiida-qp2",
      "package_name": "aiida_qp2",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for the Quantum Package 2.0",
        "author": "Evgeny Posenitskiy",
        "author_email": "posenitskiy@irsamc.ups-tlse.fr",
        "license": "MIT",
        "home_page": "https://github.com/TREX-CoE/aiida-qp2",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python"
        ],
        "version": "0.2.0"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.calculations": {
          "qp2": {
            "description": [
              "AiiDA calculation plugin wrapping the Quantum Package code."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Input parameters to generate the input file."
                },
                {
                  "name": "basissets",
                  "required": false,
                  "valid_types": "",
                  "info": "A dictionary of basissets to be used in the calculations: key is the atomic ..."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "pseudos",
                  "required": false,
                  "valid_types": "",
                  "info": "A dictionary of pseudopotentials to be used in the calculations: key is the ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Additional input parameters."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "Input structrure"
                },
                {
                  "name": "wavefunction",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "The wavefunction file (EZFIO or TREXIO)."
                }
              ],
              "outputs": [
                {
                  "name": "output_wavefunction",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "The wave function file (EZFIO or TREXIO)"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_energy",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The result of the calculation"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                },
                {
                  "status": 400,
                  "message": "Energy value is not present in the output file."
                }
              ]
            },
            "class": "aiida_qp2.calculations:QP2Calculation"
          }
        },
        "aiida.parsers": {
          "qp2": "aiida_qp2.parsers:QP2Parser"
        }
      },
      "commits_count": 0,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-qp2"
    },
    "aiida-quantumespresso": {
      "code_home": "https://github.com/aiidateam/aiida-quantumespresso",
      "documentation_url": "https://aiida-quantumespresso.readthedocs.io/",
      "entry_point_prefix": "quantumespresso",
      "pip_url": "aiida-quantumespresso",
      "plugin_info": "https://raw.github.com/aiidateam/aiida-quantumespresso/master/setup.json",
      "name": "aiida-quantumespresso",
      "package_name": "aiida_quantumespresso",
      "hosted_on": "github.com",
      "metadata": {
        "description": "The official AiiDA plugin for Quantum ESPRESSO",
        "author_email": "The AiiDA team <developers@aiida.net>",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "version": "4.3.0"
      },
      "aiida_version": ">=2.3,<3.0",
      "entry_points": {
        "aiida.calculations": {
          "quantumespresso.cp": {
            "description": [
              "`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The input parameters that are to be used to construct the input file."
                },
                {
                  "name": "pseudos",
                  "required": true,
                  "valid_types": "UpfData, UpfData",
                  "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parallelization",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parallelization options. The following flags are allowed:\n"
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "An optional working directory of a previously completed calculation to rest ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
                },
                {
                  "name": "vdw_table",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "Optional van der Waals table contained in a `SinglefileData`."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_trajectory",
                  "required": true,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                },
                {
                  "status": 303,
                  "message": "The required XML file is not present in the retrieved folder."
                },
                {
                  "status": 304,
                  "message": "The retrieved folder contains multiple XML files."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 311,
                  "message": "The output file contains invalid output."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 320,
                  "message": "The required XML file could not be read."
                },
                {
                  "status": 330,
                  "message": "The required POS file could not be read."
                },
                {
                  "status": 340,
                  "message": "The required trajectory data could not be read."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.cp:CpCalculation"
          },
          "quantumespresso.create_kpoints_from_distance": {
            "description": [
              "Generate a uniformly spaced kpoint mesh for a given structure.",
              "",
              "    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.",
              "",
              "    :param structure: the StructureData to which the mesh should apply",
              "    :param distance: a Float with the desired distance between kpoints in reciprocal space",
              "    :param force_parity: a Bool to specify whether the generated mesh should maintain parity",
              "    :returns: a KpointsData with the generated mesh"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "distance",
                  "required": true,
                  "valid_types": "Data",
                  "info": "a Float with the desired distance between kpoints in reciprocal space"
                },
                {
                  "name": "force_parity",
                  "required": true,
                  "valid_types": "Data",
                  "info": "a Bool to specify whether the generated mesh should maintain parity"
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "Data",
                  "info": "the StructureData to which the mesh should apply"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.functions.create_kpoints_from_distance:create_kpoints_from_distance"
          },
          "quantumespresso.dos": {
            "description": [
              "`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData, FolderData",
                  "info": ""
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "output_dos",
                  "required": true,
                  "valid_types": "XyData",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 330,
                  "message": "The dos file could not be read from the retrieved folder."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.dos:DosCalculation"
          },
          "quantumespresso.epw": {
            "description": [
              "`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "kfpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "fine kpoint mesh"
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "coarse kpoint mesh"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "parent_folder_nscf",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "the folder of a completed nscf `PwCalculation`"
                },
                {
                  "name": "parent_folder_ph",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "the folder of a completed `PhCalculation`"
                },
                {
                  "name": "qfpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "fine qpoint mesh"
                },
                {
                  "name": "qpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "coarse qpoint mesh"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.epw:EpwCalculation"
          },
          "quantumespresso.matdyn": {
            "description": [
              "`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "force_constants",
                  "required": true,
                  "valid_types": "ForceConstantsData",
                  "info": ""
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "Kpoints on which to calculate the phonon frequencies."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                  "info": "Use a local or remote folder as parent folder (for restarts and similar)"
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_phonon_bands",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 330,
                  "message": "The output frequencies file could not be read from the retrieved folder."
                },
                {
                  "status": 410,
                  "message": "Number of kpoints not found in the output data"
                },
                {
                  "status": 411,
                  "message": "Number of kpoints in the inputs is not commensurate with those in the output"
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.matdyn:MatdynCalculation"
          },
          "quantumespresso.merge_ph_outputs": {
            "description": [
              "Calcfunction to merge outputs from multiple `ph.x` calculations with different q-points."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.functions.merge_ph_outputs:merge_ph_outputs"
          },
          "quantumespresso.namelists": {
            "description": [
              "`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, FolderData, SinglefileData, NoneType",
                  "info": "Use a local or remote folder as parent folder (for restarts and similar)"
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.namelists:NamelistsCalculation"
          },
          "quantumespresso.neb": {
            "description": [
              "Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "first_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Initial structure"
                },
                {
                  "name": "last_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Final structure"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "NEB-specific input parameters"
                },
                {
                  "name": "pw",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "An optional working directory of a previously completed calculation to rest ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
                }
              ],
              "outputs": [
                {
                  "name": "output_mep",
                  "required": true,
                  "valid_types": "ArrayData",
                  "info": "The original and interpolated energy profiles along the minimum-energy path ..."
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters dictionary of the NEB calculation"
                },
                {
                  "name": "output_trajectory",
                  "required": true,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "iteration_array",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 303,
                  "message": "The required XML file is not present in the retrieved folder."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 311,
                  "message": "The output file contains invalid output."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 320,
                  "message": "The XML output file could not be read."
                },
                {
                  "status": 321,
                  "message": "The XML output file could not be parsed."
                },
                {
                  "status": 322,
                  "message": "The XML output file has an unsupported format."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception: {exception}"
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.neb:NebCalculation"
          },
          "quantumespresso.open_grid": {
            "description": [
              "``CalcJob`` implementation for the ``open_grid.x`` code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData, FolderData",
                  "info": "The output folder of a completed `PwCalculation` on an irreducible Brilloui ..."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The explicit list of kpoints of the unfolded kmesh"
                },
                {
                  "name": "kpoints_mesh",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The dimensions of the unfolded kmesh"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 311,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 312,
                  "message": "Found rotation or fractional translation not compatible with FFT grid."
                },
                {
                  "status": 340,
                  "message": "Encountered a generic error message."
                },
                {
                  "status": 350,
                  "message": "Mismatch between kmesh dimensions and number of kpoints."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.open_grid:OpenGridCalculation"
          },
          "quantumespresso.ph": {
            "description": [
              "`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "the folder of a completed `PwCalculation`"
                },
                {
                  "name": "qpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "qpoint mesh"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 302,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 305,
                  "message": "Both the stdout and XML output files could not be read or parsed."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 311,
                  "message": "The stdout output file could not be parsed."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception: {exception}"
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 410,
                  "message": "The minimization cycle did not reach self-consistency."
                },
                {
                  "status": 462,
                  "message": "The code failed during the cholesky factorization."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.ph:PhCalculation"
          },
          "quantumespresso.pp": {
            "description": [
              "`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Use a node that specifies the input parameters for the namelists"
                },
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData, FolderData",
                  "info": "Output folder of a completed `PwCalculation`"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional parameters to affect the way the calculation job is performed."
                }
              ],
              "outputs": [
                {
                  "name": "output_data",
                  "required": true,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "output_data_multiple",
                  "required": true,
                  "valid_types": "ArrayData",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                },
                {
                  "status": 302,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 303,
                  "message": "The parent folder did not contain the required XML output file."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete."
                },
                {
                  "status": 330,
                  "message": "The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."
                },
                {
                  "status": 331,
                  "message": "The formatted data output file `{filename}` could not be read."
                },
                {
                  "status": 332,
                  "message": "The data file format is not supported by the parser"
                },
                {
                  "status": 333,
                  "message": "The formatted data output file `{filename}` could not be parsed"
                },
                {
                  "status": 340,
                  "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception: {exception}"
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.pp:PpCalculation"
          },
          "quantumespresso.projwfc": {
            "description": [
              "`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.",
              "",
              "    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch",
              "    wavefunctions onto atomic orbitals.",
              "",
              "    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData, FolderData",
                  "info": "The output folder of a pw.x calculation"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "Dos",
                  "required": true,
                  "valid_types": "XyData",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "bands_down",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "bands_up",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "projections",
                  "required": false,
                  "valid_types": "ProjectionData",
                  "info": ""
                },
                {
                  "name": "projections_down",
                  "required": false,
                  "valid_types": "ProjectionData",
                  "info": ""
                },
                {
                  "name": "projections_up",
                  "required": false,
                  "valid_types": "ProjectionData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                },
                {
                  "status": 303,
                  "message": "The retrieved folder did not contain the required XML file."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 320,
                  "message": "The XML output file could not be read."
                },
                {
                  "status": 321,
                  "message": "The XML output file could not be parsed."
                },
                {
                  "status": 322,
                  "message": "The XML output file has an unsupported format."
                },
                {
                  "status": 330,
                  "message": "The pdos_tot file could not be read from the retrieved folder."
                },
                {
                  "status": 340,
                  "message": "An exception was raised parsing bands and projections."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.projwfc:ProjwfcCalculation"
          },
          "quantumespresso.pw": {
            "description": [
              "`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "kpoint mesh or kpoint path"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The input parameters that are to be used to construct the input file."
                },
                {
                  "name": "pseudos",
                  "required": true,
                  "valid_types": "UpfData, UpfData",
                  "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "hubbard_file",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parallelization",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "An optional working directory of a previously completed calculation to rest ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
                },
                {
                  "name": "vdw_table",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "Optional van der Waals table contained in a `SinglefileData`."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The `output_parameters` output node of the successful calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_atomic_occupations",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_band",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The `output_band` output node of the successful calculation if present."
                },
                {
                  "name": "output_kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The `output_structure` output node of the successful calculation if present ..."
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                },
                {
                  "status": 302,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 303,
                  "message": "The retrieved folder did not contain the required XML file."
                },
                {
                  "status": 304,
                  "message": "The retrieved folder contained multiple XML files."
                },
                {
                  "status": 305,
                  "message": "Both the stdout and XML output files could not be read or parsed."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 311,
                  "message": "The stdout output file could not be parsed."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 320,
                  "message": "The XML output file could not be read."
                },
                {
                  "status": 321,
                  "message": "The XML output file could not be parsed."
                },
                {
                  "status": 322,
                  "message": "The XML output file has an unsupported format."
                },
                {
                  "status": 340,
                  "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception: {exception}"
                },
                {
                  "status": 360,
                  "message": "The code failed in finding a valid reciprocal lattice vector."
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 410,
                  "message": "The electronic minimization cycle did not reach self-consistency."
                },
                {
                  "status": 461,
                  "message": "The code failed with negative dexx in the exchange calculation."
                },
                {
                  "status": 462,
                  "message": "The code failed during the cholesky factorization."
                },
                {
                  "status": 463,
                  "message": "Too many bands failed to converge during the diagonalization."
                },
                {
                  "status": 464,
                  "message": "The S matrix was found to be not positive definite."
                },
                {
                  "status": 465,
                  "message": "The `zhegvd` failed in the PPCG diagonalization."
                },
                {
                  "status": 466,
                  "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
                },
                {
                  "status": 467,
                  "message": "The eigenvector failed to converge."
                },
                {
                  "status": 468,
                  "message": "The factorization in the Broyden routine failed."
                },
                {
                  "status": 481,
                  "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
                },
                {
                  "status": 500,
                  "message": "The ionic minimization cycle did not converge for the given thresholds."
                },
                {
                  "status": 501,
                  "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
                },
                {
                  "status": 502,
                  "message": "The ionic minimization cycle did not converge after the maximum number of steps."
                },
                {
                  "status": 503,
                  "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
                },
                {
                  "status": 510,
                  "message": "The electronic minimization cycle failed during an ionic minimization cycle."
                },
                {
                  "status": 511,
                  "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
                },
                {
                  "status": 520,
                  "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
                },
                {
                  "status": 521,
                  "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
                },
                {
                  "status": 531,
                  "message": "The electronic minimization cycle did not reach self-consistency."
                },
                {
                  "status": 541,
                  "message": "The variable cell optimization broke the symmetry of the k-points."
                },
                {
                  "status": 542,
                  "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
                },
                {
                  "status": 710,
                  "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.pw:PwCalculation"
          },
          "quantumespresso.pw2gw": {
            "description": [
              "`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Output folder of a completed `PwCalculation`"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "eps",
                  "required": true,
                  "valid_types": "ArrayData",
                  "info": "The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, ..."
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The `output_parameters` output node of the successful calculation.`"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 302,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 305,
                  "message": "The eps*.dat output files could not be read or parsed."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 311,
                  "message": "The stdout output file could not be parsed."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 330,
                  "message": "The eps*.dat output files do not have the expected shape (N, 2)."
                },
                {
                  "status": 331,
                  "message": "The eps*.dat output files contains different values of energies."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception: {exception}"
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.pw2gw:Pw2gwCalculation"
          },
          "quantumespresso.pw2wannier90": {
            "description": [
              "`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.",
              "",
              "    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "nnkp_file",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "A SinglefileData containing the .nnkp file generated by wannier90.x -pp"
                },
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData, FolderData",
                  "info": "The output folder of a pw.x calculation"
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 340,
                  "message": "Encountered a generic error message"
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception: {exception}"
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.pw2wannier90:Pw2wannier90Calculation"
          },
          "quantumespresso.pwimmigrant": {
            "description": [
              "Create a PwCalculation object that can be used to import old jobs.",
              "",
              "    This is a sublass of aiida_quantumespresso.calculations.PwCalculation",
              "    with slight modifications to some of the class variables and additional",
              "    methods that",
              "",
              "        a. parse the job's input file to create the calculation's input",
              "           nodes that would exist if the calculation were submitted using AiiDa,",
              "        b. bypass the functions of the daemon, and prepare the node's attributes",
              "           such that all the processes (copying of the files to the repository,",
              "           results parsing, ect.) can be performed",
              "",
              "    .. note:: The keyword arguments of PwCalculation are also available.",
              "",
              "    :param remote_workdir: Absolute path to the directory where the job was run.",
              "        The transport of the computer you link ask input to the calculation is",
              "        the transport that will be used to retrieve the calculation's files.",
              "        Therefore, ``remote_workdir`` should be the absolute path to the job's",
              "        directory on that computer.",
              "    :type remote_workdir: str",
              "",
              "    :param input_file_name: The file name of the job's input file.",
              "    :type input_file_name: str",
              "",
              "    :param output_file_name: The file name of the job's output file (i.e. the",
              "        file containing the stdout of QE).",
              "    :type output_file_name: str"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "kpoint mesh or kpoint path"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The input parameters that are to be used to construct the input file."
                },
                {
                  "name": "pseudos",
                  "required": true,
                  "valid_types": "UpfData, UpfData",
                  "info": "A mapping of `UpfData` nodes onto the kind name to which they should apply."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "hubbard_file",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "SinglefileData node containing the output Hubbard parameters from a HpCalcu ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parallelization",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parallelization options. The following flags are allowed:\nnpool  : The numb ..."
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "An optional working directory of a previously completed calculation to rest ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional parameters to affect the way the calculation job and the parsing a ..."
                },
                {
                  "name": "vdw_table",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "Optional van der Waals table contained in a `SinglefileData`."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The `output_parameters` output node of the successful calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_atomic_occupations",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_band",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The `output_band` output node of the successful calculation if present."
                },
                {
                  "name": "output_kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The `output_structure` output node of the successful calculation if present ..."
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                },
                {
                  "status": 302,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 303,
                  "message": "The retrieved folder did not contain the required XML file."
                },
                {
                  "status": 304,
                  "message": "The retrieved folder contained multiple XML files."
                },
                {
                  "status": 305,
                  "message": "Both the stdout and XML output files could not be read or parsed."
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 311,
                  "message": "The stdout output file could not be parsed."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 320,
                  "message": "The XML output file could not be read."
                },
                {
                  "status": 321,
                  "message": "The XML output file could not be parsed."
                },
                {
                  "status": 322,
                  "message": "The XML output file has an unsupported format."
                },
                {
                  "status": 340,
                  "message": "The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."
                },
                {
                  "status": 350,
                  "message": "The parser raised an unexpected exception: {exception}"
                },
                {
                  "status": 360,
                  "message": "The code failed in finding a valid reciprocal lattice vector."
                },
                {
                  "status": 400,
                  "message": "The calculation stopped prematurely because it ran out of walltime."
                },
                {
                  "status": 410,
                  "message": "The electronic minimization cycle did not reach self-consistency."
                },
                {
                  "status": 461,
                  "message": "The code failed with negative dexx in the exchange calculation."
                },
                {
                  "status": 462,
                  "message": "The code failed during the cholesky factorization."
                },
                {
                  "status": 463,
                  "message": "Too many bands failed to converge during the diagonalization."
                },
                {
                  "status": 464,
                  "message": "The S matrix was found to be not positive definite."
                },
                {
                  "status": 465,
                  "message": "The `zhegvd` failed in the PPCG diagonalization."
                },
                {
                  "status": 466,
                  "message": "The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."
                },
                {
                  "status": 467,
                  "message": "The eigenvector failed to converge."
                },
                {
                  "status": 468,
                  "message": "The factorization in the Broyden routine failed."
                },
                {
                  "status": 481,
                  "message": "The k-point parallelization \"npools\" is too high, some nodes have no k-points."
                },
                {
                  "status": 500,
                  "message": "The ionic minimization cycle did not converge for the given thresholds."
                },
                {
                  "status": 501,
                  "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
                },
                {
                  "status": 502,
                  "message": "The ionic minimization cycle did not converge after the maximum number of steps."
                },
                {
                  "status": 503,
                  "message": "The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."
                },
                {
                  "status": 510,
                  "message": "The electronic minimization cycle failed during an ionic minimization cycle."
                },
                {
                  "status": 511,
                  "message": "The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."
                },
                {
                  "status": 520,
                  "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."
                },
                {
                  "status": 521,
                  "message": "The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."
                },
                {
                  "status": 531,
                  "message": "The electronic minimization cycle did not reach self-consistency."
                },
                {
                  "status": 541,
                  "message": "The variable cell optimization broke the symmetry of the k-points."
                },
                {
                  "status": 542,
                  "message": "The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."
                },
                {
                  "status": 710,
                  "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.pwimmigrant:PwimmigrantCalculation"
          },
          "quantumespresso.q2r": {
            "description": [
              "`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData, FolderData",
                  "info": ""
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "force_constants",
                  "required": true,
                  "valid_types": "ForceConstantsData",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 330,
                  "message": "The force constants file could not be read."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.q2r:Q2rCalculation"
          },
          "quantumespresso.seekpath_structure_analysis": {
            "description": [
              "Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.",
              "",
              "    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the",
              "    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the",
              "    original structure in which case the k-points are only congruent with the primitive cell.",
              "",
              "    The keyword arguments can be used to specify various Seekpath parameters, such as:",
              "",
              "        with_time_reversal: True",
              "        reference_distance: 0.025",
              "        recipe: 'hpkot'",
              "        threshold: 1e-07",
              "        symprec: 1e-05",
              "        angle_tolerance: -1.0",
              "",
              "    Note that exact parameters that are available and their defaults will depend on your Seekpath version."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.functions.seekpath_structure_analysis:seekpath_structure_analysis"
          },
          "quantumespresso.xspectra": {
            "description": [
              "CalcJob implementation for the xspectra.x code of Quantum ESPRESSO."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "core_wfc_data",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Core wavefunction data, generated by the upf2plotcore.sh utility"
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The K-point sampling to be used for the XSpectra calculation"
                },
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": ""
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "gamma_file",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "An optional file containing the data for the broadening function used when  ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Parameters for the namelists in the input file."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Use an additional node for special settings"
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "spectra",
                  "required": true,
                  "valid_types": "XyData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 310,
                  "message": "The stdout output file could not be read."
                },
                {
                  "status": 312,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 313,
                  "message": "xiabs was set incorrectly, check and ensure that the index value correctly refers to the atomic species containing the core-hole (where the index starts from 1)."
                },
                {
                  "status": 314,
                  "message": "xiabs was either set to 0 or less, or was greater than ntyp."
                },
                {
                  "status": 330,
                  "message": "The xspectra output file could not be read from the retrieved folder."
                },
                {
                  "status": 331,
                  "message": "The spectrum data file could not be read using NumPy genfromtxt"
                },
                {
                  "status": 400,
                  "message": "The time limit set for the calculation was exceeded, and the job wrote a save file before exiting."
                }
              ]
            },
            "class": "aiida_quantumespresso.calculations.xspectra:XspectraCalculation"
          }
        },
        "aiida.data": {
          "quantumespresso.force_constants": "aiida_quantumespresso.data.force_constants:ForceConstantsData",
          "quantumespresso.hubbard_structure": "aiida_quantumespresso.data.hubbard_structure:HubbardStructureData"
        },
        "aiida.parsers": {
          "quantumespresso.cp": "aiida_quantumespresso.parsers.cp:CpParser",
          "quantumespresso.dos": "aiida_quantumespresso.parsers.dos:DosParser",
          "quantumespresso.matdyn": "aiida_quantumespresso.parsers.matdyn:MatdynParser",
          "quantumespresso.neb": "aiida_quantumespresso.parsers.neb:NebParser",
          "quantumespresso.open_grid": "aiida_quantumespresso.parsers.open_grid:OpenGridParser",
          "quantumespresso.ph": "aiida_quantumespresso.parsers.ph:PhParser",
          "quantumespresso.pp": "aiida_quantumespresso.parsers.pp:PpParser",
          "quantumespresso.projwfc": "aiida_quantumespresso.parsers.projwfc:ProjwfcParser",
          "quantumespresso.pw": "aiida_quantumespresso.parsers.pw:PwParser",
          "quantumespresso.pw2gw": "aiida_quantumespresso.parsers.pw2gw:Pw2gwParser",
          "quantumespresso.pw2wannier90": "aiida_quantumespresso.parsers.pw2wannier90:Pw2wannier90Parser",
          "quantumespresso.q2r": "aiida_quantumespresso.parsers.q2r:Q2rParser",
          "quantumespresso.xspectra": "aiida_quantumespresso.parsers.xspectra:XspectraParser"
        },
        "aiida.tools.calculations": {
          "quantumespresso.pw": "aiida_quantumespresso.tools.calculations.pw:PwCalculationTools"
        },
        "aiida.tools.data.orbitals": {
          "noncollinearhydrogen": "aiida_quantumespresso.tools.data.orbital.noncollinearhydrogen:NoncollinearHydrogenOrbital",
          "spinorbithydrogen": "aiida_quantumespresso.tools.data.orbital.spinorbithydrogen:SpinorbitHydrogenOrbital"
        },
        "aiida.workflows": {
          "quantumespresso.matdyn.base": {
            "description": [
              "Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "matdyn",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_phonon_bands",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.matdyn.base:MatdynBaseWorkChain"
          },
          "quantumespresso.pdos": {
            "description": [
              "A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "dos",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax`  ..."
                },
                {
                  "name": "nscf",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` of the `nscf` calculation."
                },
                {
                  "name": "projwfc",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Em ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "align_to_fermi",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from  ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If ``True``, work directories of all called calculation will be cleaned at  ..."
                },
                {
                  "name": "dry_run",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` of the `scf` calculation."
                },
                {
                  "name": "serial_clean",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "If ``True``, calculations will be run in serial, and work directories will  ..."
                }
              ],
              "outputs": [
                {
                  "name": "dos",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nscf",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "projwfc",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 202,
                  "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."
                },
                {
                  "status": 401,
                  "message": "the SCF sub process failed"
                },
                {
                  "status": 402,
                  "message": "the NSCF sub process failed"
                },
                {
                  "status": 403,
                  "message": "the DOS sub process failed"
                },
                {
                  "status": 404,
                  "message": "the PROJWFC sub process failed"
                },
                {
                  "status": 404,
                  "message": "both the DOS and PROJWFC sub process failed"
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.pdos:PdosWorkChain"
          },
          "quantumespresso.ph.base": {
            "description": [
              "Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "ph",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "only_initialization",
                  "required": false,
                  "valid_types": "Bool",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 204,
                  "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 401,
                  "message": "The work chain failed to merge the q-points data from multiple `PhCalculation`s because not all q-points were parsed."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.ph.base:PhBaseWorkChain"
          },
          "quantumespresso.pw.bands": {
            "description": [
              "Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.",
              "",
              "    The logic for the computation of various parameters for the BANDS step is as follows:",
              "",
              "    Number of bands:",
              "        One can specify the number of bands to be used in the BANDS step either directly through the input parameters",
              "        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When",
              "        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being",
              "        used. If the `nbands_factor` is specified the maximum value of the following values will be used:",
              "",
              "        * `nbnd` of the preceding SCF calculation",
              "        * 0.5 * nelectrons * nbands_factor",
              "        * 0.5 * nelectrons + 4",
              "",
              "    Kpoints:",
              "        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the",
              "        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.",
              "        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry",
              "        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that",
              "        of `bands_kpoints_distance` or the SeekPath default if not specified."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "bands",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the BANDS calculation."
                },
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The inputs structure."
                },
                {
                  "name": "bands_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Explicit kpoints to use for the BANDS calculation. Specify either this or ` ..."
                },
                {
                  "name": "bands_kpoints_distance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "Minimum kpoints distance for the BANDS calculation. Specify either this or  ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nbands_factor",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "The number of bands for the BANDS calculation is that used for the SCF mult ..."
                },
                {
                  "name": "relax",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation  ..."
                }
              ],
              "outputs": [
                {
                  "name": "band_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters of the BANDS `PwBaseWorkChain`."
                },
                {
                  "name": "band_structure",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "The computed band structure."
                },
                {
                  "name": "scf_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters of the SCF `PwBaseWorkChain`."
                },
                {
                  "name": "primitive_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The normalized and primitivized structure for which the bands are computed."
                },
                {
                  "name": "seekpath_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 201,
                  "message": "Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."
                },
                {
                  "status": 202,
                  "message": "Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."
                },
                {
                  "status": 401,
                  "message": "The PwRelaxWorkChain sub process failed"
                },
                {
                  "status": 402,
                  "message": "The scf PwBasexWorkChain sub process failed"
                },
                {
                  "status": 403,
                  "message": "The bands PwBasexWorkChain sub process failed"
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.pw.bands:PwBandsWorkChain"
          },
          "quantumespresso.pw.base": {
            "description": [
              "Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "pw",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "An explicit k-points list or mesh. Either this or `kpoints_distance` has to ..."
                },
                {
                  "name": "kpoints_distance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
                },
                {
                  "name": "kpoints_force_parity",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The `output_parameters` output node of the successful calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_atomic_occupations",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_band",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The `output_band` output node of the successful calculation if present."
                },
                {
                  "name": "output_kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The `output_structure` output node of the successful calculation if present ..."
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 201,
                  "message": "The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."
                },
                {
                  "status": 202,
                  "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
                },
                {
                  "status": 203,
                  "message": "Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."
                },
                {
                  "status": 204,
                  "message": "The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."
                },
                {
                  "status": 210,
                  "message": "Required key for `automatic_parallelization` was not specified.This exit status has been deprecated as the automatic parallellization feature was removed."
                },
                {
                  "status": 211,
                  "message": "Unrecognized keys were specified for `automatic_parallelization`.This exit status has been deprecated as the automatic parallellization feature was removed."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unidentified unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 310,
                  "message": "The calculation failed with a known unrecoverable error."
                },
                {
                  "status": 320,
                  "message": "The initialization calculation failed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                },
                {
                  "status": 501,
                  "message": "Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."
                },
                {
                  "status": 710,
                  "message": "The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.pw.base:PwBaseWorkChain"
          },
          "quantumespresso.pw.relax": {
            "description": [
              "Workchain to relax a structure using Quantum ESPRESSO pw.x."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "base",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the main relax loop."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The inputs structure."
                },
                {
                  "name": "base_final_scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the final scf."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
                },
                {
                  "name": "max_meta_convergence_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "The maximum number of variable cell relax iterations in the meta convergenc ..."
                },
                {
                  "name": "meta_convergence",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True` the workchain will perform a meta-convergence on the cell volume."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "volume_convergence",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The volume difference threshold between two consecutive meta convergence it ..."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The `output_parameters` output node of the successful calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "output_atomic_occupations",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "output_band",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The `output_band` output node of the successful calculation if present."
                },
                {
                  "name": "output_kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "output_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The successfully relaxed structure."
                },
                {
                  "name": "output_trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 401,
                  "message": "the relax PwBaseWorkChain sub process failed"
                },
                {
                  "status": 402,
                  "message": "the final scf PwBaseWorkChain sub process failed"
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.pw.relax:PwRelaxWorkChain"
          },
          "quantumespresso.q2r.base": {
            "description": [
              "Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "q2r",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "force_constants",
                  "required": true,
                  "valid_types": "ForceConstantsData",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.q2r.base:Q2rBaseWorkChain"
          },
          "quantumespresso.xps": {
            "description": [
              "Workchain to compute X-ray photoelectron spectra (XPS) for a given structure.",
              "",
              "    The WorkChain itself firstly calls the PwRelaxWorkChain to relax the input structure if",
              "    required. Then determines the input settings for each XPS calculation automatically using",
              "    ``get_xspectra_structures()``. The input structures are generated from the standardized",
              "    structure by converting each to a supercell with cell dimensions of at least 8.0 angstrom",
              "    in each periodic dimension in order to sufficiently reduce the unphysical interaction",
              "    of the core-hole with neighbouring images. The size of the minimum size requirement can be",
              "    overriden by the user if required. Then the standard Delta-Self-Consistent-Field (\u0394SCF)",
              "    method is used to get the XPS binding energy. Finally, the XPS spectrum is calculated",
              "    using the Voigt profile."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "ch_scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Input parameters for the basic xps workflow (core-hole SCF)."
                },
                {
                  "name": "core_hole_pseudos",
                  "required": true,
                  "valid_types": "UpfData, UpfData",
                  "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
                },
                {
                  "name": "gipaw_pseudos",
                  "required": true,
                  "valid_types": "UpfData, UpfData",
                  "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Structure to be used for calculation."
                },
                {
                  "name": "abs_atom_marker",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
                },
                {
                  "name": "calc_binding_energy",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, run scf calculation for the supercell."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
                },
                {
                  "name": "core_hole_treatments",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional dictionary to set core-hole treatment to all elements present. The ..."
                },
                {
                  "name": "correction_energies",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional dictionary to set the correction energy to all elements present. "
                },
                {
                  "name": "dry_run",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
                },
                {
                  "name": "elements_list",
                  "required": false,
                  "valid_types": "List, NoneType",
                  "info": "The list of elements to be considered for analysis, each must be valid elem ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "relax",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
                },
                {
                  "name": "spglib_settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
                },
                {
                  "name": "structure_preparation_settings",
                  "required": false,
                  "valid_types": "Dict, Float, Int, Bool, Str",
                  "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
                },
                {
                  "name": "voight_gamma",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The gamma parameter for the Lorenzian broadening in the Voight method."
                },
                {
                  "name": "voight_sigma",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The sigma parameter for the gaussian broadening in the Voight method."
                }
              ],
              "outputs": [
                {
                  "name": "binding_energies",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "All the binding energy values for each element calculated by the WorkChain."
                },
                {
                  "name": "chemical_shifts",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "All the chemical shift values for each element calculated by the WorkChain."
                },
                {
                  "name": "final_spectra_be",
                  "required": true,
                  "valid_types": "XyData",
                  "info": "The fully-resolved spectra for each element based on binding energy."
                },
                {
                  "name": "final_spectra_cls",
                  "required": true,
                  "valid_types": "XyData",
                  "info": "The fully-resolved spectra for each element based on chemical shift."
                },
                {
                  "name": "output_parameters_ch_scf",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters of each ``PwBaseWorkChain`` performed``."
                },
                {
                  "name": "supercell_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
                },
                {
                  "name": "symmetry_analysis_data",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters from ``get_xspectra_structures()``."
                },
                {
                  "name": "optimized_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The optimized structure from the ``relax`` process."
                },
                {
                  "name": "output_parameters_relax",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output_parameters of the relax step."
                },
                {
                  "name": "output_parameters_scf",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output_parameters of the scf step."
                },
                {
                  "name": "standardized_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The standardized crystal structure used to generate structures for XPS sub- ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 401,
                  "message": "The Relax sub process failed"
                },
                {
                  "status": 402,
                  "message": "The SCF Pw sub processes failed"
                },
                {
                  "status": 402,
                  "message": "One or more CH_SCF Pw sub processes failed"
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.xps:XpsWorkChain"
          },
          "quantumespresso.xspectra.base": {
            "description": [
              "Workchain to run a Quantum ESPRESSO xspectra.x calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "xspectra",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "An explicit k-points mesh. Either this or `kpoints_distance` has to be prov ..."
                },
                {
                  "name": "kpoints_distance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "The minimum desired distance in 1/\u212b between k-points in reciprocal space. T ..."
                },
                {
                  "name": "kpoints_force_parity",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Optional input when constructing the k-points based on a desired `kpoints_d ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "spectra",
                  "required": true,
                  "valid_types": "XyData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 202,
                  "message": "Neither the `kpoints` nor the `kpoints_distance` input was specified."
                },
                {
                  "status": 300,
                  "message": "The calculation failed with an unrecoverable error."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.xspectra.base:XspectraBaseWorkChain"
          },
          "quantumespresso.xspectra.core": {
            "description": [
              "Workchain to compute X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
              "",
              "    The workflow follows the process required to compute the XAS of an input structure: an SCF calculation is performed",
              "    using the provided structure, which is then followed by the calculation of the XAS itself by XSpectra. The",
              "    calculations performed by the WorkChain in a typical run will be:",
              "",
              "    - PwSCF calculation with pw.x of the input structure with a core-hole present.",
              "    - Generation of core-wavefunction data with upf2plotcore.sh (if requested).",
              "    - XAS calculation with xspectra.x to compute the Lanczos coefficients and print the XANES spectra for the",
              "      polarisation vectors requested in the input.",
              "    - Collation of output data from pw.x and xspectra.x calculations, including a combination of XANES dipole spectra",
              "      based on polarisation vectors to represent the powder spectrum of the structure (if requested).",
              "",
              "    If ``run_replot = True`` is set in the inputs (defaults to False), the WorkChain will run a second xspectra.x",
              "    calculation which replots the spectra produced from the ``xs_prod`` step. This option can be very useful for",
              "    obtaining a final spectrum at low levels of broadening (relative to the default of 0.5 eV), particularly as higher",
              "    levels of broadening significantly speed up the convergence of the Lanczos procedure. Inputs for the replot",
              "    calculation are found in the ``xs_plot`` namespace.",
              "",
              "    The core-wavefunction plot derived from the ground-state of the absorbing element can be provided as a top-level",
              "    input or produced by the WorkChain. If left to the WorkChain, the ground-state pseudopotential assigned to the",
              "    absorbing element will be used to generate this data using the upf2plotcore.sh utility script (via the",
              "    ``aiida-shell`` plugin).",
              "",
              "    In its current stage of development, the workflow requires the following:",
              "",
              "    - An input structure where the desired absorbing atom in the system is marked as a separate Kind. The default",
              "      behaviour for the WorkChain is to set the Kind name as 'X', however this can be changed via the `overrides`",
              "      dictionary.",
              "    - A code node for ``upf2plotcore``, configured for the ``aiida-shell`` plugin",
              "      (https://github.com/sphuber/aiida-shell). Alternatively, a ``SinglefileData`` node from a previous ``ShellJob``",
              "      run can be supplied under ``inputs.core_wfc_data``.",
              "    - A suitable pair of pseudopotentials for the element type of the absorbing atom, one for the ground-state occupancy",
              "      which contains GIPAW informtation for the core level of interest for the XAS (e.g. 1s in the case of a K-edge",
              "      calculation) and the other containing a core hole. (For the moment this can be passed either via the",
              "      ``core_hole_pseudos`` field in ``get_builder_from_protocol`` or via the overrides, but will be changed later once",
              "      full families of core-hole pseudopotentials become available)."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "eps_vectors",
                  "required": true,
                  "valid_types": "List",
                  "info": "The list of 3-vectors to use in XSpectra sub-processes. The number of sub-l ..."
                },
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Input parameters for the `pw.x` calculation."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Structure to be used for calculation, with at least one site containing the ..."
                },
                {
                  "name": "xs_prod",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Input parameters for the `xspectra.x` calculation to compute the Lanczos."
                },
                {
                  "name": "abs_atom_marker",
                  "required": false,
                  "valid_types": "Str, NoneType",
                  "info": "The name for the Kind representing the absorbing atom in the structure. Mus ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
                },
                {
                  "name": "core_wfc_data",
                  "required": false,
                  "valid_types": "SinglefileData, NoneType",
                  "info": "The core wavefunction data file extracted from the ground-state pseudo for  ..."
                },
                {
                  "name": "dry_run",
                  "required": false,
                  "valid_types": "Bool, NoneType",
                  "info": "Terminate workchain steps before submitting calculations (test purposes onl ..."
                },
                {
                  "name": "get_powder_spectrum",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, the WorkChain will combine XANES dipole spectra computed using t ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "run_replot",
                  "required": false,
                  "valid_types": "Bool",
                  "info": ""
                },
                {
                  "name": "upf2plotcore_code",
                  "required": false,
                  "valid_types": "Code, NoneType",
                  "info": "The code node required for upf2plotcore.sh configured for ``aiida-shell``.  ..."
                },
                {
                  "name": "xs_plot",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Input parameters for the re-plot `xspectra.x` calculation of the Lanczos."
                }
              ],
              "outputs": [
                {
                  "name": "parameters_scf",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters of the SCF `PwBaseWorkChain`."
                },
                {
                  "name": "parameters_xspectra",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output dictionaries of each `XspectraBaseWorkChain` performed"
                },
                {
                  "name": "spectra",
                  "required": true,
                  "valid_types": "XyData",
                  "info": "An XyData node containing all the final spectra produced by the WorkChain."
                },
                {
                  "name": "powder_spectrum",
                  "required": false,
                  "valid_types": "XyData",
                  "info": "The simulated powder spectrum"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 401,
                  "message": "The SCF sub process failed"
                },
                {
                  "status": 402,
                  "message": "One or more XSpectra sub processes failed"
                },
                {
                  "status": 403,
                  "message": "The pseudo for the absorbing element contains no GIPAW information."
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.xspectra.core:XspectraCoreWorkChain"
          },
          "quantumespresso.xspectra.crystal": {
            "description": [
              "Workchain to compute all X-ray absorption spectra for a given structure using Quantum ESPRESSO.",
              "",
              "    The WorkChain follows the process required to compute all the K-edge XAS spectra for each",
              "    element in a given structure. The WorkChain itself firstly calls the PwRelaxWorkChain to",
              "    relax the input structure, then determines the input settings for each XAS",
              "    calculation automatically using ``get_xspectra_structures()``:",
              "",
              "        - Firstly the input structure is converted to its conventional standard cell using",
              "          ``spglib`` and detects the space group number for the conventional cell.",
              "        - Symmetry analysis of the standardized structure using ``spglib`` is then used to",
              "          determine the number of non-equivalent atomic sites in the structure for each",
              "          element considered for analysis.",
              "",
              "    Using the symmetry data returned from ``get_xspectra_structures``, input structures for",
              "    the XspectraCoreWorkChain are generated from the standardized structure by converting each",
              "    to a supercell with cell dimensions of at least 8.0 angstroms in each periodic dimension -",
              "    required in order to sufficiently reduce the unphysical interaction of the core-hole with",
              "    neighbouring images. The size of the minimum size requirement can be overriden by the",
              "    user if required. The WorkChain then uses the space group number to set the list of",
              "    polarisation vectors for the ``XspectraCoreWorkChain`` to compute for all subsequent",
              "    calculations."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "core",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Input parameters for the basic xspectra workflow (core-hole SCF + XAS."
                },
                {
                  "name": "core_hole_pseudos",
                  "required": true,
                  "valid_types": "UpfData, UpfData",
                  "info": "Dynamic namespace for pairs of excited-state pseudopotentials for each abso ..."
                },
                {
                  "name": "elements_list",
                  "required": true,
                  "valid_types": "List",
                  "info": "The list of elements to be considered for analysis, each must be a valid el ..."
                },
                {
                  "name": "gipaw_pseudos",
                  "required": true,
                  "valid_types": "UpfData, UpfData",
                  "info": "Dynamic namespace for pairs of ground-state pseudopotentials for each absor ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Structure to be used for calculation."
                },
                {
                  "name": "abs_atom_marker",
                  "required": false,
                  "valid_types": "Str",
                  "info": "The name for the Kind representing the absorbing atom in the structure. Wil ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculations will be cleaned at t ..."
                },
                {
                  "name": "core_hole_treatments",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional dictionary to set core-hole treatment to given elements present. T ..."
                },
                {
                  "name": "core_wfc_data",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Input namespace to provide core wavefunction inputs for each element. Must  ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "relax",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Input parameters for the relax process. If not specified at all, the relaxa ..."
                },
                {
                  "name": "return_all_powder_spectra",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If ``True``, the WorkChain will return all ``powder_spectrum`` nodes from e ..."
                },
                {
                  "name": "spglib_settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Optional settings dictionary for the spglib call within ``get_xspectra_stru ..."
                },
                {
                  "name": "structure_preparation_settings",
                  "required": false,
                  "valid_types": "Dict, Float, Int, Bool, Str",
                  "info": "Optional settings dictionary for the ``get_xspectra_structures()`` method."
                },
                {
                  "name": "upf2plotcore_code",
                  "required": false,
                  "valid_types": "Code, NoneType",
                  "info": "Code node for the upf2plotcore.sh ShellJob code."
                }
              ],
              "outputs": [
                {
                  "name": "final_spectra",
                  "required": true,
                  "valid_types": "XyData",
                  "info": "The fully-resolved spectra for each element"
                },
                {
                  "name": "supercell_structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The supercell of ``outputs.standardized_structure`` used to generate struct ..."
                },
                {
                  "name": "symmetry_analysis_data",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters from ``get_xspectra_structures()``."
                },
                {
                  "name": "optimized_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The optimized structure from the ``relax`` process."
                },
                {
                  "name": "parameters_relax",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output_parameters of the relax step."
                },
                {
                  "name": "parameters_scf",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output parameters of each ``PwBaseWorkChain`` performed in each ``Xspec ..."
                },
                {
                  "name": "parameters_xspectra",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output dictionaries of each `XspectraCalculation` performed"
                },
                {
                  "name": "powder_spectra",
                  "required": false,
                  "valid_types": "XyData",
                  "info": "All the spectra generated by the WorkChain."
                },
                {
                  "name": "standardized_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The standardized crystal structure used to generate structures for XSpectra ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 401,
                  "message": "The Relax sub process failed"
                },
                {
                  "status": 402,
                  "message": "One or more XSpectra workflows failed"
                },
                {
                  "status": 403,
                  "message": "The pseudos for one or more absorbing elements contain no GIPAW information."
                }
              ]
            },
            "class": "aiida_quantumespresso.workflows.xspectra.crystal:XspectraCrystalWorkChain"
          }
        },
        "console_scripts": {
          "aiida-quantumespresso": "aiida_quantumespresso.cli:cmd_root"
        }
      },
      "commits_count": 95,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 19
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 13
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 11
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        },
        {
          "colorclass": "orange",
          "text": "Other (Tools calculations, Tools data orbitals)",
          "count": 3
        }
      ],
      "pip_install_cmd": "pip install aiida-quantumespresso"
    },
    "aiida-quantumespresso-hp": {
      "code_home": "https://github.com/sphuber/aiida-quantumespresso-hp",
      "entry_point_prefix": "quantumespresso.hp",
      "pip_url": "git+https://github.com/sphuber/aiida-quantumespresso-hp",
      "name": "aiida-quantumespresso-hp",
      "package_name": "aiida_quantumespresso_hp",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Sebastiaan P. Huber",
        "author_email": "mail@sphuber.net",
        "version": "0.1.0",
        "description": "The AiiDA plugin for the Hubbard module of Quantum ESPRESSO",
        "classifiers": [
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 2.7",
          "Development Status :: 4 - Beta"
        ]
      },
      "aiida_version": ">=1.0.0b6,<2.0",
      "entry_points": {
        "aiida.calculations": {
          "quantumespresso.hp": "aiida_quantumespresso_hp.calculations.hp:HpCalculation"
        },
        "aiida.parsers": {
          "quantumespresso.hp": "aiida_quantumespresso_hp.parsers.hp:HpParser"
        },
        "aiida.workflows": {
          "quantumespresso.hp.main": "aiida_quantumespresso_hp.workflows.hp.main:HpWorkChain",
          "quantumespresso.hp.parallelize_atoms": "aiida_quantumespresso_hp.workflows.hp.parallelize_atoms:HpParallelizeAtomsWorkChain",
          "quantumespresso.hp.base": "aiida_quantumespresso_hp.workflows.hp.base:HpBaseWorkChain",
          "quantumespresso.hp.hubbard": "aiida_quantumespresso_hp.workflows.hubbard:SelfConsistentHubbardWorkChain"
        },
        "console_scripts": {
          "launch_calculation_hp": "aiida_quantumespresso_hp.cli.calculations.hp:launch",
          "launch_workflow_hp_base": "aiida_quantumespresso_hp.cli.workflows.hp.base:launch",
          "launch_workflow_hp_main": "aiida_quantumespresso_hp.cli.workflows.hp.main:launch",
          "launch_workflow_hp_hubbard": "aiida_quantumespresso_hp.cli.workflows.hubbard:launch"
        }
      },
      "commits_count": 0,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 4
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 4
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/sphuber/aiida-quantumespresso-hp"
    },
    "aiida-raspa": {
      "code_home": "https://github.com/yakutovicha/aiida-raspa",
      "entry_point_prefix": "raspa",
      "pip_url": "aiida-raspa",
      "name": "aiida-raspa",
      "package_name": "aiida_raspa",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for RASPA code",
        "author": "Aliaksandr Yakutovich",
        "author_email": "aliaksandr.yakutovich@epfl.ch",
        "license": "MIT License",
        "home_page": "https://github.com/yakutovicha/aiida-raspa",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 3"
        ],
        "version": "1.2.0"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.calculations": {
          "raspa": {
            "description": [
              "This is a RaspaCalculation, subclass of CalcJob, to prepare input for RASPA code.",
              "    For information on RASPA, refer to: https://github.com/iraspa/raspa2."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Input parameters"
                },
                {
                  "name": "block_pocket",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Zeo++ block pocket file"
                },
                {
                  "name": "file",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Additional input file(s)"
                },
                {
                  "name": "framework",
                  "required": false,
                  "valid_types": "CifData",
                  "info": "Input framework(s)"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "Remote folder used to continue the same simulation stating from the binary  ..."
                },
                {
                  "name": "retrieved_parent_folder",
                  "required": false,
                  "valid_types": "FolderData",
                  "info": "To use an old calculation as a starting poing for a new one."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Additional input parameters"
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The results of a calculation"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "warnings",
                  "required": false,
                  "valid_types": "List",
                  "info": "Warnings that appeared during the calculation"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 101,
                  "message": "The retrieved folder does not contain an output file."
                },
                {
                  "status": 102,
                  "message": "The output does not contain \"Starting simulation\"."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 500,
                  "message": "The calculation could not be completed due to the lack of time."
                }
              ]
            },
            "class": "aiida_raspa.calculations:RaspaCalculation"
          }
        },
        "aiida.parsers": {
          "raspa": "aiida_raspa.parsers:RaspaParser"
        },
        "aiida.workflows": {
          "raspa.base": {
            "description": [
              "Workchain to run a RASPA calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "raspa",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The results of a calculation"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "warnings",
                  "required": false,
                  "valid_types": "List",
                  "info": "Warnings that appeared during the calculation"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_raspa.workchains:RaspaBaseWorkChain"
          }
        }
      },
      "commits_count": 1,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-raspa"
    },
    "aiida-shell": {
      "code_home": "https://github.com/sphuber/aiida-shell",
      "entry_point_prefix": "core",
      "pip_url": "aiida-shell",
      "plugin_info": "https://raw.github.com/sphuber/aiida-shell/master/pyproject.toml",
      "name": "aiida-shell",
      "package_name": "aiida_shell",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin that makes running shell commands easy.",
        "author_email": "\"Sebastiaan P. Huber\" <mail@sphuber.net>",
        "classifiers": [
          "Development Status :: 3 - Alpha",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering"
        ],
        "version": "0.5.3"
      },
      "aiida_version": ">=2.1,<3.0",
      "entry_points": {
        "aiida.calculations": {
          "core.shell": {
            "description": [
              "Implementation of :class:`aiida.engine.CalcJob` to run a simple shell command."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "arguments",
                  "required": false,
                  "valid_types": "List, NoneType",
                  "info": ""
                },
                {
                  "name": "filenames",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "nodes",
                  "required": false,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "outputs",
                  "required": false,
                  "valid_types": "List, NoneType",
                  "info": ""
                },
                {
                  "name": "parser",
                  "required": false,
                  "valid_types": "PickledData, NoneType",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Exit status could not be determined: exit status file was not retrieved."
                },
                {
                  "status": 301,
                  "message": "Exit status could not be determined: exit status file does not contain a valid integer."
                },
                {
                  "status": 302,
                  "message": "The stdout file was not retrieved."
                },
                {
                  "status": 303,
                  "message": "One or more output files defined in the `outputs` input were not retrieved: {missing_filepaths}."
                },
                {
                  "status": 310,
                  "message": "Callable specified in the `parser` input excepted: {exception}."
                },
                {
                  "status": 400,
                  "message": "The command exited with a non-zero status: {status} {stderr}."
                },
                {
                  "status": 410,
                  "message": "The command exited with a zero status but the stderr was not empty."
                }
              ]
            },
            "class": "aiida_shell.calculations.shell:ShellJob"
          }
        },
        "aiida.data": {
          "core.code.installed.shell": "aiida_shell.data.code:ShellCode",
          "core.pickled": "aiida_shell.data.pickled:PickledData"
        },
        "aiida.parsers": {
          "core.shell": "aiida_shell.parsers.shell:ShellParser"
        }
      },
      "commits_count": 47,
      "development_status": "alpha",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 2
        }
      ],
      "pip_install_cmd": "pip install aiida-shell"
    },
    "aiida-siesta": {
      "code_home": "https://github.com/siesta-project/aiida_siesta_plugin/tree/master",
      "documentation_url": "https://aiida-siesta-plugin.readthedocs.io/",
      "entry_point_prefix": "siesta",
      "pip_url": "aiida-siesta",
      "name": "aiida-siesta",
      "package_name": "aiida_siesta",
      "hosted_on": "github.com",
      "metadata": {
        "description": "A plugin for Siesta's basic functionality within the AiiDA framework.",
        "author_email": "Albero Garcia <albertog@icmab.es>, \"Victor M. Garcia-Suarez\" <garciavictor@uniovi.es>, Emanuele Bosoni <ebosoni@icmab.es>, Vladimir Dikan <vdikan@icmab.es>, Pol Febrer <pol.febrer@icn2.cat>",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ],
        "version": "2.0.0"
      },
      "aiida_version": ">=2.0.0,<3.0.0",
      "entry_points": {},
      "commits_count": 12,
      "development_status": "stable",
      "summaryinfo": [],
      "pip_install_cmd": "pip install aiida-siesta"
    },
    "aiida-spex": {
      "code_home": "https://github.com/JuDFTteam/aiida-spex",
      "entry_point_prefix": "spex",
      "pip_url": "git+https://github.com/JuDFTteam/aiida-spex",
      "name": "aiida-spex",
      "package_name": "aiida_spex",
      "hosted_on": "github.com",
      "metadata": {
        "author": "The SPEX Team",
        "author_email": "a.chandran@fz-juelich.de",
        "version": "1.1.2",
        "description": "AiiDA plugin for SPEX code",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.0.0b3,<3.0.0",
      "entry_points": {
        "aiida.calculations": {
          "spex.spex": "aiida_spex.calculations.spex:SpexCalculation"
        },
        "aiida.data": {
          "spex.spexinp": "aiida_spex.data.spexinp:SpexinpData"
        },
        "aiida.parsers": {
          "spex.spexparser": "aiida_spex.parsers.spex:SpexParser"
        },
        "aiida.workflows": {
          "spex.job": "aiida_spex.workflows.job:SpexJobWorkchain"
        }
      },
      "commits_count": 58,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/JuDFTteam/aiida-spex"
    },
    "aiida-spirit": {
      "code_home": "https://github.com/JuDFTteam/aiida-spirit/tree/main",
      "documentation_url": "https://aiida-spirit.readthedocs.io/",
      "entry_point_prefix": "spirit",
      "name": "aiida-spirit",
      "pip_url": "aiida-spirit",
      "package_name": "aiida_spirit",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for the spirit code",
        "author": "The JuDFT Team",
        "author_email": "p.ruessmann@fz-juelich.de",
        "license": "MIT",
        "home_page": "https://github.com/JuDFTteam/aiida-spirit",
        "classifiers": [
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "0.2.2"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.calculations": {
          "spirit": "aiida_spirit.calculations:SpiritCalculation"
        },
        "aiida.parsers": {
          "spirit": "aiida_spirit.parsers:SpiritParser"
        }
      },
      "commits_count": 22,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-spirit"
    },
    "aiida-sshonly": {
      "code_home": "https://github.com/adegomme/aiida-sshonly",
      "development_status": "beta",
      "entry_point_prefix": "sshonly",
      "pip_url": "aiida-sshonly",
      "plugin_info": "https://raw.github.com/adegomme/aiida-sshonly/master/setup.json",
      "name": "aiida-sshonly",
      "package_name": "aiida_sshonly",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin adding a sshonly transport option, using only SSH to transfer files, avoiding SFTP, in case it's blocked or non functional on a remote system",
        "author": "adegomme",
        "license": "MIT",
        "home_page": "https://github.com/adegomme/aiida-sshonly",
        "classifiers": [
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "0.1.0a3"
      },
      "aiida_version": ">=1.3.0,<2.0.0",
      "entry_points": {
        "aiida.transports": {
          "ssh_only": "aiida_sshonly.transports.sshonly:SshOnlyTransport"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "orange",
          "text": "Other (Transports)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-sshonly"
    },
    "aiida-statefile-schedulers": {
      "code_home": "https://github.com/dev-zero/aiida-statefile-schedulers",
      "development_status": "beta",
      "entry_point_prefix": "statefile_schedulers",
      "pip_url": "aiida-statefile-schedulers",
      "name": "aiida-statefile-schedulers",
      "package_name": "aiida_statefile_schedulers",
      "hosted_on": "github.com",
      "metadata": {
        "description": "Simple statefile-driven task schedulers for AiiDA",
        "author": "Tiziano M\u00fcller",
        "author_email": "tm@dev-zero.ch",
        "license": "MIT",
        "home_page": "https://github.com/dev-zero/aiida-statefile-schedulers",
        "classifiers": [
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "0.2.1"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.schedulers": {
          "statefile_schedulers.direct": "aiida_statefile_schedulers.schedulers.direct:StatefileDirectScheduler"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "orange",
          "text": "Other (Schedulers)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-statefile-schedulers"
    },
    "aiida-strain": {
      "code_home": "https://github.com/greschd/aiida-strain",
      "documentation_url": "https://aiida-strain.readthedocs.io",
      "entry_point_prefix": "strain",
      "pip_url": "aiida-strain",
      "name": "aiida-strain",
      "package_name": "aiida_strain",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Plugin for applying strain to structures",
        "author": "Dominik Gresch",
        "author_email": "greschd@gmx.ch",
        "license": "Apache 2.0",
        "home_page": "https://aiida-strain.readthedocs.io",
        "classifiers": [
          "Development Status :: 3 - Alpha",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "0.2.0"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.workflows": {
          "strain.apply_strains": {
            "description": [
              "Workchain to create strained structures from a given input structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "strain_kind",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "strain_parameters",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "strain_strengths",
                  "required": true,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_strain:ApplyStrains"
          },
          "strain.apply_strains_with_symmetry": {
            "description": [
              "Workchain to create strained structures from an input structure, and select the symmetries which are compatible with the strained structure from a set of given input symmetries."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "strain_kind",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "strain_parameters",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "strain_strengths",
                  "required": true,
                  "valid_types": "List",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": ""
                },
                {
                  "name": "symmetries",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": ""
                },
                {
                  "name": "symmetry_repr_code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_strain:ApplyStrainsWithSymmetry"
          }
        }
      },
      "commits_count": 0,
      "development_status": "alpha",
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 2
        }
      ],
      "pip_install_cmd": "pip install aiida-strain"
    },
    "aiida-supercell": {
      "code_home": "https://github.com/pzarabadip/aiida-supercell",
      "development_status": "stable",
      "documentation_url": "https://aiida-supercell.readthedocs.io/",
      "entry_point_prefix": "supercell",
      "pip_url": "git+https://github.com/pzarabadip/aiida-supercell",
      "name": "aiida-supercell",
      "package_name": "aiida_supercell",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Pezhman Zarabadi-Poor",
        "author_email": "pzarabadip@gmail.com",
        "version": "1.0.1",
        "description": "AiiDA Plugin for Supercell program",
        "classifiers": [
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9"
        ]
      },
      "aiida_version": ">=1.0.0,<2.0",
      "entry_points": {
        "aiida.calculations": {
          "supercell": {
            "description": [
              "This is a SupercellCalculation, subclass of JobCalculation,",
              "    to prepare input for enumerating structures using Supercell program"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, SinglefileData",
                  "info": "Input structure"
                },
                {
                  "name": "supercell_size",
                  "required": true,
                  "valid_types": "List",
                  "info": "Supercell size for enumeration"
                },
                {
                  "name": "calculate_coulomb_energies",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "Whether to calculate Coulomb energies"
                },
                {
                  "name": "charge_balance_method",
                  "required": false,
                  "valid_types": "Str",
                  "info": "Method to use for charge balancing"
                },
                {
                  "name": "charges",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Dictionary of formal charges to be used"
                },
                {
                  "name": "merge_symmetric",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "Whether to merge symmetrically distinct configurations"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "random_seed",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Random seed number"
                },
                {
                  "name": "sample_structures",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "How to sample structures from huge configuration space"
                },
                {
                  "name": "save_as_archive",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "Whether to save resulting structures as archive"
                },
                {
                  "name": "tolerance",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The maximum distance (in Angstroms) between sites that should be contained  ..."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "the results of the calculation"
                },
                {
                  "name": "output_structures",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "relaxed structure"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 101,
                  "message": "Input structure could not be processed."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                }
              ]
            },
            "class": "aiida_supercell.calculations:SupercellCalculation"
          }
        },
        "aiida.parsers": {
          "supercell": "aiida_supercell.parsers:SupercellParser"
        }
      },
      "commits_count": 3,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/pzarabadip/aiida-supercell"
    },
    "aiida-symmetry-representation": {
      "code_home": "https://github.com/greschd/aiida_symmetry_representation",
      "documentation_url": "https://aiida-symmetry-representation.readthedocs.io",
      "entry_point_prefix": "symmetry_representation",
      "pip_url": "aiida-symmetry-representation",
      "name": "aiida-symmetry-representation",
      "package_name": "aiida_symmetry_representation",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Plugin for symmetry representations.",
        "author": "Dominik Gresch",
        "author_email": "greschd@gmx.ch",
        "license": "Apache 2.0",
        "home_page": "https://aiida-symmetry-representation.readthedocs.io",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "0.2.0"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.calculations": {
          "symmetry_representation.filter_symmetries": {
            "description": [
              "Calculation class to run the ``symmetry-repr filter_symmetries`` command."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "Structure with which the filtered symmetries should be compatible."
                },
                {
                  "name": "symmetries",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "File containing the symmetries (in HDF5 format)."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "symmetries",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "The HDF5 file containing the symmetries which are compatible with the struc ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                }
              ]
            },
            "class": "aiida_symmetry_representation.calculations.filter_symmetries:FilterSymmetriesCalculation"
          }
        },
        "aiida.parsers": {
          "symmetry_representation.symmetry": "aiida_symmetry_representation.parsers.symmetries:SymmetriesParser"
        }
      },
      "commits_count": 0,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-symmetry-representation"
    },
    "aiida-tbextraction": {
      "code_home": "https://github.com/greschd/aiida-tbextraction",
      "documentation_url": "https://aiida-tbextraction.readthedocs.io/",
      "entry_point_prefix": "tbextraction",
      "pip_url": "aiida-tbextraction",
      "name": "aiida-tbextraction",
      "package_name": "aiida_tbextraction",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Plugin for extracting tight-binding models",
        "author": "Dominik Gresch",
        "author_email": "greschd@gmx.ch",
        "license": "Apache 2.0",
        "home_page": "https://aiida-tbextraction.readthedocs.io",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "0.2.0b1"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.workflows": {
          "tbextraction.fp_run.base": "aiida_tbextraction.fp_run:FirstPrinciplesRunBase",
          "tbextraction.fp_run.reference_bands.base": "aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase",
          "tbextraction.fp_run.wannier_input.base": "aiida_tbextraction.fp_run.wannier_input:WannierInputBase",
          "tbextraction.calculate_tb": "aiida_tbextraction.calculate_tb:TightBindingCalculation",
          "tbextraction.model_evaluation.base": "aiida_tbextraction.model_evaluation:ModelEvaluationBase",
          "tbextraction.model_evaluation.band_difference": "aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation",
          "tbextraction.energy_windows.run_window": "aiida_tbextraction.energy_windows.run_window:RunWindow",
          "tbextraction.energy_windows.window_search": "aiida_tbextraction.energy_windows.window_search:WindowSearch",
          "tbextraction.optimize_fp_tb": "aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding",
          "tbextraction.optimize_strained_fp_tb": "aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding"
        }
      },
      "commits_count": 0,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 10
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-tbextraction"
    },
    "aiida-tbmodels": {
      "code_home": "https://github.com/greschd/aiida-tbmodels",
      "documentation_url": "https://aiida-tbmodels.readthedocs.io",
      "entry_point_prefix": "tbmodels",
      "pip_url": "aiida-tbmodels",
      "name": "aiida-tbmodels",
      "package_name": "aiida_tbmodels",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Plugin for running TBmodels",
        "author": "Dominik Gresch",
        "author_email": "greschd@gmx.ch",
        "license": "Apache 2.0",
        "home_page": "https://aiida-tbmodels.readthedocs.io",
        "classifiers": [
          "Development Status :: 3 - Alpha",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "0.3.0"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.calculations": {
          "tbmodels.eigenvals": {
            "description": [
              "Calculation class for the 'tbmodels eigenvals' command, which computes the eigenvalues from a given tight-binding model."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "Kpoints for which the eigenvalues are calculated."
                },
                {
                  "name": "tb_model",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input model in TBmodels HDF5 format."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "bands",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "The calculated eigenvalues of the model at given k-points."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 300,
                  "message": "The result HDF5 file was not found."
                },
                {
                  "status": 301,
                  "message": "The standard error file contains an unknown TBmodels exception."
                }
              ]
            },
            "class": "aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation"
          },
          "tbmodels.parse": {
            "description": [
              "Calculation plugin for the 'tbmodels parse' command, which creates a",
              "    TBmodels tight-binding model from the Wannier90 output."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "wannier_folder",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Folder containing the Wannier90 output data."
                },
                {
                  "name": "distance_ratio_threshold",
                  "required": false,
                  "valid_types": "Float",
                  "info": "Determines the minimum ratio between nearest and next-nearest atom when par ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "pos_kind",
                  "required": false,
                  "valid_types": "Str",
                  "info": "Determines how the orbital positions are parsed."
                },
                {
                  "name": "sparsity",
                  "required": false,
                  "valid_types": "Str",
                  "info": "Set the sparsity of the output model. Requires TBmodels version >=1.4."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "tb_model",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output model in TBmodels HDF5 format."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 300,
                  "message": "The output model HDF5 file was not found."
                },
                {
                  "status": 301,
                  "message": "The standard error file contains an unknown TBmodels exception."
                },
                {
                  "status": 301,
                  "message": "The seedname_wsvec.dat file is empty or incomplete."
                },
                {
                  "status": 401,
                  "message": "The nearest atom to use for position parsing is ambiguous."
                }
              ]
            },
            "class": "aiida_tbmodels.calculations.parse:ParseCalculation"
          },
          "tbmodels.slice": {
            "description": [
              "Calculation plugin for the 'tbmodels slice' command, which re-orders or slices orbitals of a tight-binding model."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "slice_idx",
                  "required": true,
                  "valid_types": "List",
                  "info": "Indices of the orbitals which are sliced from the model."
                },
                {
                  "name": "tb_model",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input model in TBmodels HDF5 format."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "sparsity",
                  "required": false,
                  "valid_types": "Str",
                  "info": "Set the sparsity of the output model. Requires TBmodels version >=1.4."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "tb_model",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output model in TBmodels HDF5 format."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 300,
                  "message": "The output model HDF5 file was not found."
                },
                {
                  "status": 301,
                  "message": "The standard error file contains an unknown TBmodels exception."
                }
              ]
            },
            "class": "aiida_tbmodels.calculations.slice:SliceCalculation"
          },
          "tbmodels.symmetrize": {
            "description": [
              "Calculation class for the 'tbmodels symmetrize' command, which creates a symmetrized tight-binding model from a tight-binding model and symmetry representations."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "symmetries",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "File containing the symmetries in HDF5 format."
                },
                {
                  "name": "tb_model",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Input model in TBmodels HDF5 format."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "sparsity",
                  "required": false,
                  "valid_types": "Str",
                  "info": "Set the sparsity of the output model. Requires TBmodels version >=1.4."
                }
              ],
              "outputs": [
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "tb_model",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": "Output model in TBmodels HDF5 format."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 300,
                  "message": "The output model HDF5 file was not found."
                },
                {
                  "status": 301,
                  "message": "The standard error file contains an unknown TBmodels exception."
                },
                {
                  "status": 301,
                  "message": "The type of the given symmetries object is incorrect."
                }
              ]
            },
            "class": "aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation"
          }
        },
        "aiida.parsers": {
          "tbmodels.model": "aiida_tbmodels.parsers.model:ModelParser"
        }
      },
      "commits_count": 0,
      "development_status": "alpha",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 4
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-tbmodels"
    },
    "aiida-tcod": {
      "code_home": "https://github.com/aiidateam/aiida-tcod",
      "development_status": "beta",
      "entry_point_prefix": "tcod",
      "pip_url": "git+https://github.com/aiidateam/aiida-tcod",
      "name": "aiida-tcod",
      "package_name": "aiida_tcod",
      "hosted_on": "github.com",
      "metadata": {
        "author": "The AiiDA team",
        "author_email": "developers@aiida.net",
        "version": "0.1.0a0",
        "description": "AiiDA plugin to interact with the TCOD",
        "classifiers": [
          "Programming Language :: Python"
        ]
      },
      "aiida_version": ">=1.0.0b1",
      "entry_points": {
        "aiida.tools.dbexporters": {
          "tcod": "aiida.tools.dbexporters.tcod"
        }
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "orange",
          "text": "Other (Database Exporters)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/aiidateam/aiida-tcod"
    },
    "aiida-uppasd": {
      "code_home": "https://github.com/uppasd/aiida-uppasd",
      "documentation_url": "https://github.com/uppasd/aiida-uppasd/blob/master/README.md",
      "entry_point_prefix": "uppasd",
      "pip_url": "git+https://github.com/unkcpz/aiida-uppasd",
      "name": "aiida-uppasd",
      "package_name": "aiida_uppasd",
      "hosted_on": "github.com",
      "metadata": {
        "author": "Qichen Xu, Anders Bergman, Anna Delin, Jonathan Chico",
        "author_email": "qichenx@kth.se",
        "version": "0.1.0",
        "description": "Interface for UppASD and AiiDA",
        "classifiers": [
          "Programming Language :: Python",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Framework :: AiiDA"
        ]
      },
      "aiida_version": ">=1.1.0,<2.0.0",
      "entry_points": {
        "aiida.calculations": {
          "UppASD_core_calculations": "UppASD_AiiDA.calculations.core_calcs:UppASD"
        },
        "aiida.parsers": {
          "UppASD_core_parsers": "UppASD_AiiDA.parsers.core_parser:SpinDynamic_core_parser"
        }
      },
      "commits_count": 0,
      "development_status": "planning",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install git+https://github.com/unkcpz/aiida-uppasd"
    },
    "aiida-vasp": {
      "code_home": "https://github.com/aiida-vasp/aiida-vasp",
      "documentation_url": "https://aiida-vasp.readthedocs.io/",
      "entry_point_prefix": "vasp",
      "pip_url": "aiida-vasp",
      "plugin_info": "https://raw.githubusercontent.com/aiida-vasp/aiida-vasp/master/setup.json",
      "name": "aiida-vasp",
      "package_name": "aiida_vasp",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for running VASP calculations and workflows.",
        "author_email": "Espen Flage-Larsen <espen.flage-larsen@sigma2.no>",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "3.0.1"
      },
      "aiida_version": ">=2.4,<3.0",
      "entry_points": {
        "aiida.calculations": {
          "vasp.immigrant": {
            "description": [
              "Parse VASP output objects stored in a specified directory.",
              "",
              "    Simulate running the VaspCalculation up to the point where it can be",
              "    retrieved and parsed, then hand over control to the runner for the rest.",
              "",
              "    Usage examples",
              "    --------------",
              "    Immigrant calculation can be perfomed as follows.",
              "",
              "    ::",
              "",
              "       code = Code.get_from_string('vasp@local')",
              "       folder = '/home/username/vasp-calc-dir'",
              "       settings = {'parser_settings': {'add_energies': True,",
              "                                       'add_forces': True,",
              "                                       'electronic_step_energies': True}}",
              "       VaspImmigrant = CalculationFactory('vasp.immigrant')",
              "       builder = VaspImmigrant.get_builder_from_folder(code,",
              "                                                       folder,",
              "                                                       settings=settings)",
              "       submit(builder)",
              "",
              "    Instead of ``builder``, inputs dict is obtained similarly as",
              "",
              "    ::",
              "",
              "       code = Code.get_from_string('vasp@local')",
              "       folder = '/home/username/vasp-calc-dir'",
              "       settings = {'parser_settings': {'add_energies': True,",
              "                                       'add_forces': True,",
              "                                       'electronic_step_energies': True}}",
              "       VaspImmigrant = CalculationFactory('vasp.immigrant')",
              "       inputs = VaspImmigrant.get_inputs_from_folder(code,",
              "                                                     folder,",
              "                                                     settings=settings)",
              "       submit(VaspImmigrant, **inputs)",
              "",
              "    Note",
              "    ----",
              "    The defaul metadata is set automatically as follows::",
              "",
              "       {'options': {'max_wallclock_seconds': 1,",
              "        'resources': {'num_machines': 1, 'num_mpiprocs_per_machine': 1}}}",
              "",
              "    Specific scheduler may require setting ``resources`` differently",
              "    (e.g., sge ``'parallel_env'``).",
              "",
              "    ``get_inputs_from_folder`` and ``get_builder_from_folder`` accept several",
              "    kwargs, see the docstring of ``get_inputs_from_folder``."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The kpoints to use (KPOINTS)."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The VASP input parameters (INCAR)."
                },
                {
                  "name": "potential",
                  "required": true,
                  "valid_types": "PotcarData",
                  "info": "The potentials (POTCAR)."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": "The input structure (POSCAR)."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The charge density. (CHGCAR)"
                },
                {
                  "name": "dynamics",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The VASP parameters related to ionic dynamics, e.g. flags to set the select ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "remote_workdir",
                  "required": false,
                  "valid_types": "str",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "A remote folder to restart from if need be"
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Additional parameters not related to VASP itself."
                },
                {
                  "name": "wavefunctions",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The wave function coefficients. (WAVECAR)"
                }
              ],
              "outputs": [
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters containing smaller quantities that do not depend on s ..."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The output band structure."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density CHGCAR file."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "The output k-points."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization"
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The output structure."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output plane wave coefficients file."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 333,
                  "message": "VASP did not produce any output and did likely not execute properly."
                },
                {
                  "status": 350,
                  "message": "the retrieved folder data node could not be accessed."
                },
                {
                  "status": 351,
                  "message": "the retrieved_temporary folder data node could not be accessed."
                },
                {
                  "status": 352,
                  "message": "an object that is marked by the parser as critical is missing."
                },
                {
                  "status": 700,
                  "message": "Calculation did not reach the end of execution."
                },
                {
                  "status": 701,
                  "message": "The electronic structure is not converged."
                },
                {
                  "status": 702,
                  "message": "The ionic relaxation is not converged."
                },
                {
                  "status": 703,
                  "message": "VASP calculation encountered a critical error: {error_message}."
                },
                {
                  "status": 704,
                  "message": "Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."
                },
                {
                  "status": 1001,
                  "message": "parsing an object has failed."
                },
                {
                  "status": 1002,
                  "message": "the parser is not able to parse the {quantity} quantity"
                },
                {
                  "status": 1003,
                  "message": "the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"
                },
                {
                  "status": 1004,
                  "message": "the parser is not able to compose one or more output nodes: {nodes}"
                },
                {
                  "status": 1005,
                  "message": "Overflow detected in XML while parsing."
                }
              ]
            },
            "class": "aiida_vasp.calcs.immigrant:VaspImmigrant"
          },
          "vasp.neb": {
            "description": [
              "NEB calculations using VASP",
              "",
              "    ------------------------------------",
              "    Calculations for performing NEB calculations.",
              "    NEB calculations requires standard VASP inputs, but POSCAR are placed in",
              "    folder names 00, 01, 02... N for N-1 number of images.",
              "",
              "    Input frames should be placed under the ``neb_images`` input namespace as a dictionary like::",
              "      {",
              "          'image_00': structure_1,",
              "          'image_01': structure_2",
              "          ....",
              "      }",
              "",
              "    Output of individual frames are placed in the corresponding namespace under the same convention."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "final_structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": "The input structure (POSCAR) for the final image."
                },
                {
                  "name": "initial_structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": "The input structure (POSCAR) for initial image."
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The kpoints to use (KPOINTS)."
                },
                {
                  "name": "neb_images",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": "Starting structure for the NEB images"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The VASP input parameters (INCAR)."
                },
                {
                  "name": "potential",
                  "required": true,
                  "valid_types": "PotcarData",
                  "info": "The potentials (POTCAR)."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The charge density. (CHGCAR)"
                },
                {
                  "name": "dynamics",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The VASP parameters related to ionic dynamics, e.g. flags to set the select ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "A remote folder to restart from if need be"
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Additional parameters not related to VASP itself."
                },
                {
                  "name": "wavefunctions",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The wave function coefficients. (WAVECAR)"
                }
              ],
              "outputs": [
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Per-image misc output."
                },
                {
                  "name": "neb_misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "NEB related data combined for each image"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "NEB images"
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The output band structure."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "Kpoints for each image."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization for each image."
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output file containing the plane wave coefficients."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 333,
                  "message": "VASP did not produce any output files and did likely not execute properly."
                },
                {
                  "status": 350,
                  "message": "the retrieved folder data node could not be accessed."
                },
                {
                  "status": 351,
                  "message": "the retrieved_temporary folder data node could not be accessed."
                },
                {
                  "status": 352,
                  "message": "an object that is marked by the parser as critical is missing."
                },
                {
                  "status": 352,
                  "message": "a file that is marked by the parser as critical is missing."
                },
                {
                  "status": 700,
                  "message": "Calculation did not reach the end of execution."
                },
                {
                  "status": 701,
                  "message": "The electronic structure is not converged."
                },
                {
                  "status": 702,
                  "message": "The ionic relaxation is not converged."
                },
                {
                  "status": 703,
                  "message": "VASP calculation encountered a critical error: {error_message}."
                },
                {
                  "status": 704,
                  "message": "Outputs for diagnosis are missing, please make sure the `neb_data` and `run_status` quantities are requested for parsing."
                },
                {
                  "status": 1001,
                  "message": "parsing an object has failed."
                },
                {
                  "status": 1001,
                  "message": "parsing a file has failed."
                },
                {
                  "status": 1002,
                  "message": "the parser is not able to parse the {quantity} quantity"
                },
                {
                  "status": 1003,
                  "message": "the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"
                },
                {
                  "status": 1004,
                  "message": "the parser is not able to compose one or more output nodes: {nodes}"
                },
                {
                  "status": 1005,
                  "message": "Overflow detected in XML while parsing."
                }
              ]
            },
            "class": "aiida_vasp.calcs.neb:VaspNEBCalculation"
          },
          "vasp.vasp": {
            "description": [
              "General-purpose VASP calculation.",
              "",
              "    ---------------------------------",
              "    By default retrieves only the 'OUTCAR', 'vasprun.xml', 'EIGENVAL', 'DOSCAR'",
              "    and Wannier90 input / output objects. These objects are deleted after parsing.",
              "    Additional retrieve objects can be specified via the",
              "    ``settings['ADDITIONAL_RETRIEVE_TEMPORARY_LIST']`` input. In addition, if you want to keep",
              "    any objects after parsing, put them in ``settings['ADDITIONAL_RETRIEVE_LIST']`` which is empty",
              "    by default.",
              "",
              "    Floating point precision for writing POSCAR objects can be adjusted using",
              "    ``settings['poscar_precision']``, default: 10",
              "",
              "    The following assumes you are familiar with the AiiDA data structures and",
              "    how to set up and run an AiiDA calculation in general.",
              "",
              "    Example usage::",
              "",
              "        from aiida.orm import CalculationFactory, DataFactory",
              "        from aiida.work import submit",
              "",
              "        proc = CalculationFactory('vasp.vasp').process()",
              "        inputs = proc.get_inputs_template()",
              "        inputs.parameter = <Dict with INCAR params>",
              "        inputs.structure = <StructureData>",
              "        inputs.kpoints = <KpointsData>",
              "        inputs.settings = <Dict with parser settings etc.>",
              "        inputs.potential = DataFactory('vasp.potcar').get_potcars_from_structure(structure, ...)",
              "        inputs.code = <Code representing vasp on your cluster>",
              "",
              "        submit(proc, **inputs)",
              "",
              "    Which is very similar to the workchain example.",
              "",
              "    Since we do not want the content parsers to know about the AiiDA infrastructure,",
              "    i.e. processes etc. we have no access to the exit codes defined on the CalcJob.",
              "    We thus have to deal with failures in parsing directly in the write calls here."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The kpoints to use (KPOINTS)."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The VASP input parameters (INCAR)."
                },
                {
                  "name": "potential",
                  "required": true,
                  "valid_types": "PotcarData",
                  "info": "The potentials (POTCAR)."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": "The input structure (POSCAR)."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The charge density. (CHGCAR)"
                },
                {
                  "name": "dynamics",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The VASP parameters related to ionic dynamics, e.g. flags to set the select ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "A remote folder to restart from if need be"
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Additional parameters not related to VASP itself."
                },
                {
                  "name": "wavefunctions",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The wave function coefficients. (WAVECAR)"
                }
              ],
              "outputs": [
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters containing smaller quantities that do not depend on s ..."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The output band structure."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density CHGCAR file."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "The output k-points."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization"
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The output structure."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output plane wave coefficients file."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 333,
                  "message": "VASP did not produce any output and did likely not execute properly."
                },
                {
                  "status": 350,
                  "message": "the retrieved folder data node could not be accessed."
                },
                {
                  "status": 351,
                  "message": "the retrieved_temporary folder data node could not be accessed."
                },
                {
                  "status": 352,
                  "message": "an object that is marked by the parser as critical is missing."
                },
                {
                  "status": 700,
                  "message": "Calculation did not reach the end of execution."
                },
                {
                  "status": 701,
                  "message": "The electronic structure is not converged."
                },
                {
                  "status": 702,
                  "message": "The ionic relaxation is not converged."
                },
                {
                  "status": 703,
                  "message": "VASP calculation encountered a critical error: {error_message}."
                },
                {
                  "status": 704,
                  "message": "Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."
                },
                {
                  "status": 1001,
                  "message": "parsing an object has failed."
                },
                {
                  "status": 1002,
                  "message": "the parser is not able to parse the {quantity} quantity"
                },
                {
                  "status": 1003,
                  "message": "the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"
                },
                {
                  "status": 1004,
                  "message": "the parser is not able to compose one or more output nodes: {nodes}"
                },
                {
                  "status": 1005,
                  "message": "Overflow detected in XML while parsing."
                }
              ]
            },
            "class": "aiida_vasp.calcs.vasp:VaspCalculation"
          },
          "vasp.vasp2w90": "aiida_vasp.calcs.vasp2w90:Vasp2w90Calculation"
        },
        "aiida.cmdline.data": {
          "vasp-potcar": "aiida_vasp.commands.potcar:potcar"
        },
        "aiida.data": {
          "vasp.archive": "aiida_vasp.data.archive:ArchiveData",
          "vasp.chargedensity": "aiida_vasp.data.chargedensity:ChargedensityData",
          "vasp.potcar": "aiida_vasp.data.potcar:PotcarData",
          "vasp.potcar_file": "aiida_vasp.data.potcar:PotcarFileData",
          "vasp.wavefun": "aiida_vasp.data.wavefun:WavefunData"
        },
        "aiida.groups": {
          "vasp.potcar": "aiida_vasp.data.potcar:PotcarGroup"
        },
        "aiida.parsers": {
          "vasp.neb": "aiida_vasp.parsers.neb:VtstNebParser",
          "vasp.vasp": "aiida_vasp.parsers.vasp:VaspParser",
          "vasp.vasp2w90": "aiida_vasp.parsers.vasp2w90:Vasp2w90Parser"
        },
        "aiida.workflows": {
          "vasp.bands": {
            "description": [
              "Extract the band structure using k-point paths fetched from SeeKpath."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "bands",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "dynamics",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "potential_family",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "potential_mapping",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "\n            The folder to restart in, which contains the outputs from the  ..."
                },
                {
                  "name": "smearing",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": ""
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "\n            The maximum number of iterations to perform.\n            "
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Site magnetization to be used as MAGMOM"
                },
                {
                  "name": "verbose",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, enable more detailed output during workchain executio ..."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "bands",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters containing smaller quantities that do not depend on s ..."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density CHGCAR file."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "The output k-points."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization"
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The output structure."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output plane wave coefficients file."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 420,
                  "message": "no called workchain detected"
                },
                {
                  "status": 500,
                  "message": "unknown error detected in the bands workchain"
                },
                {
                  "status": 2001,
                  "message": "BandsData not found in exposed_ouputs"
                }
              ]
            },
            "class": "aiida_vasp.workchains.bands:BandsWorkChain"
          },
          "vasp.converge": {
            "description": [
              "A workchain to perform convergence tests."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "converge",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "dynamics",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "potential_family",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "potential_mapping",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": ""
                },
                {
                  "name": "verify",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "\n            The maximum number of iterations to perform.\n            "
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "relax",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "\n            The restart folder from a previous workchain run that is going ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Site magnetization to be used as MAGMOM"
                },
                {
                  "name": "verbose",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, enable more detailed output during workchain executio ..."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "converge",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters containing smaller quantities that do not depend on s ..."
                },
                {
                  "name": "relax",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The output band structure."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density CHGCAR file."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "The output k-points."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization"
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The output structure."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output plane wave coefficients file."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 420,
                  "message": "no called workchain detected"
                },
                {
                  "status": 500,
                  "message": "unknown error detected in the converge workchain"
                }
              ]
            },
            "class": "aiida_vasp.workchains.converge:ConvergeWorkChain"
          },
          "vasp.immigrant": {
            "description": [
              "Import a VASP run executed in the directory specified by folder_path."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
                },
                {
                  "name": "folder_path",
                  "required": false,
                  "valid_types": "Str",
                  "info": "Deprecated."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "\n            The maximum number of iterations to perform.\n            "
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "potential_family",
                  "required": false,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "potential_mapping",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_workdir",
                  "required": false,
                  "valid_types": "str",
                  "info": ""
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "use_chgcar",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, WavefunData (of WAVECAR) is attached.\n            "
                },
                {
                  "name": "use_wavecar",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, WavefunData (of WAVECAR) is attached.\n            "
                },
                {
                  "name": "verbose",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, enable more detailed output during workchain executio ..."
                }
              ],
              "outputs": [
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters containing smaller quantities that do not depend on s ..."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The output band structure."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density CHGCAR file."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "The output k-points."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization"
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The output structure."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output plane wave coefficients file."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_vasp.workchains.immigrant:VaspImmigrantWorkChain"
          },
          "vasp.master": {
            "description": [
              "The master workchain that selects sub workchains to perform necessary calculations."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "converge",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "dos",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "dynamics",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "potential_family",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "potential_mapping",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": ""
                },
                {
                  "name": "verify",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": ""
                },
                {
                  "name": "extract_bands",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n                   Do you want to extract the band structure?\n             ..."
                },
                {
                  "name": "extract_dos",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n                   Do you want to extract the density of states?\n          ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "kpoints_distance",
                  "required": false,
                  "valid_types": "Float",
                  "info": "\n                   The maximum distance between k-points in inverse AA.\n   ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "\n            The maximum number of iterations to perform.\n            "
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "relax",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "\n            The restart folder from a previous workchain run that is going ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Site magnetization to be used as MAGMOM"
                },
                {
                  "name": "verbose",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, enable more detailed output during workchain executio ..."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 420,
                  "message": "no called workchain detected"
                },
                {
                  "status": 500,
                  "message": "unknown error detected in the master workchain"
                }
              ]
            },
            "class": "aiida_vasp.workchains.master:MasterWorkChain"
          },
          "vasp.neb": {
            "description": [
              "The NEB workchain.",
              "",
              "    -------------------",
              "    Error handling enriched wrapper around VaspNEBCalculation.",
              "",
              "    Deliberately conserves most of the interface (required inputs) of the VaspNEBCalculation class, but",
              "    makes it possible for a user to interact with a workchain and not a calculation.",
              "",
              "    In addition, implement restarts of calculation when the calculation is net full converged for error handling."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "dynamics",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "final_structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": "The input structure (POSCAR) for the final image."
                },
                {
                  "name": "initial_structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": "The input structure (POSCAR) for initial image."
                },
                {
                  "name": "neb_images",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": "Starting structure for the NEB images"
                },
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The VASP input parameters (INCAR)."
                },
                {
                  "name": "potential_family",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "potential_mapping",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The charge density. (CHGCAR)"
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "kpoints_spacing",
                  "required": false,
                  "valid_types": "Float",
                  "info": "Spacing for the kpoints in units A^-1 * 2pi (CASTEP style `kpoints_mp_spaci ..."
                },
                {
                  "name": "kpoints_spacing_vasp",
                  "required": false,
                  "valid_types": "Float",
                  "info": "Spacing for the kpoints in units A^-1 (VASP style)"
                },
                {
                  "name": "ldau_mapping",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mappings, see the doc string of 'get_ldau_keys'"
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "\n            The maximum number of iterations to perform.\n            "
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "A remote folder to restart from if need be"
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Additional parameters not related to VASP itself."
                },
                {
                  "name": "verbose",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, enable more detailed output during workchain executio ..."
                },
                {
                  "name": "wavefunctions",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The wave function coefficients. (WAVECAR)"
                }
              ],
              "outputs": [
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Per-image misc output."
                },
                {
                  "name": "neb_misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "NEB related data combined for each image"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "NEB images"
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The output band structure."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "Kpoints for each image."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization for each image."
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output file containing the plane wave coefficients."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                },
                {
                  "status": 501,
                  "message": "Unrecoverable error in launched NEB calculations."
                },
                {
                  "status": 700,
                  "message": "the user did not supply a potential family name"
                },
                {
                  "status": 701,
                  "message": "ValueError was returned from get_potcars_from_structure"
                },
                {
                  "status": 702,
                  "message": "the potential does not exist"
                },
                {
                  "status": 703,
                  "message": "the exception: {exception} was thrown while massaging the parameters"
                }
              ]
            },
            "class": "aiida_vasp.workchains.neb:VaspNEBWorkChain"
          },
          "vasp.relax": {
            "description": [
              "Structure relaxation workchain."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "dynamics",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "potential_family",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "potential_mapping",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "relax",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": ""
                },
                {
                  "name": "verify",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "\n            The maximum number of iterations to perform.\n            "
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "\n            The restart folder from a previous workchain run that is going ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Site magnetization to be used as MAGMOM"
                },
                {
                  "name": "verbose",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, enable more detailed output during workchain executio ..."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters containing smaller quantities that do not depend on s ..."
                },
                {
                  "name": "relax",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The output band structure."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density CHGCAR file."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "The output k-points."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization"
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The output structure."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output plane wave coefficients file."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "the called workchain does not contain the necessary relaxed output structure"
                },
                {
                  "status": 420,
                  "message": "no called workchain detected"
                },
                {
                  "status": 500,
                  "message": "unknown error detected in the relax workchain"
                },
                {
                  "status": 502,
                  "message": "there was an error overriding the parameters"
                }
              ]
            },
            "class": "aiida_vasp.workchains.relax:RelaxWorkChain"
          },
          "vasp.vasp": {
            "description": [
              "The VASP workchain.",
              "",
              "    -------------------",
              "    Error handling enriched wrapper around VaspCalculation.",
              "",
              "    Deliberately conserves most of the interface (required inputs) of the VaspCalculation class, but",
              "    makes it possible for a user to interact with a workchain and not a calculation.",
              "",
              "    This is intended to be used instead of directly submitting a VaspCalculation,",
              "    so that future features like",
              "    automatic restarting, error checking etc. can be propagated to higher level workchains",
              "    automatically by implementing them here.",
              "",
              "    Handlers are implemented to try fix common problems and improves the robustness.",
              "    Individual handlers can be enabled/disabled by setting the ``handler_overrides`` input port.",
              "    Additional settings may be passed under the \"settings\" input, which is also forwarded to the",
              "    calculations. The avaliable options are:",
              "",
              "    - ``USE_WAVECAR_FOR_RESTART`` wether calculation restarts should use the WAVECAR. The default is ``True``.",
              "",
              "    Usage::",
              "",
              "        from aiida.common.extendeddicts import AttributeDict",
              "        from aiida.work import submit",
              "        basevasp = WorkflowFactory('vasp.vasp')",
              "        inputs = basevasp.get_builder()",
              "        inputs = AttributeDict()",
              "        ## ... set inputs",
              "        submit(basevasp, **inputs)",
              "",
              "    To see a working example, including generation of input nodes from scratch, please",
              "    refer to ``examples/run_vasp_lean.py``."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": ""
                },
                {
                  "name": "dynamics",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": ""
                },
                {
                  "name": "options",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "potential_family",
                  "required": true,
                  "valid_types": "Str",
                  "info": ""
                },
                {
                  "name": "potential_mapping",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData, CifData",
                  "info": ""
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, clean the work dir upon the completion of a successfu ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Mapping where keys are process handler names and the values are a boolean,  ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "\n            The maximum number of iterations to perform.\n            "
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "restart_folder",
                  "required": false,
                  "valid_types": "RemoteData",
                  "info": "\n            The restart folder from a previous workchain run that is going ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Site magnetization to be used as MAGMOM"
                },
                {
                  "name": "verbose",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "\n            If True, enable more detailed output during workchain executio ..."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "custom_outputs",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "misc",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters containing smaller quantities that do not depend on s ..."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The output band structure."
                },
                {
                  "name": "born_charges",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Born effective charges."
                },
                {
                  "name": "charge_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output charge density."
                },
                {
                  "name": "chgcar",
                  "required": false,
                  "valid_types": "ChargedensityData",
                  "info": "The output charge density CHGCAR file."
                },
                {
                  "name": "dielectrics",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dielectric functions."
                },
                {
                  "name": "dos",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dos."
                },
                {
                  "name": "dynmat",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output dynamical matrix."
                },
                {
                  "name": "energies",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output total energies."
                },
                {
                  "name": "forces",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output forces."
                },
                {
                  "name": "hessian",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output Hessian matrix."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData",
                  "info": "The output k-points."
                },
                {
                  "name": "magnetization_density",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output magnetization density."
                },
                {
                  "name": "projectors",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output projectors of decomposition."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "site_magnetization",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The output of the site magnetization"
                },
                {
                  "name": "stress",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "The output stress."
                },
                {
                  "name": "structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The output structure."
                },
                {
                  "name": "trajectory",
                  "required": false,
                  "valid_types": "TrajectoryData",
                  "info": "The output trajectory data."
                },
                {
                  "name": "wavecar",
                  "required": false,
                  "valid_types": "WavefunData",
                  "info": "The output plane wave coefficients file."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "the sun is shining"
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 300,
                  "message": "the calculation is missing at least one required output in the restart workchain"
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 400,
                  "message": "the run_calculation step did not successfully add a calculation node to the context"
                },
                {
                  "status": 401,
                  "message": "the maximum number of iterations was exceeded"
                },
                {
                  "status": 402,
                  "message": "the calculation finished with an unexpected calculation state"
                },
                {
                  "status": 403,
                  "message": "the calculation experienced and unexpected failure"
                },
                {
                  "status": 404,
                  "message": "the calculation failed to submit, twice in a row"
                },
                {
                  "status": 405,
                  "message": "the calculation failed for an unknown reason, twice in a row"
                },
                {
                  "status": 500,
                  "message": "Missing critical output for inspecting the status of the calculation."
                },
                {
                  "status": 501,
                  "message": "Cannot handle the error - inputs are likely need to be revised manually. Message: {message}"
                },
                {
                  "status": 502,
                  "message": "Cannot handle the error - the last calculation did not reach the end of execution."
                },
                {
                  "status": 503,
                  "message": "Cannot handle the error - the last calculation did not reach electronic convergence."
                },
                {
                  "status": 504,
                  "message": "The ionic relaxation is not converged."
                },
                {
                  "status": 505,
                  "message": "At least one of the ionic steps during the relaxation has did not have converged electronic structure."
                },
                {
                  "status": 700,
                  "message": "the user did not supply a potential family name"
                },
                {
                  "status": 701,
                  "message": "ValueError was returned from get_potcars_from_structure"
                },
                {
                  "status": 702,
                  "message": "the potential does not exist"
                },
                {
                  "status": 703,
                  "message": "the exception: {exception} was thrown while massaging the parameters"
                }
              ]
            },
            "class": "aiida_vasp.workchains.vasp:VaspWorkChain"
          }
        },
        "console_scripts": {
          "mock-vasp": "aiida_vasp.commands.mock_vasp:mock_vasp",
          "mock-vasp-strict": "aiida_vasp.commands.mock_vasp:mock_vasp_strict"
        }
      },
      "commits_count": 110,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 4
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 3
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 5
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 7
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 2
        },
        {
          "colorclass": "orange",
          "text": "Other (Data commands, Groups)",
          "count": 2
        }
      ],
      "pip_install_cmd": "pip install aiida-vasp"
    },
    "aiida-wannier90": {
      "code_home": "https://github.com/aiidateam/aiida-wannier90",
      "documentation_url": "https://aiida-wannier90.readthedocs.io/",
      "entry_point_prefix": "wannier90",
      "pip_url": "aiida-wannier90",
      "plugin_info": "https://raw.github.com/aiidateam/aiida-wannier90/master/setup.json",
      "name": "aiida-wannier90",
      "package_name": "aiida_wannier90",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA Plugin for the Wannier90 code",
        "author": "Junfeng Qiao, Dominik Gresch, Antimo Marrazzo, Daniel Marchand, Giovanni Pizzi, Norma Rivano, The AiiDA team",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "2.1.0"
      },
      "aiida_version": ">=2.0,<3",
      "entry_points": {
        "aiida.calculations": {
          "wannier90.postw90": {
            "description": [
              "Plugin for Wannier90.",
              "",
              "    Wannier90 is a code for computing maximally-localized Wannier functions.",
              "    See http://www.wannier.org/ for more details."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Input parameters for the Wannier90 code"
                },
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possi ..."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "input crystal structure"
                },
                {
                  "name": "bands_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "A list of k-points along a path to be used for bands interpolation; it shou ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "kpoint_path",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Description of the k-points path to be used for bands interpolation; it sho ..."
                },
                {
                  "name": "kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "k-point mesh used in the NSCF calculation."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "projections",
                  "required": false,
                  "valid_types": "OrbitalData, Dict, List, NoneType",
                  "info": "Starting projections for the Wannierisation procedure."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Additional settings to manage the Wannier90 calculation."
                }
              ],
              "outputs": [
                {
                  "name": "boltzwann",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The ``output_parameters`` output node of the successful calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "interpolated_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The interpolated band structure by Wannier90 (if any)."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 300,
                  "message": "A Wannier90 error file (.werr) has been found."
                },
                {
                  "status": 400,
                  "message": "The string \"Exiting...\" has been found in the Wannier90 output (some partial output might have been parsed)."
                },
                {
                  "status": 401,
                  "message": "An error related to bvectors has been found in the Wannier90 output."
                },
                {
                  "status": 402,
                  "message": "Energy window contains fewer states than number of target WFs."
                },
                {
                  "status": 403,
                  "message": "Error plotting Wanier functions in cube format."
                },
                {
                  "status": 404,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 405,
                  "message": "Some output files were missing probably because the calculation got interrupted."
                },
                {
                  "status": 406,
                  "message": "The retrieved temporary folder could not be accessed."
                }
              ]
            },
            "class": "aiida_wannier90.calculations:Postw90Calculation"
          },
          "wannier90.wannier90": {
            "description": [
              "Plugin for Wannier90.",
              "",
              "    Wannier90 is a code for computing maximally-localized Wannier functions.",
              "    See http://www.wannier.org/ for more details."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "k-point mesh used in the NSCF calculation."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Input parameters for the Wannier90 code"
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "input crystal structure"
                },
                {
                  "name": "bands_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "A list of k-points along a path to be used for bands interpolation; it shou ..."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "kpoint_path",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Description of the k-points path to be used for bands interpolation; it sho ..."
                },
                {
                  "name": "local_input_folder",
                  "required": false,
                  "valid_types": "FolderData, NoneType",
                  "info": "Get input files (``.amn``, ``.mmn``, ...) from a class ``FolderData`` store ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "projections",
                  "required": false,
                  "valid_types": "OrbitalData, Dict, List, NoneType",
                  "info": "Starting projections for the Wannierisation procedure."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "remote_input_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possi ..."
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Additional settings to manage the Wannier90 calculation."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The ``output_parameters`` output node of the successful calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "interpolated_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The interpolated band structure by Wannier90 (if any)."
                },
                {
                  "name": "nnkp_file",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "The ``.nnkp`` file, produced only in -pp (postproc) mode."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 200,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 210,
                  "message": "The retrieved folder did not contain the required stdout output file."
                },
                {
                  "status": 300,
                  "message": "A Wannier90 error file (.werr) has been found."
                },
                {
                  "status": 400,
                  "message": "The string \"Exiting...\" has been found in the Wannier90 output (some partial output might have been parsed)."
                },
                {
                  "status": 401,
                  "message": "An error related to bvectors has been found in the Wannier90 output."
                },
                {
                  "status": 402,
                  "message": "Energy window contains fewer states than number of target WFs."
                },
                {
                  "status": 403,
                  "message": "Error plotting Wanier functions in cube format."
                },
                {
                  "status": 404,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                }
              ]
            },
            "class": "aiida_wannier90.calculations:Wannier90Calculation"
          }
        },
        "aiida.parsers": {
          "wannier90.postw90": "aiida_wannier90.parsers:Postw90Parser",
          "wannier90.wannier90": "aiida_wannier90.parsers:Wannier90Parser"
        },
        "aiida.workflows": {
          "wannier90.minimal": {
            "description": [
              "Workchain to run a full stack of Quantum ESPRESSO + Wannier90 for GaAs.",
              "",
              "    Note that this is mostly to be used as an example, as there is no",
              "    error checking and runs directly Quantum ESPRESSO calculations rather",
              "    than the base workflows."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "kpoint_path",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The kpoints path for the NSCF run and Wannierisation."
                },
                {
                  "name": "kpoints_nscf",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The kpoints for the NSCF run and Wannierisation."
                },
                {
                  "name": "kpoints_scf",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The kpoints for the SCF run."
                },
                {
                  "name": "projections",
                  "required": true,
                  "valid_types": "OrbitalData",
                  "info": "The projections for the Wannierisation."
                },
                {
                  "name": "pseudo_family",
                  "required": true,
                  "valid_types": "Str",
                  "info": "The name of a pseudopotential family to use."
                },
                {
                  "name": "pw2wannier90_code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `pw2wannier90.x` code to use for the `Pw2Wannier90Calculation`s."
                },
                {
                  "name": "pw_code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `pw.x` code to use for the `PwCalculation`s."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "wannier_code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `wannier90.x` code to use for the `Wannier90Calculation`s."
                },
                {
                  "name": "max_wallclock_seconds",
                  "required": false,
                  "valid_types": "Int, NoneType",
                  "info": "Maximum wallclock time in seconds"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "num_machines",
                  "required": false,
                  "valid_types": "Int, NoneType",
                  "info": "The number of machines (nodes) to use"
                }
              ],
              "outputs": [
                {
                  "name": "matrices_folder",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": ""
                },
                {
                  "name": "nnkp_file",
                  "required": true,
                  "valid_types": "SinglefileData",
                  "info": ""
                },
                {
                  "name": "nscf_output",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "p2wannier_output",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "pw2wan_remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": ""
                },
                {
                  "name": "scf_output",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "wannier_bands",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                }
              ]
            },
            "class": "aiida_wannier90.workflows.minimal:MinimalW90WorkChain"
          }
        }
      },
      "commits_count": 20,
      "development_status": "stable",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 2
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 2
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-wannier90"
    },
    "aiida-wannier90-workflows": {
      "code_home": "https://github.com/aiidateam/aiida-wannier90-workflows",
      "development_status": "stable",
      "entry_point_prefix": "wannier90_workflows",
      "pip_url": "aiida-wannier90-workflows",
      "plugin_info": "https://raw.github.com/aiidateam/aiida-wannier90-workflows/master/setup.json",
      "name": "aiida-wannier90-workflows",
      "package_name": "aiida_wannier90_workflows",
      "hosted_on": "github.com",
      "metadata": {
        "description": "Advanced AiiDA workflows for Wannier90",
        "author": "Junfeng Qiao, Antimo Marrazzo, Giovanni Pizzi",
        "classifiers": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "2.1.0"
      },
      "aiida_version": ">=2.0,<3",
      "entry_points": {
        "aiida.calculations": {
          "wannier90_workflows.split": {
            "description": [
              "AiiDA calculation plugin wrapping the split AMN/MMN/EIG script."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "num_val",
                  "required": true,
                  "valid_types": "Int",
                  "info": "Number of valence WFs."
                },
                {
                  "name": "code",
                  "required": false,
                  "valid_types": "AbstractCode, NoneType",
                  "info": "The `Code` to use for this job. This input is required, unless the `remote_ ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "monitors",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Add monitoring functions that can inspect output files while the job is run ..."
                },
                {
                  "name": "parent_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote folder containing win/amn/mmn/eig/unk files."
                },
                {
                  "name": "remote_folder",
                  "required": false,
                  "valid_types": "RemoteData, NoneType",
                  "info": "Remote directory containing the results of an already completed calculation ..."
                },
                {
                  "name": "rotate_unk",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "Number of valence WFs."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Output parameters."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "remote_folder_cond",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Remote folder for conduction."
                },
                {
                  "name": "remote_folder_val",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Remote folder for valence."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 131,
                  "message": "The specified account is invalid."
                },
                {
                  "status": 140,
                  "message": "The node running the job failed."
                },
                {
                  "status": 150,
                  "message": "{message}"
                },
                {
                  "status": 300,
                  "message": "Calculation did not produce all expected output files."
                },
                {
                  "status": 301,
                  "message": "The retrieved temporary folder could not be accessed."
                }
              ]
            },
            "class": "aiida_wannier90_workflows.calculations.split:Wannier90SplitCalculation"
          }
        },
        "aiida.parsers": {
          "wannier90_workflows.split": "aiida_wannier90_workflows.parsers.split:Wannier90SplitParser"
        },
        "aiida.workflows": {
          "wannier90_workflows.bands": {
            "description": [
              "WorkChain to automatically compute a Wannier band structure for a given structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `Pw2wannier90BaseWorkChain`."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `Wannier90BaseWorkChain`."
                },
                {
                  "name": "bands_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Explicit kpoints to use for the wannier90 bands interpolation. If specified ..."
                },
                {
                  "name": "bands_kpoints_distance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "Minimum kpoints distance for seekpath to generate a list of kpoints along t ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True, work directories of all called calculation will be cleaned at the  ..."
                },
                {
                  "name": "kpoint_path",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "High symmetry kpoints to use for the wannier90 bands interpolation. If spec ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nscf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the NSCF calculation."
                },
                {
                  "name": "open_grid",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `OpenGridBaseWorkChain`, if not specified the open_grid step ..."
                },
                {
                  "name": "projwfc",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `ProjwfcBaseWorkChain`."
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
                }
              ],
              "outputs": [
                {
                  "name": "band_structure",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "The Wannier interpolated band structure."
                },
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90_pp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nscf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "open_grid",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "primitive_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The normalized and primitivized structure for which the calculations are co ..."
                },
                {
                  "name": "projwfc",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "seekpath_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 420,
                  "message": "the scf PwBaseWorkChain sub process failed"
                },
                {
                  "status": 430,
                  "message": "the nscf PwBaseWorkChain sub process failed"
                },
                {
                  "status": 440,
                  "message": "the ProjwfcBaseWorkChain sub process failed"
                },
                {
                  "status": 450,
                  "message": "the postproc Wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 460,
                  "message": "the Pw2wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 470,
                  "message": "the Wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 480,
                  "message": "outputs sanity check failed"
                },
                {
                  "status": 490,
                  "message": "the OpenGridBaseWorkChain sub process failed"
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.bands:Wannier90BandsWorkChain"
          },
          "wannier90_workflows.base.open_grid": {
            "description": [
              "Workchain to run a open_grid calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "open_grid",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "kpoints",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The explicit list of kpoints of the unfolded kmesh"
                },
                {
                  "name": "kpoints_mesh",
                  "required": true,
                  "valid_types": "KpointsData",
                  "info": "The dimensions of the unfolded kmesh"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 311,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.base.open_grid:OpenGridBaseWorkChain"
          },
          "wannier90_workflows.base.projwfc": {
            "description": [
              "Workchain to run a projwfc.x calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "projwfc",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "Dos",
                  "required": true,
                  "valid_types": "XyData",
                  "info": ""
                },
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "bands_down",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "bands_up",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": ""
                },
                {
                  "name": "projections",
                  "required": false,
                  "valid_types": "ProjectionData",
                  "info": ""
                },
                {
                  "name": "projections_down",
                  "required": false,
                  "valid_types": "ProjectionData",
                  "info": ""
                },
                {
                  "name": "projections_up",
                  "required": false,
                  "valid_types": "ProjectionData",
                  "info": ""
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 311,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.base.projwfc:ProjwfcBaseWorkChain"
          },
          "wannier90_workflows.base.pw2wannier90": {
            "description": [
              "Workchain to run a pw2wannier90 calculation with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData, NoneType",
                  "info": "Bands to calculate SCDM `mu`, `sigma`."
                },
                {
                  "name": "bands_projections",
                  "required": false,
                  "valid_types": "ProjectionData, NoneType",
                  "info": "Bands projectability to calculate SCDM `mu`, `sigma`."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scdm_sigma_factor",
                  "required": false,
                  "valid_types": "Float",
                  "info": "The `sigma` factor of occupation function for SCDM projection."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": ""
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 311,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                },
                {
                  "status": 400,
                  "message": "Error when fitting `scdm_mu` and `scdm_sigma`."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.base.pw2wannier90:Pw2wannier90BaseWorkChain"
          },
          "wannier90_workflows.base.wannier90": {
            "description": [
              "Workchain to run a `Wannier90Calculation` with automated error handling and restarts."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": ""
                },
                {
                  "name": "auto_energy_windows",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True use the energy corresponding to projectability = auto_energy_window ..."
                },
                {
                  "name": "auto_energy_windows_threshold",
                  "required": false,
                  "valid_types": "Float",
                  "info": "Threshold for auto_energy_windows."
                },
                {
                  "name": "bands",
                  "required": false,
                  "valid_types": "BandsData, NoneType",
                  "info": "For shift_energy_windows, if provided the energy windows will be shifted by ..."
                },
                {
                  "name": "bands_projections",
                  "required": false,
                  "valid_types": "ProjectionData, NoneType",
                  "info": "Projectability of bands to auto set `dis_froz_max`."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation jobs will be cleaned  ..."
                },
                {
                  "name": "handler_overrides",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Mapping where keys are process handler names and the values are a dictionar ..."
                },
                {
                  "name": "max_iterations",
                  "required": false,
                  "valid_types": "Int",
                  "info": "Maximum number of iterations the work chain will restart the process to fin ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "settings",
                  "required": false,
                  "valid_types": "Dict, NoneType",
                  "info": "Additional settings."
                },
                {
                  "name": "shift_energy_windows",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True the `dis_froz_min`, `dis_froz_max`, `dis_win_min`, `dis_win_max` wi ..."
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The ``output_parameters`` output node of the successful calculation."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "interpolated_bands",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "The interpolated band structure by Wannier90 (if any)."
                },
                {
                  "name": "nnkp_file",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "The ``.nnkp`` file, produced only in -pp (postproc) mode."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 301,
                  "message": "The sub process excepted."
                },
                {
                  "status": 302,
                  "message": "The sub process was killed."
                },
                {
                  "status": 401,
                  "message": "The maximum number of iterations was exceeded."
                },
                {
                  "status": 401,
                  "message": "Unrecoverable bvectors error."
                },
                {
                  "status": 402,
                  "message": "The process failed for an unknown reason, twice in a row."
                },
                {
                  "status": 402,
                  "message": "Unrecoverable disentanglement error."
                },
                {
                  "status": 403,
                  "message": "Unrecoverable cube format error."
                },
                {
                  "status": 404,
                  "message": "The stdout output file was incomplete probably because the calculation got interrupted."
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.base.wannier90:Wannier90BaseWorkChain"
          },
          "wannier90_workflows.open_grid": {
            "description": [
              "WorkChain using open_grid.x to bypass the nscf step.",
              "",
              "    The open_grid.x unfolds the symmetrized kmesh to a full kmesh, thus",
              "    the full-kmesh nscf step can be avoided.",
              "",
              "    2 schemes:",
              "      1. scf w/ symmetry, more nbnd -> open_grid -> pw2wannier90 -> wannier90",
              "      2. scf w/ symmetry, default nbnd -> nscf w/ symm, more nbnd -> open_grid",
              "         -> pw2wannier90 -> wannier90"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `Pw2wannier90BaseWorkChain`."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `Wannier90BaseWorkChain`."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True, work directories of all called calculation will be cleaned at the  ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nscf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the NSCF calculation."
                },
                {
                  "name": "open_grid",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `OpenGridBaseWorkChain`, if not specified the open_grid step ..."
                },
                {
                  "name": "projwfc",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `ProjwfcBaseWorkChain`."
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
                }
              ],
              "outputs": [
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90_pp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nscf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "open_grid",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "projwfc",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 420,
                  "message": "the scf PwBaseWorkChain sub process failed"
                },
                {
                  "status": 430,
                  "message": "the nscf PwBaseWorkChain sub process failed"
                },
                {
                  "status": 440,
                  "message": "the ProjwfcBaseWorkChain sub process failed"
                },
                {
                  "status": 450,
                  "message": "the postproc Wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 460,
                  "message": "the Pw2wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 470,
                  "message": "the Wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 480,
                  "message": "outputs sanity check failed"
                },
                {
                  "status": 490,
                  "message": "the OpenGridBaseWorkChain sub process failed"
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.open_grid:Wannier90OpenGridWorkChain"
          },
          "wannier90_workflows.optimize": {
            "description": [
              "Workchain to optimize dis_proj_min/max for projectability disentanglement."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `Pw2wannier90BaseWorkChain`."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `Wannier90BaseWorkChain`."
                },
                {
                  "name": "bands_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Explicit kpoints to use for the wannier90 bands interpolation. If specified ..."
                },
                {
                  "name": "bands_kpoints_distance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "Minimum kpoints distance for seekpath to generate a list of kpoints along t ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True, work directories of all called calculation will be cleaned at the  ..."
                },
                {
                  "name": "kpoint_path",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "High symmetry kpoints to use for the wannier90 bands interpolation. If spec ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nscf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the NSCF calculation."
                },
                {
                  "name": "open_grid",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `OpenGridBaseWorkChain`, if not specified the open_grid step ..."
                },
                {
                  "name": "optimize_bands_distance_threshold",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "If provided, during the iteration of dis_proj_min/max, if the bands distanc ..."
                },
                {
                  "name": "optimize_disproj",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True iterate dis_proj_min/max to find the best MLWFs for projectability  ..."
                },
                {
                  "name": "optimize_disprojmax_range",
                  "required": false,
                  "valid_types": "List",
                  "info": "The range to iterate dis_proj_min. `None` means disabling projectability di ..."
                },
                {
                  "name": "optimize_disprojmin_range",
                  "required": false,
                  "valid_types": "List",
                  "info": "The range to iterate dis_proj_max. `None` means disabling projectability di ..."
                },
                {
                  "name": "optimize_reference_bands",
                  "required": false,
                  "valid_types": "BandsData, NoneType",
                  "info": "If provided, during the iteration of dis_proj_min/max, the BandsData will b ..."
                },
                {
                  "name": "optimize_spreads_imbalence_threshold",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "If provided, during the iteration of dis_proj_min/max, if the spreads imbal ..."
                },
                {
                  "name": "projwfc",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `ProjwfcBaseWorkChain`."
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
                },
                {
                  "name": "separate_plotting",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True separate the maximal localisation and the plotting of bands/Wannier ..."
                }
              ],
              "outputs": [
                {
                  "name": "band_structure",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "The Wannier interpolated band structure."
                },
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90_pp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "bands_distance",
                  "required": false,
                  "valid_types": "Float",
                  "info": "Bands distances between reference bands and Wannier interpolated bands for  ..."
                },
                {
                  "name": "nscf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "open_grid",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "primitive_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The normalized and primitivized structure for which the calculations are co ..."
                },
                {
                  "name": "projwfc",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "seekpath_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
                },
                {
                  "name": "wannier90_optimal",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90_plot",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 420,
                  "message": "the scf PwBaseWorkChain sub process failed"
                },
                {
                  "status": 430,
                  "message": "the nscf PwBaseWorkChain sub process failed"
                },
                {
                  "status": 440,
                  "message": "the ProjwfcBaseWorkChain sub process failed"
                },
                {
                  "status": 450,
                  "message": "the postproc Wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 460,
                  "message": "the Pw2wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 470,
                  "message": "the Wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 480,
                  "message": "outputs sanity check failed"
                },
                {
                  "status": 490,
                  "message": "the OpenGridBaseWorkChain sub process failed"
                },
                {
                  "status": 500,
                  "message": "the Wannier90Calculation plotting sub process failed"
                },
                {
                  "status": 501,
                  "message": "All the trials on dis_proj_min/max have failed, cannot compare spreads"
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.optimize:Wannier90OptimizeWorkChain"
          },
          "wannier90_workflows.projwfcbands": {
            "description": [
              "WorkChain to compute QE projected band structure for a given structure."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "bands",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the BANDS calculation."
                },
                {
                  "name": "projwfc",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `ProjwfcBaseWorkChain` for the projwfc.x calculation."
                },
                {
                  "name": "scf",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The inputs structure."
                },
                {
                  "name": "bands_kpoints",
                  "required": false,
                  "valid_types": "KpointsData, NoneType",
                  "info": "Explicit kpoints to use for the BANDS calculation. Specify either this or ` ..."
                },
                {
                  "name": "bands_kpoints_distance",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "Minimum kpoints distance for the BANDS calculation. Specify either this or  ..."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If `True`, work directories of all called calculation will be cleaned at th ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nbands_factor",
                  "required": false,
                  "valid_types": "Float, NoneType",
                  "info": "The number of bands for the BANDS calculation is that used for the SCF mult ..."
                },
                {
                  "name": "relax",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation  ..."
                }
              ],
              "outputs": [
                {
                  "name": "band_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters of the BANDS `PwBaseWorkChain`."
                },
                {
                  "name": "band_structure",
                  "required": true,
                  "valid_types": "BandsData",
                  "info": "The computed band structure."
                },
                {
                  "name": "projwfc",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scf_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "The output parameters of the SCF `PwBaseWorkChain`."
                },
                {
                  "name": "primitive_structure",
                  "required": false,
                  "valid_types": "StructureData",
                  "info": "The normalized and primitivized structure for which the bands are computed."
                },
                {
                  "name": "seekpath_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "The parameters used in the SeeKpath call to normalize the input or relaxed  ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 201,
                  "message": "Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."
                },
                {
                  "status": 202,
                  "message": "Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."
                },
                {
                  "status": 401,
                  "message": "The PwRelaxWorkChain sub process failed"
                },
                {
                  "status": 402,
                  "message": "The scf PwBasexWorkChain sub process failed"
                },
                {
                  "status": 403,
                  "message": "The bands PwBasexWorkChain sub process failed"
                },
                {
                  "status": 404,
                  "message": "The ProjwfcBaseWorkChain sub process failed"
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.projwfcbands:ProjwfcBandsWorkChain"
          },
          "wannier90_workflows.split": {
            "description": [
              "Workchain to split valence+conduction into two calculations for val and cond, respectively."
            ],
            "spec": {
              "inputs": [
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True, work directories of all called calculation will be cleaned at the  ..."
                },
                {
                  "name": "cond",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `Wannier90BaseWorkChain` for the cond Wannierization."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "split",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `Wannier90SplitCalculation`."
                },
                {
                  "name": "val",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `Wannier90BaseWorkChain` for the val Wannierization."
                },
                {
                  "name": "valcond",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `Wannier90OptimizeWorkChain` for the val+cond Wannierization ..."
                }
              ],
              "outputs": [
                {
                  "name": "bands_distance",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "cond",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "split",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "val",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "valcond",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 500,
                  "message": "All the trials on dis_proj_min/max have failed, cannot compare bands distance"
                },
                {
                  "status": 501,
                  "message": "the split calculation has failed"
                },
                {
                  "status": 502,
                  "message": "the valence Wannier90Calculation has failed"
                },
                {
                  "status": 503,
                  "message": "the conduction Wannier90Calculation has failed"
                },
                {
                  "status": 520,
                  "message": "All the orbitals are occupied, cannot split into valence and conduction"
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.split:Wannier90SplitWorkChain"
          },
          "wannier90_workflows.wannier90": {
            "description": [
              "Workchain to obtain maximally localised Wannier functions (MLWF).",
              "",
              "    Run the following steps:",
              "        scf -> nscf -> projwfc -> wannier90 postproc -> pw2wannier90 -> wannier90"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `Pw2wannier90BaseWorkChain`."
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "StructureData",
                  "info": "The input structure."
                },
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "Data",
                  "info": "Inputs for the `Wannier90BaseWorkChain`."
                },
                {
                  "name": "clean_workdir",
                  "required": false,
                  "valid_types": "Bool",
                  "info": "If True, work directories of all called calculation will be cleaned at the  ..."
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nscf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the NSCF calculation."
                },
                {
                  "name": "projwfc",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `ProjwfcBaseWorkChain`."
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "Data",
                  "info": "Inputs for the `PwBaseWorkChain` for the SCF calculation."
                }
              ],
              "outputs": [
                {
                  "name": "pw2wannier90",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "wannier90_pp",
                  "required": true,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "nscf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "projwfc",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "scf",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 420,
                  "message": "the scf PwBaseWorkChain sub process failed"
                },
                {
                  "status": 430,
                  "message": "the nscf PwBaseWorkChain sub process failed"
                },
                {
                  "status": 440,
                  "message": "the ProjwfcBaseWorkChain sub process failed"
                },
                {
                  "status": 450,
                  "message": "the postproc Wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 460,
                  "message": "the Pw2wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 470,
                  "message": "the Wannier90BaseWorkChain sub process failed"
                },
                {
                  "status": 480,
                  "message": "outputs sanity check failed"
                }
              ]
            },
            "class": "aiida_wannier90_workflows.workflows.wannier90:Wannier90WorkChain"
          }
        },
        "console_scripts": {
          "aiida-wannier90-workflows": "aiida_wannier90_workflows.cli:cmd_root"
        }
      },
      "commits_count": 52,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 10
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-wannier90-workflows"
    },
    "aiida-wien2k": {
      "code_home": "https://github.com/rubel75/aiida-wien2k",
      "entry_point_prefix": "wien2k",
      "name": "aiida-wien2k",
      "package_name": "aiida_wien2k",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 5,
      "development_status": "planning",
      "summaryinfo": [],
      "pip_install_cmd": "See source code repository."
    },
    "aiida-yambo": {
      "code_home": "https://github.com/yambo-code/yambo-aiida/",
      "development_status": "stable",
      "entry_point_prefix": "yambo",
      "pip_url": "aiida-yambo",
      "plugin_info": "https://raw.github.com/yambo-code/yambo-aiida/master/setup.json",
      "name": "aiida-yambo",
      "package_name": "aiida_yambo",
      "hosted_on": "github.com",
      "metadata": {
        "description": "YAMBO plugin and workflows for AiiDA",
        "author": "Miki Bonacci, Michael Atambo, Antimo Marrazzo, Prandini Gianluca",
        "author_email": "miki.bonacci@unimore.it",
        "license": "MIT",
        "home_page": "https://github.com/yambo-code/yambo-aiida",
        "classifiers": [
          "Environment :: Plugins",
          "Framework :: AiiDA",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Topic :: Scientific/Engineering :: Physics"
        ],
        "version": "1.3.0"
      },
      "aiida_version": ">=1.0.0a2",
      "entry_points": {
        "aiida.calculations": {
          "yambo.yambo": {
            "description": [
              "AiiDA plugin for the Yambo code.",
              "    For more information, refer to http://www.yambo-code.org/",
              "    https://github.com/yambo-code/yambo-aiida and http://aiida-yambo.readthedocs.io/en/latest/"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "Use a main code for yambo calculation"
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Use a node that specifies the input parameters"
                },
                {
                  "name": "parent_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Use a remote folder as parent folder (for \"restarts and similar\""
                },
                {
                  "name": "settings",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "Use an additional node for special settings"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                },
                {
                  "name": "precode_parameters",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "Use a node that specifies the input parameters for the yambo precode"
                },
                {
                  "name": "preprocessing_code",
                  "required": false,
                  "valid_types": "Code",
                  "info": "Use a preprocessing code for starting yambo"
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "returns the output parameters"
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "array_alpha",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the alpha array"
                },
                {
                  "name": "array_alpha_array",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the alpha array"
                },
                {
                  "name": "array_alpha_bands",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the alpha array bands"
                },
                {
                  "name": "array_eels",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the eels array"
                },
                {
                  "name": "array_eps",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the eps array"
                },
                {
                  "name": "array_ndb",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the array for ndb"
                },
                {
                  "name": "array_ndb_HFlocXC",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the array ndb for HFlocXC"
                },
                {
                  "name": "array_ndb_QP",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the array for ndbQP"
                },
                {
                  "name": "array_qp",
                  "required": false,
                  "valid_types": "ArrayData",
                  "info": "returns the quasiparticle array band structure"
                },
                {
                  "name": "bands_quasiparticle",
                  "required": false,
                  "valid_types": "BandsData",
                  "info": "returns the quasiparticle band structure"
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                },
                {
                  "name": "system_info",
                  "required": false,
                  "valid_types": "Dict",
                  "info": "returns some system information after a p2y"
                }
              ],
              "exit_codes": [
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                },
                {
                  "status": 500,
                  "message": "The retrieved folder data node could not be accessed."
                },
                {
                  "status": 501,
                  "message": "time exceeded the max walltime"
                },
                {
                  "status": 502,
                  "message": "failed calculation for some reason: could be a low number of conduction bands"
                },
                {
                  "status": 503,
                  "message": "Unexpected behavior of YamboFolder"
                },
                {
                  "status": 504,
                  "message": "parallelization error"
                },
                {
                  "status": 505,
                  "message": "general memory error"
                },
                {
                  "status": 506,
                  "message": "x_par allocation memory error"
                }
              ]
            },
            "class": "aiida_yambo.calculations.yambo:YamboCalculation"
          }
        },
        "aiida.data": {},
        "aiida.parsers": {
          "yambo.yambo": "aiida_yambo.parsers.parsers:YamboParser"
        }
      },
      "commits_count": 60,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-yambo"
    },
    "aiida-yambo-wannier90": {
      "code_home": "https://github.com/aiidaplugins/aiida-yambo-wannier90",
      "entry_point_prefix": "yambo_wannier90",
      "pip_url": "aiida-yambo-wannier90",
      "plugin_info": "https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/pyproject.toml",
      "documentation_url": "https://aiida-yambo-wannier90.readthedocs.io/en/latest/",
      "version_file": "https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/aiida_yambo_wannier90/__init__.py",
      "name": "aiida-yambo-wannier90",
      "package_name": "aiida_yambo_wannier90",
      "hosted_on": "github.com",
      "metadata": {
        "description": "Plugin to combine Wannier90 interpolations with GW corrections computed by Yambo",
        "author": "The AiiDA Team",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python"
        ],
        "version": "0.1.0b0"
      },
      "aiida_version": ">=1.6.4,<3",
      "entry_points": {
        "aiida.calculations": {
          "yambo_wannier90.gw2wannier90": "aiida_yambo_wannier90.calculations.gw2wannier90:Gw2wannier90Calculation"
        },
        "aiida.parsers": {
          "yambo_wannier90.gw2wannier90": "aiida_yambo_wannier90.parsers.gw2wannier90:Gw2wannier90Parser"
        },
        "aiida.workflows": {
          "yambo_wannier90": "aiida_yambo_wannier90.workflows:YamboWannier90WorkChain"
        },
        "console_scripts": {
          "aiida-yambo-wannier90": "aiida_yambo_wannier90.cli:cmd_root"
        }
      },
      "commits_count": 0,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "green",
          "text": "Workflows",
          "count": 1
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install --pre aiida-yambo-wannier90"
    },
    "aiida-yascheduler": {
      "code_home": "https://github.com/tilde-lab/yascheduler",
      "documentation_url": "https://github.com/tilde-lab/yascheduler",
      "entry_point_prefix": "yascheduler",
      "pip_url": "yascheduler",
      "name": "aiida-yascheduler",
      "package_name": "aiida_yascheduler",
      "hosted_on": "github.com",
      "metadata": {
        "description": "Yet another computing scheduler and cloud orchestration engine",
        "author": "Sergey Korolev, Evgeny Blokhin, Andrey Sobolev",
        "author_email": "eb@tilde.pro",
        "license": "MIT",
        "home_page": "https://github.com/tilde-lab/yascheduler",
        "classifiers": [
          "Development Status :: 4 - Beta",
          "Framework :: AiiDA",
          "Intended Audience :: Science/Research",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Topic :: Scientific/Engineering :: Chemistry",
          "Topic :: Scientific/Engineering :: Information Analysis",
          "Topic :: Scientific/Engineering :: Physics",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "version": "1.0.10"
      },
      "aiida_version": null,
      "entry_points": {
        "console_scripts": {
          "yascheduler": "yascheduler.utils:daemonize",
          "yasubmit": "yascheduler.utils:submit",
          "yastatus": "yascheduler.utils:check_status",
          "yanodes": "yascheduler.utils:show_nodes",
          "yasetnode": "yascheduler.utils:manage_node",
          "yainit": "yascheduler.utils:init"
        },
        "aiida.schedulers": {
          "yascheduler": "yascheduler.aiida_plugin:YaScheduler"
        }
      },
      "commits_count": 144,
      "development_status": "beta",
      "summaryinfo": [
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 6
        },
        {
          "colorclass": "orange",
          "text": "Other (Schedulers)",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install yascheduler"
    },
    "aiida-z2pack": {
      "code_home": "https://github.com/AntimoMarrazzo/aiida-z2pack",
      "entry_point_prefix": "z2pack",
      "pip_url": "git+https://github.com/AntimoMarrazzo/aiida-z2pack",
      "name": "aiida-z2pack",
      "package_name": "aiida_z2pack",
      "hosted_on": "github.com",
      "metadata": {},
      "aiida_version": null,
      "entry_points": {},
      "commits_count": 18,
      "development_status": "planning",
      "summaryinfo": [],
      "pip_install_cmd": "pip install git+https://github.com/AntimoMarrazzo/aiida-z2pack"
    },
    "aiida-zeopp": {
      "code_home": "https://github.com/ltalirz/aiida-zeopp",
      "development_status": "stable",
      "entry_point_prefix": "zeopp",
      "pip_url": "aiida-zeopp",
      "name": "aiida-zeopp",
      "package_name": "aiida_zeopp",
      "hosted_on": "github.com",
      "metadata": {
        "description": "AiiDA plugin for zeo++",
        "author": "Leopold Talirz",
        "author_email": "leopold.talirz@epfl.ch",
        "license": "Creative Commons",
        "home_page": "https://github.com/ltalirz/aiida-zeopp",
        "classifiers": [
          "Framework :: AiiDA",
          "Programming Language :: Python"
        ],
        "version": "1.1.2"
      },
      "aiida_version": null,
      "entry_points": {
        "aiida.calculations": {
          "zeopp.network": {
            "description": [
              "AiiDA calculation plugin for the zeo++ network binary"
            ],
            "spec": {
              "inputs": [
                {
                  "name": "code",
                  "required": true,
                  "valid_types": "Code",
                  "info": "The `Code` to use for this job."
                },
                {
                  "name": "parameters",
                  "required": true,
                  "valid_types": "NetworkParameters",
                  "info": "command line parameters for zeo++"
                },
                {
                  "name": "structure",
                  "required": true,
                  "valid_types": "CifData",
                  "info": "input structure to be analyzed"
                },
                {
                  "name": "atomic_radii",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "atomic radii file"
                },
                {
                  "name": "metadata",
                  "required": false,
                  "valid_types": "",
                  "info": ""
                }
              ],
              "outputs": [
                {
                  "name": "output_parameters",
                  "required": true,
                  "valid_types": "Dict",
                  "info": "key-value pairs parsed from zeo++ output file(s)."
                },
                {
                  "name": "remote_folder",
                  "required": true,
                  "valid_types": "RemoteData",
                  "info": "Input files necessary to run the process will be stored in this folder node ..."
                },
                {
                  "name": "retrieved",
                  "required": true,
                  "valid_types": "FolderData",
                  "info": "Files that are retrieved by the daemon will be stored in this node. By defa ..."
                },
                {
                  "name": "block",
                  "required": false,
                  "valid_types": "SinglefileData",
                  "info": "Blocked pockets fileoutput file."
                },
                {
                  "name": "remote_stash",
                  "required": false,
                  "valid_types": "RemoteStashData",
                  "info": "Contents of the `stash.source_list` option are stored in this remote folder ..."
                }
              ],
              "exit_codes": [
                {
                  "status": 0,
                  "message": "Calculation completed successfully."
                },
                {
                  "status": 1,
                  "message": "The process has failed with an unspecified error."
                },
                {
                  "status": 2,
                  "message": "The process failed with legacy failure mode."
                },
                {
                  "status": 10,
                  "message": "The process returned an invalid output."
                },
                {
                  "status": 11,
                  "message": "The process did not register a required output."
                },
                {
                  "status": 100,
                  "message": "The process did not have the required `retrieved` output."
                },
                {
                  "status": 101,
                  "message": "Not all expected output files were found."
                },
                {
                  "status": 102,
                  "message": "Empty block file. This indicates the calculation of blocked pockets did not finish."
                },
                {
                  "status": 110,
                  "message": "The job ran out of memory."
                },
                {
                  "status": 120,
                  "message": "The job ran out of walltime."
                }
              ]
            },
            "class": "aiida_zeopp.calculations.network:NetworkCalculation"
          }
        },
        "aiida.parsers": {
          "zeopp.network": "aiida_zeopp.parsers.network:NetworkParser"
        },
        "aiida.data": {
          "zeopp.parameters": "aiida_zeopp.data.parameters:NetworkParameters"
        },
        "console_scripts": {
          "zeopp-submit": "aiida_zeopp.console_scripts.data_cli:cli"
        },
        "aiida.workflows": {}
      },
      "commits_count": 0,
      "summaryinfo": [
        {
          "colorclass": "blue",
          "text": "Calculations",
          "count": 1
        },
        {
          "colorclass": "brown",
          "text": "Parsers",
          "count": 1
        },
        {
          "colorclass": "red",
          "text": "Data",
          "count": 1
        },
        {
          "colorclass": "purple",
          "text": "Console scripts",
          "count": 1
        }
      ],
      "pip_install_cmd": "pip install aiida-zeopp"
    }
  },
  "globalsummary": [
    {
      "name": "Calculations",
      "colorclass": "blue",
      "num_entries": 54,
      "total_num": 131
    },
    {
      "name": "Parsers",
      "colorclass": "brown",
      "num_entries": 55,
      "total_num": 110
    },
    {
      "name": "Data",
      "colorclass": "red",
      "num_entries": 29,
      "total_num": 101
    },
    {
      "name": "Workflows",
      "colorclass": "green",
      "num_entries": 39,
      "total_num": 130
    },
    {
      "name": "Console scripts",
      "colorclass": "purple",
      "num_entries": 16,
      "total_num": 27
    },
    {
      "name": "Other",
      "tooltip": "Aenet potentials, Calculations importers, Calculations monitors, ...",
      "colorclass": "orange",
      "num_entries": 26,
      "total_num": 99
    }
  ],
  "status_dict": {
    "planning": [
      "Not yet ready to use. Developers welcome!",
      "status-planning-d9644d.svg"
    ],
    "pre-alpha": [
      "Not yet ready to use. Developers welcome!",
      "status-planning-d9644d.svg"
    ],
    "alpha": [
      "Adds new functionality, not yet ready for production. Testing welcome!",
      "status-alpha-d6af23.svg"
    ],
    "beta": [
      "Adds new functionality, not yet ready for production. Testing welcome!",
      "status-beta-d6af23.svg"
    ],
    "stable": [
      "Ready for production calculations. Bug reports welcome!",
      "status-stable-4cc61e.svg"
    ],
    "mature": [
      "Ready for production calculations. Bug reports welcome!",
      "status-stable-4cc61e.svg"
    ],
    "inactive": [
      "No longer maintained.",
      "status-inactive-bbbbbb.svg"
    ]
  },
  "entrypointtypes": {
    "aiida.calculations": "CalcJobs and calculation functions",
    "aiida.parsers": "CalcJob parsers",
    "aiida.data": "Data node types",
    "aiida.cmdline.data": "verdi data commands",
    "aiida.groups": "Group types",
    "aiida.workflows": "WorkChains and work functions",
    "aiida.schedulers": "Job scheduler support",
    "aiida.transports": "Data transport protocols",
    "aiida.tests": "Development test modules",
    "aiida.tools.dbexporters": "Support for exporting to external databases",
    "aiida.tools.dbimporters": "Support for importing from external databases",
    "console_scripts": "Console scripts"
  }
}