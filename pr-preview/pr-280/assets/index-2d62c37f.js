function pb(e,t){for(var a=0;a<t.length;a++){const i=t[a];if(typeof i!="string"&&!Array.isArray(i)){for(const n in i)if(n!=="default"&&!(n in e)){const s=Object.getOwnPropertyDescriptor(i,n);s&&Object.defineProperty(e,n,s.get?s:{enumerable:!0,get:()=>i[n]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const s of n)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function a(n){const s={};return n.integrity&&(s.integrity=n.integrity),n.referrerPolicy&&(s.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?s.credentials="include":n.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function i(n){if(n.ep)return;n.ep=!0;const s=a(n);fetch(n.href,s)}})();var pt=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ac(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function fb(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var a=function i(){return this instanceof i?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};a.prototype=t.prototype}else a={};return Object.defineProperty(a,"__esModule",{value:!0}),Object.keys(e).forEach(function(i){var n=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(a,i,n.get?n:{enumerable:!0,get:function(){return e[i]}})}),a}var Lh={exports:{}},Eo={},Bh={exports:{}},Y={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ws=Symbol.for("react.element"),mb=Symbol.for("react.portal"),hb=Symbol.for("react.fragment"),gb=Symbol.for("react.strict_mode"),yb=Symbol.for("react.profiler"),_b=Symbol.for("react.provider"),vb=Symbol.for("react.context"),bb=Symbol.for("react.forward_ref"),wb=Symbol.for("react.suspense"),Tb=Symbol.for("react.memo"),kb=Symbol.for("react.lazy"),Gp=Symbol.iterator;function xb(e){return e===null||typeof e!="object"?null:(e=Gp&&e[Gp]||e["@@iterator"],typeof e=="function"?e:null)}var zh={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Wh=Object.assign,$h={};function Sn(e,t,a){this.props=e,this.context=t,this.refs=$h,this.updater=a||zh}Sn.prototype.isReactComponent={};Sn.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};Sn.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Uh(){}Uh.prototype=Sn.prototype;function ic(e,t,a){this.props=e,this.context=t,this.refs=$h,this.updater=a||zh}var nc=ic.prototype=new Uh;nc.constructor=ic;Wh(nc,Sn.prototype);nc.isPureReactComponent=!0;var Xp=Array.isArray,Kh=Object.prototype.hasOwnProperty,sc={current:null},Vh={key:!0,ref:!0,__self:!0,__source:!0};function Hh(e,t,a){var i,n={},s=null,r=null;if(t!=null)for(i in t.ref!==void 0&&(r=t.ref),t.key!==void 0&&(s=""+t.key),t)Kh.call(t,i)&&!Vh.hasOwnProperty(i)&&(n[i]=t[i]);var o=arguments.length-2;if(o===1)n.children=a;else if(1<o){for(var l=Array(o),u=0;u<o;u++)l[u]=arguments[u+2];n.children=l}if(e&&e.defaultProps)for(i in o=e.defaultProps,o)n[i]===void 0&&(n[i]=o[i]);return{$$typeof:Ws,type:e,key:s,ref:r,props:n,_owner:sc.current}}function Db(e,t){return{$$typeof:Ws,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function rc(e){return typeof e=="object"&&e!==null&&e.$$typeof===Ws}function qb(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(a){return t[a]})}var Jp=/\/+/g;function Kl(e,t){return typeof e=="object"&&e!==null&&e.key!=null?qb(""+e.key):t.toString(36)}function Pr(e,t,a,i,n){var s=typeof e;(s==="undefined"||s==="boolean")&&(e=null);var r=!1;if(e===null)r=!0;else switch(s){case"string":case"number":r=!0;break;case"object":switch(e.$$typeof){case Ws:case mb:r=!0}}if(r)return r=e,n=n(r),e=i===""?"."+Kl(r,0):i,Xp(n)?(a="",e!=null&&(a=e.replace(Jp,"$&/")+"/"),Pr(n,t,a,"",function(u){return u})):n!=null&&(rc(n)&&(n=Db(n,a+(!n.key||r&&r.key===n.key?"":(""+n.key).replace(Jp,"$&/")+"/")+e)),t.push(n)),1;if(r=0,i=i===""?".":i+":",Xp(e))for(var o=0;o<e.length;o++){s=e[o];var l=i+Kl(s,o);r+=Pr(s,t,a,l,n)}else if(l=xb(e),typeof l=="function")for(e=l.call(e),o=0;!(s=e.next()).done;)s=s.value,l=i+Kl(s,o++),r+=Pr(s,t,a,l,n);else if(s==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return r}function ar(e,t,a){if(e==null)return e;var i=[],n=0;return Pr(e,i,"","",function(s){return t.call(a,s,n++)}),i}function Cb(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(a){(e._status===0||e._status===-1)&&(e._status=1,e._result=a)},function(a){(e._status===0||e._status===-1)&&(e._status=2,e._result=a)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var rt={current:null},Ar={transition:null},Sb={ReactCurrentDispatcher:rt,ReactCurrentBatchConfig:Ar,ReactCurrentOwner:sc};Y.Children={map:ar,forEach:function(e,t,a){ar(e,function(){t.apply(this,arguments)},a)},count:function(e){var t=0;return ar(e,function(){t++}),t},toArray:function(e){return ar(e,function(t){return t})||[]},only:function(e){if(!rc(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};Y.Component=Sn;Y.Fragment=hb;Y.Profiler=yb;Y.PureComponent=ic;Y.StrictMode=gb;Y.Suspense=wb;Y.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Sb;Y.cloneElement=function(e,t,a){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=Wh({},e.props),n=e.key,s=e.ref,r=e._owner;if(t!=null){if(t.ref!==void 0&&(s=t.ref,r=sc.current),t.key!==void 0&&(n=""+t.key),e.type&&e.type.defaultProps)var o=e.type.defaultProps;for(l in t)Kh.call(t,l)&&!Vh.hasOwnProperty(l)&&(i[l]=t[l]===void 0&&o!==void 0?o[l]:t[l])}var l=arguments.length-2;if(l===1)i.children=a;else if(1<l){o=Array(l);for(var u=0;u<l;u++)o[u]=arguments[u+2];i.children=o}return{$$typeof:Ws,type:e.type,key:n,ref:s,props:i,_owner:r}};Y.createContext=function(e){return e={$$typeof:vb,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:_b,_context:e},e.Consumer=e};Y.createElement=Hh;Y.createFactory=function(e){var t=Hh.bind(null,e);return t.type=e,t};Y.createRef=function(){return{current:null}};Y.forwardRef=function(e){return{$$typeof:bb,render:e}};Y.isValidElement=rc;Y.lazy=function(e){return{$$typeof:kb,_payload:{_status:-1,_result:e},_init:Cb}};Y.memo=function(e,t){return{$$typeof:Tb,type:e,compare:t===void 0?null:t}};Y.startTransition=function(e){var t=Ar.transition;Ar.transition={};try{e()}finally{Ar.transition=t}};Y.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};Y.useCallback=function(e,t){return rt.current.useCallback(e,t)};Y.useContext=function(e){return rt.current.useContext(e)};Y.useDebugValue=function(){};Y.useDeferredValue=function(e){return rt.current.useDeferredValue(e)};Y.useEffect=function(e,t){return rt.current.useEffect(e,t)};Y.useId=function(){return rt.current.useId()};Y.useImperativeHandle=function(e,t,a){return rt.current.useImperativeHandle(e,t,a)};Y.useInsertionEffect=function(e,t){return rt.current.useInsertionEffect(e,t)};Y.useLayoutEffect=function(e,t){return rt.current.useLayoutEffect(e,t)};Y.useMemo=function(e,t){return rt.current.useMemo(e,t)};Y.useReducer=function(e,t,a){return rt.current.useReducer(e,t,a)};Y.useRef=function(e){return rt.current.useRef(e)};Y.useState=function(e){return rt.current.useState(e)};Y.useSyncExternalStore=function(e,t,a){return rt.current.useSyncExternalStore(e,t,a)};Y.useTransition=function(){return rt.current.useTransition()};Y.version="18.2.0";Bh.exports=Y;var b=Bh.exports;const Xt=ac(b),Hr=pb({__proto__:null,default:Xt},[b]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Pb=b,Ab=Symbol.for("react.element"),Rb=Symbol.for("react.fragment"),Eb=Object.prototype.hasOwnProperty,Ib=Pb.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Nb={key:!0,ref:!0,__self:!0,__source:!0};function Gh(e,t,a){var i,n={},s=null,r=null;a!==void 0&&(s=""+a),t.key!==void 0&&(s=""+t.key),t.ref!==void 0&&(r=t.ref);for(i in t)Eb.call(t,i)&&!Nb.hasOwnProperty(i)&&(n[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps,t)n[i]===void 0&&(n[i]=t[i]);return{$$typeof:Ab,type:e,key:s,ref:r,props:n,_owner:Ib.current}}Eo.Fragment=Rb;Eo.jsx=Gh;Eo.jsxs=Gh;Lh.exports=Eo;var f=Lh.exports,ju={},Xh={exports:{}},St={},Jh={exports:{}},Qh={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(P,N){var L=P.length;P.push(N);e:for(;0<L;){var te=L-1>>>1,X=P[te];if(0<n(X,N))P[te]=N,P[L]=X,L=te;else break e}}function a(P){return P.length===0?null:P[0]}function i(P){if(P.length===0)return null;var N=P[0],L=P.pop();if(L!==N){P[0]=L;e:for(var te=0,X=P.length,Ne=X>>>1;te<Ne;){var Z=2*(te+1)-1,we=P[Z],le=Z+1,Ke=P[le];if(0>n(we,L))le<X&&0>n(Ke,we)?(P[te]=Ke,P[le]=L,te=le):(P[te]=we,P[Z]=L,te=Z);else if(le<X&&0>n(Ke,L))P[te]=Ke,P[le]=L,te=le;else break e}}return N}function n(P,N){var L=P.sortIndex-N.sortIndex;return L!==0?L:P.id-N.id}if(typeof performance=="object"&&typeof performance.now=="function"){var s=performance;e.unstable_now=function(){return s.now()}}else{var r=Date,o=r.now();e.unstable_now=function(){return r.now()-o}}var l=[],u=[],d=1,h=null,g=3,p=!1,m=!1,c=!1,k=typeof setTimeout=="function"?setTimeout:null,y=typeof clearTimeout=="function"?clearTimeout:null,_=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function v(P){for(var N=a(u);N!==null;){if(N.callback===null)i(u);else if(N.startTime<=P)i(u),N.sortIndex=N.expirationTime,t(l,N);else break;N=a(u)}}function w(P){if(c=!1,v(P),!m)if(a(l)!==null)m=!0,M(D);else{var N=a(u);N!==null&&B(w,N.startTime-P)}}function D(P,N){m=!1,c&&(c=!1,y(C),C=-1),p=!0;var L=g;try{for(v(N),h=a(l);h!==null&&(!(h.expirationTime>N)||P&&!I());){var te=h.callback;if(typeof te=="function"){h.callback=null,g=h.priorityLevel;var X=te(h.expirationTime<=N);N=e.unstable_now(),typeof X=="function"?h.callback=X:h===a(l)&&i(l),v(N)}else i(l);h=a(l)}if(h!==null)var Ne=!0;else{var Z=a(u);Z!==null&&B(w,Z.startTime-N),Ne=!1}return Ne}finally{h=null,g=L,p=!1}}var q=!1,T=null,C=-1,A=5,S=-1;function I(){return!(e.unstable_now()-S<A)}function j(){if(T!==null){var P=e.unstable_now();S=P;var N=!0;try{N=T(!0,P)}finally{N?O():(q=!1,T=null)}}else q=!1}var O;if(typeof _=="function")O=function(){_(j)};else if(typeof MessageChannel<"u"){var E=new MessageChannel,F=E.port2;E.port1.onmessage=j,O=function(){F.postMessage(null)}}else O=function(){k(j,0)};function M(P){T=P,q||(q=!0,O())}function B(P,N){C=k(function(){P(e.unstable_now())},N)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(P){P.callback=null},e.unstable_continueExecution=function(){m||p||(m=!0,M(D))},e.unstable_forceFrameRate=function(P){0>P||125<P?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):A=0<P?Math.floor(1e3/P):5},e.unstable_getCurrentPriorityLevel=function(){return g},e.unstable_getFirstCallbackNode=function(){return a(l)},e.unstable_next=function(P){switch(g){case 1:case 2:case 3:var N=3;break;default:N=g}var L=g;g=N;try{return P()}finally{g=L}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(P,N){switch(P){case 1:case 2:case 3:case 4:case 5:break;default:P=3}var L=g;g=P;try{return N()}finally{g=L}},e.unstable_scheduleCallback=function(P,N,L){var te=e.unstable_now();switch(typeof L=="object"&&L!==null?(L=L.delay,L=typeof L=="number"&&0<L?te+L:te):L=te,P){case 1:var X=-1;break;case 2:X=250;break;case 5:X=1073741823;break;case 4:X=1e4;break;default:X=5e3}return X=L+X,P={id:d++,callback:N,priorityLevel:P,startTime:L,expirationTime:X,sortIndex:-1},L>te?(P.sortIndex=L,t(u,P),a(l)===null&&P===a(u)&&(c?(y(C),C=-1):c=!0,B(w,L-te))):(P.sortIndex=X,t(l,P),m||p||(m=!0,M(D))),P},e.unstable_shouldYield=I,e.unstable_wrapCallback=function(P){var N=g;return function(){var L=g;g=N;try{return P.apply(this,arguments)}finally{g=L}}}})(Qh);Jh.exports=Qh;var jb=Jh.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Yh=b,Ct=jb;function R(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,a=1;a<arguments.length;a++)t+="&args[]="+encodeURIComponent(arguments[a]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Zh=new Set,vs={};function ji(e,t){gn(e,t),gn(e+"Capture",t)}function gn(e,t){for(vs[e]=t,e=0;e<t.length;e++)Zh.add(t[e])}var Da=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Fu=Object.prototype.hasOwnProperty,Fb=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Qp={},Yp={};function Ob(e){return Fu.call(Yp,e)?!0:Fu.call(Qp,e)?!1:Fb.test(e)?Yp[e]=!0:(Qp[e]=!0,!1)}function Mb(e,t,a,i){if(a!==null&&a.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return i?!1:a!==null?!a.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function Lb(e,t,a,i){if(t===null||typeof t>"u"||Mb(e,t,a,i))return!0;if(i)return!1;if(a!==null)switch(a.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function ot(e,t,a,i,n,s,r){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=i,this.attributeNamespace=n,this.mustUseProperty=a,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=r}var Je={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Je[e]=new ot(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Je[t]=new ot(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){Je[e]=new ot(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Je[e]=new ot(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Je[e]=new ot(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){Je[e]=new ot(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){Je[e]=new ot(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){Je[e]=new ot(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){Je[e]=new ot(e,5,!1,e.toLowerCase(),null,!1,!1)});var oc=/[\-:]([a-z])/g;function lc(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(oc,lc);Je[t]=new ot(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(oc,lc);Je[t]=new ot(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(oc,lc);Je[t]=new ot(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){Je[e]=new ot(e,1,!1,e.toLowerCase(),null,!1,!1)});Je.xlinkHref=new ot("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){Je[e]=new ot(e,1,!1,e.toLowerCase(),null,!0,!0)});function uc(e,t,a,i){var n=Je.hasOwnProperty(t)?Je[t]:null;(n!==null?n.type!==0:i||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(Lb(t,a,n,i)&&(a=null),i||n===null?Ob(t)&&(a===null?e.removeAttribute(t):e.setAttribute(t,""+a)):n.mustUseProperty?e[n.propertyName]=a===null?n.type===3?!1:"":a:(t=n.attributeName,i=n.attributeNamespace,a===null?e.removeAttribute(t):(n=n.type,a=n===3||n===4&&a===!0?"":""+a,i?e.setAttributeNS(i,t,a):e.setAttribute(t,a))))}var Ia=Yh.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ir=Symbol.for("react.element"),Gi=Symbol.for("react.portal"),Xi=Symbol.for("react.fragment"),dc=Symbol.for("react.strict_mode"),Ou=Symbol.for("react.profiler"),eg=Symbol.for("react.provider"),tg=Symbol.for("react.context"),cc=Symbol.for("react.forward_ref"),Mu=Symbol.for("react.suspense"),Lu=Symbol.for("react.suspense_list"),pc=Symbol.for("react.memo"),za=Symbol.for("react.lazy"),ag=Symbol.for("react.offscreen"),Zp=Symbol.iterator;function Mn(e){return e===null||typeof e!="object"?null:(e=Zp&&e[Zp]||e["@@iterator"],typeof e=="function"?e:null)}var Ae=Object.assign,Vl;function Zn(e){if(Vl===void 0)try{throw Error()}catch(a){var t=a.stack.trim().match(/\n( *(at )?)/);Vl=t&&t[1]||""}return`
`+Vl+e}var Hl=!1;function Gl(e,t){if(!e||Hl)return"";Hl=!0;var a=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(u){var i=u}Reflect.construct(e,[],t)}else{try{t.call()}catch(u){i=u}e.call(t.prototype)}else{try{throw Error()}catch(u){i=u}e()}}catch(u){if(u&&i&&typeof u.stack=="string"){for(var n=u.stack.split(`
`),s=i.stack.split(`
`),r=n.length-1,o=s.length-1;1<=r&&0<=o&&n[r]!==s[o];)o--;for(;1<=r&&0<=o;r--,o--)if(n[r]!==s[o]){if(r!==1||o!==1)do if(r--,o--,0>o||n[r]!==s[o]){var l=`
`+n[r].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=r&&0<=o);break}}}finally{Hl=!1,Error.prepareStackTrace=a}return(e=e?e.displayName||e.name:"")?Zn(e):""}function Bb(e){switch(e.tag){case 5:return Zn(e.type);case 16:return Zn("Lazy");case 13:return Zn("Suspense");case 19:return Zn("SuspenseList");case 0:case 2:case 15:return e=Gl(e.type,!1),e;case 11:return e=Gl(e.type.render,!1),e;case 1:return e=Gl(e.type,!0),e;default:return""}}function Bu(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Xi:return"Fragment";case Gi:return"Portal";case Ou:return"Profiler";case dc:return"StrictMode";case Mu:return"Suspense";case Lu:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case tg:return(e.displayName||"Context")+".Consumer";case eg:return(e._context.displayName||"Context")+".Provider";case cc:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case pc:return t=e.displayName||null,t!==null?t:Bu(e.type)||"Memo";case za:t=e._payload,e=e._init;try{return Bu(e(t))}catch{}}return null}function zb(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Bu(t);case 8:return t===dc?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function ii(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function ig(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Wb(e){var t=ig(e)?"checked":"value",a=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&typeof a<"u"&&typeof a.get=="function"&&typeof a.set=="function"){var n=a.get,s=a.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.call(this)},set:function(r){i=""+r,s.call(this,r)}}),Object.defineProperty(e,t,{enumerable:a.enumerable}),{getValue:function(){return i},setValue:function(r){i=""+r},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function nr(e){e._valueTracker||(e._valueTracker=Wb(e))}function ng(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var a=t.getValue(),i="";return e&&(i=ig(e)?e.checked?"true":"false":e.value),e=i,e!==a?(t.setValue(e),!0):!1}function Gr(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function zu(e,t){var a=t.checked;return Ae({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:a??e._wrapperState.initialChecked})}function ef(e,t){var a=t.defaultValue==null?"":t.defaultValue,i=t.checked!=null?t.checked:t.defaultChecked;a=ii(t.value!=null?t.value:a),e._wrapperState={initialChecked:i,initialValue:a,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function sg(e,t){t=t.checked,t!=null&&uc(e,"checked",t,!1)}function Wu(e,t){sg(e,t);var a=ii(t.value),i=t.type;if(a!=null)i==="number"?(a===0&&e.value===""||e.value!=a)&&(e.value=""+a):e.value!==""+a&&(e.value=""+a);else if(i==="submit"||i==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?$u(e,t.type,a):t.hasOwnProperty("defaultValue")&&$u(e,t.type,ii(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function tf(e,t,a){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!(i!=="submit"&&i!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,a||t===e.value||(e.value=t),e.defaultValue=t}a=e.name,a!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,a!==""&&(e.name=a)}function $u(e,t,a){(t!=="number"||Gr(e.ownerDocument)!==e)&&(a==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+a&&(e.defaultValue=""+a))}var es=Array.isArray;function ln(e,t,a,i){if(e=e.options,t){t={};for(var n=0;n<a.length;n++)t["$"+a[n]]=!0;for(a=0;a<e.length;a++)n=t.hasOwnProperty("$"+e[a].value),e[a].selected!==n&&(e[a].selected=n),n&&i&&(e[a].defaultSelected=!0)}else{for(a=""+ii(a),t=null,n=0;n<e.length;n++){if(e[n].value===a){e[n].selected=!0,i&&(e[n].defaultSelected=!0);return}t!==null||e[n].disabled||(t=e[n])}t!==null&&(t.selected=!0)}}function Uu(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(R(91));return Ae({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function af(e,t){var a=t.value;if(a==null){if(a=t.children,t=t.defaultValue,a!=null){if(t!=null)throw Error(R(92));if(es(a)){if(1<a.length)throw Error(R(93));a=a[0]}t=a}t==null&&(t=""),a=t}e._wrapperState={initialValue:ii(a)}}function rg(e,t){var a=ii(t.value),i=ii(t.defaultValue);a!=null&&(a=""+a,a!==e.value&&(e.value=a),t.defaultValue==null&&e.defaultValue!==a&&(e.defaultValue=a)),i!=null&&(e.defaultValue=""+i)}function nf(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function og(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ku(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?og(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var sr,lg=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,a,i,n){MSApp.execUnsafeLocalFunction(function(){return e(t,a,i,n)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(sr=sr||document.createElement("div"),sr.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=sr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function bs(e,t){if(t){var a=e.firstChild;if(a&&a===e.lastChild&&a.nodeType===3){a.nodeValue=t;return}}e.textContent=t}var ss={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},$b=["Webkit","ms","Moz","O"];Object.keys(ss).forEach(function(e){$b.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ss[t]=ss[e]})});function ug(e,t,a){return t==null||typeof t=="boolean"||t===""?"":a||typeof t!="number"||t===0||ss.hasOwnProperty(e)&&ss[e]?(""+t).trim():t+"px"}function dg(e,t){e=e.style;for(var a in t)if(t.hasOwnProperty(a)){var i=a.indexOf("--")===0,n=ug(a,t[a],i);a==="float"&&(a="cssFloat"),i?e.setProperty(a,n):e[a]=n}}var Ub=Ae({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Vu(e,t){if(t){if(Ub[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(R(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(R(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(R(61))}if(t.style!=null&&typeof t.style!="object")throw Error(R(62))}}function Hu(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Gu=null;function fc(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Xu=null,un=null,dn=null;function sf(e){if(e=Ks(e)){if(typeof Xu!="function")throw Error(R(280));var t=e.stateNode;t&&(t=Oo(t),Xu(e.stateNode,e.type,t))}}function cg(e){un?dn?dn.push(e):dn=[e]:un=e}function pg(){if(un){var e=un,t=dn;if(dn=un=null,sf(e),t)for(e=0;e<t.length;e++)sf(t[e])}}function fg(e,t){return e(t)}function mg(){}var Xl=!1;function hg(e,t,a){if(Xl)return e(t,a);Xl=!0;try{return fg(e,t,a)}finally{Xl=!1,(un!==null||dn!==null)&&(mg(),pg())}}function ws(e,t){var a=e.stateNode;if(a===null)return null;var i=Oo(a);if(i===null)return null;a=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(e=e.type,i=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!i;break e;default:e=!1}if(e)return null;if(a&&typeof a!="function")throw Error(R(231,t,typeof a));return a}var Ju=!1;if(Da)try{var Ln={};Object.defineProperty(Ln,"passive",{get:function(){Ju=!0}}),window.addEventListener("test",Ln,Ln),window.removeEventListener("test",Ln,Ln)}catch{Ju=!1}function Kb(e,t,a,i,n,s,r,o,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(a,u)}catch(d){this.onError(d)}}var rs=!1,Xr=null,Jr=!1,Qu=null,Vb={onError:function(e){rs=!0,Xr=e}};function Hb(e,t,a,i,n,s,r,o,l){rs=!1,Xr=null,Kb.apply(Vb,arguments)}function Gb(e,t,a,i,n,s,r,o,l){if(Hb.apply(this,arguments),rs){if(rs){var u=Xr;rs=!1,Xr=null}else throw Error(R(198));Jr||(Jr=!0,Qu=u)}}function Fi(e){var t=e,a=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(a=t.return),e=t.return;while(e)}return t.tag===3?a:null}function gg(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function rf(e){if(Fi(e)!==e)throw Error(R(188))}function Xb(e){var t=e.alternate;if(!t){if(t=Fi(e),t===null)throw Error(R(188));return t!==e?null:e}for(var a=e,i=t;;){var n=a.return;if(n===null)break;var s=n.alternate;if(s===null){if(i=n.return,i!==null){a=i;continue}break}if(n.child===s.child){for(s=n.child;s;){if(s===a)return rf(n),e;if(s===i)return rf(n),t;s=s.sibling}throw Error(R(188))}if(a.return!==i.return)a=n,i=s;else{for(var r=!1,o=n.child;o;){if(o===a){r=!0,a=n,i=s;break}if(o===i){r=!0,i=n,a=s;break}o=o.sibling}if(!r){for(o=s.child;o;){if(o===a){r=!0,a=s,i=n;break}if(o===i){r=!0,i=s,a=n;break}o=o.sibling}if(!r)throw Error(R(189))}}if(a.alternate!==i)throw Error(R(190))}if(a.tag!==3)throw Error(R(188));return a.stateNode.current===a?e:t}function yg(e){return e=Xb(e),e!==null?_g(e):null}function _g(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=_g(e);if(t!==null)return t;e=e.sibling}return null}var vg=Ct.unstable_scheduleCallback,of=Ct.unstable_cancelCallback,Jb=Ct.unstable_shouldYield,Qb=Ct.unstable_requestPaint,Fe=Ct.unstable_now,Yb=Ct.unstable_getCurrentPriorityLevel,mc=Ct.unstable_ImmediatePriority,bg=Ct.unstable_UserBlockingPriority,Qr=Ct.unstable_NormalPriority,Zb=Ct.unstable_LowPriority,wg=Ct.unstable_IdlePriority,Io=null,la=null;function e0(e){if(la&&typeof la.onCommitFiberRoot=="function")try{la.onCommitFiberRoot(Io,e,void 0,(e.current.flags&128)===128)}catch{}}var Jt=Math.clz32?Math.clz32:i0,t0=Math.log,a0=Math.LN2;function i0(e){return e>>>=0,e===0?32:31-(t0(e)/a0|0)|0}var rr=64,or=4194304;function ts(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Yr(e,t){var a=e.pendingLanes;if(a===0)return 0;var i=0,n=e.suspendedLanes,s=e.pingedLanes,r=a&268435455;if(r!==0){var o=r&~n;o!==0?i=ts(o):(s&=r,s!==0&&(i=ts(s)))}else r=a&~n,r!==0?i=ts(r):s!==0&&(i=ts(s));if(i===0)return 0;if(t!==0&&t!==i&&!(t&n)&&(n=i&-i,s=t&-t,n>=s||n===16&&(s&4194240)!==0))return t;if(i&4&&(i|=a&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=i;0<t;)a=31-Jt(t),n=1<<a,i|=e[a],t&=~n;return i}function n0(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function s0(e,t){for(var a=e.suspendedLanes,i=e.pingedLanes,n=e.expirationTimes,s=e.pendingLanes;0<s;){var r=31-Jt(s),o=1<<r,l=n[r];l===-1?(!(o&a)||o&i)&&(n[r]=n0(o,t)):l<=t&&(e.expiredLanes|=o),s&=~o}}function Yu(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Tg(){var e=rr;return rr<<=1,!(rr&4194240)&&(rr=64),e}function Jl(e){for(var t=[],a=0;31>a;a++)t.push(e);return t}function $s(e,t,a){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Jt(t),e[t]=a}function r0(e,t){var a=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var i=e.eventTimes;for(e=e.expirationTimes;0<a;){var n=31-Jt(a),s=1<<n;t[n]=0,i[n]=-1,e[n]=-1,a&=~s}}function hc(e,t){var a=e.entangledLanes|=t;for(e=e.entanglements;a;){var i=31-Jt(a),n=1<<i;n&t|e[i]&t&&(e[i]|=t),a&=~n}}var ue=0;function kg(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var xg,gc,Dg,qg,Cg,Zu=!1,lr=[],Ga=null,Xa=null,Ja=null,Ts=new Map,ks=new Map,$a=[],o0="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function lf(e,t){switch(e){case"focusin":case"focusout":Ga=null;break;case"dragenter":case"dragleave":Xa=null;break;case"mouseover":case"mouseout":Ja=null;break;case"pointerover":case"pointerout":Ts.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ks.delete(t.pointerId)}}function Bn(e,t,a,i,n,s){return e===null||e.nativeEvent!==s?(e={blockedOn:t,domEventName:a,eventSystemFlags:i,nativeEvent:s,targetContainers:[n]},t!==null&&(t=Ks(t),t!==null&&gc(t)),e):(e.eventSystemFlags|=i,t=e.targetContainers,n!==null&&t.indexOf(n)===-1&&t.push(n),e)}function l0(e,t,a,i,n){switch(t){case"focusin":return Ga=Bn(Ga,e,t,a,i,n),!0;case"dragenter":return Xa=Bn(Xa,e,t,a,i,n),!0;case"mouseover":return Ja=Bn(Ja,e,t,a,i,n),!0;case"pointerover":var s=n.pointerId;return Ts.set(s,Bn(Ts.get(s)||null,e,t,a,i,n)),!0;case"gotpointercapture":return s=n.pointerId,ks.set(s,Bn(ks.get(s)||null,e,t,a,i,n)),!0}return!1}function Sg(e){var t=wi(e.target);if(t!==null){var a=Fi(t);if(a!==null){if(t=a.tag,t===13){if(t=gg(a),t!==null){e.blockedOn=t,Cg(e.priority,function(){Dg(a)});return}}else if(t===3&&a.stateNode.current.memoizedState.isDehydrated){e.blockedOn=a.tag===3?a.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Rr(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var a=ed(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(a===null){a=e.nativeEvent;var i=new a.constructor(a.type,a);Gu=i,a.target.dispatchEvent(i),Gu=null}else return t=Ks(a),t!==null&&gc(t),e.blockedOn=a,!1;t.shift()}return!0}function uf(e,t,a){Rr(e)&&a.delete(t)}function u0(){Zu=!1,Ga!==null&&Rr(Ga)&&(Ga=null),Xa!==null&&Rr(Xa)&&(Xa=null),Ja!==null&&Rr(Ja)&&(Ja=null),Ts.forEach(uf),ks.forEach(uf)}function zn(e,t){e.blockedOn===t&&(e.blockedOn=null,Zu||(Zu=!0,Ct.unstable_scheduleCallback(Ct.unstable_NormalPriority,u0)))}function xs(e){function t(n){return zn(n,e)}if(0<lr.length){zn(lr[0],e);for(var a=1;a<lr.length;a++){var i=lr[a];i.blockedOn===e&&(i.blockedOn=null)}}for(Ga!==null&&zn(Ga,e),Xa!==null&&zn(Xa,e),Ja!==null&&zn(Ja,e),Ts.forEach(t),ks.forEach(t),a=0;a<$a.length;a++)i=$a[a],i.blockedOn===e&&(i.blockedOn=null);for(;0<$a.length&&(a=$a[0],a.blockedOn===null);)Sg(a),a.blockedOn===null&&$a.shift()}var cn=Ia.ReactCurrentBatchConfig,Zr=!0;function d0(e,t,a,i){var n=ue,s=cn.transition;cn.transition=null;try{ue=1,yc(e,t,a,i)}finally{ue=n,cn.transition=s}}function c0(e,t,a,i){var n=ue,s=cn.transition;cn.transition=null;try{ue=4,yc(e,t,a,i)}finally{ue=n,cn.transition=s}}function yc(e,t,a,i){if(Zr){var n=ed(e,t,a,i);if(n===null)ru(e,t,i,eo,a),lf(e,i);else if(l0(n,e,t,a,i))i.stopPropagation();else if(lf(e,i),t&4&&-1<o0.indexOf(e)){for(;n!==null;){var s=Ks(n);if(s!==null&&xg(s),s=ed(e,t,a,i),s===null&&ru(e,t,i,eo,a),s===n)break;n=s}n!==null&&i.stopPropagation()}else ru(e,t,i,null,a)}}var eo=null;function ed(e,t,a,i){if(eo=null,e=fc(i),e=wi(e),e!==null)if(t=Fi(e),t===null)e=null;else if(a=t.tag,a===13){if(e=gg(t),e!==null)return e;e=null}else if(a===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return eo=e,null}function Pg(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Yb()){case mc:return 1;case bg:return 4;case Qr:case Zb:return 16;case wg:return 536870912;default:return 16}default:return 16}}var Ka=null,_c=null,Er=null;function Ag(){if(Er)return Er;var e,t=_c,a=t.length,i,n="value"in Ka?Ka.value:Ka.textContent,s=n.length;for(e=0;e<a&&t[e]===n[e];e++);var r=a-e;for(i=1;i<=r&&t[a-i]===n[s-i];i++);return Er=n.slice(e,1<i?1-i:void 0)}function Ir(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function ur(){return!0}function df(){return!1}function Pt(e){function t(a,i,n,s,r){this._reactName=a,this._targetInst=n,this.type=i,this.nativeEvent=s,this.target=r,this.currentTarget=null;for(var o in e)e.hasOwnProperty(o)&&(a=e[o],this[o]=a?a(s):s[o]);return this.isDefaultPrevented=(s.defaultPrevented!=null?s.defaultPrevented:s.returnValue===!1)?ur:df,this.isPropagationStopped=df,this}return Ae(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():typeof a.returnValue!="unknown"&&(a.returnValue=!1),this.isDefaultPrevented=ur)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():typeof a.cancelBubble!="unknown"&&(a.cancelBubble=!0),this.isPropagationStopped=ur)},persist:function(){},isPersistent:ur}),t}var Pn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},vc=Pt(Pn),Us=Ae({},Pn,{view:0,detail:0}),p0=Pt(Us),Ql,Yl,Wn,No=Ae({},Us,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:bc,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Wn&&(Wn&&e.type==="mousemove"?(Ql=e.screenX-Wn.screenX,Yl=e.screenY-Wn.screenY):Yl=Ql=0,Wn=e),Ql)},movementY:function(e){return"movementY"in e?e.movementY:Yl}}),cf=Pt(No),f0=Ae({},No,{dataTransfer:0}),m0=Pt(f0),h0=Ae({},Us,{relatedTarget:0}),Zl=Pt(h0),g0=Ae({},Pn,{animationName:0,elapsedTime:0,pseudoElement:0}),y0=Pt(g0),_0=Ae({},Pn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),v0=Pt(_0),b0=Ae({},Pn,{data:0}),pf=Pt(b0),w0={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},T0={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},k0={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function x0(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=k0[e])?!!t[e]:!1}function bc(){return x0}var D0=Ae({},Us,{key:function(e){if(e.key){var t=w0[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Ir(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?T0[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:bc,charCode:function(e){return e.type==="keypress"?Ir(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Ir(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),q0=Pt(D0),C0=Ae({},No,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),ff=Pt(C0),S0=Ae({},Us,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:bc}),P0=Pt(S0),A0=Ae({},Pn,{propertyName:0,elapsedTime:0,pseudoElement:0}),R0=Pt(A0),E0=Ae({},No,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),I0=Pt(E0),N0=[9,13,27,32],wc=Da&&"CompositionEvent"in window,os=null;Da&&"documentMode"in document&&(os=document.documentMode);var j0=Da&&"TextEvent"in window&&!os,Rg=Da&&(!wc||os&&8<os&&11>=os),mf=String.fromCharCode(32),hf=!1;function Eg(e,t){switch(e){case"keyup":return N0.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ig(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Ji=!1;function F0(e,t){switch(e){case"compositionend":return Ig(t);case"keypress":return t.which!==32?null:(hf=!0,mf);case"textInput":return e=t.data,e===mf&&hf?null:e;default:return null}}function O0(e,t){if(Ji)return e==="compositionend"||!wc&&Eg(e,t)?(e=Ag(),Er=_c=Ka=null,Ji=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Rg&&t.locale!=="ko"?null:t.data;default:return null}}var M0={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function gf(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!M0[e.type]:t==="textarea"}function Ng(e,t,a,i){cg(i),t=to(t,"onChange"),0<t.length&&(a=new vc("onChange","change",null,a,i),e.push({event:a,listeners:t}))}var ls=null,Ds=null;function L0(e){Kg(e,0)}function jo(e){var t=Zi(e);if(ng(t))return e}function B0(e,t){if(e==="change")return t}var jg=!1;if(Da){var eu;if(Da){var tu="oninput"in document;if(!tu){var yf=document.createElement("div");yf.setAttribute("oninput","return;"),tu=typeof yf.oninput=="function"}eu=tu}else eu=!1;jg=eu&&(!document.documentMode||9<document.documentMode)}function _f(){ls&&(ls.detachEvent("onpropertychange",Fg),Ds=ls=null)}function Fg(e){if(e.propertyName==="value"&&jo(Ds)){var t=[];Ng(t,Ds,e,fc(e)),hg(L0,t)}}function z0(e,t,a){e==="focusin"?(_f(),ls=t,Ds=a,ls.attachEvent("onpropertychange",Fg)):e==="focusout"&&_f()}function W0(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return jo(Ds)}function $0(e,t){if(e==="click")return jo(t)}function U0(e,t){if(e==="input"||e==="change")return jo(t)}function K0(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Yt=typeof Object.is=="function"?Object.is:K0;function qs(e,t){if(Yt(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(i=0;i<a.length;i++){var n=a[i];if(!Fu.call(t,n)||!Yt(e[n],t[n]))return!1}return!0}function vf(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function bf(e,t){var a=vf(e);e=0;for(var i;a;){if(a.nodeType===3){if(i=e+a.textContent.length,e<=t&&i>=t)return{node:a,offset:t-e};e=i}e:{for(;a;){if(a.nextSibling){a=a.nextSibling;break e}a=a.parentNode}a=void 0}a=vf(a)}}function Og(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Og(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Mg(){for(var e=window,t=Gr();t instanceof e.HTMLIFrameElement;){try{var a=typeof t.contentWindow.location.href=="string"}catch{a=!1}if(a)e=t.contentWindow;else break;t=Gr(e.document)}return t}function Tc(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function V0(e){var t=Mg(),a=e.focusedElem,i=e.selectionRange;if(t!==a&&a&&a.ownerDocument&&Og(a.ownerDocument.documentElement,a)){if(i!==null&&Tc(a)){if(t=i.start,e=i.end,e===void 0&&(e=t),"selectionStart"in a)a.selectionStart=t,a.selectionEnd=Math.min(e,a.value.length);else if(e=(t=a.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var n=a.textContent.length,s=Math.min(i.start,n);i=i.end===void 0?s:Math.min(i.end,n),!e.extend&&s>i&&(n=i,i=s,s=n),n=bf(a,s);var r=bf(a,i);n&&r&&(e.rangeCount!==1||e.anchorNode!==n.node||e.anchorOffset!==n.offset||e.focusNode!==r.node||e.focusOffset!==r.offset)&&(t=t.createRange(),t.setStart(n.node,n.offset),e.removeAllRanges(),s>i?(e.addRange(t),e.extend(r.node,r.offset)):(t.setEnd(r.node,r.offset),e.addRange(t)))}}for(t=[],e=a;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof a.focus=="function"&&a.focus(),a=0;a<t.length;a++)e=t[a],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var H0=Da&&"documentMode"in document&&11>=document.documentMode,Qi=null,td=null,us=null,ad=!1;function wf(e,t,a){var i=a.window===a?a.document:a.nodeType===9?a:a.ownerDocument;ad||Qi==null||Qi!==Gr(i)||(i=Qi,"selectionStart"in i&&Tc(i)?i={start:i.selectionStart,end:i.selectionEnd}:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection(),i={anchorNode:i.anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset}),us&&qs(us,i)||(us=i,i=to(td,"onSelect"),0<i.length&&(t=new vc("onSelect","select",null,t,a),e.push({event:t,listeners:i}),t.target=Qi)))}function dr(e,t){var a={};return a[e.toLowerCase()]=t.toLowerCase(),a["Webkit"+e]="webkit"+t,a["Moz"+e]="moz"+t,a}var Yi={animationend:dr("Animation","AnimationEnd"),animationiteration:dr("Animation","AnimationIteration"),animationstart:dr("Animation","AnimationStart"),transitionend:dr("Transition","TransitionEnd")},au={},Lg={};Da&&(Lg=document.createElement("div").style,"AnimationEvent"in window||(delete Yi.animationend.animation,delete Yi.animationiteration.animation,delete Yi.animationstart.animation),"TransitionEvent"in window||delete Yi.transitionend.transition);function Fo(e){if(au[e])return au[e];if(!Yi[e])return e;var t=Yi[e],a;for(a in t)if(t.hasOwnProperty(a)&&a in Lg)return au[e]=t[a];return e}var Bg=Fo("animationend"),zg=Fo("animationiteration"),Wg=Fo("animationstart"),$g=Fo("transitionend"),Ug=new Map,Tf="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function ri(e,t){Ug.set(e,t),ji(t,[e])}for(var iu=0;iu<Tf.length;iu++){var nu=Tf[iu],G0=nu.toLowerCase(),X0=nu[0].toUpperCase()+nu.slice(1);ri(G0,"on"+X0)}ri(Bg,"onAnimationEnd");ri(zg,"onAnimationIteration");ri(Wg,"onAnimationStart");ri("dblclick","onDoubleClick");ri("focusin","onFocus");ri("focusout","onBlur");ri($g,"onTransitionEnd");gn("onMouseEnter",["mouseout","mouseover"]);gn("onMouseLeave",["mouseout","mouseover"]);gn("onPointerEnter",["pointerout","pointerover"]);gn("onPointerLeave",["pointerout","pointerover"]);ji("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));ji("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));ji("onBeforeInput",["compositionend","keypress","textInput","paste"]);ji("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));ji("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));ji("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var as="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),J0=new Set("cancel close invalid load scroll toggle".split(" ").concat(as));function kf(e,t,a){var i=e.type||"unknown-event";e.currentTarget=a,Gb(i,t,void 0,e),e.currentTarget=null}function Kg(e,t){t=(t&4)!==0;for(var a=0;a<e.length;a++){var i=e[a],n=i.event;i=i.listeners;e:{var s=void 0;if(t)for(var r=i.length-1;0<=r;r--){var o=i[r],l=o.instance,u=o.currentTarget;if(o=o.listener,l!==s&&n.isPropagationStopped())break e;kf(n,o,u),s=l}else for(r=0;r<i.length;r++){if(o=i[r],l=o.instance,u=o.currentTarget,o=o.listener,l!==s&&n.isPropagationStopped())break e;kf(n,o,u),s=l}}}if(Jr)throw e=Qu,Jr=!1,Qu=null,e}function ve(e,t){var a=t[od];a===void 0&&(a=t[od]=new Set);var i=e+"__bubble";a.has(i)||(Vg(t,e,2,!1),a.add(i))}function su(e,t,a){var i=0;t&&(i|=4),Vg(a,e,i,t)}var cr="_reactListening"+Math.random().toString(36).slice(2);function Cs(e){if(!e[cr]){e[cr]=!0,Zh.forEach(function(a){a!=="selectionchange"&&(J0.has(a)||su(a,!1,e),su(a,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[cr]||(t[cr]=!0,su("selectionchange",!1,t))}}function Vg(e,t,a,i){switch(Pg(t)){case 1:var n=d0;break;case 4:n=c0;break;default:n=yc}a=n.bind(null,t,a,e),n=void 0,!Ju||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(n=!0),i?n!==void 0?e.addEventListener(t,a,{capture:!0,passive:n}):e.addEventListener(t,a,!0):n!==void 0?e.addEventListener(t,a,{passive:n}):e.addEventListener(t,a,!1)}function ru(e,t,a,i,n){var s=i;if(!(t&1)&&!(t&2)&&i!==null)e:for(;;){if(i===null)return;var r=i.tag;if(r===3||r===4){var o=i.stateNode.containerInfo;if(o===n||o.nodeType===8&&o.parentNode===n)break;if(r===4)for(r=i.return;r!==null;){var l=r.tag;if((l===3||l===4)&&(l=r.stateNode.containerInfo,l===n||l.nodeType===8&&l.parentNode===n))return;r=r.return}for(;o!==null;){if(r=wi(o),r===null)return;if(l=r.tag,l===5||l===6){i=s=r;continue e}o=o.parentNode}}i=i.return}hg(function(){var u=s,d=fc(a),h=[];e:{var g=Ug.get(e);if(g!==void 0){var p=vc,m=e;switch(e){case"keypress":if(Ir(a)===0)break e;case"keydown":case"keyup":p=q0;break;case"focusin":m="focus",p=Zl;break;case"focusout":m="blur",p=Zl;break;case"beforeblur":case"afterblur":p=Zl;break;case"click":if(a.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":p=cf;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":p=m0;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":p=P0;break;case Bg:case zg:case Wg:p=y0;break;case $g:p=R0;break;case"scroll":p=p0;break;case"wheel":p=I0;break;case"copy":case"cut":case"paste":p=v0;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":p=ff}var c=(t&4)!==0,k=!c&&e==="scroll",y=c?g!==null?g+"Capture":null:g;c=[];for(var _=u,v;_!==null;){v=_;var w=v.stateNode;if(v.tag===5&&w!==null&&(v=w,y!==null&&(w=ws(_,y),w!=null&&c.push(Ss(_,w,v)))),k)break;_=_.return}0<c.length&&(g=new p(g,m,null,a,d),h.push({event:g,listeners:c}))}}if(!(t&7)){e:{if(g=e==="mouseover"||e==="pointerover",p=e==="mouseout"||e==="pointerout",g&&a!==Gu&&(m=a.relatedTarget||a.fromElement)&&(wi(m)||m[qa]))break e;if((p||g)&&(g=d.window===d?d:(g=d.ownerDocument)?g.defaultView||g.parentWindow:window,p?(m=a.relatedTarget||a.toElement,p=u,m=m?wi(m):null,m!==null&&(k=Fi(m),m!==k||m.tag!==5&&m.tag!==6)&&(m=null)):(p=null,m=u),p!==m)){if(c=cf,w="onMouseLeave",y="onMouseEnter",_="mouse",(e==="pointerout"||e==="pointerover")&&(c=ff,w="onPointerLeave",y="onPointerEnter",_="pointer"),k=p==null?g:Zi(p),v=m==null?g:Zi(m),g=new c(w,_+"leave",p,a,d),g.target=k,g.relatedTarget=v,w=null,wi(d)===u&&(c=new c(y,_+"enter",m,a,d),c.target=v,c.relatedTarget=k,w=c),k=w,p&&m)t:{for(c=p,y=m,_=0,v=c;v;v=Li(v))_++;for(v=0,w=y;w;w=Li(w))v++;for(;0<_-v;)c=Li(c),_--;for(;0<v-_;)y=Li(y),v--;for(;_--;){if(c===y||y!==null&&c===y.alternate)break t;c=Li(c),y=Li(y)}c=null}else c=null;p!==null&&xf(h,g,p,c,!1),m!==null&&k!==null&&xf(h,k,m,c,!0)}}e:{if(g=u?Zi(u):window,p=g.nodeName&&g.nodeName.toLowerCase(),p==="select"||p==="input"&&g.type==="file")var D=B0;else if(gf(g))if(jg)D=U0;else{D=W0;var q=z0}else(p=g.nodeName)&&p.toLowerCase()==="input"&&(g.type==="checkbox"||g.type==="radio")&&(D=$0);if(D&&(D=D(e,u))){Ng(h,D,a,d);break e}q&&q(e,g,u),e==="focusout"&&(q=g._wrapperState)&&q.controlled&&g.type==="number"&&$u(g,"number",g.value)}switch(q=u?Zi(u):window,e){case"focusin":(gf(q)||q.contentEditable==="true")&&(Qi=q,td=u,us=null);break;case"focusout":us=td=Qi=null;break;case"mousedown":ad=!0;break;case"contextmenu":case"mouseup":case"dragend":ad=!1,wf(h,a,d);break;case"selectionchange":if(H0)break;case"keydown":case"keyup":wf(h,a,d)}var T;if(wc)e:{switch(e){case"compositionstart":var C="onCompositionStart";break e;case"compositionend":C="onCompositionEnd";break e;case"compositionupdate":C="onCompositionUpdate";break e}C=void 0}else Ji?Eg(e,a)&&(C="onCompositionEnd"):e==="keydown"&&a.keyCode===229&&(C="onCompositionStart");C&&(Rg&&a.locale!=="ko"&&(Ji||C!=="onCompositionStart"?C==="onCompositionEnd"&&Ji&&(T=Ag()):(Ka=d,_c="value"in Ka?Ka.value:Ka.textContent,Ji=!0)),q=to(u,C),0<q.length&&(C=new pf(C,e,null,a,d),h.push({event:C,listeners:q}),T?C.data=T:(T=Ig(a),T!==null&&(C.data=T)))),(T=j0?F0(e,a):O0(e,a))&&(u=to(u,"onBeforeInput"),0<u.length&&(d=new pf("onBeforeInput","beforeinput",null,a,d),h.push({event:d,listeners:u}),d.data=T))}Kg(h,t)})}function Ss(e,t,a){return{instance:e,listener:t,currentTarget:a}}function to(e,t){for(var a=t+"Capture",i=[];e!==null;){var n=e,s=n.stateNode;n.tag===5&&s!==null&&(n=s,s=ws(e,a),s!=null&&i.unshift(Ss(e,s,n)),s=ws(e,t),s!=null&&i.push(Ss(e,s,n))),e=e.return}return i}function Li(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function xf(e,t,a,i,n){for(var s=t._reactName,r=[];a!==null&&a!==i;){var o=a,l=o.alternate,u=o.stateNode;if(l!==null&&l===i)break;o.tag===5&&u!==null&&(o=u,n?(l=ws(a,s),l!=null&&r.unshift(Ss(a,l,o))):n||(l=ws(a,s),l!=null&&r.push(Ss(a,l,o)))),a=a.return}r.length!==0&&e.push({event:t,listeners:r})}var Q0=/\r\n?/g,Y0=/\u0000|\uFFFD/g;function Df(e){return(typeof e=="string"?e:""+e).replace(Q0,`
`).replace(Y0,"")}function pr(e,t,a){if(t=Df(t),Df(e)!==t&&a)throw Error(R(425))}function ao(){}var id=null,nd=null;function sd(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var rd=typeof setTimeout=="function"?setTimeout:void 0,Z0=typeof clearTimeout=="function"?clearTimeout:void 0,qf=typeof Promise=="function"?Promise:void 0,ew=typeof queueMicrotask=="function"?queueMicrotask:typeof qf<"u"?function(e){return qf.resolve(null).then(e).catch(tw)}:rd;function tw(e){setTimeout(function(){throw e})}function ou(e,t){var a=t,i=0;do{var n=a.nextSibling;if(e.removeChild(a),n&&n.nodeType===8)if(a=n.data,a==="/$"){if(i===0){e.removeChild(n),xs(t);return}i--}else a!=="$"&&a!=="$?"&&a!=="$!"||i++;a=n}while(a);xs(t)}function Qa(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function Cf(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var a=e.data;if(a==="$"||a==="$!"||a==="$?"){if(t===0)return e;t--}else a==="/$"&&t++}e=e.previousSibling}return null}var An=Math.random().toString(36).slice(2),sa="__reactFiber$"+An,Ps="__reactProps$"+An,qa="__reactContainer$"+An,od="__reactEvents$"+An,aw="__reactListeners$"+An,iw="__reactHandles$"+An;function wi(e){var t=e[sa];if(t)return t;for(var a=e.parentNode;a;){if(t=a[qa]||a[sa]){if(a=t.alternate,t.child!==null||a!==null&&a.child!==null)for(e=Cf(e);e!==null;){if(a=e[sa])return a;e=Cf(e)}return t}e=a,a=e.parentNode}return null}function Ks(e){return e=e[sa]||e[qa],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Zi(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(R(33))}function Oo(e){return e[Ps]||null}var ld=[],en=-1;function oi(e){return{current:e}}function be(e){0>en||(e.current=ld[en],ld[en]=null,en--)}function ye(e,t){en++,ld[en]=e.current,e.current=t}var ni={},it=oi(ni),mt=oi(!1),Si=ni;function yn(e,t){var a=e.type.contextTypes;if(!a)return ni;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var n={},s;for(s in a)n[s]=t[s];return i&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n),n}function ht(e){return e=e.childContextTypes,e!=null}function io(){be(mt),be(it)}function Sf(e,t,a){if(it.current!==ni)throw Error(R(168));ye(it,t),ye(mt,a)}function Hg(e,t,a){var i=e.stateNode;if(t=t.childContextTypes,typeof i.getChildContext!="function")return a;i=i.getChildContext();for(var n in i)if(!(n in t))throw Error(R(108,zb(e)||"Unknown",n));return Ae({},a,i)}function no(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ni,Si=it.current,ye(it,e),ye(mt,mt.current),!0}function Pf(e,t,a){var i=e.stateNode;if(!i)throw Error(R(169));a?(e=Hg(e,t,Si),i.__reactInternalMemoizedMergedChildContext=e,be(mt),be(it),ye(it,e)):be(mt),ye(mt,a)}var va=null,Mo=!1,lu=!1;function Gg(e){va===null?va=[e]:va.push(e)}function nw(e){Mo=!0,Gg(e)}function li(){if(!lu&&va!==null){lu=!0;var e=0,t=ue;try{var a=va;for(ue=1;e<a.length;e++){var i=a[e];do i=i(!0);while(i!==null)}va=null,Mo=!1}catch(n){throw va!==null&&(va=va.slice(e+1)),vg(mc,li),n}finally{ue=t,lu=!1}}return null}var tn=[],an=0,so=null,ro=0,Ot=[],Mt=0,Pi=null,wa=1,Ta="";function mi(e,t){tn[an++]=ro,tn[an++]=so,so=e,ro=t}function Xg(e,t,a){Ot[Mt++]=wa,Ot[Mt++]=Ta,Ot[Mt++]=Pi,Pi=e;var i=wa;e=Ta;var n=32-Jt(i)-1;i&=~(1<<n),a+=1;var s=32-Jt(t)+n;if(30<s){var r=n-n%5;s=(i&(1<<r)-1).toString(32),i>>=r,n-=r,wa=1<<32-Jt(t)+n|a<<n|i,Ta=s+e}else wa=1<<s|a<<n|i,Ta=e}function kc(e){e.return!==null&&(mi(e,1),Xg(e,1,0))}function xc(e){for(;e===so;)so=tn[--an],tn[an]=null,ro=tn[--an],tn[an]=null;for(;e===Pi;)Pi=Ot[--Mt],Ot[Mt]=null,Ta=Ot[--Mt],Ot[Mt]=null,wa=Ot[--Mt],Ot[Mt]=null}var Dt=null,xt=null,De=!1,Gt=null;function Jg(e,t){var a=Lt(5,null,null,0);a.elementType="DELETED",a.stateNode=t,a.return=e,t=e.deletions,t===null?(e.deletions=[a],e.flags|=16):t.push(a)}function Af(e,t){switch(e.tag){case 5:var a=e.type;return t=t.nodeType!==1||a.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Dt=e,xt=Qa(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Dt=e,xt=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(a=Pi!==null?{id:wa,overflow:Ta}:null,e.memoizedState={dehydrated:t,treeContext:a,retryLane:1073741824},a=Lt(18,null,null,0),a.stateNode=t,a.return=e,e.child=a,Dt=e,xt=null,!0):!1;default:return!1}}function ud(e){return(e.mode&1)!==0&&(e.flags&128)===0}function dd(e){if(De){var t=xt;if(t){var a=t;if(!Af(e,t)){if(ud(e))throw Error(R(418));t=Qa(a.nextSibling);var i=Dt;t&&Af(e,t)?Jg(i,a):(e.flags=e.flags&-4097|2,De=!1,Dt=e)}}else{if(ud(e))throw Error(R(418));e.flags=e.flags&-4097|2,De=!1,Dt=e}}}function Rf(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Dt=e}function fr(e){if(e!==Dt)return!1;if(!De)return Rf(e),De=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!sd(e.type,e.memoizedProps)),t&&(t=xt)){if(ud(e))throw Qg(),Error(R(418));for(;t;)Jg(e,t),t=Qa(t.nextSibling)}if(Rf(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(R(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var a=e.data;if(a==="/$"){if(t===0){xt=Qa(e.nextSibling);break e}t--}else a!=="$"&&a!=="$!"&&a!=="$?"||t++}e=e.nextSibling}xt=null}}else xt=Dt?Qa(e.stateNode.nextSibling):null;return!0}function Qg(){for(var e=xt;e;)e=Qa(e.nextSibling)}function _n(){xt=Dt=null,De=!1}function Dc(e){Gt===null?Gt=[e]:Gt.push(e)}var sw=Ia.ReactCurrentBatchConfig;function Vt(e,t){if(e&&e.defaultProps){t=Ae({},t),e=e.defaultProps;for(var a in e)t[a]===void 0&&(t[a]=e[a]);return t}return t}var oo=oi(null),lo=null,nn=null,qc=null;function Cc(){qc=nn=lo=null}function Sc(e){var t=oo.current;be(oo),e._currentValue=t}function cd(e,t,a){for(;e!==null;){var i=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,i!==null&&(i.childLanes|=t)):i!==null&&(i.childLanes&t)!==t&&(i.childLanes|=t),e===a)break;e=e.return}}function pn(e,t){lo=e,qc=nn=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(ft=!0),e.firstContext=null)}function zt(e){var t=e._currentValue;if(qc!==e)if(e={context:e,memoizedValue:t,next:null},nn===null){if(lo===null)throw Error(R(308));nn=e,lo.dependencies={lanes:0,firstContext:e}}else nn=nn.next=e;return t}var Ti=null;function Pc(e){Ti===null?Ti=[e]:Ti.push(e)}function Yg(e,t,a,i){var n=t.interleaved;return n===null?(a.next=a,Pc(t)):(a.next=n.next,n.next=a),t.interleaved=a,Ca(e,i)}function Ca(e,t){e.lanes|=t;var a=e.alternate;for(a!==null&&(a.lanes|=t),a=e,e=e.return;e!==null;)e.childLanes|=t,a=e.alternate,a!==null&&(a.childLanes|=t),a=e,e=e.return;return a.tag===3?a.stateNode:null}var Wa=!1;function Ac(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Zg(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function xa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ya(e,t,a){var i=e.updateQueue;if(i===null)return null;if(i=i.shared,ae&2){var n=i.pending;return n===null?t.next=t:(t.next=n.next,n.next=t),i.pending=t,Ca(e,a)}return n=i.interleaved,n===null?(t.next=t,Pc(i)):(t.next=n.next,n.next=t),i.interleaved=t,Ca(e,a)}function Nr(e,t,a){if(t=t.updateQueue,t!==null&&(t=t.shared,(a&4194240)!==0)){var i=t.lanes;i&=e.pendingLanes,a|=i,t.lanes=a,hc(e,a)}}function Ef(e,t){var a=e.updateQueue,i=e.alternate;if(i!==null&&(i=i.updateQueue,a===i)){var n=null,s=null;if(a=a.firstBaseUpdate,a!==null){do{var r={eventTime:a.eventTime,lane:a.lane,tag:a.tag,payload:a.payload,callback:a.callback,next:null};s===null?n=s=r:s=s.next=r,a=a.next}while(a!==null);s===null?n=s=t:s=s.next=t}else n=s=t;a={baseState:i.baseState,firstBaseUpdate:n,lastBaseUpdate:s,shared:i.shared,effects:i.effects},e.updateQueue=a;return}e=a.lastBaseUpdate,e===null?a.firstBaseUpdate=t:e.next=t,a.lastBaseUpdate=t}function uo(e,t,a,i){var n=e.updateQueue;Wa=!1;var s=n.firstBaseUpdate,r=n.lastBaseUpdate,o=n.shared.pending;if(o!==null){n.shared.pending=null;var l=o,u=l.next;l.next=null,r===null?s=u:r.next=u,r=l;var d=e.alternate;d!==null&&(d=d.updateQueue,o=d.lastBaseUpdate,o!==r&&(o===null?d.firstBaseUpdate=u:o.next=u,d.lastBaseUpdate=l))}if(s!==null){var h=n.baseState;r=0,d=u=l=null,o=s;do{var g=o.lane,p=o.eventTime;if((i&g)===g){d!==null&&(d=d.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var m=e,c=o;switch(g=t,p=a,c.tag){case 1:if(m=c.payload,typeof m=="function"){h=m.call(p,h,g);break e}h=m;break e;case 3:m.flags=m.flags&-65537|128;case 0:if(m=c.payload,g=typeof m=="function"?m.call(p,h,g):m,g==null)break e;h=Ae({},h,g);break e;case 2:Wa=!0}}o.callback!==null&&o.lane!==0&&(e.flags|=64,g=n.effects,g===null?n.effects=[o]:g.push(o))}else p={eventTime:p,lane:g,tag:o.tag,payload:o.payload,callback:o.callback,next:null},d===null?(u=d=p,l=h):d=d.next=p,r|=g;if(o=o.next,o===null){if(o=n.shared.pending,o===null)break;g=o,o=g.next,g.next=null,n.lastBaseUpdate=g,n.shared.pending=null}}while(1);if(d===null&&(l=h),n.baseState=l,n.firstBaseUpdate=u,n.lastBaseUpdate=d,t=n.shared.interleaved,t!==null){n=t;do r|=n.lane,n=n.next;while(n!==t)}else s===null&&(n.shared.lanes=0);Ri|=r,e.lanes=r,e.memoizedState=h}}function If(e,t,a){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var i=e[t],n=i.callback;if(n!==null){if(i.callback=null,i=a,typeof n!="function")throw Error(R(191,n));n.call(i)}}}var ey=new Yh.Component().refs;function pd(e,t,a,i){t=e.memoizedState,a=a(i,t),a=a==null?t:Ae({},t,a),e.memoizedState=a,e.lanes===0&&(e.updateQueue.baseState=a)}var Lo={isMounted:function(e){return(e=e._reactInternals)?Fi(e)===e:!1},enqueueSetState:function(e,t,a){e=e._reactInternals;var i=st(),n=ei(e),s=xa(i,n);s.payload=t,a!=null&&(s.callback=a),t=Ya(e,s,n),t!==null&&(Qt(t,e,n,i),Nr(t,e,n))},enqueueReplaceState:function(e,t,a){e=e._reactInternals;var i=st(),n=ei(e),s=xa(i,n);s.tag=1,s.payload=t,a!=null&&(s.callback=a),t=Ya(e,s,n),t!==null&&(Qt(t,e,n,i),Nr(t,e,n))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var a=st(),i=ei(e),n=xa(a,i);n.tag=2,t!=null&&(n.callback=t),t=Ya(e,n,i),t!==null&&(Qt(t,e,i,a),Nr(t,e,i))}};function Nf(e,t,a,i,n,s,r){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(i,s,r):t.prototype&&t.prototype.isPureReactComponent?!qs(a,i)||!qs(n,s):!0}function ty(e,t,a){var i=!1,n=ni,s=t.contextType;return typeof s=="object"&&s!==null?s=zt(s):(n=ht(t)?Si:it.current,i=t.contextTypes,s=(i=i!=null)?yn(e,n):ni),t=new t(a,s),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Lo,e.stateNode=t,t._reactInternals=e,i&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=s),t}function jf(e,t,a,i){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(a,i),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(a,i),t.state!==e&&Lo.enqueueReplaceState(t,t.state,null)}function fd(e,t,a,i){var n=e.stateNode;n.props=a,n.state=e.memoizedState,n.refs=ey,Ac(e);var s=t.contextType;typeof s=="object"&&s!==null?n.context=zt(s):(s=ht(t)?Si:it.current,n.context=yn(e,s)),n.state=e.memoizedState,s=t.getDerivedStateFromProps,typeof s=="function"&&(pd(e,t,s,a),n.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof n.getSnapshotBeforeUpdate=="function"||typeof n.UNSAFE_componentWillMount!="function"&&typeof n.componentWillMount!="function"||(t=n.state,typeof n.componentWillMount=="function"&&n.componentWillMount(),typeof n.UNSAFE_componentWillMount=="function"&&n.UNSAFE_componentWillMount(),t!==n.state&&Lo.enqueueReplaceState(n,n.state,null),uo(e,a,n,i),n.state=e.memoizedState),typeof n.componentDidMount=="function"&&(e.flags|=4194308)}function $n(e,t,a){if(e=a.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(a._owner){if(a=a._owner,a){if(a.tag!==1)throw Error(R(309));var i=a.stateNode}if(!i)throw Error(R(147,e));var n=i,s=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===s?t.ref:(t=function(r){var o=n.refs;o===ey&&(o=n.refs={}),r===null?delete o[s]:o[s]=r},t._stringRef=s,t)}if(typeof e!="string")throw Error(R(284));if(!a._owner)throw Error(R(290,e))}return e}function mr(e,t){throw e=Object.prototype.toString.call(t),Error(R(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ff(e){var t=e._init;return t(e._payload)}function ay(e){function t(y,_){if(e){var v=y.deletions;v===null?(y.deletions=[_],y.flags|=16):v.push(_)}}function a(y,_){if(!e)return null;for(;_!==null;)t(y,_),_=_.sibling;return null}function i(y,_){for(y=new Map;_!==null;)_.key!==null?y.set(_.key,_):y.set(_.index,_),_=_.sibling;return y}function n(y,_){return y=ti(y,_),y.index=0,y.sibling=null,y}function s(y,_,v){return y.index=v,e?(v=y.alternate,v!==null?(v=v.index,v<_?(y.flags|=2,_):v):(y.flags|=2,_)):(y.flags|=1048576,_)}function r(y){return e&&y.alternate===null&&(y.flags|=2),y}function o(y,_,v,w){return _===null||_.tag!==6?(_=hu(v,y.mode,w),_.return=y,_):(_=n(_,v),_.return=y,_)}function l(y,_,v,w){var D=v.type;return D===Xi?d(y,_,v.props.children,w,v.key):_!==null&&(_.elementType===D||typeof D=="object"&&D!==null&&D.$$typeof===za&&Ff(D)===_.type)?(w=n(_,v.props),w.ref=$n(y,_,v),w.return=y,w):(w=Br(v.type,v.key,v.props,null,y.mode,w),w.ref=$n(y,_,v),w.return=y,w)}function u(y,_,v,w){return _===null||_.tag!==4||_.stateNode.containerInfo!==v.containerInfo||_.stateNode.implementation!==v.implementation?(_=gu(v,y.mode,w),_.return=y,_):(_=n(_,v.children||[]),_.return=y,_)}function d(y,_,v,w,D){return _===null||_.tag!==7?(_=Ci(v,y.mode,w,D),_.return=y,_):(_=n(_,v),_.return=y,_)}function h(y,_,v){if(typeof _=="string"&&_!==""||typeof _=="number")return _=hu(""+_,y.mode,v),_.return=y,_;if(typeof _=="object"&&_!==null){switch(_.$$typeof){case ir:return v=Br(_.type,_.key,_.props,null,y.mode,v),v.ref=$n(y,null,_),v.return=y,v;case Gi:return _=gu(_,y.mode,v),_.return=y,_;case za:var w=_._init;return h(y,w(_._payload),v)}if(es(_)||Mn(_))return _=Ci(_,y.mode,v,null),_.return=y,_;mr(y,_)}return null}function g(y,_,v,w){var D=_!==null?_.key:null;if(typeof v=="string"&&v!==""||typeof v=="number")return D!==null?null:o(y,_,""+v,w);if(typeof v=="object"&&v!==null){switch(v.$$typeof){case ir:return v.key===D?l(y,_,v,w):null;case Gi:return v.key===D?u(y,_,v,w):null;case za:return D=v._init,g(y,_,D(v._payload),w)}if(es(v)||Mn(v))return D!==null?null:d(y,_,v,w,null);mr(y,v)}return null}function p(y,_,v,w,D){if(typeof w=="string"&&w!==""||typeof w=="number")return y=y.get(v)||null,o(_,y,""+w,D);if(typeof w=="object"&&w!==null){switch(w.$$typeof){case ir:return y=y.get(w.key===null?v:w.key)||null,l(_,y,w,D);case Gi:return y=y.get(w.key===null?v:w.key)||null,u(_,y,w,D);case za:var q=w._init;return p(y,_,v,q(w._payload),D)}if(es(w)||Mn(w))return y=y.get(v)||null,d(_,y,w,D,null);mr(_,w)}return null}function m(y,_,v,w){for(var D=null,q=null,T=_,C=_=0,A=null;T!==null&&C<v.length;C++){T.index>C?(A=T,T=null):A=T.sibling;var S=g(y,T,v[C],w);if(S===null){T===null&&(T=A);break}e&&T&&S.alternate===null&&t(y,T),_=s(S,_,C),q===null?D=S:q.sibling=S,q=S,T=A}if(C===v.length)return a(y,T),De&&mi(y,C),D;if(T===null){for(;C<v.length;C++)T=h(y,v[C],w),T!==null&&(_=s(T,_,C),q===null?D=T:q.sibling=T,q=T);return De&&mi(y,C),D}for(T=i(y,T);C<v.length;C++)A=p(T,y,C,v[C],w),A!==null&&(e&&A.alternate!==null&&T.delete(A.key===null?C:A.key),_=s(A,_,C),q===null?D=A:q.sibling=A,q=A);return e&&T.forEach(function(I){return t(y,I)}),De&&mi(y,C),D}function c(y,_,v,w){var D=Mn(v);if(typeof D!="function")throw Error(R(150));if(v=D.call(v),v==null)throw Error(R(151));for(var q=D=null,T=_,C=_=0,A=null,S=v.next();T!==null&&!S.done;C++,S=v.next()){T.index>C?(A=T,T=null):A=T.sibling;var I=g(y,T,S.value,w);if(I===null){T===null&&(T=A);break}e&&T&&I.alternate===null&&t(y,T),_=s(I,_,C),q===null?D=I:q.sibling=I,q=I,T=A}if(S.done)return a(y,T),De&&mi(y,C),D;if(T===null){for(;!S.done;C++,S=v.next())S=h(y,S.value,w),S!==null&&(_=s(S,_,C),q===null?D=S:q.sibling=S,q=S);return De&&mi(y,C),D}for(T=i(y,T);!S.done;C++,S=v.next())S=p(T,y,C,S.value,w),S!==null&&(e&&S.alternate!==null&&T.delete(S.key===null?C:S.key),_=s(S,_,C),q===null?D=S:q.sibling=S,q=S);return e&&T.forEach(function(j){return t(y,j)}),De&&mi(y,C),D}function k(y,_,v,w){if(typeof v=="object"&&v!==null&&v.type===Xi&&v.key===null&&(v=v.props.children),typeof v=="object"&&v!==null){switch(v.$$typeof){case ir:e:{for(var D=v.key,q=_;q!==null;){if(q.key===D){if(D=v.type,D===Xi){if(q.tag===7){a(y,q.sibling),_=n(q,v.props.children),_.return=y,y=_;break e}}else if(q.elementType===D||typeof D=="object"&&D!==null&&D.$$typeof===za&&Ff(D)===q.type){a(y,q.sibling),_=n(q,v.props),_.ref=$n(y,q,v),_.return=y,y=_;break e}a(y,q);break}else t(y,q);q=q.sibling}v.type===Xi?(_=Ci(v.props.children,y.mode,w,v.key),_.return=y,y=_):(w=Br(v.type,v.key,v.props,null,y.mode,w),w.ref=$n(y,_,v),w.return=y,y=w)}return r(y);case Gi:e:{for(q=v.key;_!==null;){if(_.key===q)if(_.tag===4&&_.stateNode.containerInfo===v.containerInfo&&_.stateNode.implementation===v.implementation){a(y,_.sibling),_=n(_,v.children||[]),_.return=y,y=_;break e}else{a(y,_);break}else t(y,_);_=_.sibling}_=gu(v,y.mode,w),_.return=y,y=_}return r(y);case za:return q=v._init,k(y,_,q(v._payload),w)}if(es(v))return m(y,_,v,w);if(Mn(v))return c(y,_,v,w);mr(y,v)}return typeof v=="string"&&v!==""||typeof v=="number"?(v=""+v,_!==null&&_.tag===6?(a(y,_.sibling),_=n(_,v),_.return=y,y=_):(a(y,_),_=hu(v,y.mode,w),_.return=y,y=_),r(y)):a(y,_)}return k}var vn=ay(!0),iy=ay(!1),Vs={},ua=oi(Vs),As=oi(Vs),Rs=oi(Vs);function ki(e){if(e===Vs)throw Error(R(174));return e}function Rc(e,t){switch(ye(Rs,t),ye(As,e),ye(ua,Vs),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ku(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Ku(t,e)}be(ua),ye(ua,t)}function bn(){be(ua),be(As),be(Rs)}function ny(e){ki(Rs.current);var t=ki(ua.current),a=Ku(t,e.type);t!==a&&(ye(As,e),ye(ua,a))}function Ec(e){As.current===e&&(be(ua),be(As))}var Se=oi(0);function co(e){for(var t=e;t!==null;){if(t.tag===13){var a=t.memoizedState;if(a!==null&&(a=a.dehydrated,a===null||a.data==="$?"||a.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var uu=[];function Ic(){for(var e=0;e<uu.length;e++)uu[e]._workInProgressVersionPrimary=null;uu.length=0}var jr=Ia.ReactCurrentDispatcher,du=Ia.ReactCurrentBatchConfig,Ai=0,Pe=null,Be=null,We=null,po=!1,ds=!1,Es=0,rw=0;function Ze(){throw Error(R(321))}function Nc(e,t){if(t===null)return!1;for(var a=0;a<t.length&&a<e.length;a++)if(!Yt(e[a],t[a]))return!1;return!0}function jc(e,t,a,i,n,s){if(Ai=s,Pe=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,jr.current=e===null||e.memoizedState===null?dw:cw,e=a(i,n),ds){s=0;do{if(ds=!1,Es=0,25<=s)throw Error(R(301));s+=1,We=Be=null,t.updateQueue=null,jr.current=pw,e=a(i,n)}while(ds)}if(jr.current=fo,t=Be!==null&&Be.next!==null,Ai=0,We=Be=Pe=null,po=!1,t)throw Error(R(300));return e}function Fc(){var e=Es!==0;return Es=0,e}function aa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return We===null?Pe.memoizedState=We=e:We=We.next=e,We}function Wt(){if(Be===null){var e=Pe.alternate;e=e!==null?e.memoizedState:null}else e=Be.next;var t=We===null?Pe.memoizedState:We.next;if(t!==null)We=t,Be=e;else{if(e===null)throw Error(R(310));Be=e,e={memoizedState:Be.memoizedState,baseState:Be.baseState,baseQueue:Be.baseQueue,queue:Be.queue,next:null},We===null?Pe.memoizedState=We=e:We=We.next=e}return We}function Is(e,t){return typeof t=="function"?t(e):t}function cu(e){var t=Wt(),a=t.queue;if(a===null)throw Error(R(311));a.lastRenderedReducer=e;var i=Be,n=i.baseQueue,s=a.pending;if(s!==null){if(n!==null){var r=n.next;n.next=s.next,s.next=r}i.baseQueue=n=s,a.pending=null}if(n!==null){s=n.next,i=i.baseState;var o=r=null,l=null,u=s;do{var d=u.lane;if((Ai&d)===d)l!==null&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),i=u.hasEagerState?u.eagerState:e(i,u.action);else{var h={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};l===null?(o=l=h,r=i):l=l.next=h,Pe.lanes|=d,Ri|=d}u=u.next}while(u!==null&&u!==s);l===null?r=i:l.next=o,Yt(i,t.memoizedState)||(ft=!0),t.memoizedState=i,t.baseState=r,t.baseQueue=l,a.lastRenderedState=i}if(e=a.interleaved,e!==null){n=e;do s=n.lane,Pe.lanes|=s,Ri|=s,n=n.next;while(n!==e)}else n===null&&(a.lanes=0);return[t.memoizedState,a.dispatch]}function pu(e){var t=Wt(),a=t.queue;if(a===null)throw Error(R(311));a.lastRenderedReducer=e;var i=a.dispatch,n=a.pending,s=t.memoizedState;if(n!==null){a.pending=null;var r=n=n.next;do s=e(s,r.action),r=r.next;while(r!==n);Yt(s,t.memoizedState)||(ft=!0),t.memoizedState=s,t.baseQueue===null&&(t.baseState=s),a.lastRenderedState=s}return[s,i]}function sy(){}function ry(e,t){var a=Pe,i=Wt(),n=t(),s=!Yt(i.memoizedState,n);if(s&&(i.memoizedState=n,ft=!0),i=i.queue,Oc(uy.bind(null,a,i,e),[e]),i.getSnapshot!==t||s||We!==null&&We.memoizedState.tag&1){if(a.flags|=2048,Ns(9,ly.bind(null,a,i,n,t),void 0,null),$e===null)throw Error(R(349));Ai&30||oy(a,t,n)}return n}function oy(e,t,a){e.flags|=16384,e={getSnapshot:t,value:a},t=Pe.updateQueue,t===null?(t={lastEffect:null,stores:null},Pe.updateQueue=t,t.stores=[e]):(a=t.stores,a===null?t.stores=[e]:a.push(e))}function ly(e,t,a,i){t.value=a,t.getSnapshot=i,dy(t)&&cy(e)}function uy(e,t,a){return a(function(){dy(t)&&cy(e)})}function dy(e){var t=e.getSnapshot;e=e.value;try{var a=t();return!Yt(e,a)}catch{return!0}}function cy(e){var t=Ca(e,1);t!==null&&Qt(t,e,1,-1)}function Of(e){var t=aa();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Is,lastRenderedState:e},t.queue=e,e=e.dispatch=uw.bind(null,Pe,e),[t.memoizedState,e]}function Ns(e,t,a,i){return e={tag:e,create:t,destroy:a,deps:i,next:null},t=Pe.updateQueue,t===null?(t={lastEffect:null,stores:null},Pe.updateQueue=t,t.lastEffect=e.next=e):(a=t.lastEffect,a===null?t.lastEffect=e.next=e:(i=a.next,a.next=e,e.next=i,t.lastEffect=e)),e}function py(){return Wt().memoizedState}function Fr(e,t,a,i){var n=aa();Pe.flags|=e,n.memoizedState=Ns(1|t,a,void 0,i===void 0?null:i)}function Bo(e,t,a,i){var n=Wt();i=i===void 0?null:i;var s=void 0;if(Be!==null){var r=Be.memoizedState;if(s=r.destroy,i!==null&&Nc(i,r.deps)){n.memoizedState=Ns(t,a,s,i);return}}Pe.flags|=e,n.memoizedState=Ns(1|t,a,s,i)}function Mf(e,t){return Fr(8390656,8,e,t)}function Oc(e,t){return Bo(2048,8,e,t)}function fy(e,t){return Bo(4,2,e,t)}function my(e,t){return Bo(4,4,e,t)}function hy(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function gy(e,t,a){return a=a!=null?a.concat([e]):null,Bo(4,4,hy.bind(null,t,e),a)}function Mc(){}function yy(e,t){var a=Wt();t=t===void 0?null:t;var i=a.memoizedState;return i!==null&&t!==null&&Nc(t,i[1])?i[0]:(a.memoizedState=[e,t],e)}function _y(e,t){var a=Wt();t=t===void 0?null:t;var i=a.memoizedState;return i!==null&&t!==null&&Nc(t,i[1])?i[0]:(e=e(),a.memoizedState=[e,t],e)}function vy(e,t,a){return Ai&21?(Yt(a,t)||(a=Tg(),Pe.lanes|=a,Ri|=a,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,ft=!0),e.memoizedState=a)}function ow(e,t){var a=ue;ue=a!==0&&4>a?a:4,e(!0);var i=du.transition;du.transition={};try{e(!1),t()}finally{ue=a,du.transition=i}}function by(){return Wt().memoizedState}function lw(e,t,a){var i=ei(e);if(a={lane:i,action:a,hasEagerState:!1,eagerState:null,next:null},wy(e))Ty(t,a);else if(a=Yg(e,t,a,i),a!==null){var n=st();Qt(a,e,i,n),ky(a,t,i)}}function uw(e,t,a){var i=ei(e),n={lane:i,action:a,hasEagerState:!1,eagerState:null,next:null};if(wy(e))Ty(t,n);else{var s=e.alternate;if(e.lanes===0&&(s===null||s.lanes===0)&&(s=t.lastRenderedReducer,s!==null))try{var r=t.lastRenderedState,o=s(r,a);if(n.hasEagerState=!0,n.eagerState=o,Yt(o,r)){var l=t.interleaved;l===null?(n.next=n,Pc(t)):(n.next=l.next,l.next=n),t.interleaved=n;return}}catch{}finally{}a=Yg(e,t,n,i),a!==null&&(n=st(),Qt(a,e,i,n),ky(a,t,i))}}function wy(e){var t=e.alternate;return e===Pe||t!==null&&t===Pe}function Ty(e,t){ds=po=!0;var a=e.pending;a===null?t.next=t:(t.next=a.next,a.next=t),e.pending=t}function ky(e,t,a){if(a&4194240){var i=t.lanes;i&=e.pendingLanes,a|=i,t.lanes=a,hc(e,a)}}var fo={readContext:zt,useCallback:Ze,useContext:Ze,useEffect:Ze,useImperativeHandle:Ze,useInsertionEffect:Ze,useLayoutEffect:Ze,useMemo:Ze,useReducer:Ze,useRef:Ze,useState:Ze,useDebugValue:Ze,useDeferredValue:Ze,useTransition:Ze,useMutableSource:Ze,useSyncExternalStore:Ze,useId:Ze,unstable_isNewReconciler:!1},dw={readContext:zt,useCallback:function(e,t){return aa().memoizedState=[e,t===void 0?null:t],e},useContext:zt,useEffect:Mf,useImperativeHandle:function(e,t,a){return a=a!=null?a.concat([e]):null,Fr(4194308,4,hy.bind(null,t,e),a)},useLayoutEffect:function(e,t){return Fr(4194308,4,e,t)},useInsertionEffect:function(e,t){return Fr(4,2,e,t)},useMemo:function(e,t){var a=aa();return t=t===void 0?null:t,e=e(),a.memoizedState=[e,t],e},useReducer:function(e,t,a){var i=aa();return t=a!==void 0?a(t):t,i.memoizedState=i.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},i.queue=e,e=e.dispatch=lw.bind(null,Pe,e),[i.memoizedState,e]},useRef:function(e){var t=aa();return e={current:e},t.memoizedState=e},useState:Of,useDebugValue:Mc,useDeferredValue:function(e){return aa().memoizedState=e},useTransition:function(){var e=Of(!1),t=e[0];return e=ow.bind(null,e[1]),aa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,a){var i=Pe,n=aa();if(De){if(a===void 0)throw Error(R(407));a=a()}else{if(a=t(),$e===null)throw Error(R(349));Ai&30||oy(i,t,a)}n.memoizedState=a;var s={value:a,getSnapshot:t};return n.queue=s,Mf(uy.bind(null,i,s,e),[e]),i.flags|=2048,Ns(9,ly.bind(null,i,s,a,t),void 0,null),a},useId:function(){var e=aa(),t=$e.identifierPrefix;if(De){var a=Ta,i=wa;a=(i&~(1<<32-Jt(i)-1)).toString(32)+a,t=":"+t+"R"+a,a=Es++,0<a&&(t+="H"+a.toString(32)),t+=":"}else a=rw++,t=":"+t+"r"+a.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},cw={readContext:zt,useCallback:yy,useContext:zt,useEffect:Oc,useImperativeHandle:gy,useInsertionEffect:fy,useLayoutEffect:my,useMemo:_y,useReducer:cu,useRef:py,useState:function(){return cu(Is)},useDebugValue:Mc,useDeferredValue:function(e){var t=Wt();return vy(t,Be.memoizedState,e)},useTransition:function(){var e=cu(Is)[0],t=Wt().memoizedState;return[e,t]},useMutableSource:sy,useSyncExternalStore:ry,useId:by,unstable_isNewReconciler:!1},pw={readContext:zt,useCallback:yy,useContext:zt,useEffect:Oc,useImperativeHandle:gy,useInsertionEffect:fy,useLayoutEffect:my,useMemo:_y,useReducer:pu,useRef:py,useState:function(){return pu(Is)},useDebugValue:Mc,useDeferredValue:function(e){var t=Wt();return Be===null?t.memoizedState=e:vy(t,Be.memoizedState,e)},useTransition:function(){var e=pu(Is)[0],t=Wt().memoizedState;return[e,t]},useMutableSource:sy,useSyncExternalStore:ry,useId:by,unstable_isNewReconciler:!1};function wn(e,t){try{var a="",i=t;do a+=Bb(i),i=i.return;while(i);var n=a}catch(s){n=`
Error generating stack: `+s.message+`
`+s.stack}return{value:e,source:t,stack:n,digest:null}}function fu(e,t,a){return{value:e,source:null,stack:a??null,digest:t??null}}function md(e,t){try{console.error(t.value)}catch(a){setTimeout(function(){throw a})}}var fw=typeof WeakMap=="function"?WeakMap:Map;function xy(e,t,a){a=xa(-1,a),a.tag=3,a.payload={element:null};var i=t.value;return a.callback=function(){ho||(ho=!0,xd=i),md(e,t)},a}function Dy(e,t,a){a=xa(-1,a),a.tag=3;var i=e.type.getDerivedStateFromError;if(typeof i=="function"){var n=t.value;a.payload=function(){return i(n)},a.callback=function(){md(e,t)}}var s=e.stateNode;return s!==null&&typeof s.componentDidCatch=="function"&&(a.callback=function(){md(e,t),typeof i!="function"&&(Za===null?Za=new Set([this]):Za.add(this));var r=t.stack;this.componentDidCatch(t.value,{componentStack:r!==null?r:""})}),a}function Lf(e,t,a){var i=e.pingCache;if(i===null){i=e.pingCache=new fw;var n=new Set;i.set(t,n)}else n=i.get(t),n===void 0&&(n=new Set,i.set(t,n));n.has(a)||(n.add(a),e=Cw.bind(null,e,t,a),t.then(e,e))}function Bf(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function zf(e,t,a,i,n){return e.mode&1?(e.flags|=65536,e.lanes=n,e):(e===t?e.flags|=65536:(e.flags|=128,a.flags|=131072,a.flags&=-52805,a.tag===1&&(a.alternate===null?a.tag=17:(t=xa(-1,1),t.tag=2,Ya(a,t,1))),a.lanes|=1),e)}var mw=Ia.ReactCurrentOwner,ft=!1;function nt(e,t,a,i){t.child=e===null?iy(t,null,a,i):vn(t,e.child,a,i)}function Wf(e,t,a,i,n){a=a.render;var s=t.ref;return pn(t,n),i=jc(e,t,a,i,s,n),a=Fc(),e!==null&&!ft?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n,Sa(e,t,n)):(De&&a&&kc(t),t.flags|=1,nt(e,t,i,n),t.child)}function $f(e,t,a,i,n){if(e===null){var s=a.type;return typeof s=="function"&&!Vc(s)&&s.defaultProps===void 0&&a.compare===null&&a.defaultProps===void 0?(t.tag=15,t.type=s,qy(e,t,s,i,n)):(e=Br(a.type,null,i,t,t.mode,n),e.ref=t.ref,e.return=t,t.child=e)}if(s=e.child,!(e.lanes&n)){var r=s.memoizedProps;if(a=a.compare,a=a!==null?a:qs,a(r,i)&&e.ref===t.ref)return Sa(e,t,n)}return t.flags|=1,e=ti(s,i),e.ref=t.ref,e.return=t,t.child=e}function qy(e,t,a,i,n){if(e!==null){var s=e.memoizedProps;if(qs(s,i)&&e.ref===t.ref)if(ft=!1,t.pendingProps=i=s,(e.lanes&n)!==0)e.flags&131072&&(ft=!0);else return t.lanes=e.lanes,Sa(e,t,n)}return hd(e,t,a,i,n)}function Cy(e,t,a){var i=t.pendingProps,n=i.children,s=e!==null?e.memoizedState:null;if(i.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ye(rn,wt),wt|=a;else{if(!(a&1073741824))return e=s!==null?s.baseLanes|a:a,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ye(rn,wt),wt|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},i=s!==null?s.baseLanes:a,ye(rn,wt),wt|=i}else s!==null?(i=s.baseLanes|a,t.memoizedState=null):i=a,ye(rn,wt),wt|=i;return nt(e,t,n,a),t.child}function Sy(e,t){var a=t.ref;(e===null&&a!==null||e!==null&&e.ref!==a)&&(t.flags|=512,t.flags|=2097152)}function hd(e,t,a,i,n){var s=ht(a)?Si:it.current;return s=yn(t,s),pn(t,n),a=jc(e,t,a,i,s,n),i=Fc(),e!==null&&!ft?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n,Sa(e,t,n)):(De&&i&&kc(t),t.flags|=1,nt(e,t,a,n),t.child)}function Uf(e,t,a,i,n){if(ht(a)){var s=!0;no(t)}else s=!1;if(pn(t,n),t.stateNode===null)Or(e,t),ty(t,a,i),fd(t,a,i,n),i=!0;else if(e===null){var r=t.stateNode,o=t.memoizedProps;r.props=o;var l=r.context,u=a.contextType;typeof u=="object"&&u!==null?u=zt(u):(u=ht(a)?Si:it.current,u=yn(t,u));var d=a.getDerivedStateFromProps,h=typeof d=="function"||typeof r.getSnapshotBeforeUpdate=="function";h||typeof r.UNSAFE_componentWillReceiveProps!="function"&&typeof r.componentWillReceiveProps!="function"||(o!==i||l!==u)&&jf(t,r,i,u),Wa=!1;var g=t.memoizedState;r.state=g,uo(t,i,r,n),l=t.memoizedState,o!==i||g!==l||mt.current||Wa?(typeof d=="function"&&(pd(t,a,d,i),l=t.memoizedState),(o=Wa||Nf(t,a,o,i,g,l,u))?(h||typeof r.UNSAFE_componentWillMount!="function"&&typeof r.componentWillMount!="function"||(typeof r.componentWillMount=="function"&&r.componentWillMount(),typeof r.UNSAFE_componentWillMount=="function"&&r.UNSAFE_componentWillMount()),typeof r.componentDidMount=="function"&&(t.flags|=4194308)):(typeof r.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=i,t.memoizedState=l),r.props=i,r.state=l,r.context=u,i=o):(typeof r.componentDidMount=="function"&&(t.flags|=4194308),i=!1)}else{r=t.stateNode,Zg(e,t),o=t.memoizedProps,u=t.type===t.elementType?o:Vt(t.type,o),r.props=u,h=t.pendingProps,g=r.context,l=a.contextType,typeof l=="object"&&l!==null?l=zt(l):(l=ht(a)?Si:it.current,l=yn(t,l));var p=a.getDerivedStateFromProps;(d=typeof p=="function"||typeof r.getSnapshotBeforeUpdate=="function")||typeof r.UNSAFE_componentWillReceiveProps!="function"&&typeof r.componentWillReceiveProps!="function"||(o!==h||g!==l)&&jf(t,r,i,l),Wa=!1,g=t.memoizedState,r.state=g,uo(t,i,r,n);var m=t.memoizedState;o!==h||g!==m||mt.current||Wa?(typeof p=="function"&&(pd(t,a,p,i),m=t.memoizedState),(u=Wa||Nf(t,a,u,i,g,m,l)||!1)?(d||typeof r.UNSAFE_componentWillUpdate!="function"&&typeof r.componentWillUpdate!="function"||(typeof r.componentWillUpdate=="function"&&r.componentWillUpdate(i,m,l),typeof r.UNSAFE_componentWillUpdate=="function"&&r.UNSAFE_componentWillUpdate(i,m,l)),typeof r.componentDidUpdate=="function"&&(t.flags|=4),typeof r.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof r.componentDidUpdate!="function"||o===e.memoizedProps&&g===e.memoizedState||(t.flags|=4),typeof r.getSnapshotBeforeUpdate!="function"||o===e.memoizedProps&&g===e.memoizedState||(t.flags|=1024),t.memoizedProps=i,t.memoizedState=m),r.props=i,r.state=m,r.context=l,i=u):(typeof r.componentDidUpdate!="function"||o===e.memoizedProps&&g===e.memoizedState||(t.flags|=4),typeof r.getSnapshotBeforeUpdate!="function"||o===e.memoizedProps&&g===e.memoizedState||(t.flags|=1024),i=!1)}return gd(e,t,a,i,s,n)}function gd(e,t,a,i,n,s){Sy(e,t);var r=(t.flags&128)!==0;if(!i&&!r)return n&&Pf(t,a,!1),Sa(e,t,s);i=t.stateNode,mw.current=t;var o=r&&typeof a.getDerivedStateFromError!="function"?null:i.render();return t.flags|=1,e!==null&&r?(t.child=vn(t,e.child,null,s),t.child=vn(t,null,o,s)):nt(e,t,o,s),t.memoizedState=i.state,n&&Pf(t,a,!0),t.child}function Py(e){var t=e.stateNode;t.pendingContext?Sf(e,t.pendingContext,t.pendingContext!==t.context):t.context&&Sf(e,t.context,!1),Rc(e,t.containerInfo)}function Kf(e,t,a,i,n){return _n(),Dc(n),t.flags|=256,nt(e,t,a,i),t.child}var yd={dehydrated:null,treeContext:null,retryLane:0};function _d(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ay(e,t,a){var i=t.pendingProps,n=Se.current,s=!1,r=(t.flags&128)!==0,o;if((o=r)||(o=e!==null&&e.memoizedState===null?!1:(n&2)!==0),o?(s=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(n|=1),ye(Se,n&1),e===null)return dd(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(r=i.children,e=i.fallback,s?(i=t.mode,s=t.child,r={mode:"hidden",children:r},!(i&1)&&s!==null?(s.childLanes=0,s.pendingProps=r):s=$o(r,i,0,null),e=Ci(e,i,a,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=_d(a),t.memoizedState=yd,e):Lc(t,r));if(n=e.memoizedState,n!==null&&(o=n.dehydrated,o!==null))return hw(e,t,r,i,o,n,a);if(s){s=i.fallback,r=t.mode,n=e.child,o=n.sibling;var l={mode:"hidden",children:i.children};return!(r&1)&&t.child!==n?(i=t.child,i.childLanes=0,i.pendingProps=l,t.deletions=null):(i=ti(n,l),i.subtreeFlags=n.subtreeFlags&14680064),o!==null?s=ti(o,s):(s=Ci(s,r,a,null),s.flags|=2),s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,r=e.child.memoizedState,r=r===null?_d(a):{baseLanes:r.baseLanes|a,cachePool:null,transitions:r.transitions},s.memoizedState=r,s.childLanes=e.childLanes&~a,t.memoizedState=yd,i}return s=e.child,e=s.sibling,i=ti(s,{mode:"visible",children:i.children}),!(t.mode&1)&&(i.lanes=a),i.return=t,i.sibling=null,e!==null&&(a=t.deletions,a===null?(t.deletions=[e],t.flags|=16):a.push(e)),t.child=i,t.memoizedState=null,i}function Lc(e,t){return t=$o({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function hr(e,t,a,i){return i!==null&&Dc(i),vn(t,e.child,null,a),e=Lc(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function hw(e,t,a,i,n,s,r){if(a)return t.flags&256?(t.flags&=-257,i=fu(Error(R(422))),hr(e,t,r,i)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(s=i.fallback,n=t.mode,i=$o({mode:"visible",children:i.children},n,0,null),s=Ci(s,n,r,null),s.flags|=2,i.return=t,s.return=t,i.sibling=s,t.child=i,t.mode&1&&vn(t,e.child,null,r),t.child.memoizedState=_d(r),t.memoizedState=yd,s);if(!(t.mode&1))return hr(e,t,r,null);if(n.data==="$!"){if(i=n.nextSibling&&n.nextSibling.dataset,i)var o=i.dgst;return i=o,s=Error(R(419)),i=fu(s,i,void 0),hr(e,t,r,i)}if(o=(r&e.childLanes)!==0,ft||o){if(i=$e,i!==null){switch(r&-r){case 4:n=2;break;case 16:n=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:n=32;break;case 536870912:n=268435456;break;default:n=0}n=n&(i.suspendedLanes|r)?0:n,n!==0&&n!==s.retryLane&&(s.retryLane=n,Ca(e,n),Qt(i,e,n,-1))}return Kc(),i=fu(Error(R(421))),hr(e,t,r,i)}return n.data==="$?"?(t.flags|=128,t.child=e.child,t=Sw.bind(null,e),n._reactRetry=t,null):(e=s.treeContext,xt=Qa(n.nextSibling),Dt=t,De=!0,Gt=null,e!==null&&(Ot[Mt++]=wa,Ot[Mt++]=Ta,Ot[Mt++]=Pi,wa=e.id,Ta=e.overflow,Pi=t),t=Lc(t,i.children),t.flags|=4096,t)}function Vf(e,t,a){e.lanes|=t;var i=e.alternate;i!==null&&(i.lanes|=t),cd(e.return,t,a)}function mu(e,t,a,i,n){var s=e.memoizedState;s===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:a,tailMode:n}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=i,s.tail=a,s.tailMode=n)}function Ry(e,t,a){var i=t.pendingProps,n=i.revealOrder,s=i.tail;if(nt(e,t,i.children,a),i=Se.current,i&2)i=i&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&Vf(e,a,t);else if(e.tag===19)Vf(e,a,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(ye(Se,i),!(t.mode&1))t.memoizedState=null;else switch(n){case"forwards":for(a=t.child,n=null;a!==null;)e=a.alternate,e!==null&&co(e)===null&&(n=a),a=a.sibling;a=n,a===null?(n=t.child,t.child=null):(n=a.sibling,a.sibling=null),mu(t,!1,n,a,s);break;case"backwards":for(a=null,n=t.child,t.child=null;n!==null;){if(e=n.alternate,e!==null&&co(e)===null){t.child=n;break}e=n.sibling,n.sibling=a,a=n,n=e}mu(t,!0,a,null,s);break;case"together":mu(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Or(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Sa(e,t,a){if(e!==null&&(t.dependencies=e.dependencies),Ri|=t.lanes,!(a&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(R(153));if(t.child!==null){for(e=t.child,a=ti(e,e.pendingProps),t.child=a,a.return=t;e.sibling!==null;)e=e.sibling,a=a.sibling=ti(e,e.pendingProps),a.return=t;a.sibling=null}return t.child}function gw(e,t,a){switch(t.tag){case 3:Py(t),_n();break;case 5:ny(t);break;case 1:ht(t.type)&&no(t);break;case 4:Rc(t,t.stateNode.containerInfo);break;case 10:var i=t.type._context,n=t.memoizedProps.value;ye(oo,i._currentValue),i._currentValue=n;break;case 13:if(i=t.memoizedState,i!==null)return i.dehydrated!==null?(ye(Se,Se.current&1),t.flags|=128,null):a&t.child.childLanes?Ay(e,t,a):(ye(Se,Se.current&1),e=Sa(e,t,a),e!==null?e.sibling:null);ye(Se,Se.current&1);break;case 19:if(i=(a&t.childLanes)!==0,e.flags&128){if(i)return Ry(e,t,a);t.flags|=128}if(n=t.memoizedState,n!==null&&(n.rendering=null,n.tail=null,n.lastEffect=null),ye(Se,Se.current),i)break;return null;case 22:case 23:return t.lanes=0,Cy(e,t,a)}return Sa(e,t,a)}var Ey,vd,Iy,Ny;Ey=function(e,t){for(var a=t.child;a!==null;){if(a.tag===5||a.tag===6)e.appendChild(a.stateNode);else if(a.tag!==4&&a.child!==null){a.child.return=a,a=a.child;continue}if(a===t)break;for(;a.sibling===null;){if(a.return===null||a.return===t)return;a=a.return}a.sibling.return=a.return,a=a.sibling}};vd=function(){};Iy=function(e,t,a,i){var n=e.memoizedProps;if(n!==i){e=t.stateNode,ki(ua.current);var s=null;switch(a){case"input":n=zu(e,n),i=zu(e,i),s=[];break;case"select":n=Ae({},n,{value:void 0}),i=Ae({},i,{value:void 0}),s=[];break;case"textarea":n=Uu(e,n),i=Uu(e,i),s=[];break;default:typeof n.onClick!="function"&&typeof i.onClick=="function"&&(e.onclick=ao)}Vu(a,i);var r;a=null;for(u in n)if(!i.hasOwnProperty(u)&&n.hasOwnProperty(u)&&n[u]!=null)if(u==="style"){var o=n[u];for(r in o)o.hasOwnProperty(r)&&(a||(a={}),a[r]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(vs.hasOwnProperty(u)?s||(s=[]):(s=s||[]).push(u,null));for(u in i){var l=i[u];if(o=n!=null?n[u]:void 0,i.hasOwnProperty(u)&&l!==o&&(l!=null||o!=null))if(u==="style")if(o){for(r in o)!o.hasOwnProperty(r)||l&&l.hasOwnProperty(r)||(a||(a={}),a[r]="");for(r in l)l.hasOwnProperty(r)&&o[r]!==l[r]&&(a||(a={}),a[r]=l[r])}else a||(s||(s=[]),s.push(u,a)),a=l;else u==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,o=o?o.__html:void 0,l!=null&&o!==l&&(s=s||[]).push(u,l)):u==="children"?typeof l!="string"&&typeof l!="number"||(s=s||[]).push(u,""+l):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(vs.hasOwnProperty(u)?(l!=null&&u==="onScroll"&&ve("scroll",e),s||o===l||(s=[])):(s=s||[]).push(u,l))}a&&(s=s||[]).push("style",a);var u=s;(t.updateQueue=u)&&(t.flags|=4)}};Ny=function(e,t,a,i){a!==i&&(t.flags|=4)};function Un(e,t){if(!De)switch(e.tailMode){case"hidden":t=e.tail;for(var a=null;t!==null;)t.alternate!==null&&(a=t),t=t.sibling;a===null?e.tail=null:a.sibling=null;break;case"collapsed":a=e.tail;for(var i=null;a!==null;)a.alternate!==null&&(i=a),a=a.sibling;i===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:i.sibling=null}}function et(e){var t=e.alternate!==null&&e.alternate.child===e.child,a=0,i=0;if(t)for(var n=e.child;n!==null;)a|=n.lanes|n.childLanes,i|=n.subtreeFlags&14680064,i|=n.flags&14680064,n.return=e,n=n.sibling;else for(n=e.child;n!==null;)a|=n.lanes|n.childLanes,i|=n.subtreeFlags,i|=n.flags,n.return=e,n=n.sibling;return e.subtreeFlags|=i,e.childLanes=a,t}function yw(e,t,a){var i=t.pendingProps;switch(xc(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return et(t),null;case 1:return ht(t.type)&&io(),et(t),null;case 3:return i=t.stateNode,bn(),be(mt),be(it),Ic(),i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(e===null||e.child===null)&&(fr(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Gt!==null&&(Cd(Gt),Gt=null))),vd(e,t),et(t),null;case 5:Ec(t);var n=ki(Rs.current);if(a=t.type,e!==null&&t.stateNode!=null)Iy(e,t,a,i,n),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!i){if(t.stateNode===null)throw Error(R(166));return et(t),null}if(e=ki(ua.current),fr(t)){i=t.stateNode,a=t.type;var s=t.memoizedProps;switch(i[sa]=t,i[Ps]=s,e=(t.mode&1)!==0,a){case"dialog":ve("cancel",i),ve("close",i);break;case"iframe":case"object":case"embed":ve("load",i);break;case"video":case"audio":for(n=0;n<as.length;n++)ve(as[n],i);break;case"source":ve("error",i);break;case"img":case"image":case"link":ve("error",i),ve("load",i);break;case"details":ve("toggle",i);break;case"input":ef(i,s),ve("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!s.multiple},ve("invalid",i);break;case"textarea":af(i,s),ve("invalid",i)}Vu(a,s),n=null;for(var r in s)if(s.hasOwnProperty(r)){var o=s[r];r==="children"?typeof o=="string"?i.textContent!==o&&(s.suppressHydrationWarning!==!0&&pr(i.textContent,o,e),n=["children",o]):typeof o=="number"&&i.textContent!==""+o&&(s.suppressHydrationWarning!==!0&&pr(i.textContent,o,e),n=["children",""+o]):vs.hasOwnProperty(r)&&o!=null&&r==="onScroll"&&ve("scroll",i)}switch(a){case"input":nr(i),tf(i,s,!0);break;case"textarea":nr(i),nf(i);break;case"select":case"option":break;default:typeof s.onClick=="function"&&(i.onclick=ao)}i=n,t.updateQueue=i,i!==null&&(t.flags|=4)}else{r=n.nodeType===9?n:n.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=og(a)),e==="http://www.w3.org/1999/xhtml"?a==="script"?(e=r.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof i.is=="string"?e=r.createElement(a,{is:i.is}):(e=r.createElement(a),a==="select"&&(r=e,i.multiple?r.multiple=!0:i.size&&(r.size=i.size))):e=r.createElementNS(e,a),e[sa]=t,e[Ps]=i,Ey(e,t,!1,!1),t.stateNode=e;e:{switch(r=Hu(a,i),a){case"dialog":ve("cancel",e),ve("close",e),n=i;break;case"iframe":case"object":case"embed":ve("load",e),n=i;break;case"video":case"audio":for(n=0;n<as.length;n++)ve(as[n],e);n=i;break;case"source":ve("error",e),n=i;break;case"img":case"image":case"link":ve("error",e),ve("load",e),n=i;break;case"details":ve("toggle",e),n=i;break;case"input":ef(e,i),n=zu(e,i),ve("invalid",e);break;case"option":n=i;break;case"select":e._wrapperState={wasMultiple:!!i.multiple},n=Ae({},i,{value:void 0}),ve("invalid",e);break;case"textarea":af(e,i),n=Uu(e,i),ve("invalid",e);break;default:n=i}Vu(a,n),o=n;for(s in o)if(o.hasOwnProperty(s)){var l=o[s];s==="style"?dg(e,l):s==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&lg(e,l)):s==="children"?typeof l=="string"?(a!=="textarea"||l!=="")&&bs(e,l):typeof l=="number"&&bs(e,""+l):s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&s!=="autoFocus"&&(vs.hasOwnProperty(s)?l!=null&&s==="onScroll"&&ve("scroll",e):l!=null&&uc(e,s,l,r))}switch(a){case"input":nr(e),tf(e,i,!1);break;case"textarea":nr(e),nf(e);break;case"option":i.value!=null&&e.setAttribute("value",""+ii(i.value));break;case"select":e.multiple=!!i.multiple,s=i.value,s!=null?ln(e,!!i.multiple,s,!1):i.defaultValue!=null&&ln(e,!!i.multiple,i.defaultValue,!0);break;default:typeof n.onClick=="function"&&(e.onclick=ao)}switch(a){case"button":case"input":case"select":case"textarea":i=!!i.autoFocus;break e;case"img":i=!0;break e;default:i=!1}}i&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return et(t),null;case 6:if(e&&t.stateNode!=null)Ny(e,t,e.memoizedProps,i);else{if(typeof i!="string"&&t.stateNode===null)throw Error(R(166));if(a=ki(Rs.current),ki(ua.current),fr(t)){if(i=t.stateNode,a=t.memoizedProps,i[sa]=t,(s=i.nodeValue!==a)&&(e=Dt,e!==null))switch(e.tag){case 3:pr(i.nodeValue,a,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&pr(i.nodeValue,a,(e.mode&1)!==0)}s&&(t.flags|=4)}else i=(a.nodeType===9?a:a.ownerDocument).createTextNode(i),i[sa]=t,t.stateNode=i}return et(t),null;case 13:if(be(Se),i=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(De&&xt!==null&&t.mode&1&&!(t.flags&128))Qg(),_n(),t.flags|=98560,s=!1;else if(s=fr(t),i!==null&&i.dehydrated!==null){if(e===null){if(!s)throw Error(R(318));if(s=t.memoizedState,s=s!==null?s.dehydrated:null,!s)throw Error(R(317));s[sa]=t}else _n(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;et(t),s=!1}else Gt!==null&&(Cd(Gt),Gt=null),s=!0;if(!s)return t.flags&65536?t:null}return t.flags&128?(t.lanes=a,t):(i=i!==null,i!==(e!==null&&e.memoizedState!==null)&&i&&(t.child.flags|=8192,t.mode&1&&(e===null||Se.current&1?ze===0&&(ze=3):Kc())),t.updateQueue!==null&&(t.flags|=4),et(t),null);case 4:return bn(),vd(e,t),e===null&&Cs(t.stateNode.containerInfo),et(t),null;case 10:return Sc(t.type._context),et(t),null;case 17:return ht(t.type)&&io(),et(t),null;case 19:if(be(Se),s=t.memoizedState,s===null)return et(t),null;if(i=(t.flags&128)!==0,r=s.rendering,r===null)if(i)Un(s,!1);else{if(ze!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(r=co(e),r!==null){for(t.flags|=128,Un(s,!1),i=r.updateQueue,i!==null&&(t.updateQueue=i,t.flags|=4),t.subtreeFlags=0,i=a,a=t.child;a!==null;)s=a,e=i,s.flags&=14680066,r=s.alternate,r===null?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=r.childLanes,s.lanes=r.lanes,s.child=r.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=r.memoizedProps,s.memoizedState=r.memoizedState,s.updateQueue=r.updateQueue,s.type=r.type,e=r.dependencies,s.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),a=a.sibling;return ye(Se,Se.current&1|2),t.child}e=e.sibling}s.tail!==null&&Fe()>Tn&&(t.flags|=128,i=!0,Un(s,!1),t.lanes=4194304)}else{if(!i)if(e=co(r),e!==null){if(t.flags|=128,i=!0,a=e.updateQueue,a!==null&&(t.updateQueue=a,t.flags|=4),Un(s,!0),s.tail===null&&s.tailMode==="hidden"&&!r.alternate&&!De)return et(t),null}else 2*Fe()-s.renderingStartTime>Tn&&a!==1073741824&&(t.flags|=128,i=!0,Un(s,!1),t.lanes=4194304);s.isBackwards?(r.sibling=t.child,t.child=r):(a=s.last,a!==null?a.sibling=r:t.child=r,s.last=r)}return s.tail!==null?(t=s.tail,s.rendering=t,s.tail=t.sibling,s.renderingStartTime=Fe(),t.sibling=null,a=Se.current,ye(Se,i?a&1|2:a&1),t):(et(t),null);case 22:case 23:return Uc(),i=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==i&&(t.flags|=8192),i&&t.mode&1?wt&1073741824&&(et(t),t.subtreeFlags&6&&(t.flags|=8192)):et(t),null;case 24:return null;case 25:return null}throw Error(R(156,t.tag))}function _w(e,t){switch(xc(t),t.tag){case 1:return ht(t.type)&&io(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return bn(),be(mt),be(it),Ic(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return Ec(t),null;case 13:if(be(Se),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(R(340));_n()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return be(Se),null;case 4:return bn(),null;case 10:return Sc(t.type._context),null;case 22:case 23:return Uc(),null;case 24:return null;default:return null}}var gr=!1,at=!1,vw=typeof WeakSet=="function"?WeakSet:Set,z=null;function sn(e,t){var a=e.ref;if(a!==null)if(typeof a=="function")try{a(null)}catch(i){Ie(e,t,i)}else a.current=null}function bd(e,t,a){try{a()}catch(i){Ie(e,t,i)}}var Hf=!1;function bw(e,t){if(id=Zr,e=Mg(),Tc(e)){if("selectionStart"in e)var a={start:e.selectionStart,end:e.selectionEnd};else e:{a=(a=e.ownerDocument)&&a.defaultView||window;var i=a.getSelection&&a.getSelection();if(i&&i.rangeCount!==0){a=i.anchorNode;var n=i.anchorOffset,s=i.focusNode;i=i.focusOffset;try{a.nodeType,s.nodeType}catch{a=null;break e}var r=0,o=-1,l=-1,u=0,d=0,h=e,g=null;t:for(;;){for(var p;h!==a||n!==0&&h.nodeType!==3||(o=r+n),h!==s||i!==0&&h.nodeType!==3||(l=r+i),h.nodeType===3&&(r+=h.nodeValue.length),(p=h.firstChild)!==null;)g=h,h=p;for(;;){if(h===e)break t;if(g===a&&++u===n&&(o=r),g===s&&++d===i&&(l=r),(p=h.nextSibling)!==null)break;h=g,g=h.parentNode}h=p}a=o===-1||l===-1?null:{start:o,end:l}}else a=null}a=a||{start:0,end:0}}else a=null;for(nd={focusedElem:e,selectionRange:a},Zr=!1,z=t;z!==null;)if(t=z,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,z=e;else for(;z!==null;){t=z;try{var m=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(m!==null){var c=m.memoizedProps,k=m.memoizedState,y=t.stateNode,_=y.getSnapshotBeforeUpdate(t.elementType===t.type?c:Vt(t.type,c),k);y.__reactInternalSnapshotBeforeUpdate=_}break;case 3:var v=t.stateNode.containerInfo;v.nodeType===1?v.textContent="":v.nodeType===9&&v.documentElement&&v.removeChild(v.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(R(163))}}catch(w){Ie(t,t.return,w)}if(e=t.sibling,e!==null){e.return=t.return,z=e;break}z=t.return}return m=Hf,Hf=!1,m}function cs(e,t,a){var i=t.updateQueue;if(i=i!==null?i.lastEffect:null,i!==null){var n=i=i.next;do{if((n.tag&e)===e){var s=n.destroy;n.destroy=void 0,s!==void 0&&bd(t,a,s)}n=n.next}while(n!==i)}}function zo(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var a=t=t.next;do{if((a.tag&e)===e){var i=a.create;a.destroy=i()}a=a.next}while(a!==t)}}function wd(e){var t=e.ref;if(t!==null){var a=e.stateNode;switch(e.tag){case 5:e=a;break;default:e=a}typeof t=="function"?t(e):t.current=e}}function jy(e){var t=e.alternate;t!==null&&(e.alternate=null,jy(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[sa],delete t[Ps],delete t[od],delete t[aw],delete t[iw])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Fy(e){return e.tag===5||e.tag===3||e.tag===4}function Gf(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Fy(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Td(e,t,a){var i=e.tag;if(i===5||i===6)e=e.stateNode,t?a.nodeType===8?a.parentNode.insertBefore(e,t):a.insertBefore(e,t):(a.nodeType===8?(t=a.parentNode,t.insertBefore(e,a)):(t=a,t.appendChild(e)),a=a._reactRootContainer,a!=null||t.onclick!==null||(t.onclick=ao));else if(i!==4&&(e=e.child,e!==null))for(Td(e,t,a),e=e.sibling;e!==null;)Td(e,t,a),e=e.sibling}function kd(e,t,a){var i=e.tag;if(i===5||i===6)e=e.stateNode,t?a.insertBefore(e,t):a.appendChild(e);else if(i!==4&&(e=e.child,e!==null))for(kd(e,t,a),e=e.sibling;e!==null;)kd(e,t,a),e=e.sibling}var He=null,Ht=!1;function Oa(e,t,a){for(a=a.child;a!==null;)Oy(e,t,a),a=a.sibling}function Oy(e,t,a){if(la&&typeof la.onCommitFiberUnmount=="function")try{la.onCommitFiberUnmount(Io,a)}catch{}switch(a.tag){case 5:at||sn(a,t);case 6:var i=He,n=Ht;He=null,Oa(e,t,a),He=i,Ht=n,He!==null&&(Ht?(e=He,a=a.stateNode,e.nodeType===8?e.parentNode.removeChild(a):e.removeChild(a)):He.removeChild(a.stateNode));break;case 18:He!==null&&(Ht?(e=He,a=a.stateNode,e.nodeType===8?ou(e.parentNode,a):e.nodeType===1&&ou(e,a),xs(e)):ou(He,a.stateNode));break;case 4:i=He,n=Ht,He=a.stateNode.containerInfo,Ht=!0,Oa(e,t,a),He=i,Ht=n;break;case 0:case 11:case 14:case 15:if(!at&&(i=a.updateQueue,i!==null&&(i=i.lastEffect,i!==null))){n=i=i.next;do{var s=n,r=s.destroy;s=s.tag,r!==void 0&&(s&2||s&4)&&bd(a,t,r),n=n.next}while(n!==i)}Oa(e,t,a);break;case 1:if(!at&&(sn(a,t),i=a.stateNode,typeof i.componentWillUnmount=="function"))try{i.props=a.memoizedProps,i.state=a.memoizedState,i.componentWillUnmount()}catch(o){Ie(a,t,o)}Oa(e,t,a);break;case 21:Oa(e,t,a);break;case 22:a.mode&1?(at=(i=at)||a.memoizedState!==null,Oa(e,t,a),at=i):Oa(e,t,a);break;default:Oa(e,t,a)}}function Xf(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var a=e.stateNode;a===null&&(a=e.stateNode=new vw),t.forEach(function(i){var n=Pw.bind(null,e,i);a.has(i)||(a.add(i),i.then(n,n))})}}function Kt(e,t){var a=t.deletions;if(a!==null)for(var i=0;i<a.length;i++){var n=a[i];try{var s=e,r=t,o=r;e:for(;o!==null;){switch(o.tag){case 5:He=o.stateNode,Ht=!1;break e;case 3:He=o.stateNode.containerInfo,Ht=!0;break e;case 4:He=o.stateNode.containerInfo,Ht=!0;break e}o=o.return}if(He===null)throw Error(R(160));Oy(s,r,n),He=null,Ht=!1;var l=n.alternate;l!==null&&(l.return=null),n.return=null}catch(u){Ie(n,t,u)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)My(t,e),t=t.sibling}function My(e,t){var a=e.alternate,i=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Kt(t,e),ta(e),i&4){try{cs(3,e,e.return),zo(3,e)}catch(c){Ie(e,e.return,c)}try{cs(5,e,e.return)}catch(c){Ie(e,e.return,c)}}break;case 1:Kt(t,e),ta(e),i&512&&a!==null&&sn(a,a.return);break;case 5:if(Kt(t,e),ta(e),i&512&&a!==null&&sn(a,a.return),e.flags&32){var n=e.stateNode;try{bs(n,"")}catch(c){Ie(e,e.return,c)}}if(i&4&&(n=e.stateNode,n!=null)){var s=e.memoizedProps,r=a!==null?a.memoizedProps:s,o=e.type,l=e.updateQueue;if(e.updateQueue=null,l!==null)try{o==="input"&&s.type==="radio"&&s.name!=null&&sg(n,s),Hu(o,r);var u=Hu(o,s);for(r=0;r<l.length;r+=2){var d=l[r],h=l[r+1];d==="style"?dg(n,h):d==="dangerouslySetInnerHTML"?lg(n,h):d==="children"?bs(n,h):uc(n,d,h,u)}switch(o){case"input":Wu(n,s);break;case"textarea":rg(n,s);break;case"select":var g=n._wrapperState.wasMultiple;n._wrapperState.wasMultiple=!!s.multiple;var p=s.value;p!=null?ln(n,!!s.multiple,p,!1):g!==!!s.multiple&&(s.defaultValue!=null?ln(n,!!s.multiple,s.defaultValue,!0):ln(n,!!s.multiple,s.multiple?[]:"",!1))}n[Ps]=s}catch(c){Ie(e,e.return,c)}}break;case 6:if(Kt(t,e),ta(e),i&4){if(e.stateNode===null)throw Error(R(162));n=e.stateNode,s=e.memoizedProps;try{n.nodeValue=s}catch(c){Ie(e,e.return,c)}}break;case 3:if(Kt(t,e),ta(e),i&4&&a!==null&&a.memoizedState.isDehydrated)try{xs(t.containerInfo)}catch(c){Ie(e,e.return,c)}break;case 4:Kt(t,e),ta(e);break;case 13:Kt(t,e),ta(e),n=e.child,n.flags&8192&&(s=n.memoizedState!==null,n.stateNode.isHidden=s,!s||n.alternate!==null&&n.alternate.memoizedState!==null||(Wc=Fe())),i&4&&Xf(e);break;case 22:if(d=a!==null&&a.memoizedState!==null,e.mode&1?(at=(u=at)||d,Kt(t,e),at=u):Kt(t,e),ta(e),i&8192){if(u=e.memoizedState!==null,(e.stateNode.isHidden=u)&&!d&&e.mode&1)for(z=e,d=e.child;d!==null;){for(h=z=d;z!==null;){switch(g=z,p=g.child,g.tag){case 0:case 11:case 14:case 15:cs(4,g,g.return);break;case 1:sn(g,g.return);var m=g.stateNode;if(typeof m.componentWillUnmount=="function"){i=g,a=g.return;try{t=i,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(c){Ie(i,a,c)}}break;case 5:sn(g,g.return);break;case 22:if(g.memoizedState!==null){Qf(h);continue}}p!==null?(p.return=g,z=p):Qf(h)}d=d.sibling}e:for(d=null,h=e;;){if(h.tag===5){if(d===null){d=h;try{n=h.stateNode,u?(s=n.style,typeof s.setProperty=="function"?s.setProperty("display","none","important"):s.display="none"):(o=h.stateNode,l=h.memoizedProps.style,r=l!=null&&l.hasOwnProperty("display")?l.display:null,o.style.display=ug("display",r))}catch(c){Ie(e,e.return,c)}}}else if(h.tag===6){if(d===null)try{h.stateNode.nodeValue=u?"":h.memoizedProps}catch(c){Ie(e,e.return,c)}}else if((h.tag!==22&&h.tag!==23||h.memoizedState===null||h===e)&&h.child!==null){h.child.return=h,h=h.child;continue}if(h===e)break e;for(;h.sibling===null;){if(h.return===null||h.return===e)break e;d===h&&(d=null),h=h.return}d===h&&(d=null),h.sibling.return=h.return,h=h.sibling}}break;case 19:Kt(t,e),ta(e),i&4&&Xf(e);break;case 21:break;default:Kt(t,e),ta(e)}}function ta(e){var t=e.flags;if(t&2){try{e:{for(var a=e.return;a!==null;){if(Fy(a)){var i=a;break e}a=a.return}throw Error(R(160))}switch(i.tag){case 5:var n=i.stateNode;i.flags&32&&(bs(n,""),i.flags&=-33);var s=Gf(e);kd(e,s,n);break;case 3:case 4:var r=i.stateNode.containerInfo,o=Gf(e);Td(e,o,r);break;default:throw Error(R(161))}}catch(l){Ie(e,e.return,l)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function ww(e,t,a){z=e,Ly(e)}function Ly(e,t,a){for(var i=(e.mode&1)!==0;z!==null;){var n=z,s=n.child;if(n.tag===22&&i){var r=n.memoizedState!==null||gr;if(!r){var o=n.alternate,l=o!==null&&o.memoizedState!==null||at;o=gr;var u=at;if(gr=r,(at=l)&&!u)for(z=n;z!==null;)r=z,l=r.child,r.tag===22&&r.memoizedState!==null?Yf(n):l!==null?(l.return=r,z=l):Yf(n);for(;s!==null;)z=s,Ly(s),s=s.sibling;z=n,gr=o,at=u}Jf(e)}else n.subtreeFlags&8772&&s!==null?(s.return=n,z=s):Jf(e)}}function Jf(e){for(;z!==null;){var t=z;if(t.flags&8772){var a=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:at||zo(5,t);break;case 1:var i=t.stateNode;if(t.flags&4&&!at)if(a===null)i.componentDidMount();else{var n=t.elementType===t.type?a.memoizedProps:Vt(t.type,a.memoizedProps);i.componentDidUpdate(n,a.memoizedState,i.__reactInternalSnapshotBeforeUpdate)}var s=t.updateQueue;s!==null&&If(t,s,i);break;case 3:var r=t.updateQueue;if(r!==null){if(a=null,t.child!==null)switch(t.child.tag){case 5:a=t.child.stateNode;break;case 1:a=t.child.stateNode}If(t,r,a)}break;case 5:var o=t.stateNode;if(a===null&&t.flags&4){a=o;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&a.focus();break;case"img":l.src&&(a.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var u=t.alternate;if(u!==null){var d=u.memoizedState;if(d!==null){var h=d.dehydrated;h!==null&&xs(h)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(R(163))}at||t.flags&512&&wd(t)}catch(g){Ie(t,t.return,g)}}if(t===e){z=null;break}if(a=t.sibling,a!==null){a.return=t.return,z=a;break}z=t.return}}function Qf(e){for(;z!==null;){var t=z;if(t===e){z=null;break}var a=t.sibling;if(a!==null){a.return=t.return,z=a;break}z=t.return}}function Yf(e){for(;z!==null;){var t=z;try{switch(t.tag){case 0:case 11:case 15:var a=t.return;try{zo(4,t)}catch(l){Ie(t,a,l)}break;case 1:var i=t.stateNode;if(typeof i.componentDidMount=="function"){var n=t.return;try{i.componentDidMount()}catch(l){Ie(t,n,l)}}var s=t.return;try{wd(t)}catch(l){Ie(t,s,l)}break;case 5:var r=t.return;try{wd(t)}catch(l){Ie(t,r,l)}}}catch(l){Ie(t,t.return,l)}if(t===e){z=null;break}var o=t.sibling;if(o!==null){o.return=t.return,z=o;break}z=t.return}}var Tw=Math.ceil,mo=Ia.ReactCurrentDispatcher,Bc=Ia.ReactCurrentOwner,Bt=Ia.ReactCurrentBatchConfig,ae=0,$e=null,Me=null,Xe=0,wt=0,rn=oi(0),ze=0,js=null,Ri=0,Wo=0,zc=0,ps=null,ct=null,Wc=0,Tn=1/0,_a=null,ho=!1,xd=null,Za=null,yr=!1,Va=null,go=0,fs=0,Dd=null,Mr=-1,Lr=0;function st(){return ae&6?Fe():Mr!==-1?Mr:Mr=Fe()}function ei(e){return e.mode&1?ae&2&&Xe!==0?Xe&-Xe:sw.transition!==null?(Lr===0&&(Lr=Tg()),Lr):(e=ue,e!==0||(e=window.event,e=e===void 0?16:Pg(e.type)),e):1}function Qt(e,t,a,i){if(50<fs)throw fs=0,Dd=null,Error(R(185));$s(e,a,i),(!(ae&2)||e!==$e)&&(e===$e&&(!(ae&2)&&(Wo|=a),ze===4&&Ua(e,Xe)),gt(e,i),a===1&&ae===0&&!(t.mode&1)&&(Tn=Fe()+500,Mo&&li()))}function gt(e,t){var a=e.callbackNode;s0(e,t);var i=Yr(e,e===$e?Xe:0);if(i===0)a!==null&&of(a),e.callbackNode=null,e.callbackPriority=0;else if(t=i&-i,e.callbackPriority!==t){if(a!=null&&of(a),t===1)e.tag===0?nw(Zf.bind(null,e)):Gg(Zf.bind(null,e)),ew(function(){!(ae&6)&&li()}),a=null;else{switch(kg(i)){case 1:a=mc;break;case 4:a=bg;break;case 16:a=Qr;break;case 536870912:a=wg;break;default:a=Qr}a=Hy(a,By.bind(null,e))}e.callbackPriority=t,e.callbackNode=a}}function By(e,t){if(Mr=-1,Lr=0,ae&6)throw Error(R(327));var a=e.callbackNode;if(fn()&&e.callbackNode!==a)return null;var i=Yr(e,e===$e?Xe:0);if(i===0)return null;if(i&30||i&e.expiredLanes||t)t=yo(e,i);else{t=i;var n=ae;ae|=2;var s=Wy();($e!==e||Xe!==t)&&(_a=null,Tn=Fe()+500,qi(e,t));do try{Dw();break}catch(o){zy(e,o)}while(1);Cc(),mo.current=s,ae=n,Me!==null?t=0:($e=null,Xe=0,t=ze)}if(t!==0){if(t===2&&(n=Yu(e),n!==0&&(i=n,t=qd(e,n))),t===1)throw a=js,qi(e,0),Ua(e,i),gt(e,Fe()),a;if(t===6)Ua(e,i);else{if(n=e.current.alternate,!(i&30)&&!kw(n)&&(t=yo(e,i),t===2&&(s=Yu(e),s!==0&&(i=s,t=qd(e,s))),t===1))throw a=js,qi(e,0),Ua(e,i),gt(e,Fe()),a;switch(e.finishedWork=n,e.finishedLanes=i,t){case 0:case 1:throw Error(R(345));case 2:hi(e,ct,_a);break;case 3:if(Ua(e,i),(i&130023424)===i&&(t=Wc+500-Fe(),10<t)){if(Yr(e,0)!==0)break;if(n=e.suspendedLanes,(n&i)!==i){st(),e.pingedLanes|=e.suspendedLanes&n;break}e.timeoutHandle=rd(hi.bind(null,e,ct,_a),t);break}hi(e,ct,_a);break;case 4:if(Ua(e,i),(i&4194240)===i)break;for(t=e.eventTimes,n=-1;0<i;){var r=31-Jt(i);s=1<<r,r=t[r],r>n&&(n=r),i&=~s}if(i=n,i=Fe()-i,i=(120>i?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*Tw(i/1960))-i,10<i){e.timeoutHandle=rd(hi.bind(null,e,ct,_a),i);break}hi(e,ct,_a);break;case 5:hi(e,ct,_a);break;default:throw Error(R(329))}}}return gt(e,Fe()),e.callbackNode===a?By.bind(null,e):null}function qd(e,t){var a=ps;return e.current.memoizedState.isDehydrated&&(qi(e,t).flags|=256),e=yo(e,t),e!==2&&(t=ct,ct=a,t!==null&&Cd(t)),e}function Cd(e){ct===null?ct=e:ct.push.apply(ct,e)}function kw(e){for(var t=e;;){if(t.flags&16384){var a=t.updateQueue;if(a!==null&&(a=a.stores,a!==null))for(var i=0;i<a.length;i++){var n=a[i],s=n.getSnapshot;n=n.value;try{if(!Yt(s(),n))return!1}catch{return!1}}}if(a=t.child,t.subtreeFlags&16384&&a!==null)a.return=t,t=a;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Ua(e,t){for(t&=~zc,t&=~Wo,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var a=31-Jt(t),i=1<<a;e[a]=-1,t&=~i}}function Zf(e){if(ae&6)throw Error(R(327));fn();var t=Yr(e,0);if(!(t&1))return gt(e,Fe()),null;var a=yo(e,t);if(e.tag!==0&&a===2){var i=Yu(e);i!==0&&(t=i,a=qd(e,i))}if(a===1)throw a=js,qi(e,0),Ua(e,t),gt(e,Fe()),a;if(a===6)throw Error(R(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,hi(e,ct,_a),gt(e,Fe()),null}function $c(e,t){var a=ae;ae|=1;try{return e(t)}finally{ae=a,ae===0&&(Tn=Fe()+500,Mo&&li())}}function Ei(e){Va!==null&&Va.tag===0&&!(ae&6)&&fn();var t=ae;ae|=1;var a=Bt.transition,i=ue;try{if(Bt.transition=null,ue=1,e)return e()}finally{ue=i,Bt.transition=a,ae=t,!(ae&6)&&li()}}function Uc(){wt=rn.current,be(rn)}function qi(e,t){e.finishedWork=null,e.finishedLanes=0;var a=e.timeoutHandle;if(a!==-1&&(e.timeoutHandle=-1,Z0(a)),Me!==null)for(a=Me.return;a!==null;){var i=a;switch(xc(i),i.tag){case 1:i=i.type.childContextTypes,i!=null&&io();break;case 3:bn(),be(mt),be(it),Ic();break;case 5:Ec(i);break;case 4:bn();break;case 13:be(Se);break;case 19:be(Se);break;case 10:Sc(i.type._context);break;case 22:case 23:Uc()}a=a.return}if($e=e,Me=e=ti(e.current,null),Xe=wt=t,ze=0,js=null,zc=Wo=Ri=0,ct=ps=null,Ti!==null){for(t=0;t<Ti.length;t++)if(a=Ti[t],i=a.interleaved,i!==null){a.interleaved=null;var n=i.next,s=a.pending;if(s!==null){var r=s.next;s.next=n,i.next=r}a.pending=i}Ti=null}return e}function zy(e,t){do{var a=Me;try{if(Cc(),jr.current=fo,po){for(var i=Pe.memoizedState;i!==null;){var n=i.queue;n!==null&&(n.pending=null),i=i.next}po=!1}if(Ai=0,We=Be=Pe=null,ds=!1,Es=0,Bc.current=null,a===null||a.return===null){ze=1,js=t,Me=null;break}e:{var s=e,r=a.return,o=a,l=t;if(t=Xe,o.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var u=l,d=o,h=d.tag;if(!(d.mode&1)&&(h===0||h===11||h===15)){var g=d.alternate;g?(d.updateQueue=g.updateQueue,d.memoizedState=g.memoizedState,d.lanes=g.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=Bf(r);if(p!==null){p.flags&=-257,zf(p,r,o,s,t),p.mode&1&&Lf(s,u,t),t=p,l=u;var m=t.updateQueue;if(m===null){var c=new Set;c.add(l),t.updateQueue=c}else m.add(l);break e}else{if(!(t&1)){Lf(s,u,t),Kc();break e}l=Error(R(426))}}else if(De&&o.mode&1){var k=Bf(r);if(k!==null){!(k.flags&65536)&&(k.flags|=256),zf(k,r,o,s,t),Dc(wn(l,o));break e}}s=l=wn(l,o),ze!==4&&(ze=2),ps===null?ps=[s]:ps.push(s),s=r;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t;var y=xy(s,l,t);Ef(s,y);break e;case 1:o=l;var _=s.type,v=s.stateNode;if(!(s.flags&128)&&(typeof _.getDerivedStateFromError=="function"||v!==null&&typeof v.componentDidCatch=="function"&&(Za===null||!Za.has(v)))){s.flags|=65536,t&=-t,s.lanes|=t;var w=Dy(s,o,t);Ef(s,w);break e}}s=s.return}while(s!==null)}Uy(a)}catch(D){t=D,Me===a&&a!==null&&(Me=a=a.return);continue}break}while(1)}function Wy(){var e=mo.current;return mo.current=fo,e===null?fo:e}function Kc(){(ze===0||ze===3||ze===2)&&(ze=4),$e===null||!(Ri&268435455)&&!(Wo&268435455)||Ua($e,Xe)}function yo(e,t){var a=ae;ae|=2;var i=Wy();($e!==e||Xe!==t)&&(_a=null,qi(e,t));do try{xw();break}catch(n){zy(e,n)}while(1);if(Cc(),ae=a,mo.current=i,Me!==null)throw Error(R(261));return $e=null,Xe=0,ze}function xw(){for(;Me!==null;)$y(Me)}function Dw(){for(;Me!==null&&!Jb();)$y(Me)}function $y(e){var t=Vy(e.alternate,e,wt);e.memoizedProps=e.pendingProps,t===null?Uy(e):Me=t,Bc.current=null}function Uy(e){var t=e;do{var a=t.alternate;if(e=t.return,t.flags&32768){if(a=_w(a,t),a!==null){a.flags&=32767,Me=a;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{ze=6,Me=null;return}}else if(a=yw(a,t,wt),a!==null){Me=a;return}if(t=t.sibling,t!==null){Me=t;return}Me=t=e}while(t!==null);ze===0&&(ze=5)}function hi(e,t,a){var i=ue,n=Bt.transition;try{Bt.transition=null,ue=1,qw(e,t,a,i)}finally{Bt.transition=n,ue=i}return null}function qw(e,t,a,i){do fn();while(Va!==null);if(ae&6)throw Error(R(327));a=e.finishedWork;var n=e.finishedLanes;if(a===null)return null;if(e.finishedWork=null,e.finishedLanes=0,a===e.current)throw Error(R(177));e.callbackNode=null,e.callbackPriority=0;var s=a.lanes|a.childLanes;if(r0(e,s),e===$e&&(Me=$e=null,Xe=0),!(a.subtreeFlags&2064)&&!(a.flags&2064)||yr||(yr=!0,Hy(Qr,function(){return fn(),null})),s=(a.flags&15990)!==0,a.subtreeFlags&15990||s){s=Bt.transition,Bt.transition=null;var r=ue;ue=1;var o=ae;ae|=4,Bc.current=null,bw(e,a),My(a,e),V0(nd),Zr=!!id,nd=id=null,e.current=a,ww(a),Qb(),ae=o,ue=r,Bt.transition=s}else e.current=a;if(yr&&(yr=!1,Va=e,go=n),s=e.pendingLanes,s===0&&(Za=null),e0(a.stateNode),gt(e,Fe()),t!==null)for(i=e.onRecoverableError,a=0;a<t.length;a++)n=t[a],i(n.value,{componentStack:n.stack,digest:n.digest});if(ho)throw ho=!1,e=xd,xd=null,e;return go&1&&e.tag!==0&&fn(),s=e.pendingLanes,s&1?e===Dd?fs++:(fs=0,Dd=e):fs=0,li(),null}function fn(){if(Va!==null){var e=kg(go),t=Bt.transition,a=ue;try{if(Bt.transition=null,ue=16>e?16:e,Va===null)var i=!1;else{if(e=Va,Va=null,go=0,ae&6)throw Error(R(331));var n=ae;for(ae|=4,z=e.current;z!==null;){var s=z,r=s.child;if(z.flags&16){var o=s.deletions;if(o!==null){for(var l=0;l<o.length;l++){var u=o[l];for(z=u;z!==null;){var d=z;switch(d.tag){case 0:case 11:case 15:cs(8,d,s)}var h=d.child;if(h!==null)h.return=d,z=h;else for(;z!==null;){d=z;var g=d.sibling,p=d.return;if(jy(d),d===u){z=null;break}if(g!==null){g.return=p,z=g;break}z=p}}}var m=s.alternate;if(m!==null){var c=m.child;if(c!==null){m.child=null;do{var k=c.sibling;c.sibling=null,c=k}while(c!==null)}}z=s}}if(s.subtreeFlags&2064&&r!==null)r.return=s,z=r;else e:for(;z!==null;){if(s=z,s.flags&2048)switch(s.tag){case 0:case 11:case 15:cs(9,s,s.return)}var y=s.sibling;if(y!==null){y.return=s.return,z=y;break e}z=s.return}}var _=e.current;for(z=_;z!==null;){r=z;var v=r.child;if(r.subtreeFlags&2064&&v!==null)v.return=r,z=v;else e:for(r=_;z!==null;){if(o=z,o.flags&2048)try{switch(o.tag){case 0:case 11:case 15:zo(9,o)}}catch(D){Ie(o,o.return,D)}if(o===r){z=null;break e}var w=o.sibling;if(w!==null){w.return=o.return,z=w;break e}z=o.return}}if(ae=n,li(),la&&typeof la.onPostCommitFiberRoot=="function")try{la.onPostCommitFiberRoot(Io,e)}catch{}i=!0}return i}finally{ue=a,Bt.transition=t}}return!1}function em(e,t,a){t=wn(a,t),t=xy(e,t,1),e=Ya(e,t,1),t=st(),e!==null&&($s(e,1,t),gt(e,t))}function Ie(e,t,a){if(e.tag===3)em(e,e,a);else for(;t!==null;){if(t.tag===3){em(t,e,a);break}else if(t.tag===1){var i=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof i.componentDidCatch=="function"&&(Za===null||!Za.has(i))){e=wn(a,e),e=Dy(t,e,1),t=Ya(t,e,1),e=st(),t!==null&&($s(t,1,e),gt(t,e));break}}t=t.return}}function Cw(e,t,a){var i=e.pingCache;i!==null&&i.delete(t),t=st(),e.pingedLanes|=e.suspendedLanes&a,$e===e&&(Xe&a)===a&&(ze===4||ze===3&&(Xe&130023424)===Xe&&500>Fe()-Wc?qi(e,0):zc|=a),gt(e,t)}function Ky(e,t){t===0&&(e.mode&1?(t=or,or<<=1,!(or&130023424)&&(or=4194304)):t=1);var a=st();e=Ca(e,t),e!==null&&($s(e,t,a),gt(e,a))}function Sw(e){var t=e.memoizedState,a=0;t!==null&&(a=t.retryLane),Ky(e,a)}function Pw(e,t){var a=0;switch(e.tag){case 13:var i=e.stateNode,n=e.memoizedState;n!==null&&(a=n.retryLane);break;case 19:i=e.stateNode;break;default:throw Error(R(314))}i!==null&&i.delete(t),Ky(e,a)}var Vy;Vy=function(e,t,a){if(e!==null)if(e.memoizedProps!==t.pendingProps||mt.current)ft=!0;else{if(!(e.lanes&a)&&!(t.flags&128))return ft=!1,gw(e,t,a);ft=!!(e.flags&131072)}else ft=!1,De&&t.flags&1048576&&Xg(t,ro,t.index);switch(t.lanes=0,t.tag){case 2:var i=t.type;Or(e,t),e=t.pendingProps;var n=yn(t,it.current);pn(t,a),n=jc(null,t,i,e,n,a);var s=Fc();return t.flags|=1,typeof n=="object"&&n!==null&&typeof n.render=="function"&&n.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ht(i)?(s=!0,no(t)):s=!1,t.memoizedState=n.state!==null&&n.state!==void 0?n.state:null,Ac(t),n.updater=Lo,t.stateNode=n,n._reactInternals=t,fd(t,i,e,a),t=gd(null,t,i,!0,s,a)):(t.tag=0,De&&s&&kc(t),nt(null,t,n,a),t=t.child),t;case 16:i=t.elementType;e:{switch(Or(e,t),e=t.pendingProps,n=i._init,i=n(i._payload),t.type=i,n=t.tag=Rw(i),e=Vt(i,e),n){case 0:t=hd(null,t,i,e,a);break e;case 1:t=Uf(null,t,i,e,a);break e;case 11:t=Wf(null,t,i,e,a);break e;case 14:t=$f(null,t,i,Vt(i.type,e),a);break e}throw Error(R(306,i,""))}return t;case 0:return i=t.type,n=t.pendingProps,n=t.elementType===i?n:Vt(i,n),hd(e,t,i,n,a);case 1:return i=t.type,n=t.pendingProps,n=t.elementType===i?n:Vt(i,n),Uf(e,t,i,n,a);case 3:e:{if(Py(t),e===null)throw Error(R(387));i=t.pendingProps,s=t.memoizedState,n=s.element,Zg(e,t),uo(t,i,null,a);var r=t.memoizedState;if(i=r.element,s.isDehydrated)if(s={element:i,isDehydrated:!1,cache:r.cache,pendingSuspenseBoundaries:r.pendingSuspenseBoundaries,transitions:r.transitions},t.updateQueue.baseState=s,t.memoizedState=s,t.flags&256){n=wn(Error(R(423)),t),t=Kf(e,t,i,a,n);break e}else if(i!==n){n=wn(Error(R(424)),t),t=Kf(e,t,i,a,n);break e}else for(xt=Qa(t.stateNode.containerInfo.firstChild),Dt=t,De=!0,Gt=null,a=iy(t,null,i,a),t.child=a;a;)a.flags=a.flags&-3|4096,a=a.sibling;else{if(_n(),i===n){t=Sa(e,t,a);break e}nt(e,t,i,a)}t=t.child}return t;case 5:return ny(t),e===null&&dd(t),i=t.type,n=t.pendingProps,s=e!==null?e.memoizedProps:null,r=n.children,sd(i,n)?r=null:s!==null&&sd(i,s)&&(t.flags|=32),Sy(e,t),nt(e,t,r,a),t.child;case 6:return e===null&&dd(t),null;case 13:return Ay(e,t,a);case 4:return Rc(t,t.stateNode.containerInfo),i=t.pendingProps,e===null?t.child=vn(t,null,i,a):nt(e,t,i,a),t.child;case 11:return i=t.type,n=t.pendingProps,n=t.elementType===i?n:Vt(i,n),Wf(e,t,i,n,a);case 7:return nt(e,t,t.pendingProps,a),t.child;case 8:return nt(e,t,t.pendingProps.children,a),t.child;case 12:return nt(e,t,t.pendingProps.children,a),t.child;case 10:e:{if(i=t.type._context,n=t.pendingProps,s=t.memoizedProps,r=n.value,ye(oo,i._currentValue),i._currentValue=r,s!==null)if(Yt(s.value,r)){if(s.children===n.children&&!mt.current){t=Sa(e,t,a);break e}}else for(s=t.child,s!==null&&(s.return=t);s!==null;){var o=s.dependencies;if(o!==null){r=s.child;for(var l=o.firstContext;l!==null;){if(l.context===i){if(s.tag===1){l=xa(-1,a&-a),l.tag=2;var u=s.updateQueue;if(u!==null){u=u.shared;var d=u.pending;d===null?l.next=l:(l.next=d.next,d.next=l),u.pending=l}}s.lanes|=a,l=s.alternate,l!==null&&(l.lanes|=a),cd(s.return,a,t),o.lanes|=a;break}l=l.next}}else if(s.tag===10)r=s.type===t.type?null:s.child;else if(s.tag===18){if(r=s.return,r===null)throw Error(R(341));r.lanes|=a,o=r.alternate,o!==null&&(o.lanes|=a),cd(r,a,t),r=s.sibling}else r=s.child;if(r!==null)r.return=s;else for(r=s;r!==null;){if(r===t){r=null;break}if(s=r.sibling,s!==null){s.return=r.return,r=s;break}r=r.return}s=r}nt(e,t,n.children,a),t=t.child}return t;case 9:return n=t.type,i=t.pendingProps.children,pn(t,a),n=zt(n),i=i(n),t.flags|=1,nt(e,t,i,a),t.child;case 14:return i=t.type,n=Vt(i,t.pendingProps),n=Vt(i.type,n),$f(e,t,i,n,a);case 15:return qy(e,t,t.type,t.pendingProps,a);case 17:return i=t.type,n=t.pendingProps,n=t.elementType===i?n:Vt(i,n),Or(e,t),t.tag=1,ht(i)?(e=!0,no(t)):e=!1,pn(t,a),ty(t,i,n),fd(t,i,n,a),gd(null,t,i,!0,e,a);case 19:return Ry(e,t,a);case 22:return Cy(e,t,a)}throw Error(R(156,t.tag))};function Hy(e,t){return vg(e,t)}function Aw(e,t,a,i){this.tag=e,this.key=a,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Lt(e,t,a,i){return new Aw(e,t,a,i)}function Vc(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Rw(e){if(typeof e=="function")return Vc(e)?1:0;if(e!=null){if(e=e.$$typeof,e===cc)return 11;if(e===pc)return 14}return 2}function ti(e,t){var a=e.alternate;return a===null?(a=Lt(e.tag,t,e.key,e.mode),a.elementType=e.elementType,a.type=e.type,a.stateNode=e.stateNode,a.alternate=e,e.alternate=a):(a.pendingProps=t,a.type=e.type,a.flags=0,a.subtreeFlags=0,a.deletions=null),a.flags=e.flags&14680064,a.childLanes=e.childLanes,a.lanes=e.lanes,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,t=e.dependencies,a.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},a.sibling=e.sibling,a.index=e.index,a.ref=e.ref,a}function Br(e,t,a,i,n,s){var r=2;if(i=e,typeof e=="function")Vc(e)&&(r=1);else if(typeof e=="string")r=5;else e:switch(e){case Xi:return Ci(a.children,n,s,t);case dc:r=8,n|=8;break;case Ou:return e=Lt(12,a,t,n|2),e.elementType=Ou,e.lanes=s,e;case Mu:return e=Lt(13,a,t,n),e.elementType=Mu,e.lanes=s,e;case Lu:return e=Lt(19,a,t,n),e.elementType=Lu,e.lanes=s,e;case ag:return $o(a,n,s,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case eg:r=10;break e;case tg:r=9;break e;case cc:r=11;break e;case pc:r=14;break e;case za:r=16,i=null;break e}throw Error(R(130,e==null?e:typeof e,""))}return t=Lt(r,a,t,n),t.elementType=e,t.type=i,t.lanes=s,t}function Ci(e,t,a,i){return e=Lt(7,e,i,t),e.lanes=a,e}function $o(e,t,a,i){return e=Lt(22,e,i,t),e.elementType=ag,e.lanes=a,e.stateNode={isHidden:!1},e}function hu(e,t,a){return e=Lt(6,e,null,t),e.lanes=a,e}function gu(e,t,a){return t=Lt(4,e.children!==null?e.children:[],e.key,t),t.lanes=a,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ew(e,t,a,i,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Jl(0),this.expirationTimes=Jl(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Jl(0),this.identifierPrefix=i,this.onRecoverableError=n,this.mutableSourceEagerHydrationData=null}function Hc(e,t,a,i,n,s,r,o,l){return e=new Ew(e,t,a,o,l),t===1?(t=1,s===!0&&(t|=8)):t=0,s=Lt(3,null,null,t),e.current=s,s.stateNode=e,s.memoizedState={element:i,isDehydrated:a,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ac(s),e}function Iw(e,t,a){var i=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Gi,key:i==null?null:""+i,children:e,containerInfo:t,implementation:a}}function Gy(e){if(!e)return ni;e=e._reactInternals;e:{if(Fi(e)!==e||e.tag!==1)throw Error(R(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ht(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(R(171))}if(e.tag===1){var a=e.type;if(ht(a))return Hg(e,a,t)}return t}function Xy(e,t,a,i,n,s,r,o,l){return e=Hc(a,i,!0,e,n,s,r,o,l),e.context=Gy(null),a=e.current,i=st(),n=ei(a),s=xa(i,n),s.callback=t??null,Ya(a,s,n),e.current.lanes=n,$s(e,n,i),gt(e,i),e}function Uo(e,t,a,i){var n=t.current,s=st(),r=ei(n);return a=Gy(a),t.context===null?t.context=a:t.pendingContext=a,t=xa(s,r),t.payload={element:e},i=i===void 0?null:i,i!==null&&(t.callback=i),e=Ya(n,t,r),e!==null&&(Qt(e,n,r,s),Nr(e,n,r)),r}function _o(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function tm(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var a=e.retryLane;e.retryLane=a!==0&&a<t?a:t}}function Gc(e,t){tm(e,t),(e=e.alternate)&&tm(e,t)}function Nw(){return null}var Jy=typeof reportError=="function"?reportError:function(e){console.error(e)};function Xc(e){this._internalRoot=e}Ko.prototype.render=Xc.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(R(409));Uo(e,t,null,null)};Ko.prototype.unmount=Xc.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;Ei(function(){Uo(null,e,null,null)}),t[qa]=null}};function Ko(e){this._internalRoot=e}Ko.prototype.unstable_scheduleHydration=function(e){if(e){var t=qg();e={blockedOn:null,target:e,priority:t};for(var a=0;a<$a.length&&t!==0&&t<$a[a].priority;a++);$a.splice(a,0,e),a===0&&Sg(e)}};function Jc(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Vo(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function am(){}function jw(e,t,a,i,n){if(n){if(typeof i=="function"){var s=i;i=function(){var u=_o(r);s.call(u)}}var r=Xy(t,i,e,0,null,!1,!1,"",am);return e._reactRootContainer=r,e[qa]=r.current,Cs(e.nodeType===8?e.parentNode:e),Ei(),r}for(;n=e.lastChild;)e.removeChild(n);if(typeof i=="function"){var o=i;i=function(){var u=_o(l);o.call(u)}}var l=Hc(e,0,!1,null,null,!1,!1,"",am);return e._reactRootContainer=l,e[qa]=l.current,Cs(e.nodeType===8?e.parentNode:e),Ei(function(){Uo(t,l,a,i)}),l}function Ho(e,t,a,i,n){var s=a._reactRootContainer;if(s){var r=s;if(typeof n=="function"){var o=n;n=function(){var l=_o(r);o.call(l)}}Uo(t,r,e,n)}else r=jw(a,t,e,n,i);return _o(r)}xg=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var a=ts(t.pendingLanes);a!==0&&(hc(t,a|1),gt(t,Fe()),!(ae&6)&&(Tn=Fe()+500,li()))}break;case 13:Ei(function(){var i=Ca(e,1);if(i!==null){var n=st();Qt(i,e,1,n)}}),Gc(e,1)}};gc=function(e){if(e.tag===13){var t=Ca(e,134217728);if(t!==null){var a=st();Qt(t,e,134217728,a)}Gc(e,134217728)}};Dg=function(e){if(e.tag===13){var t=ei(e),a=Ca(e,t);if(a!==null){var i=st();Qt(a,e,t,i)}Gc(e,t)}};qg=function(){return ue};Cg=function(e,t){var a=ue;try{return ue=e,t()}finally{ue=a}};Xu=function(e,t,a){switch(t){case"input":if(Wu(e,a),t=a.name,a.type==="radio"&&t!=null){for(a=e;a.parentNode;)a=a.parentNode;for(a=a.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<a.length;t++){var i=a[t];if(i!==e&&i.form===e.form){var n=Oo(i);if(!n)throw Error(R(90));ng(i),Wu(i,n)}}}break;case"textarea":rg(e,a);break;case"select":t=a.value,t!=null&&ln(e,!!a.multiple,t,!1)}};fg=$c;mg=Ei;var Fw={usingClientEntryPoint:!1,Events:[Ks,Zi,Oo,cg,pg,$c]},Kn={findFiberByHostInstance:wi,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},Ow={bundleType:Kn.bundleType,version:Kn.version,rendererPackageName:Kn.rendererPackageName,rendererConfig:Kn.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ia.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=yg(e),e===null?null:e.stateNode},findFiberByHostInstance:Kn.findFiberByHostInstance||Nw,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var _r=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!_r.isDisabled&&_r.supportsFiber)try{Io=_r.inject(Ow),la=_r}catch{}}St.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Fw;St.createPortal=function(e,t){var a=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Jc(t))throw Error(R(200));return Iw(e,t,null,a)};St.createRoot=function(e,t){if(!Jc(e))throw Error(R(299));var a=!1,i="",n=Jy;return t!=null&&(t.unstable_strictMode===!0&&(a=!0),t.identifierPrefix!==void 0&&(i=t.identifierPrefix),t.onRecoverableError!==void 0&&(n=t.onRecoverableError)),t=Hc(e,1,!1,null,null,a,!1,i,n),e[qa]=t.current,Cs(e.nodeType===8?e.parentNode:e),new Xc(t)};St.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(R(188)):(e=Object.keys(e).join(","),Error(R(268,e)));return e=yg(t),e=e===null?null:e.stateNode,e};St.flushSync=function(e){return Ei(e)};St.hydrate=function(e,t,a){if(!Vo(t))throw Error(R(200));return Ho(null,e,t,!0,a)};St.hydrateRoot=function(e,t,a){if(!Jc(e))throw Error(R(405));var i=a!=null&&a.hydratedSources||null,n=!1,s="",r=Jy;if(a!=null&&(a.unstable_strictMode===!0&&(n=!0),a.identifierPrefix!==void 0&&(s=a.identifierPrefix),a.onRecoverableError!==void 0&&(r=a.onRecoverableError)),t=Xy(t,null,e,1,a??null,n,!1,s,r),e[qa]=t.current,Cs(e),i)for(e=0;e<i.length;e++)a=i[e],n=a._getVersion,n=n(a._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[a,n]:t.mutableSourceEagerHydrationData.push(a,n);return new Ko(t)};St.render=function(e,t,a){if(!Vo(t))throw Error(R(200));return Ho(null,e,t,!1,a)};St.unmountComponentAtNode=function(e){if(!Vo(e))throw Error(R(40));return e._reactRootContainer?(Ei(function(){Ho(null,null,e,!1,function(){e._reactRootContainer=null,e[qa]=null})}),!0):!1};St.unstable_batchedUpdates=$c;St.unstable_renderSubtreeIntoContainer=function(e,t,a,i){if(!Vo(a))throw Error(R(200));if(e==null||e._reactInternals===void 0)throw Error(R(38));return Ho(e,t,a,!1,i)};St.version="18.2.0-next-9e3b772b8-20220608";function Qy(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(Qy)}catch(e){console.error(e)}}Qy(),Xh.exports=St;var Go=Xh.exports;const vr=ac(Go);var im=Go;ju.createRoot=im.createRoot,ju.hydrateRoot=im.hydrateRoot;/**
 * @remix-run/router v1.11.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Fs(){return Fs=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},Fs.apply(this,arguments)}var Ha;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(Ha||(Ha={}));const nm="popstate";function Mw(e){e===void 0&&(e={});function t(i,n){let{pathname:s,search:r,hash:o}=i.location;return Sd("",{pathname:s,search:r,hash:o},n.state&&n.state.usr||null,n.state&&n.state.key||"default")}function a(i,n){return typeof n=="string"?n:vo(n)}return Bw(t,a,null,e)}function Le(e,t){if(e===!1||e===null||typeof e>"u")throw new Error(t)}function Qc(e,t){if(!e){typeof console<"u"&&console.warn(t);try{throw new Error(t)}catch{}}}function Lw(){return Math.random().toString(36).substr(2,8)}function sm(e,t){return{usr:e.state,key:e.key,idx:t}}function Sd(e,t,a,i){return a===void 0&&(a=null),Fs({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof t=="string"?Rn(t):t,{state:a,key:t&&t.key||i||Lw()})}function vo(e){let{pathname:t="/",search:a="",hash:i=""}=e;return a&&a!=="?"&&(t+=a.charAt(0)==="?"?a:"?"+a),i&&i!=="#"&&(t+=i.charAt(0)==="#"?i:"#"+i),t}function Rn(e){let t={};if(e){let a=e.indexOf("#");a>=0&&(t.hash=e.substr(a),e=e.substr(0,a));let i=e.indexOf("?");i>=0&&(t.search=e.substr(i),e=e.substr(0,i)),e&&(t.pathname=e)}return t}function Bw(e,t,a,i){i===void 0&&(i={});let{window:n=document.defaultView,v5Compat:s=!1}=i,r=n.history,o=Ha.Pop,l=null,u=d();u==null&&(u=0,r.replaceState(Fs({},r.state,{idx:u}),""));function d(){return(r.state||{idx:null}).idx}function h(){o=Ha.Pop;let k=d(),y=k==null?null:k-u;u=k,l&&l({action:o,location:c.location,delta:y})}function g(k,y){o=Ha.Push;let _=Sd(c.location,k,y);a&&a(_,k),u=d()+1;let v=sm(_,u),w=c.createHref(_);try{r.pushState(v,"",w)}catch(D){if(D instanceof DOMException&&D.name==="DataCloneError")throw D;n.location.assign(w)}s&&l&&l({action:o,location:c.location,delta:1})}function p(k,y){o=Ha.Replace;let _=Sd(c.location,k,y);a&&a(_,k),u=d();let v=sm(_,u),w=c.createHref(_);r.replaceState(v,"",w),s&&l&&l({action:o,location:c.location,delta:0})}function m(k){let y=n.location.origin!=="null"?n.location.origin:n.location.href,_=typeof k=="string"?k:vo(k);return Le(y,"No window.location.(origin|href) available to create URL for href: "+_),new URL(_,y)}let c={get action(){return o},get location(){return e(n,r)},listen(k){if(l)throw new Error("A history only accepts one active listener");return n.addEventListener(nm,h),l=k,()=>{n.removeEventListener(nm,h),l=null}},createHref(k){return t(n,k)},createURL:m,encodeLocation(k){let y=m(k);return{pathname:y.pathname,search:y.search,hash:y.hash}},push:g,replace:p,go(k){return r.go(k)}};return c}var rm;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(rm||(rm={}));function zw(e,t,a){a===void 0&&(a="/");let i=typeof t=="string"?Rn(t):t,n=Yc(i.pathname||"/",a);if(n==null)return null;let s=Yy(e);Ww(s);let r=null;for(let o=0;r==null&&o<s.length;++o)r=Qw(s[o],e1(n));return r}function Yy(e,t,a,i){t===void 0&&(t=[]),a===void 0&&(a=[]),i===void 0&&(i="");let n=(s,r,o)=>{let l={relativePath:o===void 0?s.path||"":o,caseSensitive:s.caseSensitive===!0,childrenIndex:r,route:s};l.relativePath.startsWith("/")&&(Le(l.relativePath.startsWith(i),'Absolute route path "'+l.relativePath+'" nested under path '+('"'+i+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),l.relativePath=l.relativePath.slice(i.length));let u=ai([i,l.relativePath]),d=a.concat(l);s.children&&s.children.length>0&&(Le(s.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+u+'".')),Yy(s.children,t,d,u)),!(s.path==null&&!s.index)&&t.push({path:u,score:Xw(u,s.index),routesMeta:d})};return e.forEach((s,r)=>{var o;if(s.path===""||!((o=s.path)!=null&&o.includes("?")))n(s,r);else for(let l of Zy(s.path))n(s,r,l)}),t}function Zy(e){let t=e.split("/");if(t.length===0)return[];let[a,...i]=t,n=a.endsWith("?"),s=a.replace(/\?$/,"");if(i.length===0)return n?[s,""]:[s];let r=Zy(i.join("/")),o=[];return o.push(...r.map(l=>l===""?s:[s,l].join("/"))),n&&o.push(...r),o.map(l=>e.startsWith("/")&&l===""?"/":l)}function Ww(e){e.sort((t,a)=>t.score!==a.score?a.score-t.score:Jw(t.routesMeta.map(i=>i.childrenIndex),a.routesMeta.map(i=>i.childrenIndex)))}const $w=/^:\w+$/,Uw=3,Kw=2,Vw=1,Hw=10,Gw=-2,om=e=>e==="*";function Xw(e,t){let a=e.split("/"),i=a.length;return a.some(om)&&(i+=Gw),t&&(i+=Kw),a.filter(n=>!om(n)).reduce((n,s)=>n+($w.test(s)?Uw:s===""?Vw:Hw),i)}function Jw(e,t){return e.length===t.length&&e.slice(0,-1).every((i,n)=>i===t[n])?e[e.length-1]-t[t.length-1]:0}function Qw(e,t){let{routesMeta:a}=e,i={},n="/",s=[];for(let r=0;r<a.length;++r){let o=a[r],l=r===a.length-1,u=n==="/"?t:t.slice(n.length)||"/",d=Yw({path:o.relativePath,caseSensitive:o.caseSensitive,end:l},u);if(!d)return null;Object.assign(i,d.params);let h=o.route;s.push({params:i,pathname:ai([n,d.pathname]),pathnameBase:n1(ai([n,d.pathnameBase])),route:h}),d.pathnameBase!=="/"&&(n=ai([n,d.pathnameBase]))}return s}function Yw(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[a,i]=Zw(e.path,e.caseSensitive,e.end),n=t.match(a);if(!n)return null;let s=n[0],r=s.replace(/(.)\/+$/,"$1"),o=n.slice(1);return{params:i.reduce((u,d,h)=>{let{paramName:g,isOptional:p}=d;if(g==="*"){let c=o[h]||"";r=s.slice(0,s.length-c.length).replace(/(.)\/+$/,"$1")}const m=o[h];return p&&!m?u[g]=void 0:u[g]=t1(m||"",g),u},{}),pathname:s,pathnameBase:r,pattern:e}}function Zw(e,t,a){t===void 0&&(t=!1),a===void 0&&(a=!0),Qc(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let i=[],n="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:(\w+)(\?)?/g,(r,o,l)=>(i.push({paramName:o,isOptional:l!=null}),l?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(i.push({paramName:"*"}),n+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):a?n+="\\/*$":e!==""&&e!=="/"&&(n+="(?:(?=\\/|$))"),[new RegExp(n,t?void 0:"i"),i]}function e1(e){try{return decodeURI(e)}catch(t){return Qc(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+t+").")),e}}function t1(e,t){try{return decodeURIComponent(e)}catch(a){return Qc(!1,'The value for the URL param "'+t+'" will not be decoded because'+(' the string "'+e+'" is a malformed URL segment. This is probably')+(" due to a bad percent encoding ("+a+").")),e}}function Yc(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let a=t.endsWith("/")?t.length-1:t.length,i=e.charAt(a);return i&&i!=="/"?null:e.slice(a)||"/"}function a1(e,t){t===void 0&&(t="/");let{pathname:a,search:i="",hash:n=""}=typeof e=="string"?Rn(e):e;return{pathname:a?a.startsWith("/")?a:i1(a,t):t,search:s1(i),hash:r1(n)}}function i1(e,t){let a=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(n=>{n===".."?a.length>1&&a.pop():n!=="."&&a.push(n)}),a.length>1?a.join("/"):"/"}function yu(e,t,a,i){return"Cannot include a '"+e+"' character in a manually specified "+("`to."+t+"` field ["+JSON.stringify(i)+"].  Please separate it out to the ")+("`to."+a+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function e_(e){return e.filter((t,a)=>a===0||t.route.path&&t.route.path.length>0)}function t_(e,t,a,i){i===void 0&&(i=!1);let n;typeof e=="string"?n=Rn(e):(n=Fs({},e),Le(!n.pathname||!n.pathname.includes("?"),yu("?","pathname","search",n)),Le(!n.pathname||!n.pathname.includes("#"),yu("#","pathname","hash",n)),Le(!n.search||!n.search.includes("#"),yu("#","search","hash",n)));let s=e===""||n.pathname==="",r=s?"/":n.pathname,o;if(i||r==null)o=a;else{let h=t.length-1;if(r.startsWith("..")){let g=r.split("/");for(;g[0]==="..";)g.shift(),h-=1;n.pathname=g.join("/")}o=h>=0?t[h]:"/"}let l=a1(n,o),u=r&&r!=="/"&&r.endsWith("/"),d=(s||r===".")&&a.endsWith("/");return!l.pathname.endsWith("/")&&(u||d)&&(l.pathname+="/"),l}const ai=e=>e.join("/").replace(/\/\/+/g,"/"),n1=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),s1=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,r1=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;function o1(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const a_=["post","put","patch","delete"];new Set(a_);const l1=["get",...a_];new Set(l1);/**
 * React Router v6.18.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function bo(){return bo=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},bo.apply(this,arguments)}const Zc=b.createContext(null),u1=b.createContext(null),En=b.createContext(null),Xo=b.createContext(null),ui=b.createContext({outlet:null,matches:[],isDataRoute:!1}),i_=b.createContext(null);function d1(e,t){let{relative:a}=t===void 0?{}:t;Hs()||Le(!1);let{basename:i,navigator:n}=b.useContext(En),{hash:s,pathname:r,search:o}=s_(e,{relative:a}),l=r;return i!=="/"&&(l=r==="/"?i:ai([i,r])),n.createHref({pathname:l,search:o,hash:s})}function Hs(){return b.useContext(Xo)!=null}function Jo(){return Hs()||Le(!1),b.useContext(Xo).location}function n_(e){b.useContext(En).static||b.useLayoutEffect(e)}function c1(){let{isDataRoute:e}=b.useContext(ui);return e?D1():p1()}function p1(){Hs()||Le(!1);let e=b.useContext(Zc),{basename:t,navigator:a}=b.useContext(En),{matches:i}=b.useContext(ui),{pathname:n}=Jo(),s=JSON.stringify(e_(i).map(l=>l.pathnameBase)),r=b.useRef(!1);return n_(()=>{r.current=!0}),b.useCallback(function(l,u){if(u===void 0&&(u={}),!r.current)return;if(typeof l=="number"){a.go(l);return}let d=t_(l,JSON.parse(s),n,u.relative==="path");e==null&&t!=="/"&&(d.pathname=d.pathname==="/"?t:ai([t,d.pathname])),(u.replace?a.replace:a.push)(d,u.state,u)},[t,a,s,n,e])}function f1(){let{matches:e}=b.useContext(ui),t=e[e.length-1];return t?t.params:{}}function s_(e,t){let{relative:a}=t===void 0?{}:t,{matches:i}=b.useContext(ui),{pathname:n}=Jo(),s=JSON.stringify(e_(i).map(r=>r.pathnameBase));return b.useMemo(()=>t_(e,JSON.parse(s),n,a==="path"),[e,s,n,a])}function m1(e,t){return h1(e,t)}function h1(e,t,a){Hs()||Le(!1);let{navigator:i}=b.useContext(En),{matches:n}=b.useContext(ui),s=n[n.length-1],r=s?s.params:{};s&&s.pathname;let o=s?s.pathnameBase:"/";s&&s.route;let l=Jo(),u;if(t){var d;let c=typeof t=="string"?Rn(t):t;o==="/"||(d=c.pathname)!=null&&d.startsWith(o)||Le(!1),u=c}else u=l;let h=u.pathname||"/",g=o==="/"?h:h.slice(o.length)||"/",p=zw(e,{pathname:g}),m=b1(p&&p.map(c=>Object.assign({},c,{params:Object.assign({},r,c.params),pathname:ai([o,i.encodeLocation?i.encodeLocation(c.pathname).pathname:c.pathname]),pathnameBase:c.pathnameBase==="/"?o:ai([o,i.encodeLocation?i.encodeLocation(c.pathnameBase).pathname:c.pathnameBase])})),n,a);return t&&m?b.createElement(Xo.Provider,{value:{location:bo({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:Ha.Pop}},m):m}function g1(){let e=x1(),t=o1(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),a=e instanceof Error?e.stack:null,n={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"},s=null;return b.createElement(b.Fragment,null,b.createElement("h2",null,"Unexpected Application Error!"),b.createElement("h3",{style:{fontStyle:"italic"}},t),a?b.createElement("pre",{style:n},a):null,s)}const y1=b.createElement(g1,null);class _1 extends b.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,a){return a.location!==t.location||a.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error||a.error,location:a.location,revalidation:t.revalidation||a.revalidation}}componentDidCatch(t,a){console.error("React Router caught the following error during render",t,a)}render(){return this.state.error?b.createElement(ui.Provider,{value:this.props.routeContext},b.createElement(i_.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function v1(e){let{routeContext:t,match:a,children:i}=e,n=b.useContext(Zc);return n&&n.static&&n.staticContext&&(a.route.errorElement||a.route.ErrorBoundary)&&(n.staticContext._deepestRenderedBoundaryId=a.route.id),b.createElement(ui.Provider,{value:t},i)}function b1(e,t,a){var i;if(t===void 0&&(t=[]),a===void 0&&(a=null),e==null){var n;if((n=a)!=null&&n.errors)e=a.matches;else return null}let s=e,r=(i=a)==null?void 0:i.errors;if(r!=null){let o=s.findIndex(l=>l.route.id&&(r==null?void 0:r[l.route.id]));o>=0||Le(!1),s=s.slice(0,Math.min(s.length,o+1))}return s.reduceRight((o,l,u)=>{let d=l.route.id?r==null?void 0:r[l.route.id]:null,h=null;a&&(h=l.route.errorElement||y1);let g=t.concat(s.slice(0,u+1)),p=()=>{let m;return d?m=h:l.route.Component?m=b.createElement(l.route.Component,null):l.route.element?m=l.route.element:m=o,b.createElement(v1,{match:l,routeContext:{outlet:o,matches:g,isDataRoute:a!=null},children:m})};return a&&(l.route.ErrorBoundary||l.route.errorElement||u===0)?b.createElement(_1,{location:a.location,revalidation:a.revalidation,component:h,error:d,children:p(),routeContext:{outlet:null,matches:g,isDataRoute:!0}}):p()},null)}var r_=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(r_||{}),wo=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(wo||{});function w1(e){let t=b.useContext(Zc);return t||Le(!1),t}function T1(e){let t=b.useContext(u1);return t||Le(!1),t}function k1(e){let t=b.useContext(ui);return t||Le(!1),t}function o_(e){let t=k1(),a=t.matches[t.matches.length-1];return a.route.id||Le(!1),a.route.id}function x1(){var e;let t=b.useContext(i_),a=T1(wo.UseRouteError),i=o_(wo.UseRouteError);return t||((e=a.errors)==null?void 0:e[i])}function D1(){let{router:e}=w1(r_.UseNavigateStable),t=o_(wo.UseNavigateStable),a=b.useRef(!1);return n_(()=>{a.current=!0}),b.useCallback(function(n,s){s===void 0&&(s={}),a.current&&(typeof n=="number"?e.navigate(n):e.navigate(n,bo({fromRouteId:t},s)))},[e,t])}function Pd(e){Le(!1)}function q1(e){let{basename:t="/",children:a=null,location:i,navigationType:n=Ha.Pop,navigator:s,static:r=!1}=e;Hs()&&Le(!1);let o=t.replace(/^\/*/,"/"),l=b.useMemo(()=>({basename:o,navigator:s,static:r}),[o,s,r]);typeof i=="string"&&(i=Rn(i));let{pathname:u="/",search:d="",hash:h="",state:g=null,key:p="default"}=i,m=b.useMemo(()=>{let c=Yc(u,o);return c==null?null:{location:{pathname:c,search:d,hash:h,state:g,key:p},navigationType:n}},[o,u,d,h,g,p,n]);return m==null?null:b.createElement(En.Provider,{value:l},b.createElement(Xo.Provider,{children:a,value:m}))}function C1(e){let{children:t,location:a}=e;return m1(Ad(t),a)}new Promise(()=>{});function Ad(e,t){t===void 0&&(t=[]);let a=[];return b.Children.forEach(e,(i,n)=>{if(!b.isValidElement(i))return;let s=[...t,n];if(i.type===b.Fragment){a.push.apply(a,Ad(i.props.children,s));return}i.type!==Pd&&Le(!1),!i.props.index||!i.props.children||Le(!1);let r={id:i.props.id||s.join("-"),caseSensitive:i.props.caseSensitive,element:i.props.element,Component:i.props.Component,index:i.props.index,path:i.props.path,loader:i.props.loader,action:i.props.action,errorElement:i.props.errorElement,ErrorBoundary:i.props.ErrorBoundary,hasErrorBoundary:i.props.ErrorBoundary!=null||i.props.errorElement!=null,shouldRevalidate:i.props.shouldRevalidate,handle:i.props.handle,lazy:i.props.lazy};i.props.children&&(r.children=Ad(i.props.children,s)),a.push(r)}),a}/**
 * React Router DOM v6.18.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Rd(){return Rd=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},Rd.apply(this,arguments)}function S1(e,t){if(e==null)return{};var a={},i=Object.keys(e),n,s;for(s=0;s<i.length;s++)n=i[s],!(t.indexOf(n)>=0)&&(a[n]=e[n]);return a}function P1(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function A1(e,t){return e.button===0&&(!t||t==="_self")&&!P1(e)}const R1=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],E1="startTransition",lm=Hr[E1];function I1(e){let{basename:t,children:a,future:i,window:n}=e,s=b.useRef();s.current==null&&(s.current=Mw({window:n,v5Compat:!0}));let r=s.current,[o,l]=b.useState({action:r.action,location:r.location}),{v7_startTransition:u}=i||{},d=b.useCallback(h=>{u&&lm?lm(()=>l(h)):l(h)},[l,u]);return b.useLayoutEffect(()=>r.listen(d),[r,d]),b.createElement(q1,{basename:t,children:a,location:o.location,navigationType:o.action,navigator:r})}const N1=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",j1=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ii=b.forwardRef(function(t,a){let{onClick:i,relative:n,reloadDocument:s,replace:r,state:o,target:l,to:u,preventScrollReset:d,unstable_viewTransition:h}=t,g=S1(t,R1),{basename:p}=b.useContext(En),m,c=!1;if(typeof u=="string"&&j1.test(u)&&(m=u,N1))try{let v=new URL(window.location.href),w=u.startsWith("//")?new URL(v.protocol+u):new URL(u),D=Yc(w.pathname,p);w.origin===v.origin&&D!=null?u=D+w.search+w.hash:c=!0}catch{}let k=d1(u,{relative:n}),y=F1(u,{replace:r,state:o,target:l,preventScrollReset:d,relative:n,unstable_viewTransition:h});function _(v){i&&i(v),v.defaultPrevented||y(v)}return b.createElement("a",Rd({},g,{href:m||k,onClick:c||s?i:_,ref:a,target:l}))});var um;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(um||(um={}));var dm;(function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(dm||(dm={}));function F1(e,t){let{target:a,replace:i,state:n,preventScrollReset:s,relative:r,unstable_viewTransition:o}=t===void 0?{}:t,l=c1(),u=Jo(),d=s_(e,{relative:r});return b.useCallback(h=>{if(A1(h,a)){h.preventDefault();let g=i!==void 0?i:vo(u)===vo(d);l(e,{replace:g,state:n,preventScrollReset:s,relative:r,unstable_viewTransition:o})}},[u,l,d,i,n,a,e,s,r,o])}const O1="/aiida-registry/pr-preview/pr-280/assets/logo-white-text-16948862.svg",M1="/aiida-registry/pr-preview/pr-280/assets/MARVEL-32e738c9.png",L1="/aiida-registry/pr-preview/pr-280/assets/MaX-099f261c.png";const B1={"aiida-QECpWorkChain":{code_home:"https://github.com/rikigigi/aiida-QECpWorkChain",development_status:"beta",entry_point_prefix:"qecpworkchain",pip_url:"git+https://github.com/rikigigi/aiida-QECpWorkChain",name:"aiida-QECpWorkChain",package_name:"aiida_QECpWorkChain",hosted_on:"github.com",metadata:{author:"Riccardo Bertossa",author_email:"rbertoss@sissa.it",version:"0.2.0a0",description:"Car-Parrinello Work Chain with Quantum Espresso. This workchain does a full CP simulation, from the choice of the electronic mass and the timestep, to the choice of the best parallelization options, and then it does the NPT equilibration and a final NVE simulation at the prescribed P and T. Automates as much as possible.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: GNU General Public License v3 (GPLv3)","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.workflows":{"qecpworkchain.cp":{description:["No description available"],spec:{inputs:[{name:"cp_code",required:!0,valid_types:"Code",info:""},{name:"cp_resources_cg_list",required:!0,valid_types:"List",info:"Same as cp_resources_cp_list but when doing a CG. The CG uses a different amount of resource and can use no band or task group parallelization."},{name:"cp_resources_cp_list",required:!0,valid_types:"List",info:`List of dictionary like the following:
{
 'resources' : {
   'num_machines' : 2,
   'num_mpiprocs_per_machine' : 48,
 },
 'wallclock' : 3600,
 'queue' : 'queue_name',
 'account': 'account_name',
}
c,porturrently only the first element of the list is used.
'wallclock' is the maximum time that can be requested to the scheduler. This code can decide to ask for less.
`},{name:"ecutwfc",required:!0,valid_types:"Float",info:"wavefunction cutoff (Ry), like in the QE input"},{name:"pseudo_family",required:!0,valid_types:"Str",info:"pseudopotential family to use, as in usual aiida operations"},{name:"pw_code",required:!0,valid_types:"Code",info:"input pw code (used to calculate force ratio)"},{name:"pw_resources_list",required:!0,valid_types:"List",info:"Same as cp_resources_cp_list but for pw.x code."},{name:"structure",required:!0,valid_types:"StructureData, TrajectoryData",info:"Input structure. If a trajectory is given, the workchain will use its last step to start the CG. If velocities are present, they will be used to initialize the simulation. Note that if you use a trajectory, usually kind information (like mass) are not included, so default values will be used. If you want to include kind information or override those provided with the input structure, use the input structure_kinds"},{name:"thermobarostat_points",required:!0,valid_types:"List",info:'List of dicts, each with the format [ { "temperature_K": 1000, "pressure_KBar": 10 , "equilibration_time_ps": 5.0, "thermostat_time_ps": 5.0} ]. The simulation will loop over this list of dictionaries, in the same order, equilibrating for the specified time at the given P,T point. Every point is repeated if the average T and P are not within the specified ranges'},{name:"additional_parameters_cp",required:!1,valid_types:"Dict",info:"parameters that will be included in the settings input of the QE CP plugin. These settings will be added on top of the default one. Same format as plugin input"},{name:"adjust_ionic_mass",required:!1,valid_types:"Bool",info:"Multiply the mass of the ions by the corresponding force ration between the cp forces and pw forces -- that is less than 1. Note that averages of static properties do not depend on the ionic masses."},{name:"benchmark_emass_dt_walltime_s",required:!1,valid_types:"Float",info:"same as benchmark_parallel_walltime_s but for dermining the best electronic mass and timestep."},{name:"benchmark_parallel_walltime_s",required:!1,valid_types:"Float",info:"time requested to the scheduler during the test for finding the best parallelization parameters."},{name:"cmdline_cp",required:!1,valid_types:"List, NoneType",info:"additional command line parameters of the cp verlet caclulations only (for example parallelization options)"},{name:"default_nose_frequency",required:!1,valid_types:"Float",info:"default nose frequency when a frequency cannot be estimated from the vibrational spectrum"},{name:"dt",required:!1,valid_types:"Float, NoneType",info:"timestep in atomic units, if not automatically chosen."},{name:"dt_start_stop_step",required:!1,valid_types:"List",info:"list of timesteps to try. Timesteps are changed to better integrate the equation of motion. When a new electronic mass is selected by this workchain timesteps are automatically adjusted."},{name:"emass",required:!1,valid_types:"Float, NoneType",info:"electronic mass, atomic mass units, if not automatically chosen"},{name:"emass_list",required:!1,valid_types:"List",info:"list of electronic masses to try. The emass is selected in order to satisfy the requested CP/DFT force ratio."},{name:"initial_atomic_velocities_A_ps",required:!1,valid_types:"ArrayData, NoneType",info:"optional input initial velocities in angstrom over picoseconds"},{name:"max_slope_const",required:!1,valid_types:"Float",info:"max slope in K/ps of the constant of motion linear fit."},{name:"max_slope_ekinc",required:!1,valid_types:"Float",info:"max slope in K/ps of the ekinc linear fit. If not satisfied try to change emass"},{name:"max_slope_min_emass",required:!1,valid_types:"Float",info:"minimum possible value of electronic mass that can be set by the max_slope correction routine. Will not go lower than that."},{name:"max_slope_min_ps",required:!1,valid_types:"Float",info:"minimum required lenght in ps of the last trajectory to do the linear fit on ekinc and const of motion"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_traj_steps_vdos",required:!1,valid_types:"Int",info:"minimum number of steps to consider the calculated vibrational spectrum maximum valid, to set the thermostat frequency"},{name:"minimum_nose_frequency",required:!1,valid_types:"Float",info:"minimum nose frequency: if the frequency estimated from the vibrational spectrum is lower than this value, this value is used"},{name:"nstep_initial_cg",required:!1,valid_types:"Int",info:"At the beginning of the simulation the CP algorithm is not used. This is the number of steps to do using Born-Oppenheimer molecular dynamics algorithm with a conjugate gradient minimization of the electronic ground state."},{name:"nstep_parallel_test",required:!1,valid_types:"Int",info:"the benchmark simulations will be that long, if performed"},{name:"number_of_pw_per_trajectory",required:!1,valid_types:"Int",info:"Number of pw submitted for every trajectory during calculation of force ratio."},{name:"nve_required_picoseconds",required:!1,valid_types:"Float",info:"The equilibrated NVE simulation will last at least this number of picoseconds. How much picoseconds do you want?"},{name:"pressure_tolerance",required:!1,valid_types:"Float",info:"Pressure tolerance in kBar used to say if the npt is equilibrated. If not setted, use the standard deviation of the P time series"},{name:"skip_emass_dt_test",required:!1,valid_types:"Bool",info:""},{name:"skip_parallel_test",required:!1,valid_types:"Bool",info:"do not run run benchmarks to discover a good internal Quantum Espresso parallelization scheme for the current system"},{name:"skip_thermobarostat",required:!1,valid_types:"Bool",info:""},{name:"structure_kinds",required:!1,valid_types:"List, NoneType",info:'These kinds will be used to override or set the masses of the various atomic types. Note that the workflow, if skip_emass_dt_test is True, will calculate the ratio between cp forces and pw forces and adjust the provided masses automatically according to this ratio. So if you provide this input, make sure to set skip_emass_dt_test to True and set also the inputs emass and dt, or "bad things can happen"'},{name:"target_force_ratio",required:!1,valid_types:"Float",info:"The forces calculated by the Car-Parrinello method are affected by two types of error: one is due to the oscillations of the electrons around the DFT energy minimum, and the second is due to the finite mass of the electronic fluid that produces a _sistematic_ error in the forces, as if the electrons add mass to the ionic core. This second kind of error is can be controlled by this parameter, that tries to adjust the electronic mass to obtain the desidered ratio between CP forces and true DFT forces. Then you may want to modify the ionic mass to correct the leading factor of this error."},{name:"temperature_tolerance",required:!1,valid_types:"Float",info:"Temperature tolerance in K used to say if the npt is equilibrated. If not setted, use the standard deviation of the T time series"},{name:"tempw_initial_random",required:!1,valid_types:"Float, NoneType",info:"If provided, sets the initial temperature when randomly initializing the starting velocities."}],outputs:[{name:"cmdline_cp",required:!0,valid_types:"",info:""},{name:"dt",required:!0,valid_types:"",info:""},{name:"emass",required:!0,valid_types:"",info:""},{name:"full_traj",required:!0,valid_types:"",info:""},{name:"kinds",required:!0,valid_types:"",info:""},{name:"nve_prod_traj",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The initial cg steps failed. I cannot start to work."},{status:402,message:"Nose-Hoover thermostat failed."},{status:403,message:"Final cg after Nose-Hoover failed."},{status:404,message:"Error in the NVE simulation"},{status:405,message:"The simulations are calculating very expensive random numbers. There is something wrong (cutoff? metal? boo?)"},{status:406,message:"Wrong input parameters"},{status:407,message:"Parallel test was not succesful, maybe there is something more wrong."},{status:408,message:"Multiple errors in the simulation that cannot fix."},{status:409,message:"This is a bug in the workchain."}]},class:"aiida_QECpWorkChain.workflow:CpWorkChain"}}},commits_count:5,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/rikigigi/aiida-QECpWorkChain",is_installable:"True"},"aiida-abinit":{code_home:"https://github.com/sponce24/aiida-abinit",entry_point_prefix:"abinit",pip_url:"aiida-abinit",plugin_info:"https://raw.github.com/sponce24/aiida-abinit/master/setup.json",name:"aiida-abinit",package_name:"aiida_abinit",hosted_on:"github.com",metadata:{release_date:"2023-10-04",description:"The AiiDA plugin for ABINIT.",author_email:"Samuel Ponce <samuel.pon@gmail.com>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"0.5.0"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{abinit:{description:["AiiDA calculation plugin wrapping the abinit executable."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The k-point mesh or path"},{name:"parameters",required:!0,valid_types:"Dict",info:"The ABINIT input parameters."},{name:"pseudos",required:!0,valid_types:"Psp8Data, JthXmlData",info:"The pseudopotentials."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder used for restarts."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Various special settings."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Various output quantities."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Final electronic bands if present."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Final structure of the calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:"Trajectory of various output quantities over the calculation if present."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"Calculation did not produce all expected output files."},{status:101,message:"Calculation did not produce the expected `[prefix]o_GSR.nc` output file."},{status:102,message:"Calculation did not produce the expected `[prefix]o_HIST.nc` output file."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the `stdout` output file."},{status:301,message:"The `stdout` output file could not be read."},{status:302,message:"The `stdout` output file could not be parsed."},{status:303,message:"The `abipy` `EventsParser` reports that the runw as not completed."},{status:304,message:"The output file contains one or more error messages."},{status:305,message:"The output file contains one or more warning messages."},{status:312,message:"The output structure could not be parsed."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:500,message:"The SCF minimization cycle did not converge."},{status:501,message:"The ionic minimization cycle did not converge."}]},class:"aiida_abinit.calculations:AbinitCalculation"}},"aiida.parsers":{abinit:"aiida_abinit.parsers:AbinitParser"},"aiida.workflows":{"abinit.base":{description:["Base Abinit Workchain to perform a DFT calculation. Validates parameters and restart."],spec:{inputs:[{name:"abinit",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"An explicit k-points mesh or list. Either this or `kpoints_distance` must be provided."},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The minimum desired distance in 1/Å between k-points in reciprocal space. The explicit k-point mesh will be generated automatically by a calculation function based on the input structure."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Various output quantities."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Final electronic bands if present."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Final structure of the calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:"Trajectory of various output quantities over the calculation if present."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"`pseudos` could not be used to get the necessary pseudos."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified."},{status:203,message:"Neither the `options` nor `automatic_parallelization` input was specified."},{status:204,message:"The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_abinit.workflows.base:AbinitBaseWorkChain"}}},commits_count:16,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-abinit",is_installable:"True"},"aiida-aenet":{code_home:"https://gitlab.com/lattice737/aiida-aenet",development_status:"planning",entry_point_prefix:"aenet",pip_url:"https://gitlab.com/lattice737/aiida-aenet",name:"aiida-aenet",package_name:"aiida_aenet",hosted_on:"gitlab.com",metadata:{author:"Nicholas Martinez",author_email:"nicholasmartinez@my.unt.edu",version:"0.1.0",description:"AiiDA plugin to construct machine-learning potentials using aenet",classifiers:["Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Development Status :: 0 - Alpha"]},aiida_version:"~=1.2",entry_points:{"aiida.data":{"aenet.algorithm":"aiida_aenet.data.algorithm:AenetAlgorithm","aenet.potential":"aiida_aenet.data.potentials:AenetPotential"},"aiida.calculations":{"aenet.cur":"aiida_aenet.calculations.cur:CurCalculation","aenet.generate":"aiida_aenet.calculations.generate:AenetGenerateCalculation","aenet.predict":"aiida_aenet.calculations.predict:AenetPredictCalculation","aenet.simulate":"aiida_aenet.calculations.simulate:AenetLammpsMdCalculation","aenet.train":"aiida_aenet.calculations.train:AenetTrainCalculation","aenet.transform":"aiida_aenet.calculations.transform:TransformCalculation"},"aiida.parsers":{"aenet.generate":"aiida_aenet.parsers.generate:AenetGenerateParser","aenet.predict":"aiida_aenet.parsers.predict:AenetPredictParser","aenet.simulate":"aiida_aenet.parsers.simulate:AenetLammpsMdParser","aenet.train":"aiida_aenet.parsers.train:AenetTrainParser"},"aiida.workflows":{"aenet.build_reference":"aiida_aenet.workflows.build_reference:BuildReferenceWorkChain","aenet.compare_simulations":"aiida_aenet.workflows.compare_simulations:CompareSimulationsWorkChain","aenet.make_potential":"aiida_aenet.workflows.make_potential:MakePotentialWorkChain","aenet.make_structures":"aiida_aenet.workflows.make_structures:MakeStructuresWorkChain"},"aenet.potentials":{"lammps.ann":"aiida_aenet.data.potentials.lammps:ANN"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:6},{colorclass:"brown",text:"Parsers",count:4},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:4},{colorclass:"orange",text:"Other (Aenet potentials)",count:1}],pip_install_cmd:"pip install https://gitlab.com/lattice737/aiida-aenet"},"aiida-alloy":{code_home:"https://github.com/DanielMarchand/aiida-alloy",development_status:"beta",entry_point_prefix:"alloy",pip_url:"git+https://github.com/DanielMarchand/aiida-alloy",name:"aiida-alloy",package_name:"aiida_alloy",hosted_on:"github.com",metadata:{author:"The AiiDA developers group",author_email:"",version:"0.1.0a0",description:"Aiida Workflows for Elastic Constants using Quantum Espresso",classifiers:["Programming Language :: Python"]},aiida_version:">=1.0.0a0",entry_points:{"aiida.workflows":{elastic:"aiida_alloy.workflows.ElasticWorkChain:ElasticWorkChain"}},commits_count:2,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-alloy<pre>Collecting git+https://github.com/DanielMarchand/aiida-alloy
  Cloning https://github.com/DanielMarchand/aiida-alloy to /tmp/pip-req-build-9ro2bjy9
  Running command git clone --filter=blob:none --quiet https://github.com/DanielMarchand/aiida-alloy /tmp/pip-req-build-9ro2bjy9
  Resolved https://github.com/DanielMarchand/aiida-alloy to commit dfae54b29291dfe94d4a5ca136738020f447bc1e
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py egg_info did not run successfully.
  │ exit code: 1
  ╰─> [6 lines of output]
      Traceback (most recent call last):
        File "<string>", line 2, in <module>
        File "<pip-setuptools-caller>", line 34, in <module>
        File "/tmp/pip-req-build-9ro2bjy9/setup.py", line 20, in <module>
          long_description=open('README.md').read(),
      FileNotFoundError: [Errno 2] No such file or directory: 'README.md'
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'elastic' does not start with prefix 'alloy.'"],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/DanielMarchand/aiida-alloy",is_installable:"False"},"aiida-ase":{code_home:"https://github.com/aiidateam/aiida-ase",documentation_url:"https://aiida-ase.readthedocs.io/",entry_point_prefix:"ase",pip_url:"aiida-ase",plugin_info:"https://raw.github.com/aiidateam/aiida-ase/master/setup.json",name:"aiida-ase",package_name:"aiida_ase",hosted_on:"github.com",metadata:{release_date:"2023-10-04",description:"The official AiiDA plugin for ASE.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"3.0.0"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"ase.ase":{description:["`CalcJob` implementation that can be used to wrap around the ASE calculators."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the namelists."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"The k-points to use for the calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional settings that control the plugin."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"array",required:!1,valid_types:"ArrayData",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:""},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"One of the expected output files was missing."},{status:301,message:"The log file from the DFT code was not written out."},{status:302,message:"Relaxation did not complete."},{status:303,message:"SCF Failed."},{status:305,message:"Cannot identify what went wrong."},{status:306,message:"gpaw could not find the PAW potentials."},{status:307,message:"Attribute Error found in the stderr file."},{status:308,message:"Fermi level is infinite."},{status:400,message:"The calculation ran out of walltime."}]},class:"aiida_ase.calculations.ase:AseCalculation"}},"aiida.parsers":{"ase.ase":"aiida_ase.parsers.ase:AseParser","ase.gpaw":"aiida_ase.parsers.gpaw:GpawParser"},"aiida.workflows":{"ase.gpaw.base":{description:["Workchain to run a GPAW calculation with automated error handling and restarts."],spec:{inputs:[{name:"gpaw",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"k-points to use for the calculation."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"array",required:!1,valid_types:"ArrayData",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:""},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_ase.workflows.base:GpawBaseWorkChain"}}},commits_count:13,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-ase",is_installable:"True"},"aiida-autocas":{entry_point_prefix:"autocas",code_home:"https://github.com/microsoft/aiida-autocas",version_file:"https://raw.githubusercontent.com/microsoft/aiida-autocas/main/aiida_autocas/__init__.py",pip_url:"git+https://github.com/microsoft/aiida-autocas",name:"aiida-autocas",package_name:"aiida_autocas",hosted_on:"github.com",metadata:{version:"0.1.0",description:"AiiDA AutoCAS Plugin",classifiers:[]},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{autocas:"aiida_autocas.calculations:AutoCASCalculation"},"aiida.parsers":{autocas:"aiida_autocas.parsers:AutoCASParser"}},commits_count:11,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/microsoft/aiida-autocas"},"aiida-bader":{entry_point_prefix:"bader",pip_url:"aiida-bader",code_home:"https://github.com/superstar54/aiida-bader",documentation_url:"https://aiida-bader.readthedocs.io/en/latest/",name:"aiida-bader",package_name:"aiida_bader",hosted_on:"github.com",metadata:{release_date:"2023-10-06",description:"AiiDA plugin for bader code.",author:"Xing Wang",author_email:"xingwang1991@gmail.com",license:"MIT License",home_page:"https://github.com/superstart54/aiida-bader",version:"0.0.1"},aiida_version:"*",entry_points:{"aiida.calculations":{bader:"aiida_bader.calculations:BaderCalculation"},"aiida.parsers":{bader:"aiida_bader.parsers:BaderParser"},"aiida.workflows":{"bader.qe":"aiida_bader.workchains:QeBaderWorkChain"}},commits_count:3,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-bader"},"aiida-bands-inspect":{code_home:"https://github.com/greschd/aiida-bands-inspect",documentation_url:"https://aiida-bands-inspect.readthedocs.io",entry_point_prefix:"bands_inspect",pip_url:"aiida-bands-inspect",name:"aiida-bands-inspect",package_name:"aiida_bands_inspect",hosted_on:"github.com",metadata:{release_date:"2020-03-26",description:"AiiDA Plugin for running bands_inspect",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-bands-inspect.readthedocs.io",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.4.0"},aiida_version:null,entry_points:{"aiida.calculations":{"bands_inspect.align":"aiida_bands_inspect.calculations.align:AlignCalculation","bands_inspect.difference":"aiida_bands_inspect.calculations.difference:DifferenceCalculation","bands_inspect.plot":"aiida_bands_inspect.calculations.plot:PlotCalculation"},"aiida.parsers":{"bands_inspect.bands":"aiida_bands_inspect.parsers.bands:BandsParser","bands_inspect.difference":"aiida_bands_inspect.parsers.difference:DifferenceParser","bands_inspect.align":"aiida_bands_inspect.parsers.align:AlignParser","bands_inspect.plot":"aiida_bands_inspect.parsers.plot:PlotParser"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E002'>E002</a>: Failed to import package aiida_bands_inspect<pre>Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/opt/conda/lib/python3.9/site-packages/aiida_bands_inspect/__init__.py", line 8, in <module>
    from . import calculations
  File "/opt/conda/lib/python3.9/site-packages/aiida_bands_inspect/calculations/__init__.py", line 9, in <module>
    from . import difference
  File "/opt/conda/lib/python3.9/site-packages/aiida_bands_inspect/calculations/difference.py", line 11, in <module>
    from aiida.orm import JobCalculation, DataFactory
ImportError: cannot import name 'JobCalculation' from 'aiida.orm' (/opt/conda/lib/python3.9/site-packages/aiida/orm/__init__.py)
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:4}],pip_install_cmd:"pip install aiida-bands-inspect",is_installable:"True"},"aiida-bigdft":{code_home:"https://github.com/BigDFT-group/aiida-bigdft-plugin",development_status:"beta",entry_point_prefix:"bigdft",pip_url:"aiida-bigdft",plugin_info:"https://raw.github.com/BigDFT-group/aiida-bigdft-plugin/master/setup.json",name:"aiida-bigdft",package_name:"aiida_bigdft",hosted_on:"github.com",metadata:{release_date:"2021-03-16",description:"Aiida plugin for BigDFT code",author:"The BigDFT Team",author_email:"bigdft-developers@lists.launchpad.net",license:"MIT",home_page:"https://github.com/BigDFT-group/aiida-bigdft-plugin",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.6"},aiida_version:">=1.1.1,<2.0.0",entry_points:{"aiida.calculations":{bigdft:"aiida_bigdft.calculations.bigdft:BigDFTCalculation","bigdft.postscript":"aiida_bigdft.calculations.postscript:ScriptCalculation"},"aiida.cmdline.data":{bigdft:"aiida_bigdft.cli:data_cli"},"aiida.data":{bigdft:"aiida_bigdft.data:BigDFTParameters",bigdft_logfile:"aiida_bigdft.data:BigDFTLogfile"},"aiida.parsers":{bigdft:"aiida_bigdft.parsers:BigDFTParser"},"aiida.workflows":{bigdft:"aiida_bigdft.workflows.base:BigDFTBaseWorkChain","bigdft.relax":"aiida_bigdft.workflows.relax:BigDFTRelaxWorkChain"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-bigdft<pre>Collecting aiida-bigdft
  Downloading aiida-bigdft-0.2.6.tar.gz (183 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 184.0/184.0 kB 11.4 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-bigdft to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida-bigdft-0.2.5.tar.gz (186 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 186.5/186.5 kB 36.7 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
  Downloading aiida-bigdft-0.2.4.tar.gz (121 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 121.3/121.3 kB 25.2 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
  Downloading aiida-bigdft-0.2.3.tar.gz (121 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 121.2/121.2 kB 22.1 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
  Downloading aiida_bigdft-0.2.2a0-py3-none-any.whl (129 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 129.4/129.4 kB 29.8 MB/s eta 0:00:00
  Downloading aiida-bigdft-0.2.1a2.tar.gz (112 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 112.6/112.6 kB 29.8 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
  Downloading aiida-bigdft-0.2.1a1.tar.gz (108 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 108.5/108.5 kB 22.6 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
  Downloading aiida-bigdft-0.2.1a0.tar.gz (108 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 108.3/108.3 kB 28.4 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is still looking at multiple versions of aiida-bigdft to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida-bigdft-0.2.0a0.tar.gz (109 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 109.4/109.4 kB 19.0 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
  Downloading aiida_bigdft-0.1.0a0-py3-none-any.whl (192 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 192.9/192.9 kB 24.7 MB/s eta 0:00:00
ERROR: Cannot install aiida-bigdft==0.1.0a0, aiida-bigdft==0.2.0a0, aiida-bigdft==0.2.1a0, aiida-bigdft==0.2.1a1, aiida-bigdft==0.2.1a2, aiida-bigdft==0.2.2a0, aiida-bigdft==0.2.3, aiida-bigdft==0.2.4, aiida-bigdft==0.2.5 and aiida-bigdft==0.2.6 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-bigdft 0.2.6 depends on aiida-core<2.0.0 and >=1.1.1
    aiida-bigdft 0.2.5 depends on aiida-core<2.0.0 and >=1.1.1
    aiida-bigdft 0.2.4 depends on aiida-core<2.0.0 and >=1.1.1
    aiida-bigdft 0.2.3 depends on aiida-core<2.0.0 and >=1.1.1
    aiida-bigdft 0.2.2a0 depends on aiida-core<2.0.0 and >=1.1.1
    aiida-bigdft 0.2.1a2 depends on aiida-core<2.0.0 and >=1.1.1
    aiida-bigdft 0.2.1a1 depends on aiida-core<2.0.0 and >=1.1.1
    aiida-bigdft 0.2.1a0 depends on aiida-core<2.0.0 and >=1.1.1
    aiida-bigdft 0.2.0a0 depends on aiida-core<2.0.0 and >=1.0.0b3
    aiida-bigdft 0.1.0a0 depends on aiida-core<2.0.0 and >=1.0.0b3
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:2},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-bigdft",is_installable:"False"},"aiida-castep":{code_home:"https://gitlab.com/bz1/aiida-castep",development_status:"stable",documentation_url:"https://aiida-castep.readthedocs.io/",entry_point_prefix:"castep",pip_url:"aiida-castep",plugin_info:"https://gitlab.com/bz1/aiida-castep/raw/master/setup.json",name:"aiida-castep",package_name:"aiida_castep",hosted_on:"gitlab.com",metadata:{release_date:"2022-05-26",description:"AiiDA plugin for CASTEP",author:"Bonan Zhu",author_email:"zhubonan@outlook.com",license:"MIT License",home_page:"https://github.com/zhubonan/aiida-castep",classifiers:["Framework :: AiiDA","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.1"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"castep.castep":{description:["Class representing a generic CASTEP calculation -","    This class should work for all types of calculations."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"A node that defines the input parameters"},{name:"pseudos",required:!0,valid_types:"",info:"Use nodes for the pseudopotentails of one ofthe element in the structure. You should pass aa dictionary specifying the pseudpotential node foreach kind such as {O: <PsudoNode>}"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: bandstructure"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"elnes_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: elnes"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Use a node defining the kpoints for the calculation"},{name:"magres_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: magres"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optics_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: optics"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"phonon_fine_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"phonon_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"A node for additional settings"},{name:"spectral_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: spectral"},{name:"supercell_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Parsed results in a dictionary format."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation terminated gracefully, end found"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"SCF Cycles failed to reach convergence"},{status:103,message:"Stopped execuation due to detection of 'stop ' keyword in param file."},{status:104,message:"CASTEP generate error files. Check them for details"},{status:105,message:"Cannot find the end of calculation"},{status:106,message:"No output .castep files found"},{status:107,message:"Calculation self-terminated due to time limit"},{status:108,message:"No retrieve folder is found"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"UNKOWN ERROR"},{status:501,message:"At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."}]},class:"aiida_castep.calculations.castep:CastepCalculation"},"castep.ts":{description:["CASTEP calculation for transition state search. Use an extra input product structure."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"A node that defines the input parameters"},{name:"product_structure",required:!0,valid_types:"StructureData",info:"Product structure for transition state search."},{name:"pseudos",required:!0,valid_types:"",info:"Use nodes for the pseudopotentails of one ofthe element in the structure. You should pass aa dictionary specifying the pseudpotential node foreach kind such as {O: <PsudoNode>}"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: bandstructure"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"elnes_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: elnes"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Use a node defining the kpoints for the calculation"},{name:"magres_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: magres"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optics_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: optics"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"phonon_fine_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"phonon_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"A node for additional settings"},{name:"spectral_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: spectral"},{name:"supercell_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Parsed results in a dictionary format."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation terminated gracefully, end found"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"SCF Cycles failed to reach convergence"},{status:103,message:"Stopped execuation due to detection of 'stop ' keyword in param file."},{status:104,message:"CASTEP generate error files. Check them for details"},{status:105,message:"Cannot find the end of calculation"},{status:106,message:"No output .castep files found"},{status:107,message:"Calculation self-terminated due to time limit"},{status:108,message:"No retrieve folder is found"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"UNKOWN ERROR"},{status:501,message:"At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."}]},class:"aiida_castep.calculations.castep:CastepTSCalculation"}},"aiida.cmdline.data":{"castep-helper":"aiida_castep.cmdline.helper_cmd:helper_cmd","castep-pseudos":"aiida_castep.cmdline.otfg_cmd:pseudos_cmd"},"aiida.data":{"castep.otfgdata":"aiida_castep.data.otfg:OTFGData","castep.uspdata":"aiida_castep.data.usp:UspData"},"aiida.groups":{"castep.otfg":"aiida_castep.data.otfg:OTFGGroup"},"aiida.parsers":{"castep.castep":"aiida_castep.parsers.castep:CastepParser"},"aiida.tests":{"castep.calculation":"aiida_castep.tests.dbtests.dbtestcalculation"},"aiida.tools.calculations":{"castep.castep":"aiida_castep.calculations.tools:CastepCalcTools"},"aiida.workflows":{"castep.altrelax":{description:["A relaxation workflow that alternates between fixed cell and unfixed cell","    This is meidate the problem in CASTEP where if the cell is partially constraints","    the convergence would be very slow.","","    To overcome this problem, the structure should be relaxed with cell constraints","    then restart with fixed cell and repeat.","","    Following fields can be used in ``relax_options``","","    :var_cell_iter_max: Maximum iterations in variable cell relaxation, default to 10","","    :fix_cell_iter_max: Maximum iterations in fixed cell relaxation, default to 20"],spec:{inputs:[{name:"base",required:!0,valid_types:"Data",info:""},{name:"calc",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for relaxation."},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations at the end of the workchain. The default is not performing any cleaning."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax_options",required:!1,valid_types:"Dict, NoneType",info:"Options for relaxation."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed structure."},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"Subprocess lauched has failed in the relax stage"},{status:102,message:"Geometry optimisation is not converged but the maximum iteration is exceeded."},{status:201,message:"NO cell_constraints find in the input"}]},class:"aiida_castep.workflows.relax:CastepAlterRelaxWorkChain"},"castep.bands":{description:["Workchain for running bands calculation.","","    This workchain does the following:","","    1. Relax the structure if requested (eg. inputs passed to the relax namespace).","    2. Optionally: Do a SCF singlepoint calculation","    3. Do combined SCF + non-SCF calculation for bands and dos.","","    Inputs must be passed for the SCF calculation (dispatched to bands and DOS),","    others are optional.","","    Input for bands and dos calculations are optional. However, if they are needed, the full list of inputs must","    be passed. For the `parameters` node, one may choose to only specify those fields that need to be updated."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:"Inputs for SCF workchain, mandatory. Used as template for bands/dos if not supplied separately"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bands",required:!1,valid_types:"Data",info:"Inputs for bands calculation, if needed"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints for the bands"},{name:"bands_kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"Spacing for band distances, used by seekpath"},{name:"clean_children_workdir",required:!1,valid_types:"Str, NoneType",info:"What part of the called children to clean"},{name:"dos",required:!1,valid_types:"Data",info:"Inputs for DOS calculation, if needed"},{name:"dos_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Kpoints for running DOS calculations"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"only_dos",required:!1,valid_types:"",info:"Flag for running only DOS calculations"},{name:"options",required:!1,valid_types:"",info:"Options for this workchain. Supported keywords: dos_smearing, dos_npoints."},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for Relaxation workchain, if needed"},{name:"run_separate_scf",required:!1,valid_types:"",info:"Flag for running a separate SCF calculation, default to False"}],outputs:[{name:"band_structure",required:!0,valid_types:"",info:"Computed band structure with labels"},{name:"dos_bands",required:!1,valid_types:"",info:"Bands from the DOS calculation"},{name:"primitive_structure",required:!1,valid_types:"",info:"Primitive structure used for band structure calculations"},{name:"seekpath_parameters",required:!1,valid_types:"",info:"Parameters used by seekpath"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:501,message:"Relaxation workchain failed"},{status:502,message:"SCF workchain failed"},{status:503,message:"Band structure workchain failed"},{status:504,message:"DOS workchain failed"}]},class:"aiida_castep.workflows.bands:CastepBandsWorkChain"},"castep.base":{description:["A basic workchain for generic CASTEP calculations.","    We try to handle erros such as walltime exceeded or SCF not converged"],spec:{inputs:[{name:"calc",required:!0,valid_types:"Data",info:""},{name:"calc_options",required:!1,valid_types:"Dict, NoneType",info:"Options to be passed to calculations's metadata.options"},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations or not, the default is not clean."},{name:"continuation_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"ensure_gamma_centering",required:!1,valid_types:"Bool, NoneType",info:"Ensure the kpoint grid is gamma centred."},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Kpoint spacing"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of restarts"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Options specific to the workchain.Avaliable options: queue_wallclock_limit, use_castep_bin"},{name:"pseudos_family",required:!1,valid_types:"Str, NoneType",info:"Pseudopotential family to be used"},{name:"reuse_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The maximum number of iterations has been exceeded"},{status:201,message:"The maximum length of the wallclocks has been exceeded"},{status:301,message:"CASTEP generated error files and is not recoverable"},{status:302,message:"Cannot reach SCF convergence despite restart efforts"},{status:400,message:"The stop flag has been put in the .param file to request termination of the calculation."},{status:900,message:"Input validate is failed"},{status:901,message:"Completed one iteration but found not calculation returned"},{status:1e3,message:"Error is not known"}]},class:"aiida_castep.workflows.base:CastepBaseWorkChain"},"castep.relax":{description:["WorkChain to relax structures.","    Restart the relaxation calculation until the structure is fully relaxed.","    Each CASTEP relaxation may finish without error with not fully relaxed structure","    if the number of iteration is exceeded (*geom_max_iter*).","    This workchain try to restart such calculations (wrapped in CastepBaseWorkChain)","    until the structure is fully relaxed","","    ``relax_options`` is a Dict of the options avaliable fields are:","","    - restart_mode: mode of restart, choose from ``reuse`` (default), ``structure``,","      ``continuation``.","    - bypass: Bypass relaxation control - e.g. no checking of the convergence.","      Can be used for doing singlepoint calculation."],spec:{inputs:[{name:"base",required:!0,valid_types:"Data",info:""},{name:"calc",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for relaxation."},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations at the end of the workchain. The default is not performing any cleaning."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax_options",required:!1,valid_types:"Dict, NoneType",info:"Options for relaxation."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed structure."},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"Subprocess lauched has failed in the relax stage"},{status:102,message:"Geometry optimisation is not converged but the maximum iteration is exceeded."}]},class:"aiida_castep.workflows.relax:CastepRelaxWorkChain"}},console_scripts:{"castep.mock":"aiida_castep.cmdline.mock_castep:mock_castep"}},commits_count:1,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:4},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Groups, Tests, ...)",count:5}],pip_install_cmd:"pip install aiida-castep",is_installable:"True"},"aiida-catmap":{code_home:"https://github.com/sudarshanv01/aiida-catmap",entry_point_prefix:"catmap",name:"aiida-catmap",package_name:"aiida_catmap",hosted_on:"github.com",metadata:{author:"Sudarshan Vijay",author_email:"vijays@fysik.dtu.dk",version:"0.2.0a0",description:"AiiDA package that interfaces with Kinetic modelling code CatMAP",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.1.0,<2.0.0",entry_points:{"aiida.calculations":{catmap:"aiida_catmap.calculations.catmap:CatMAPCalculation"},"aiida.parsers":{catmap:"aiida_catmap.parsers.catmap:CatMAPParser"}},commits_count:0,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"See source code repository."},"aiida-catmat":{code_home:"https://github.com/pzarabadip/aiida-catmat",entry_point_prefix:"catmat",development_status:"beta",documentation_url:"https://aiida-catmat.readthedocs.io/",pip_url:"aiida-catmat",name:"aiida-catmat",package_name:"aiida_catmat",hosted_on:"github.com",metadata:{release_date:"2022-07-21",description:"Collection of AiiDA WorkChains Developed in Morgan Group",author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",license:"MIT License",home_page:"https://github.com/pzarabadip/aiida-catmat",classifiers:["Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"1.0.0b0"},aiida_version:null,entry_points:{"aiida.parsers":{vasp_base_parser:"aiida_catmat.parsers:VaspBaseParser"},"aiida.workflows":{"vasp.base":"aiida_catmat.workchains:VaspBaseWorkChain","catmat.vasp_multistage":"aiida_catmat.workchains:VaspMultiStageWorkChain","catmat.vasp_converge":"aiida_catmat.workchains:VaspConvergeWorkChain","catmat.vasp_catmat":"aiida_catmat.workchains:VaspCatMatWorkChain","catmat.vasp_multistage_ddec":"aiida_catmat.workchains:VaspMultiStageDdecWorkChain"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-catmat<pre>Collecting aiida-catmat
  Downloading aiida-catmat-1.0.0b0.tar.gz (27 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
ERROR: Packages installed from PyPI cannot depend on packages which are not also hosted on PyPI.
aiida-catmat depends on aiida-vasp@ git+https://github.com/aiida-vasp/aiida-vasp.git@14771c14ac5ccb08ac521d5936eb0c4ec5b9337f
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'vasp_base_parser' does not start with prefix 'catmat.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'vasp.base' does not start with prefix 'catmat.'"],summaryinfo:[{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:5}],pip_install_cmd:"pip install --pre aiida-catmat",is_installable:"False"},"aiida-ce":{code_home:"https://github.com/unkcpz/aiida-ce",development_status:"beta",entry_point_prefix:"ce",pip_url:"git+https://github.com/unkcpz/aiida-ce",name:"aiida-ce",package_name:"aiida_ce",hosted_on:"github.com",metadata:{author:"unkcpz",author_email:"morty.yu@yahoo.com",version:"0.1.0a0",description:"AiiDA plugin for running cluster expansion using icet.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.0.0,<2.0.0",entry_points:{"aiida.data":{ce:"aiida_ce.data:DiffParameters","ce.structures":"aiida_ce.data.structure_set:StructureSet","ce.cluster":"aiida_ce.data.cluster:ClusterSpaceData"},"aiida.calculations":{"ce.genenum":"aiida_ce.calculations.genenum:EnumCalculation","ce.gensqs":"aiida_ce.calculations.gensqs:SqsCalculation","ce.train":"aiida_ce.calculations.train:TrainCalculation"},"aiida.parsers":{"ce.genenum":"aiida_ce.parsers.genenum:EnumParser","ce.gensqs":"aiida_ce.parsers.gensqs:SqsParser","ce.train":"aiida_ce.parsers.train:TrainParser"},"aiida.cmdline.data":{ce:"aiida_ce.cli:data_cli"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-ce<pre>Collecting git+https://github.com/unkcpz/aiida-ce
  Cloning https://github.com/unkcpz/aiida-ce to /tmp/pip-req-build-evsk0zh9
  Running command git clone --filter=blob:none --quiet https://github.com/unkcpz/aiida-ce /tmp/pip-req-build-evsk0zh9
  Resolved https://github.com/unkcpz/aiida-ce to commit 84cbc7c1e14af3cac5530e092e529bc84cfcfe6d
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-ce to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-ce==0.1.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-ce 0.1.0 depends on aiida-core<2.0.0 and >=1.5.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"red",text:"Data",count:3},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/unkcpz/aiida-ce",is_installable:"False"},"aiida-champ":{code_home:"https://github.com/TREX-CoE/aiida-champ",development_status:"beta",documentation_url:"http://aiida-champ.readthedocs.io/",entry_point_prefix:"champ",pip_url:"aiida-champ",name:"aiida-champ",package_name:"aiida_champ",hosted_on:"github.com",metadata:{release_date:"2021-12-27",description:"AiiDA plugin that wraps the vmc executable of CHAMP code for computing the total energy and much more stuff.",author:"Ravindra Shinde",author_email:"r.l.shinde@utwente.nl",license:"MIT",home_page:"https://github.com/neelravi/aiida-champ",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"1.2.6"},aiida_version:null,entry_points:{"aiida.data":{CHAMP:"aiida_champ.data:CHAMPParameters"},"aiida.calculations":{CHAMP:"aiida_champ.calculations:CHAMPCalculation"},"aiida.parsers":{CHAMP:"aiida_champ.parsers:CHAMPParser"},"aiida.cmdline.data":{CHAMP:"aiida_champ.cli:data_cli"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-champ<pre>Collecting aiida-champ
  Downloading aiida-champ-1.2.6.tar.gz (10 kB)
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-champ to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-champ==1.2.6 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-champ 1.2.6 depends on aiida-core<2.0.0 and >=1.1.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'CHAMP' does not start with prefix 'champ.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'CHAMP' does not start with prefix 'champ.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'CHAMP' does not start with prefix 'champ.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'CHAMP' does not start with prefix 'champ.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-champ",is_installable:"False"},"aiida-codtools":{code_home:"https://github.com/aiidateam/aiida-codtools",documentation_url:"https://aiida-codtools.readthedocs.io/",entry_point_prefix:"codtools",pip_url:"aiida-codtools",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-codtools/master/setup.json",name:"aiida-codtools",package_name:"aiida_codtools",hosted_on:"github.com",metadata:{release_date:"2023-02-02",description:"The Official AiiDA plugin for the cod-tools package.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"3.1.0"},aiida_version:">=2.1,<3.0",entry_points:{"aiida.calculations":{"codtools.cif_base":{description:["Generic `CalcJob` implementation that can easily be extended to work with any of the `cod-tools` scripts."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_base:CifBaseCalculation"},"codtools.cif_cell_contents":{description:["CalcJob plugin for the `cif_cell_contents` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"formulae",required:!0,valid_types:"Dict",info:"A dictionary of formulae present in the CIF."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cell_contents:CifCellContentsCalculation"},"codtools.cif_cod_check":{description:["CalcJob plugin for the `cif_cod_check` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"messages",required:!0,valid_types:"Dict",info:"Warning and error messages returned by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cod_check:CifCodCheckCalculation"},"codtools.cif_cod_deposit":{description:["CalcJob plugin for the `cif_cod_deposit` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:300,message:"The deposition failed for unknown reasons."},{status:310,message:"The deposition failed because the input was invalid."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."},{status:410,message:"The deposition failed because one or more CIFs already exist in the COD."},{status:420,message:"The structure is unchanged and so deposition is unnecessary."}]},class:"aiida_codtools.calculations.cif_cod_deposit:CifCodDepositCalculation"},"codtools.cif_cod_numbers":{description:["CalcJob plugin for the `cif_cod_numbers` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"numbers",required:!0,valid_types:"Dict",info:"Mapping of COD IDs found with their formula and count."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cod_numbers:CifCodNumbersCalculation"},"codtools.cif_filter":{description:["CalcJob plugin for the `cif_filter` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_filter:CifFilterCalculation"},"codtools.cif_select":{description:["CalcJob plugin for the `cif_select` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_select:CifSelectCalculation"},"codtools.cif_split_primitive":{description:["CalcJob plugin for the `cif_split_primitive` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cifs",required:!0,valid_types:"CifData",info:"The CIFs produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_split_primitive:CifSplitPrimitiveCalculation"},"codtools.primitive_structure_from_cif":{description:["Attempt to parse the given `CifData` and create a `StructureData` from it.","","    First the raw CIF file is parsed with the given `parse_engine`. The resulting `StructureData` is then passed through","    SeeKpath to try and get the primitive cell. If that is successful, important structural parameters as determined by","    SeeKpath will be set as extras on the structure node which is then returned as output.","","    :param cif: the `CifData` node","    :param parse_engine: the parsing engine, supported libraries 'ase' and 'pymatgen'","    :param symprec: a `Float` node with symmetry precision for determining primitive cell in SeeKpath","    :param site_tolerance: a `Float` node with the fractional coordinate distance tolerance for finding overlapping","        sites. This will only be used if the parse_engine is pymatgen","    :return: the primitive `StructureData` as determined by SeeKpath"],spec:{inputs:[{name:"cif",required:!0,valid_types:"Data",info:"the `CifData` node"},{name:"parse_engine",required:!0,valid_types:"Data",info:"the parsing engine, supported libraries 'ase' and 'pymatgen'"},{name:"site_tolerance",required:!0,valid_types:"Data",info:"a `Float` node with the fractional coordinate distance tolerance for finding overlapping\nsites. This will only be used if the parse_engine is pymatgen"},{name:"symprec",required:!0,valid_types:"Data",info:"a `Float` node with symmetry precision for determining primitive cell in SeeKpath"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_codtools.calculations.functions.primitive_structure_from_cif:primitive_structure_from_cif"}},"aiida.parsers":{"codtools.cif_base":"aiida_codtools.parsers.cif_base:CifBaseParser","codtools.cif_cell_contents":"aiida_codtools.parsers.cif_cell_contents:CifCellContentsParser","codtools.cif_cod_check":"aiida_codtools.parsers.cif_cod_check:CifCodCheckParser","codtools.cif_cod_deposit":"aiida_codtools.parsers.cif_cod_deposit:CifCodDepositParser","codtools.cif_cod_numbers":"aiida_codtools.parsers.cif_cod_numbers:CifCodNumbersParser","codtools.cif_split_primitive":"aiida_codtools.parsers.cif_split_primitive:CifSplitPrimitiveParser"},"aiida.workflows":{"codtools.cif_clean":{description:["WorkChain to clean a `CifData` node using the `cif_filter` and `cif_select` scripts of `cod-tools`.","","    It will first run `cif_filter` to correct syntax errors, followed by `cif_select` which will canonicalize the tags.","    If a group is passed for the `group_structure` input, the atomic structure library defined by the `engine` input","    will be used to parse the final cleaned `CifData` to construct a `StructureData` object, which will then be passed","    to the `SeeKpath` library to analyze it and return the primitive structure"],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CifData node that is to be cleaned."},{name:"cif_filter",required:!0,valid_types:"Data",info:""},{name:"cif_select",required:!0,valid_types:"Data",info:""},{name:"group_cif",required:!1,valid_types:"Group, NoneType",info:"An optional Group to which the final cleaned CifData node will be added."},{name:"group_structure",required:!1,valid_types:"Group, NoneType",info:"An optional Group to which the final reduced StructureData node will be added."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parse_engine",required:!1,valid_types:"Str",info:"The atomic structure engine to parse the cif and create the structure."},{name:"site_tolerance",required:!1,valid_types:"Float",info:"The fractional coordinate distance tolerance for finding overlapping sites (pymatgen only)."},{name:"symprec",required:!1,valid_types:"Float",info:"The symmetry precision used by SeeKpath for crystal symmetry refinement."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The cleaned CifData node."},{name:"structure",required:!1,valid_types:"StructureData",info:"The primitive cell structure created with SeeKpath from the cleaned CifData."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The CifFilterCalculation step failed."},{status:402,message:"The CifSelectCalculation step failed."},{status:410,message:"The cleaned CifData contains sites with unknown species."},{status:411,message:"The cleaned CifData defines no atomic sites."},{status:412,message:"The cleaned CifData defines sites with attached hydrogens with incomplete positional data."},{status:413,message:"The cleaned CifData defines sites with invalid atomic occupancies."},{status:414,message:"Failed to parse a StructureData from the cleaned CifData."},{status:420,message:"SeeKpath failed to determine the primitive structure."},{status:421,message:"SeeKpath detected inconsistent symmetry operations."}]},class:"aiida_codtools.workflows.cif_clean:CifCleanWorkChain"}},console_scripts:{"aiida-codtools":"aiida_codtools.cli:cmd_root"}},commits_count:4,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:9},{colorclass:"brown",text:"Parsers",count:6},{colorclass:"green",text:"Workflows",count:1},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-codtools",is_installable:"True"},"aiida-core":{code_home:"https://github.com/aiidateam/aiida-core",development_status:"stable",documentation_url:"https://aiida-core.readthedocs.io/",entry_point_prefix:"",package_name:"aiida",pip_url:"aiida-core",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-core/master/setup.json",name:"aiida-core",hosted_on:"github.com",metadata:{release_date:"2023-11-15",description:"AiiDA is a workflow manager for computational science with a strong focus on provenance, performance and extensibility.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"2.4.1"},aiida_version:"==2.4.1",entry_points:{"aiida.calculations":{"core.arithmetic.add":{description:["`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."],spec:{inputs:[{name:"x",required:!0,valid_types:"Int, Float",info:"The left operand."},{name:"y",required:!0,valid_types:"Int, Float",info:"The right operand."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"sum",required:!0,valid_types:"Int, Float",info:"The sum of the left and right operand."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:310,message:"The output file could not be read."},{status:320,message:"The output file contains invalid output."},{status:410,message:"The sum of the operands is a negative number."}]},class:"aiida.calculations.arithmetic.add:ArithmeticAddCalculation"},"core.templatereplacer":{description:["Simple stub of a plugin that can be used to replace some text in a given template.","    Can be used for many different codes, or as a starting point to develop a new plugin.","","    This simple plugin takes two node inputs, both of type Dict, with the labels","    'parameters' and 'template'","","    You can also add other SinglefileData nodes as input, that will be copied according to","    what is written in 'template' (see below).","","    * parameters: a set of parameters that will be used for substitution.","","    * template: can contain the following parameters:","","        * input_file_template: a string with substitutions to be managed with the format()","          function of python, i.e. if you want to substitute a variable called 'varname', you write","          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more","          details. The replaced file will be the input file.","","        * input_file_name: a string with the file name for the input. If it is not provided, no","          file will be created.","","        * output_file_name: a string with the file name for the output. If it is not provided, no","          redirection will be done and the output will go in the scheduler output file.","","        * cmdline_params: a list of strings, to be passed as command line parameters.","          Each one is substituted with the same rule of input_file_template. Optional","","        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.","","        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');","            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',","            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'","            Errors are raised in the input links are non-existent, or of the wrong type, or if there are","            unused input files.","","        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and","            temporarily stored in an unstored FolderData node that will be available during the","            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"],spec:{inputs:[{name:"template",required:!0,valid_types:"Dict",info:"A template for the input file."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"files",required:!1,valid_types:"RemoteData, SinglefileData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters used to replace placeholders in the template."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The temporary retrieved folder data node could not be accessed."},{status:305,message:"The `template` input node did not specify the key `output_file_name`."},{status:310,message:"The output file could not be read from the retrieved folder."},{status:311,message:"A temporary retrieved file could not be read from the temporary retrieved folder."},{status:320,message:"The output file contains invalid output."}]},class:"aiida.calculations.templatereplacer:TemplatereplacerCalculation"},"core.transfer":{description:["Utility to copy files from different FolderData and RemoteData nodes into a single place.","","    The final destination for these files can be either the local repository (by creating a","    new FolderData node to store them) or in the remote computer (by leaving the files in a","    new remote folder saved in a RemoteData node).","","    Only files from the local computer and from remote folders in the same external computer","    can be moved at the same time with a single instance of this CalcJob.","","    The user needs to provide three inputs:","","        * ``instructions``: a dict node specifying which files to copy from which nodes.","        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.","        * ``metadata.computer``: the computer that contains the remote files and will contain","          the final RemoteData node.","","    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a","    new folder in the remote machine (``RemoteData``) and put all the files there and will either:","","        (1) leave them there (``retrieve_files = False``) or ...","        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)","","    The `instructions` dict must also contain at least one list with specifications of which files","    to copy and from where. All these lists take tuples of 3 that have the following format:","","    .. code-block:: python","","        ( source_node_key, path_to_file_in_source, path_to_file_in_target)","","    where the ``source_node_key`` has to be the respective one used when providing the node in the","    ``source_nodes`` input nodes dictionary.","","","    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)","    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside","    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that","    files from the first list will be fully copied in the target RemoteData folder, whereas for the","    files in second list only a symlink to the original file will be created there. This will only","    affect the content of the final RemoteData target folder, but in both cases the full file will","    be copied back in the local target FolderData (if ``retrieve_files = True``)."],spec:{inputs:[{name:"instructions",required:!0,valid_types:"Dict",info:"A dictionary containing the `retrieve_files` flag and at least one of the file lists:`local_files`, `remote_files` and/or `symlink_files`."},{name:"source_nodes",required:!0,valid_types:"FolderData, RemoteData",info:"All the nodes that contain files referenced in the instructions."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida.calculations.transfer:TransferCalculation"}},"aiida.calculations.importers":{"core.arithmetic.add":"aiida.calculations.importers.arithmetic.add:ArithmeticAddCalculationImporter"},"aiida.calculations.monitors":{"core.always_kill":"aiida.calculations.monitors.base:always_kill"},"aiida.cmdline.computer.configure":{"core.local":"aiida.transports.plugins.local:CONFIGURE_LOCAL_CMD","core.ssh":"aiida.transports.plugins.ssh:CONFIGURE_SSH_CMD"},"aiida.cmdline.data":{"core.array":"aiida.cmdline.commands.cmd_data.cmd_array:array","core.bands":"aiida.cmdline.commands.cmd_data.cmd_bands:bands","core.cif":"aiida.cmdline.commands.cmd_data.cmd_cif:cif","core.dict":"aiida.cmdline.commands.cmd_data.cmd_dict:dictionary","core.remote":"aiida.cmdline.commands.cmd_data.cmd_remote:remote","core.singlefile":"aiida.cmdline.commands.cmd_data.cmd_singlefile:singlefile","core.structure":"aiida.cmdline.commands.cmd_data.cmd_structure:structure","core.trajectory":"aiida.cmdline.commands.cmd_data.cmd_trajectory:trajectory","core.upf":"aiida.cmdline.commands.cmd_data.cmd_upf:upf"},"aiida.cmdline.data.structure.import":{},"aiida.data":{"core.array":"aiida.orm.nodes.data.array.array:ArrayData","core.array.bands":"aiida.orm.nodes.data.array.bands:BandsData","core.array.kpoints":"aiida.orm.nodes.data.array.kpoints:KpointsData","core.array.projection":"aiida.orm.nodes.data.array.projection:ProjectionData","core.array.trajectory":"aiida.orm.nodes.data.array.trajectory:TrajectoryData","core.array.xy":"aiida.orm.nodes.data.array.xy:XyData","core.base":"aiida.orm.nodes.data:BaseType","core.bool":"aiida.orm.nodes.data.bool:Bool","core.cif":"aiida.orm.nodes.data.cif:CifData","core.code":"aiida.orm.nodes.data.code.legacy:Code","core.code.containerized":"aiida.orm.nodes.data.code.containerized:ContainerizedCode","core.code.installed":"aiida.orm.nodes.data.code.installed:InstalledCode","core.code.portable":"aiida.orm.nodes.data.code.portable:PortableCode","core.dict":"aiida.orm.nodes.data.dict:Dict","core.enum":"aiida.orm.nodes.data.enum:EnumData","core.float":"aiida.orm.nodes.data.float:Float","core.folder":"aiida.orm.nodes.data.folder:FolderData","core.int":"aiida.orm.nodes.data.int:Int","core.jsonable":"aiida.orm.nodes.data.jsonable:JsonableData","core.list":"aiida.orm.nodes.data.list:List","core.numeric":"aiida.orm.nodes.data.numeric:NumericType","core.orbital":"aiida.orm.nodes.data.orbital:OrbitalData","core.remote":"aiida.orm.nodes.data.remote.base:RemoteData","core.remote.stash":"aiida.orm.nodes.data.remote.stash.base:RemoteStashData","core.remote.stash.folder":"aiida.orm.nodes.data.remote.stash.folder:RemoteStashFolderData","core.singlefile":"aiida.orm.nodes.data.singlefile:SinglefileData","core.str":"aiida.orm.nodes.data.str:Str","core.structure":"aiida.orm.nodes.data.structure:StructureData","core.upf":"aiida.orm.nodes.data.upf:UpfData"},"aiida.groups":{core:"aiida.orm.groups:Group","core.auto":"aiida.orm.groups:AutoGroup","core.import":"aiida.orm.groups:ImportGroup","core.upf":"aiida.orm.groups:UpfFamily"},"aiida.node":{data:"aiida.orm.nodes.data.data:Data",process:"aiida.orm.nodes.process.process:ProcessNode","process.calculation":"aiida.orm.nodes.process.calculation.calculation:CalculationNode","process.calculation.calcfunction":"aiida.orm.nodes.process.calculation.calcfunction:CalcFunctionNode","process.calculation.calcjob":"aiida.orm.nodes.process.calculation.calcjob:CalcJobNode","process.workflow":"aiida.orm.nodes.process.workflow.workflow:WorkflowNode","process.workflow.workchain":"aiida.orm.nodes.process.workflow.workchain:WorkChainNode","process.workflow.workfunction":"aiida.orm.nodes.process.workflow.workfunction:WorkFunctionNode"},"aiida.parsers":{"core.arithmetic.add":"aiida.parsers.plugins.arithmetic.add:ArithmeticAddParser","core.templatereplacer":"aiida.parsers.plugins.templatereplacer.parser:TemplatereplacerParser"},"aiida.schedulers":{"core.direct":"aiida.schedulers.plugins.direct:DirectScheduler","core.lsf":"aiida.schedulers.plugins.lsf:LsfScheduler","core.pbspro":"aiida.schedulers.plugins.pbspro:PbsproScheduler","core.sge":"aiida.schedulers.plugins.sge:SgeScheduler","core.slurm":"aiida.schedulers.plugins.slurm:SlurmScheduler","core.torque":"aiida.schedulers.plugins.torque:TorqueScheduler"},"aiida.storage":{"core.psql_dos":"aiida.storage.psql_dos.backend:PsqlDosBackend","core.sqlite_temp":"aiida.storage.sqlite_temp.backend:SqliteTempBackend","core.sqlite_zip":"aiida.storage.sqlite_zip.backend:SqliteZipBackend"},"aiida.tools.calculations":{},"aiida.tools.data.orbitals":{"core.orbital":"aiida.tools.data.orbital.orbital:Orbital","core.realhydrogen":"aiida.tools.data.orbital.realhydrogen:RealhydrogenOrbital"},"aiida.tools.dbexporters":{},"aiida.tools.dbimporters":{"core.cod":"aiida.tools.dbimporters.plugins.cod:CodDbImporter","core.icsd":"aiida.tools.dbimporters.plugins.icsd:IcsdDbImporter","core.materialsproject":"aiida.tools.dbimporters.plugins.materialsproject:MaterialsProjectImporter","core.mpds":"aiida.tools.dbimporters.plugins.mpds:MpdsDbImporter","core.mpod":"aiida.tools.dbimporters.plugins.mpod:MpodDbImporter","core.nninc":"aiida.tools.dbimporters.plugins.nninc:NnincDbImporter","core.oqmd":"aiida.tools.dbimporters.plugins.oqmd:OqmdDbImporter","core.pcod":"aiida.tools.dbimporters.plugins.pcod:PcodDbImporter","core.tcod":"aiida.tools.dbimporters.plugins.tcod:TcodDbImporter"},"aiida.transports":{"core.local":"aiida.transports.plugins.local:LocalTransport","core.ssh":"aiida.transports.plugins.ssh:SshTransport"},"aiida.workflows":{"core.arithmetic.add_multiply":{description:["Add two numbers and multiply it with a third."],spec:{inputs:[{name:"x",required:!0,valid_types:"Data",info:""},{name:"y",required:!0,valid_types:"Data",info:""},{name:"z",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida.workflows.arithmetic.add_multiply:add_multiply"},"core.arithmetic.multiply_add":{description:["WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode",info:""},{name:"x",required:!0,valid_types:"Int",info:""},{name:"y",required:!0,valid_types:"Int",info:""},{name:"z",required:!0,valid_types:"Int",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"result",required:!0,valid_types:"Int",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"The result is a negative number."}]},class:"aiida.workflows.arithmetic.multiply_add:MultiplyAddWorkChain"}},console_scripts:{runaiida:"aiida.cmdline.commands.cmd_run:run",verdi:"aiida.cmdline.commands.cmd_verdi:verdi"}},commits_count:309,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:29},{colorclass:"green",text:"Workflows",count:2},{colorclass:"purple",text:"Console scripts",count:2},{colorclass:"orange",text:"Other (Calculations importers, Calculations monitors, Cmdline computer configure, ...)",count:47}],pip_install_cmd:"pip install aiida-core",is_installable:"True"},"aiida-cp2k":{code_home:"https://github.com/cp2k/aiida-cp2k",entry_point_prefix:"cp2k",pip_url:"aiida-cp2k",plugin_info:"https://raw.githubusercontent.com/cp2k/aiida-cp2k/master/setup.json",name:"aiida-cp2k",package_name:"aiida_cp2k",hosted_on:"github.com",metadata:{release_date:"2023-03-06",description:"The official AiiDA plugin for CP2K.",author:"The AiiDA team",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3"],version:"2.0.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{cp2k:{description:["This is a Cp2kCalculation, subclass of JobCalculation, to prepare input for an ab-initio CP2K calculation.","","    For information on CP2K, refer to: https://www.cp2k.org."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters."},{name:"basissets",required:!1,valid_types:"",info:"A dictionary of basissets to be used in the calculations: key is the atomic symbol, value is either a single basisset or a list of basissets. If multiple basissets for a single symbol are passed, it is mandatory to specify a KIND section with a BASIS_SET keyword matching the names (or aliases) of the basissets."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"file",required:!1,valid_types:"SinglefileData, StructureData",info:"Additional input files."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoint mesh."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Working directory of a previously ran calculation to restart from."},{name:"pseudos",required:!1,valid_types:"",info:"A dictionary of pseudopotentials to be used in the calculations: key is the atomic symbol, value is either a single pseudopotential or a list of pseudopotentials. If multiple pseudos for a single symbol are passed, it is mandatory to specify a KIND section with a PSEUDOPOTENTIAL keyword matching the names (or aliases) of the pseudopotentials."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional input parameters."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"The main input structure."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The output dictionary containing results of the calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Computed electronic band structure."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required output file."},{status:301,message:"The output file could not be read."},{status:302,message:"The output file could not be parsed."},{status:303,message:"The output file was incomplete."},{status:304,message:'The output file contains the word "ABORT".'},{status:312,message:"The output structure could not be parsed."},{status:350,message:"The parser raised an unexpected exception."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."},{status:501,message:"The maximum number of optimization steps reached."}]},class:"aiida_cp2k.calculations:Cp2kCalculation"}},"aiida.parsers":{cp2k_advanced_parser:"aiida_cp2k.parsers:Cp2kAdvancedParser",cp2k_base_parser:"aiida_cp2k.parsers:Cp2kBaseParser",cp2k_tools_parser:"aiida_cp2k.parsers:Cp2kToolsParser"},"aiida.workflows":{"cp2k.base":{description:["Workchain to run a CP2K calculation with automated error handling and restarts."],spec:{inputs:[{name:"cp2k",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The output dictionary containing results of the calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"final_input_parameters",required:!1,valid_types:"Dict",info:"The input parameters used for the final calculation."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Computed electronic band structure."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unidentified unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:310,message:"The calculation failed with a known unrecoverable error."},{status:400,message:"The calculation didn't produce any data to restart from."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_cp2k.workchains:Cp2kBaseWorkChain"}}},commits_count:27,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-cp2k",is_installable:"True"},"aiida-crystal-dft":{code_home:"https://github.com/tilde-lab/aiida-crystal-dft",development_status:"beta",documentation_url:"https://github.com/tilde-lab/aiida-crystal-dft",entry_point_prefix:"crystal_dft",pip_url:"git+https://github.com/tilde-lab/aiida-crystal-dft",name:"aiida-crystal-dft",package_name:"aiida_crystal_dft",hosted_on:"github.com",metadata:{description:`Yet another AiiDA plugin for CRYSTAL code, mainly intended for use with the cloud infrastructures
(currently, MPDS)`,classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Intended Audience :: Science/Research","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Topic :: Scientific/Engineering","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Information Analysis"],author:"Andrey Sobolev, based on aiida-crystal17 plugin by Chris Sewell",author_email:"as@tilde.pro"},aiida_version:">=2.0.2",entry_points:{"aiida.data":{"crystal_dft.basis":"aiida_crystal_dft.data.basis:CrystalBasisData","crystal_dft.basis_family":"aiida_crystal_dft.data.basis_family:CrystalBasisFamilyData"},"aiida.calculations":{"crystal_dft.serial":{description:["No description available"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"basis",required:!1,valid_types:"CrystalBasisData",info:""},{name:"basis_family",required:!1,valid_types:"CrystalBasisFamilyData, NoneType",info:""},{name:"guess_oxistates",required:!1,valid_types:"Bool, NoneType",info:""},{name:"high_spin_preferred",required:!1,valid_types:"Bool, NoneType",info:""},{name:"is_magnetic",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"spinlock_steps",required:!1,valid_types:"Int, NoneType",info:""},{name:"use_oxistates",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"oxidation_states",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"SCF calculation not converged"},{status:301,message:"Geometry optimization failed"},{status:302,message:"Unit cell not neutral"},{status:303,message:"Basis set linearly dependent"},{status:304,message:"Neighbour list too large"},{status:305,message:"No G-vectors left"},{status:306,message:"Collapsed geometry"},{status:307,message:"Closed shell run - spin polarization not allowed"},{status:308,message:"Parameters for model hessian not defined"},{status:309,message:"Fermi energy not in interval"},{status:310,message:"Insufficient indices for Madelung sums"},{status:350,message:"Internal memory error"},{status:360,message:"Inadequate elastic calculation: additional optimization needed"},{status:400,message:"Unknown error"},{status:401,message:"The retrieved folder data node could not be accessed"}]},class:"aiida_crystal_dft.calculations.serial:CrystalSerialCalculation"},"crystal_dft.parallel":{description:["No description available"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"basis",required:!1,valid_types:"CrystalBasisData",info:""},{name:"basis_family",required:!1,valid_types:"CrystalBasisFamilyData, NoneType",info:""},{name:"guess_oxistates",required:!1,valid_types:"Bool, NoneType",info:""},{name:"high_spin_preferred",required:!1,valid_types:"Bool, NoneType",info:""},{name:"is_magnetic",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"spinlock_steps",required:!1,valid_types:"Int, NoneType",info:""},{name:"use_oxistates",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"oxidation_states",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"SCF calculation not converged"},{status:301,message:"Geometry optimization failed"},{status:302,message:"Unit cell not neutral"},{status:303,message:"Basis set linearly dependent"},{status:304,message:"Neighbour list too large"},{status:305,message:"No G-vectors left"},{status:306,message:"Collapsed geometry"},{status:307,message:"Closed shell run - spin polarization not allowed"},{status:308,message:"Parameters for model hessian not defined"},{status:309,message:"Fermi energy not in interval"},{status:310,message:"Insufficient indices for Madelung sums"},{status:350,message:"Internal memory error"},{status:360,message:"Inadequate elastic calculation: additional optimization needed"},{status:400,message:"Unknown error"},{status:401,message:"The retrieved folder data node could not be accessed"}]},class:"aiida_crystal_dft.calculations.parallel:CrystalParallelCalculation"},"crystal_dft.properties":{description:["AiiDA calculation plugin wrapping the properties executable."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"wavefunction",required:!0,valid_types:"SinglefileData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:""},{name:"output_bands_down",required:!1,valid_types:"BandsData",info:""},{name:"output_dos",required:!1,valid_types:"ArrayData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_crystal_dft.calculations.properties:PropertiesCalculation"}},"aiida.parsers":{crystal_dft:"aiida_crystal_dft.parsers.cry_pycrystal:CrystalParser","crystal_dft.properties":"aiida_crystal_dft.parsers.properties:PropertiesParser"},"aiida.workflows":{"crystal_dft.base":{description:["Run CRYSTAL calculation"],spec:{inputs:[{name:"basis_family",required:!0,valid_types:"CrystalBasisFamilyData",info:""},{name:"code",required:!0,valid_types:"Code",info:""},{name:"options",required:!0,valid_types:"Dict",info:"Calculation options"},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_params",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"oxidation_states",required:!1,valid_types:"Dict",info:""},{name:"primitive_structure",required:!1,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"CRYSTAL error"},{status:400,message:"Unknown error"}]},class:"aiida_crystal_dft.workflows.base:BaseCrystalWorkChain"}},"aiida.cmdline.data":{crystal_dft:"aiida_crystal_dft.cli.basis:basis_set"}},commits_count:16,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/tilde-lab/aiida-crystal-dft",is_installable:"True"},"aiida-crystal17":{code_home:"https://github.com/aiidaplugins/aiida-crystal17",development_status:"beta",documentation_url:"https://aiida-crystal17.readthedocs.io",entry_point_prefix:"crystal17",pip_url:"aiida-crystal17",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-crystal17/master/setup.json",name:"aiida-crystal17",package_name:"aiida_crystal17",hosted_on:"github.com",metadata:{release_date:"2020-09-29",description:"AiiDA plugin for running the CRYSTAL17 code",author:"Chris Sewell",author_email:"chrisj_sewell@hotmail.com",license:"MIT",home_page:"https://github.com/chrisjsewell/aiida-crystal17",classifiers:["Framework :: AiiDA","Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.6","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"0.11.0"},aiida_version:">=1.4.0,<2.0.0",entry_points:{"aiida.calculations":{"crystal17.basic":"aiida_crystal17.calculations.cry_basic:CryBasicCalculation","crystal17.doss":"aiida_crystal17.calculations.prop_doss:CryDossCalculation","crystal17.ech3":"aiida_crystal17.calculations.prop_ech3:CryEch3Calculation","crystal17.main":"aiida_crystal17.calculations.cry_main:CryMainCalculation","crystal17.newk":"aiida_crystal17.calculations.prop_newk:CryNewkCalculation","crystal17.ppan":"aiida_crystal17.calculations.prop_ppan:CryPpanCalculation"},"aiida.cmdline.data":{"crystal17.basis":"aiida_crystal17.cmndline.basis_set:basisset","crystal17.parse":"aiida_crystal17.cmndline.cmd_parser:parse","crystal17.symmetry":"aiida_crystal17.cmndline.symmetry:symmetry"},"aiida.data":{"crystal17.basisset":"aiida_crystal17.data.basis_set:BasisSetData","crystal17.gcube":"aiida_crystal17.data.gcube:GaussianCube","crystal17.kinds":"aiida_crystal17.data.kinds:KindData","crystal17.parameters":"aiida_crystal17.data.input_params:CryInputParamsData","crystal17.symmetry":"aiida_crystal17.data.symmetry:SymmetryData"},"aiida.groups":{"crystal17.basisset":"aiida_crystal17.data.basis_set:BasisSetFamily"},"aiida.parsers":{"crystal17.doss":"aiida_crystal17.parsers.cry_doss:CryDossParser","crystal17.ech3":"aiida_crystal17.parsers.cry_ech3:CryEch3Parser","crystal17.main":"aiida_crystal17.parsers.cry_main:CryMainParser","crystal17.newk":"aiida_crystal17.parsers.cry_newk:CryNewkParser","crystal17.ppan":"aiida_crystal17.parsers.cry_ppan:CryPpanParser"},"aiida.workflows":{"crystal17.main.base":"aiida_crystal17.workflows.crystal_main.base:CryMainBaseWorkChain","crystal17.properties":"aiida_crystal17.workflows.crystal_props.base:CryPropertiesWorkChain","crystal17.sym3d":"aiida_crystal17.workflows.symmetrise_3d_struct:Symmetrise3DStructure"},console_scripts:{mock_crystal17:"aiida_crystal17.tests.mock_crystal17:main",mock_properties17:"aiida_crystal17.tests.mock_properties17:main"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:6},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:5},{colorclass:"green",text:"Workflows",count:3},{colorclass:"purple",text:"Console scripts",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:4}],pip_install_cmd:"pip install aiida-crystal17",is_installable:"True"},"aiida-cusp":{code_home:"https://github.com/aiida-cusp/aiida-cusp",documentation_url:"https://aiida-cusp.readthedocs.io",entry_point_prefix:"cusp",pip_url:"https://pypi.org/project/aiida-cusp",name:"aiida-cusp",package_name:"aiida_cusp",hosted_on:"github.com",metadata:{author:"Andreas Stamminger",author_email:"stammingera@gmail.com",version:"0.1.0b2",description:"Custodian based VASP Plugin for AiiDA",classifiers:["Development Status :: 4 - Beta","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Chemistry","Environment :: Plugins","Framework :: AiiDA"]},aiida_version:">=1.3.0,<2.0.0",entry_points:{"aiida.data":{"cusp.kpoints":"aiida_cusp.data.inputs.vasp_kpoint:VaspKpointData","cusp.poscar":"aiida_cusp.data.inputs.vasp_poscar:VaspPoscarData","cusp.incar":"aiida_cusp.data.inputs.vasp_incar:VaspIncarData","cusp.potcar":"aiida_cusp.data.inputs.vasp_potcar:VaspPotcarData","cusp.vasprun":"aiida_cusp.data.outputs.vasp_vasprun:VaspVasprunData","cusp.outcar":"aiida_cusp.data.outputs.vasp_outcar:VaspOutcarData","cusp.contcar":"aiida_cusp.data.outputs.vasp_contcar:VaspContcarData","cusp.chgcar":"aiida_cusp.data.outputs.vasp_chgcar:VaspChgcarData","cusp.wavecar":"aiida_cusp.data.outputs.vasp_wavecar:VaspWavecarData","cusp.generic":"aiida_cusp.data.outputs.vasp_generic:VaspGenericData","cusp.potcarfile":"aiida_cusp.data.inputs.vasp_potcar:VaspPotcarFile"},"aiida.calculations":{"cusp.vasp":"aiida_cusp.calculators.vasp_calculation:VaspCalculation"},"aiida.parsers":{"cusp.default":"aiida_cusp.parsers.vasp_file_parser:VaspFileParser"},"aiida.cmdline.data":{potcar:"aiida_cusp.cli.potcar_cmd:potcar"}},commits_count:28,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-cusp<pre>Collecting https://pypi.org/project/aiida-cusp
  Downloading https://pypi.org/project/aiida-cusp (46 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 46.1/46.1 kB 9.4 MB/s eta 0:00:00
  ERROR: Cannot unpack file /tmp/pip-unpack-01qdxmsu/aiida-cusp (downloaded from /tmp/pip-req-build-96hi271y, content-type: text/html; charset=UTF-8); cannot detect archive format
ERROR: Cannot determine archive format of /tmp/pip-req-build-96hi271y
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'potcar' does not start with prefix 'cusp.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:11},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install https://pypi.org/project/aiida-cusp",is_installable:"False"},"aiida-dataframe":{entry_point_prefix:"dataframe",plugin_info:"https://raw.github.com/janssenhenning/aiida-dataframe/main/pyproject.toml",code_home:"https://github.com/janssenhenning/aiida-dataframe",version_file:"https://raw.githubusercontent.com/janssenhenning/aiida-dataframe/main/aiida_dataframe/__init__.py",pip_url:"aiida-dataframe",documentation_url:"https://aiida-dataframe.readthedocs.io/en/latest/",name:"aiida-dataframe",package_name:"aiida_dataframe",hosted_on:"github.com",metadata:{release_date:"2023-05-05",description:"AiiDA data plugin for pandas DataFrame objects",author_email:"Henning Janßen <henning.janssen@gmx.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"0.1.3"},aiida_version:">=1.0,<3",entry_points:{"aiida.cmdline.data":{dataframe:"aiida_dataframe.cli:data_cli"},"aiida.data":{"dataframe.frame":"aiida_dataframe.data.dataframe:PandasFrameData"}},commits_count:11,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-dataframe",is_installable:"True"},"aiida-ddec":{code_home:"https://github.com/lsmo-epfl/aiida-ddec",entry_point_prefix:"ddec",pip_url:"git+https://github.com/yakutovicha/aiida-ddec",name:"aiida-ddec",package_name:"aiida_ddec",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:10,development_status:"planning",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E004'>E004</a>: Unable to retrieve plugin metadata, retrieve plugin info from 'https://raw.githubusercontent.com/lsmo-epfl/aiida-ddec/master/setup.json' failed.<pre>Traceback (most recent call last):
  File "/home/runner/work/aiida-registry/aiida-registry/aiida_registry/utils.py", line 22, in fetch_file
    response.raise_for_status()
  File "/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py", line 1021, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/lsmo-epfl/aiida-ddec/master/setup.json
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/yakutovicha/aiida-ddec"},"aiida-defects":{code_home:"https://github.com/epfl-theos/aiida-defects",entry_point_prefix:"defects",pip_url:"aiida-defects",plugin_info:"https://raw.githubusercontent.com/epfl-theos/aiida-defects/master/pyproject.toml",name:"aiida-defects",package_name:"aiida_defects",hosted_on:"github.com",metadata:{release_date:"2023-03-29",description:"AiiDA-Defects is a plugin for the AiiDA computational materials science framework, and provides tools and automated workflows for the study of defects in materials.",author:"The AiiDA-Defects developers",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"1.0.1"},aiida_version:">=2.0,<3",entry_points:{"aiida.data":{"defects.array.stability":"aiida_defects.data.data:StabilityData"},"aiida.workflows":{"defects.formation_energy.chemical_potential":"aiida_defects.formation_energy.chemical_potential.chemical_potential:ChemicalPotentialWorkchain","defects.formation_energy.corrections.gaussian_countercharge":"aiida_defects.formation_energy.corrections.gaussian_countercharge.gaussian_countercharge:GaussianCounterChargeWorkchain","defects.formation_energy.corrections.gaussian_countercharge.model_potential":"aiida_defects.formation_energy.corrections.gaussian_countercharge.model_potential.model_potential:ModelPotentialWorkchain","defects.formation_energy.corrections.point_countercharge":"aiida_defects.formation_energy.corrections.point_countercharge.point_countercharge:PointCounterChargeWorkchain","defects.formation_energy.potential_alignment":"aiida_defects.formation_energy.potential_alignment.potential_alignment:PotentialAlignmentWorkchain","defects.formation_energy.qe":"aiida_defects.formation_energy.formation_energy_qe:FormationEnergyWorkchainQE","defects.formation_energy.siesta":"aiida_defects.formation_energy.formation_energy_siesta:FormatonEnergyWorkchainSiesta"}},commits_count:10,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E003'>E003</a>: Failed to fetch entry point metadata for package aiida_defects<pre>Traceback (most recent call last):
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 189, in <module>
Failed to load entry point 'defects.formation_energy.corrections.point_countercharge':
Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/aiida/plugins/entry_point.py", line 237, in load_entry_point
    loaded_entry_point = entry_point.load()
  File "/opt/conda/lib/python3.9/site-packages/importlib_metadata/__init__.py", line 207, in load
    module = import_module(match.group('module'))
  File "/opt/conda/lib/python3.9/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
  File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 850, in exec_module
  File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
  File "/opt/conda/lib/python3.9/site-packages/aiida_defects/formation_energy/corrections/point_countercharge/point_countercharge.py", line 19, in <module>
    from aiida_defects.tools.structure_manipulation import get_spacegroup
ModuleNotFoundError: No module named 'aiida_defects.tools'

    cli()  # pylint: disable=no-value-for-parameter
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1157, in __call__
    return self.main(*args, **kwargs)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1078, in main
    rv = self.invoke(ctx)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1434, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 783, in invoke
    return __callback(*args, **kwargs)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 179, in cli
    result[ep_group] = document_entry_point_group(ep_group)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 68, in document_entry_point_group
    process_info = document_entry_point(entry_point_group, entry_point)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 87, in document_entry_point
    plugin = load_entry_point(entry_point_group, entry_point)
  File "/opt/conda/lib/python3.9/site-packages/aiida/plugins/entry_point.py", line 237, in load_entry_point
    loaded_entry_point = entry_point.load()
  File "/opt/conda/lib/python3.9/site-packages/importlib_metadata/__init__.py", line 209, in load
    return functools.reduce(getattr, attrs, module)
AttributeError: module 'aiida_defects.formation_energy.formation_energy_siesta' has no attribute 'FormatonEnergyWorkchainSiesta'
</pre>`],warnings:[],summaryinfo:[{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:7}],pip_install_cmd:"pip install aiida-defects",is_installable:"True"},"aiida-diff":{code_home:"https://github.com/aiidateam/aiida-diff",development_status:"stable",documentation_url:"https://aiida-diff.readthedocs.io/",entry_point_prefix:"diff",pip_url:"git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0",name:"aiida-diff",package_name:"aiida_diff",hosted_on:"github.com",metadata:{description:"AiiDA demo plugin that wraps the `diff` executable for computing the difference between two files.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"The AiiDA Team"},aiida_version:">=2.0,<3",entry_points:{"aiida.data":{diff:"aiida_diff.data:DiffParameters"},"aiida.calculations":{diff:"aiida_diff.calculations:DiffCalculation"},"aiida.parsers":{diff:"aiida_diff.parsers:DiffParser"},"aiida.cmdline.data":{diff:"aiida_diff.cli:data_cli"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-diff<pre>Collecting aiida-diff-0.1.0a0
  Cloning https://github.com/aiidateam/aiida-diff to /tmp/pip-install-m8ln49vc/aiida-diff-0-1-0a0_9ff115b59b1d4f0583c4d1a901e9e6eb
  Running command git clone --filter=blob:none --quiet https://github.com/aiidateam/aiida-diff /tmp/pip-install-m8ln49vc/aiida-diff-0-1-0a0_9ff115b59b1d4f0583c4d1a901e9e6eb
  Resolved https://github.com/aiidateam/aiida-diff to commit f47fec9043d942a332a158378828b7d5a3fef2dc
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
  WARNING: Generating metadata for package aiida-diff-0.1.0a0 produced metadata for project name aiida-diff. Fix your #egg=aiida-diff-0.1.0a0 fragments.
Discarding git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0: Requested aiida-diff from git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0 has inconsistent name: expected 'aiida-diff-0-1-0a0', but metadata has 'aiida-diff'
ERROR: Could not find a version that satisfies the requirement aiida-diff-0-1-0a0 (unavailable) (from versions: none)
ERROR: No matching distribution found for aiida-diff-0-1-0a0 (unavailable)
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (alpha) does not match development_status in metadata (stable)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0",is_installable:"False"},"aiida-donothing":{code_home:"https://github.com/atztogo/aiida-donothing",entry_point_prefix:"donothing",name:"aiida-donothing",package_name:"aiida_donothing",hosted_on:"github.com",metadata:{author:"Atsushi Togo",author_email:"atz.togo@gmail.com",version:"0.1",description:"AiiDA calculation plugin for doing nothing",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.6.5,<2.0.0",entry_points:{"aiida.calculations":{"donothing.donothing":"aiida_donothing.calculations.donothing:DoNothingCalculation"},"aiida.parsers":{"donothing.donothing":"aiida_donothing.parsers.donothing:DoNothingParser"}},commits_count:0,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"See source code repository."},"aiida-dynamic-workflows":{code_home:"https://github.com/microsoft/aiida-dynamic-workflows",entry_point_prefix:"dynamic_workflows",name:"aiida-dynamic-workflows",package_name:"aiida_dynamic_workflows",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-environ":{code_home:"https://github.com/environ-developers/aiida-environ",entry_point_prefix:"environ",pip_url:"git+https://github.com/environ-developers/aiida-environ",name:"aiida-environ",package_name:"aiida_environ",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E004'>E004</a>: Unable to retrieve plugin metadata, retrieve plugin info from 'https://raw.github.com/environ-developers/aiida-environ/master/setup.json' failed.<pre>Traceback (most recent call last):
  File "/home/runner/work/aiida-registry/aiida-registry/aiida_registry/utils.py", line 22, in fetch_file
    response.raise_for_status()
  File "/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py", line 1021, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/environ-developers/aiida-environ/master/setup.json
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/environ-developers/aiida-environ"},"aiida-eon":{code_home:"https://github.com/HaoZeke/aiida-eon",entry_point_prefix:"eon",name:"aiida-eon",package_name:"aiida_eon",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-eonclient":{code_home:"https://github.com/HaoZeke/aiida-eonclient",entry_point_prefix:"eonclient",name:"aiida-eonclient",package_name:"aiida_eonclient",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-fenics":{code_home:"https://github.com/sphuber/aiida-fenics/tree/master",entry_point_prefix:"fenics",pip_url:"git+https://github.com/sphuber/aiida-fenics",name:"aiida-fenics",package_name:"aiida_fenics",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:-1,development_status:"planning",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E004'>E004</a>: Unable to retrieve plugin metadata, retrieve plugin info from 'https://raw.github.com/sphuber/aiida-fenics/master/setup.json' failed.<pre>Traceback (most recent call last):
  File "/home/runner/work/aiida-registry/aiida-registry/aiida_registry/utils.py", line 22, in fetch_file
    response.raise_for_status()
  File "/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py", line 1021, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/sphuber/aiida-fenics/master/setup.json
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/sphuber/aiida-fenics"},"aiida-firecrest":{code_home:"https://github.com/aiidateam/aiida-firecrest",entry_point_prefix:"firecrest",pip_url:"aiida-firecrest",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-firecrest/main/pyproject.toml",name:"aiida-firecrest",package_name:"aiida_firecrest",hosted_on:"github.com",metadata:{release_date:"2022-01-14",description:"AiiDA Transport/Scheduler plugins for interfacing with FirecREST.",author_email:"Chris Sewell <chrisj_sewell@hotmail.com>",classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.1.0a1"},aiida_version:"<2",entry_points:{"aiida.schedulers":{firecrest:"aiida_firecrest.scheduler:FirecrestScheduler"},"aiida.transports":{firecrest:"aiida_firecrest.transport:FirecrestTransport"},console_scripts:{"aiida-firecrest-cli":"aiida_firecrest.cli:main"}},commits_count:19,development_status:"alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-firecrest<pre>Collecting aiida-firecrest
  Downloading aiida_firecrest-0.1.0a1-py3-none-any.whl (10 kB)
INFO: pip is looking at multiple versions of aiida-firecrest to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-firecrest==0.1.0a1 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-firecrest 0.1.0a1 depends on aiida-core<2
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:[],summaryinfo:[{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Schedulers, Transports)",count:2}],pip_install_cmd:"pip install --pre aiida-firecrest",is_installable:"False"},"aiida-fireworks-scheduler":{code_home:"https://github.com/zhubonan/aiida-fireworks-scheduler",development_status:"beta",documentation_url:"https://aiida-fireworks-scheduler.readthedocs.io",entry_point_prefix:"fireworks_scheduler",pip_url:"git+https://github.com/zhubonan/aiida-fireworks-scheduler",name:"aiida-fireworks-scheduler",package_name:"aiida_fireworks_scheduler",hosted_on:"github.com",metadata:{author:"Bonan Zhu",author_email:"zhubonan@outlook.com",version:"1.2.0",description:"AiiDA plugin to allow using `fireworks` as the execution engine for `CalcJob`.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:null,entry_points:{"aiida.schedulers":{fireworks:"aiida_fireworks_scheduler.fwscheduler:FwScheduler","fireworks_scheduler.default":"aiida_fireworks_scheduler.fwscheduler:FwScheduler","fireworks_scheduler.keepenv":"aiida_fireworks_scheduler.fwscheduler:FwSchedulerKeepEnv"},"aiida.cmdline.data":{"fireworks-scheduler":"aiida_fireworks_scheduler.cmdline:fw_cli"},console_scripts:{arlaunch:"aiida_fireworks_scheduler.scripts.arlaunch_run:arlaunch"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'fireworks' does not start with prefix 'fireworks_scheduler.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'fireworks-scheduler' does not start with prefix 'fireworks_scheduler.'"],summaryinfo:[{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Schedulers)",count:4}],pip_install_cmd:"pip install git+https://github.com/zhubonan/aiida-fireworks-scheduler",is_installable:"True"},"aiida-fleur":{code_home:"https://github.com/JuDFTteam/aiida-fleur/tree/develop",development_status:"stable",documentation_url:"https://aiida-fleur.readthedocs.io/",entry_point_prefix:"fleur",pip_url:"aiida-fleur",plugin_info:"https://raw.github.com/JuDFTteam/aiida-fleur/develop/setup.json",name:"aiida-fleur",package_name:"aiida_fleur",hosted_on:"github.com",metadata:{release_date:"2023-05-03",description:"AiiDA Plugin for running the FLEUR code and its input generator. Also includes high-level workchains and utilities",author_email:"The JuDFT team <j.broeder@fz-juelich.de>",classifiers:["Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.0.0"},aiida_version:">=2.0.1,<3.0.0",entry_points:{"aiida.calculations":{"fleur.fleur":{description:["A CalcJob class that represents FLEUR DFT calculation.","    For more information about the FLEUR-code family go to http://www.flapw.de/"],spec:{inputs:[{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:"Use a FleurinpData node that specifies the input parametersusually copy from the parent calculation, basically makesthe inp.xml file visible in the db and makes sure it has the files needed."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote or local repository folder as parent folder (also for restarts and similar). It should contain all the needed files for a Fleur calc, only edited files should be uploaded from the repository."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"error_params",required:!1,valid_types:"Dict",info:""},{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_params_complex",required:!1,valid_types:"Dict",info:""},{name:"relax_parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"No retrieved folder found."},{status:301,message:"One of the output files can not be opened."},{status:302,message:"FLEUR calculation failed for unknown reason."},{status:303,message:"XML output file was not found."},{status:304,message:"Parsing of XML output file failed."},{status:305,message:"Parsing of relax XML output file failed."},{status:310,message:"FLEUR calculation failed due to lack of memory."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:312,message:"FLEUR calculation failed due to MT overlap."},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:314,message:"Problem with cdn is suspected. Consider removing cdn"},{status:315,message:"The LDA+U density matrix contains invalid elements."},{status:316,message:"Calculation failed due to time limits."},{status:318,message:"Calculation failed due to missing dependency ({name}) for given calculation."}]},class:"aiida_fleur.calculation.fleur:FleurCalculation"},"fleur.inpgen":{description:["JobCalculationClass for the inpgen, which is a preprocessor for a FLEUR calculation.","    For more information about produced files and the FLEUR-code family, go to http://www.flapw.de/."],spec:{inputs:[{name:"structure",required:!0,valid_types:"StructureData",info:"Choose the input structure to use"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Use a node that specifies the input parameters for the namelists"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"fleurinp",required:!0,valid_types:"FleurinpData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"No retrieved folder found."},{status:301,message:"One of the output files can not be opened."},{status:306,message:"XML input file was not found."},{status:307,message:"Some required files were not retrieved."},{status:308,message:"During parsing: FleurinpData could not be initialized, see log. "},{status:309,message:"During parsing: FleurinpData failed validation."},{status:310,message:"The profile {profile} is not known to the used inpgen code"}]},class:"aiida_fleur.calculation.fleurinputgen:FleurinputgenCalculation"}},"aiida.data":{"fleur.fleurinp":"aiida_fleur.data.fleurinp:FleurinpData"},"aiida.parsers":{"fleur.fleurinpgenparser":"aiida_fleur.parsers.fleur_inputgen:Fleur_inputgenParser","fleur.fleurparser":"aiida_fleur.parsers.fleur:FleurParser"},"aiida.workflows":{"fleur.banddos":{description:["This workflow calculated a bandstructure from a Fleur calculation","","    :Params: a Fleurcalculation node","    :returns: Success, last result node, list with convergence behavior"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"banddos_calc",required:!0,valid_types:"",info:""},{name:"output_banddos_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_banddos_wc_bands",required:!1,valid_types:"BandsData",info:""},{name:"output_banddos_wc_dos",required:!1,valid_types:"XyData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"SCF calculation failed."},{status:335,message:"Found no SCF calculation remote repository."}]},class:"aiida_fleur.workflows.banddos:FleurBandDosWorkChain"},"fleur.base":{description:["Workchain to run a FLEUR calculation with automated error handling and restarts"],spec:{inputs:[{name:"options",required:!0,valid_types:"Dict",info:"Optional parameters to set up computational details."},{name:"add_comp_para",required:!1,valid_types:"Dict",info:"Gives additional control over computational parametersonly_even_MPI: set to true if you want to suppress odd number of MPI processes in parallelisation.This might speedup a calculation for machines having even number of sockets per node.max_queue_nodes: maximal number of nodes allowed on the remote machine. Used only to automatically solve some FLEUR failures.max_queue_wallclock_sec: maximal wallclock time allowed on the remote machine. Used only to automatically solve some FLEUR failures."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"description",required:!1,valid_types:"str, NoneType",info:"Calculation description."},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:"Use a FleurinpData node that specifies the input parametersusually copy from the parent calculation, basically makesthe inp.xml file visible in the db and makes sure it has the files needed."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"label",required:!1,valid_types:"str, NoneType",info:"Calculation label."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote or local repository folder as parent folder (also for restarts and similar). It should contain all the needed files for a Fleur calc, only edited files should be uploaded from the repository."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"error_params",required:!1,valid_types:"Dict",info:""},{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_params_complex",required:!1,valid_types:"Dict",info:""},{name:"relax_parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:388,message:"Computational resources are not optimal."},{status:389,message:"Computational resources are not optimal."},{status:390,message:"Computational resources are not optimal."},{status:399,message:"FleurCalculation failed and FleurBaseWorkChain has no strategy to resolve this"},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_fleur.workflows.base_fleur:FleurBaseWorkChain"},"fleur.base_relax":{description:["Workchain to run Relax WorkChain with automated error handling and restarts"],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"description",required:!1,valid_types:"str, NoneType",info:"Calculation description."},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"label",required:!1,valid_types:"str, NoneType",info:"Calculation label."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"last_scf",required:!0,valid_types:"",info:""},{name:"optimized_structure",required:!0,valid_types:"StructureData",info:""},{name:"output_relax_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:399,message:"FleurRelaxWorkChain failed and FleurBaseRelaxWorkChain has no strategy to resolve this"},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_fleur.workflows.base_relax:FleurBaseRelaxWorkChain"},"fleur.cfcoeff":{description:["Workflow for calculating rare-earth crystal field coefficients"],spec:{inputs:[{name:"metadata",required:!1,valid_types:"",info:""},{name:"orbcontrol",required:!1,valid_types:"Data",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"scf_rare_earth_analogue",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_cfcoeff_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_cfcoeff_wc_charge_densities",required:!1,valid_types:"XyData",info:""},{name:"output_cfcoeff_wc_potentials",required:!1,valid_types:"XyData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:345,message:"Convergence scf workflow failed."},{status:451,message:"Convergence orbcontrol workflow failed."},{status:452,message:"CF calculation failed."}]},class:"aiida_fleur.workflows.cfcoeff:FleurCFCoeffWorkChain"},"fleur.corehole":{description:["Turn key solution for a corehole calculation with the FLEUR code.","    Has different protocols for different core-hole types (valence, charge).","","    Calculates supercells. Extracts binding energies","    for certain corelevels from the total energy differences a the calculation with","    corehole and without.","","    Documentation:","    See help for details.","","    Two paths are possible:","","    (1) Start from a structure -> workchains run inpgen first (recommended)","    (2) Start from a Fleurinp data object","","    Also it is recommended to provide a calc parameter node for the structure","","    :param wf_parameters: Dict node, specify, resources and what should be calculated","    :param structure: structureData node, crystal structure","    :param calc_parameters: Dict node, inpgen parameters for the crystal structure","    :param fleurinp:  fleurinpData node,","    :param inpgen: Code node,","    :param fleur: Code node,","","    :return: output_corehole_wc_para Dict node,  successful=True if no error","","    :uses workchains: fleur_scf_wc, fleur_relax_wc","    :uses calcfunctions: supercell, create_corehole_result_node, prepare_struc_corehole_wf"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"inpgen",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_corehole_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:1,message:"The input resources are invalid."},{status:2,message:"The process failed with legacy failure mode."},{status:2,message:"Input resources are missing."},{status:3,message:"The code provided is invalid, or not of the right kind."},{status:4,message:"Inpgen calculation FAILED, check output"},{status:5,message:"Changing of the FLEURINP data went wrong, check log."},{status:6,message:"The FLEUR input file for the calculation did not validate."},{status:7,message:"At least one FLEUR calculation FAILED, check the output and log."},{status:8,message:"At least one FLEUR calculation did not/could not reach thedesired convergece Criteria, with the current parameters."},{status:9,message:"Something went wrong in the determiation what coreholes to calculate, probably the input format was not correct. Check log."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.corehole:FleurCoreholeWorkChain"},"fleur.create_magnetic":{description:["This workflow creates relaxed magnetic film on a substrate."],spec:{inputs:[{name:"distance_suggestion",required:!1,valid_types:"Dict, NoneType",info:""},{name:"eos",required:!1,valid_types:"Data",info:""},{name:"eos_output",required:!1,valid_types:"Dict, NoneType",info:""},{name:"interlayer_dist",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"optimized_structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"relax",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"magnetic_structure",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:380,message:"Specified substrate has to be bcc or fcc."},{status:382,message:"Relaxation calculation failed."},{status:383,message:"EOS WorkChain failed."}]},class:"aiida_fleur.workflows.create_magnetic_film:FleurCreateMagneticWorkChain"},"fleur.dmi":{description:["This workflow calculates DMI energy dispersion of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_dmi_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.dmi:FleurDMIWorkChain"},"fleur.dos":{description:["DEPRECATED: Use FleurBandDosWorkChain instead (entrypoint fleur.banddos)","    This workflow calculated a DOS from a Fleur calculation","","    :Params: a Fleurcalculation node","    :returns: Success, last result node, list with convergence behavior","","    wf_parameters: {  'tria', 'nkpts', 'sigma', 'emin', 'emax'}","    defaults : tria = True, nkpts = 800, sigma=0.005, emin= -0.3, emax = 0.8"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.dos:fleur_dos_wc"},"fleur.eos":{description:["This workflow calculates the equation of states of a structure.","    Calculates several unit cells with different volumes.","    A Birch_Murnaghan  equation of states fit determines the Bulk modulus and the","    groundstate volume of the cell.","","    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict","    :params structure: StructureData node, 'structure' crystal structure","    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen","    :params inpgen: Code node,","    :params fleur: Code node,","","","    :return output_eos_wc_para: Dict node, contains relevant output information.","                                about general succeed, fit results and so on."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_eos_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_eos_wc_structure",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:400,message:"At least one of the SCF sub processes did not finish successfully."}]},class:"aiida_fleur.workflows.eos:FleurEosWorkChain"},"fleur.init_cls":{description:["Turn key solution for the calculation of core level shift"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_initial_cls_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.initial_cls:FleurInitialCLSWorkChain"},"fleur.mae":{description:["This workflow calculates the Magnetic Anisotropy Energy of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_mae_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.mae:FleurMaeWorkChain"},"fleur.mae_conv":{description:["This workflow calculates the Magnetic Anisotropy Energy of a structure."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_mae_conv_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:343,message:"Convergence MAE calculation failed for all SQAs."},{status:344,message:"Convergence MAE calculation failed for some SQAs."}]},class:"aiida_fleur.workflows.mae_conv:FleurMaeConvWorkChain"},"fleur.orbcontrol":{description:["Workchain for determining the groundstate density matrix in an DFT+U","    calculation. This is done in 2 or 3 steps:","","        1. Converge the system without DFT+U (a converged calculation can be","           provided to skip this step)","        2. A fixed number of iterations is run with fixed density matrices","           either generated as all distinct permutations for the given occupations","           or the explicitly given configurations","        3. The system and density matrix is relaxed","","    :param wf_parameters: (Dict), Workchain Specifications","    :param scf_no_ldau: (Dict), Inputs to a FleurScfWorkChain providing the initial system","                                either converged or staring from a structure","    :param scf_with_ldau: (Dict), Inputs to a FleurScfWorkChain. Only the wf_parameters are valid","    :param fleurinp: (FleurinpData) FleurinpData to start from if no SCF should be done","    :param remote: (RemoteData) RemoteData to start from if no SCF should be done","    :param structure: (StructureData) Structure to start from if no SCF should be done","    :param calc_parameters: (Dict), Inpgen Parameters","    :param settings: (Dict), additional settings for e.g retrieving files","    :param options: (Dict), Options for the submission of the jobs","    :param inpgen: (Code)","    :param fleur: (Code)"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fixed_remotes",required:!1,valid_types:"RemoteData",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"options_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"relaxed_remotes",required:!1,valid_types:"RemoteData",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf_no_ldau",required:!1,valid_types:"Data",info:"Inputs for SCF Workchain before adding LDA+U"},{name:"scf_with_ldau",required:!1,valid_types:"Data",info:"Inputs for SCF Workchain after the LDA+U matrix was fixed"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"groundstate_scf",required:!0,valid_types:"",info:""},{name:"output_orbcontrol_wc_para",required:!0,valid_types:"Dict",info:""},{name:"groundstate_denmat",required:!1,valid_types:"SinglefileData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Input codes do not correspond to fleur or inpgen respectively."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:342,message:"Convergence LDA+U calculation failed for some Initial configurations."},{status:343,message:"Convergence LDA+U calculation failed for all Initial configurations."},{status:360,message:"Inpgen calculation failed."},{status:450,message:"Convergence workflow without LDA+U failed."}]},class:"aiida_fleur.workflows.orbcontrol:FleurOrbControlWorkChain"},"fleur.relax":{description:["This workflow performs structure optimization."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"last_scf",required:!0,valid_types:"",info:""},{name:"optimized_structure",required:!0,valid_types:"StructureData",info:""},{name:"output_relax_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"If you want to run a final scf inpgen has to be there."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:350,message:"Optimization cycle did not lead to convergence of forces."},{status:351,message:"SCF Workchains failed for some reason."},{status:352,message:"Found no relaxed structure info in the output of SCF"},{status:353,message:"Found no SCF output"},{status:354,message:"Force is small, switch to BFGS"}]},class:"aiida_fleur.workflows.relax:FleurRelaxWorkChain"},"fleur.relax_torque":{description:["This workflow performs spin structure optimization."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_relax_torque_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"If you want to run a final scf inpgen has to be there."},{status:350,message:"Optimization cycle did not lead to convergence."},{status:351,message:"An SCF Workchain failed for some reason."}]},class:"aiida_fleur.workflows.relax_torque:FleurRelaxTorqueWorkChain"},"fleur.scf":{description:["Workchain for converging a FLEUR calculation (SCF).","","    It converges the charge density, total energy or the largest force.","    Two paths are possible:","","    (1) Start from a structure and run the inpgen first optional with calc_parameters","    (2) Start from a Fleur calculation, with optional remoteData","","    :param wf_parameters: (Dict), Workchain Specifications","    :param structure: (StructureData), Crystal structure","    :param calc_parameters: (Dict), Inpgen Parameters","    :param fleurinp: (FleurinpData), to start with a Fleur calculation","    :param remote_data: (RemoteData), from a Fleur calculation","    :param inpgen: (Code)","    :param fleur: (Code)","","    :return: output_scf_wc_para (Dict), Information of workflow results","        like Success, last result node, list with convergence behavior"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"fleurinp",required:!0,valid_types:"FleurinpData",info:""},{name:"last_calc",required:!0,valid_types:"",info:""},{name:"output_scf_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Input codes do not correspond to fleur or inpgen respectively."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:360,message:"Inpgen calculation failed."},{status:361,message:"Fleur calculation failed."},{status:362,message:"SCF cycle did not lead to convergence."}]},class:"aiida_fleur.workflows.scf:FleurScfWorkChain"},"fleur.ssdisp":{description:["This workflow calculates spin spiral dispersion of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_ssdisp_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.ssdisp:FleurSSDispWorkChain"},"fleur.ssdisp_conv":{description:["This workflow calculates the Spin Spiral Dispersion of a structure."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_ssdisp_conv_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:340,message:"Convergence SSDisp calculation failed for all q-vectors."},{status:341,message:"Convergence SSDisp calculation failed for some q-vectors."}]},class:"aiida_fleur.workflows.ssdisp_conv:FleurSSDispConvWorkChain"},"fleur.strain":{description:["This workflow calculates the deformation potential a structure = -BdEg/dP = d(Eg)/d(ln(V)).","    Calculates several unit cells with different volumes.","    A Birch_Murnaghan  equation of states fit determines the Bulk modulus(B) and the","    ground-state volume of the cell.","","    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict","    :params structure: StructureData node, 'structure' crystal structure","    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen","    :params inpgen: Code node,","    :params fleur: Code node,","","","    :return output_strain_wc_para: Dict node, contains relevant output information.","                                about general succeed, fit results and so on."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"inpgen",required:!0,valid_types:"Code",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_strain_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:331,message:"Invalid code node specified, check inpgen and fleur code nodes."}]},class:"aiida_fleur.workflows.strain:FleurStrainWorkChain"}},console_scripts:{"aiida-fleur":"aiida_fleur.cmdline:cmd_root"}},commits_count:199,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:19},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-fleur",is_installable:"True"},"aiida-flexpart":{code_home:"https://github.com/aiidaplugins/aiida-flexpart",entry_point_prefix:"flexpart",pip_url:"git+https://github.com/aiidaplugins/aiida-flexpart",name:"aiida-flexpart",package_name:"aiida_flexpart",hosted_on:"github.com",metadata:{author:"The AiiDA Team",author_email:"aliaksandr.yakutovich@empa.ch",version:"0.1.0a0",description:"AiiDA plugin for the FLEXPART code (simulation of atmospheric transport processes).",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.6.5,<3.0.0",entry_points:{"aiida.calculations":{"flexpart.cosmo":"aiida_flexpart.calculations.flexpart_cosmo:FlexpartCosmoCalculation"},"aiida.parsers":{"flexpart.cosmo":"aiida_flexpart.parsers.flexpart_cosmo:FlexpartCosmoParser"},"aiida.workflows":{"flexpart.multi_dates":"aiida_flexpart.workflows.multi_dates_workflow:FlexpartMultipleDatesWorkflow"}},commits_count:1,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/aiidaplugins/aiida-flexpart"},"aiida-gaussian":{code_home:"https://github.com/nanotech-empa/aiida-gaussian",entry_point_prefix:"gaussian",pip_url:"aiida-gaussian",plugin_info:"https://raw.githubusercontent.com/nanotech-empa/aiida-gaussian/master/pyproject.toml",name:"aiida-gaussian",package_name:"aiida_gaussian",hosted_on:"github.com",metadata:{release_date:"2023-08-31",description:"AiiDA plugin for the Gaussian quantum chemistry software.",author:"Kristjan Eimre, Pezhman Zarabadi-Poor, Aliaksandr Yakutovich",license:"MIT",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python :: 3","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Software Development :: Libraries :: Python Modules"],version:"2.1.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{gaussian:{description:["AiiDA calculation plugin wrapping Gaussian","","    Template:","","    parameters = Dict(dict={","        'link0_parameters': {","            '%chk':'aiida.chk',","            '%mem': '1024MB',","            '%nprocshared': '2',","        },","        'functional':'PBE1PBE',","        'basis_set':'6-31g',","        'charge': 0,","        'multiplicity': 1,","        'route_parameters': {","            'scf': {'cdiis': None}","            'nosymm': None,","            'opt': 'tight',","        },","    })"],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"the folder of a completed gaussian calculation"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"additional input parameters"},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"Input structure; will be converted to pymatgen object"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The result parameters of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"energy_ev",required:!1,valid_types:"Float",info:"Final energy in electronvolts"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Final optimized structure, if available"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the output file."},{status:211,message:"The retrieved output log could not be read."},{status:220,message:"The output file could not be parsed."},{status:301,message:"The SCF did not converge and the calculation was terminated."},{status:302,message:"The calculation was terminated due to a logic error in ASyTop."},{status:303,message:"The calculation was terminated due to an inaccurate quadrature in CalDSu."},{status:390,message:"The calculation was terminated due to an error."},{status:391,message:"The log did not contain 'Normal termination' (probably out of time)."}]},class:"aiida_gaussian.calculations:GaussianCalculation"},"gaussian.cubegen":{description:["Plugin to run the cubegen utility","","    Example:","","    parameters = {",'        "homo-5": {','            "kind": "AMO=16",','            "npts": -2,',"        },",'        "spin": {','            "kind": "Spin=SCF",','            "npts": 0,',"        },","    }","    Each key corresponds to one produced cube.","    key specifies the name of the output node","",'    In case of "npts": -1, you have to use the stencil file input:',"","        IFlag X0 Y0 Z0  # Output unit number and initial point.","        N1 X1 Y1 Z1     # Number of points and step-size in the X-direction.","        N2 X2 Y2 Z2     # Number of points and step-size in the Y-direction.","        N3 X3 Y3 Z3     # Number of points and step-size in the Z-direction.","","    See more details at https://gaussian.com/cubegen/"],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"dictionary containing entries for cubes to be printed."},{name:"parent_calc_folder",required:!0,valid_types:"RemoteData",info:"the folder of a containing the .fchk"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"gauss_memdef",required:!1,valid_types:"Int, NoneType",info:"Set the GAUSS_MEMDEF env variable to set the max memory in MB."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieve_cubes",required:!1,valid_types:"Bool, NoneType",info:"should the cubes be retrieved?"},{name:"stencil",required:!1,valid_types:"SinglefileData, NoneType",info:"In case of npts=-1, use this cube specification."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"The retrieved folder could not be accessed."},{status:301,message:"The retrieved temporary folder could not be accessed."}]},class:"aiida_gaussian.calculations:CubegenCalculation"},"gaussian.formchk":{description:["Very simple plugin to run the formchk utility"],spec:{inputs:[{name:"parent_calc_folder",required:!0,valid_types:"RemoteData",info:"the folder of a containing the .chk"},{name:"chk_name",required:!1,valid_types:"Str, NoneType",info:"name of the checkpoint file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieve_fchk",required:!1,valid_types:"Bool, NoneType",info:"retrieve the fchk file"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_gaussian.calculations:FormchkCalculation"}},"aiida.parsers":{"gaussian.advanced":"aiida_gaussian.parsers.gaussian:GaussianAdvancedParser","gaussian.base":"aiida_gaussian.parsers.gaussian:GaussianBaseParser","gaussian.cubegen_base":"aiida_gaussian.parsers.cubegen:CubegenBaseParser"},"aiida.workflows":{"gaussian.base":{description:["Workchain to run a Gaussian calculation with automated error handling and restarts."],spec:{inputs:[{name:"gaussian",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:350,message:"The calculation failed with an unrecoverable SCF convergence error."},{status:399,message:"The calculation failed with an unrecoverable error."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_gaussian.workchains:GaussianBaseWorkChain"},"gaussian.cubes":{description:["No description available"],spec:{inputs:[{name:"cubegen_code",required:!0,valid_types:"Code",info:""},{name:"formchk_code",required:!0,valid_types:"Code",info:""},{name:"gaussian_calc_folder",required:!0,valid_types:"RemoteData",info:"The gaussian calculation output folder."},{name:"gaussian_output_params",required:!0,valid_types:"Dict",info:"The gaussian calculation output parameters."},{name:"cubegen_parser_name",required:!1,valid_types:"str",info:""},{name:"cubegen_parser_params",required:!1,valid_types:"Dict, NoneType",info:"Additional parameters to cubegen parser."},{name:"dx",required:!1,valid_types:"Float, NoneType",info:"Cube file spacing [ang]."},{name:"edge_space",required:!1,valid_types:"Float, NoneType",info:"Extra cube space in addition to molecule bounding box [ang]."},{name:"generate_density",required:!1,valid_types:"Bool, NoneType",info:"Generate density cube."},{name:"generate_spin_density",required:!1,valid_types:"Bool, NoneType",info:"Generate spin density cube (if applicable)."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"natural_orbitals",required:!1,valid_types:"Bool, NoneType",info:"The cube files are natural orbitals."},{name:"orbital_index_ref",required:!1,valid_types:"Str, NoneType",info:"Reference index, possible choices: 'half_num_el', 'abs'."},{name:"orbital_indexes",required:!1,valid_types:"List, NoneType",info:"Indexes of the orbital cubes to generate."},{name:"retrieve_cubes",required:!1,valid_types:"Bool, NoneType",info:"should the cubes be retrieved?"}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:302,message:"Input options are invalid."},{status:390,message:"One or more steps of the work chain failed."}]},class:"aiida_gaussian.workchains:GaussianCubesWorkChain"}}},commits_count:18,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"green",text:"Workflows",count:2}],pip_install_cmd:"pip install aiida-gaussian",is_installable:"True"},"aiida-gaussian-datatypes":{code_home:"https://github.com/dev-zero/aiida-gaussian-datatypes",documentation_url:"https://github.com/dev-zero/aiida-gaussian-datatypes/blob/master/README.md",entry_point_prefix:"gaussian",pip_url:"aiida-gaussian-datatypes",plugin_info:"https://raw.github.com/dev-zero/aiida-gaussian-datatypes/master/setup.json",name:"aiida-gaussian-datatypes",package_name:"aiida_gaussian_datatypes",hosted_on:"github.com",metadata:{release_date:"2022-07-22",description:"AiiDA data plugin to manage gaussian datatypes (basis sets and pseudopotentials) as first-class citizens",author:"Tiziano Müller",author_email:"tiziano.mueller@chem.uzh.ch",license:"MIT License",home_page:"https://github.com/dev-zero/aiida-gaussian-datatypes",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.5.1"},aiida_version:">=1.6.2",entry_points:{"aiida.cmdline.data":{"gaussian.basisset":"aiida_gaussian_datatypes.basisset.cli:cli","gaussian.pseudo":"aiida_gaussian_datatypes.pseudopotential.cli:cli"},"aiida.data":{"gaussian.basisset":"aiida_gaussian_datatypes.basisset.data:BasisSet","gaussian.pseudo":"aiida_gaussian_datatypes.pseudopotential.data:Pseudopotential"},"aiida.groups":{"gaussian.basisset":"aiida_gaussian_datatypes.groups:BasisSetGroup","gaussian.pseudo":"aiida_gaussian_datatypes.groups:PseudopotentialGroup"}},commits_count:0,development_status:"beta",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'gaussian' does not follow naming convention."],summaryinfo:[{colorclass:"red",text:"Data",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:4}],pip_install_cmd:"pip install aiida-gaussian-datatypes",is_installable:"True"},"aiida-gollum":{code_home:"https://github.com/garsua/aiida-gollum/",documentation_url:"https://aiida-gollum.readthedocs.io/",entry_point_prefix:"gollum",pip_url:"git+https://github.com/garsua/aiida-gollum",name:"aiida-gollum",package_name:"aiida_gollum",hosted_on:"github.com",metadata:{author:"Victor M. Garcia-Suarez",author_email:"vm.garcia@cinn.es",version:"0.12.0",description:"A plugin for Gollum functionality within AiiDA framework.",classifiers:["License :: OSI Approved :: MIT License","Framework :: AiiDA","Programming Language :: Python :: 2.7","Development Status :: 1 - Alpha"]},aiida_version:">=0.12.0",entry_points:{"aiida.calculations":{"gollum.gollum":"aiida_gollum.calculations.gollum:GollumCalculation"},"aiida.parsers":{"gollum.parser":"aiida_gollum.parsers.gollum:GollumParser"}},commits_count:0,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/garsua/aiida-gollum"},"aiida-graphql":{code_home:"https://github.com/dev-zero/aiida-graphql",entry_point_prefix:"graphql",pip_url:"aiida-graphql",name:"aiida-graphql",package_name:"aiida_graphql",hosted_on:"github.com",metadata:{release_date:"2019-10-28",description:"Strawberry-based GraphQL API Server for AiiDA",author:"Tiziano Müller",author_email:"tiziano.mueller@chem.uzh.ch",license:"MIT",home_page:"https://github.com/dev-zero/aiida-graphql",classifiers:["Development Status :: 3 - Alpha","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.0.2"},aiida_version:">=1.0.0b6,<2.0.0",entry_points:{},commits_count:0,development_status:"alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-graphql<pre>Collecting aiida-graphql
  Downloading aiida_graphql-0.0.2-py3-none-any.whl (6.6 kB)
Collecting aiida<2.0.0,>=1.0.0b6 (from aiida-graphql)
  Downloading aiida-1.0.1.tar.gz (2.8 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting strawberry-graphql<0.17.0,>=0.16.7 (from aiida-graphql)
  Downloading strawberry_graphql-0.16.10-py3-none-any.whl (29 kB)
Requirement already satisfied: aiida-core in /opt/conda/lib/python3.9/site-packages (from aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.4.1)
Collecting click<8.0,>=7.0 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading click-7.1.2-py2.py3-none-any.whl (82 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 82.8/82.8 kB 9.6 MB/s eta 0:00:00
Collecting graphql-core<4.0.0,>=3.0.0a0 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading graphql_core-3.3.0a3-py3-none-any.whl.metadata (11 kB)
Collecting hupper<2.0,>=1.5 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading hupper-1.12-py3-none-any.whl (22 kB)
Requirement already satisfied: pygments<3.0,>=2.3 in /opt/conda/lib/python3.9/site-packages (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql) (2.16.1)
Collecting starlette==0.12.10 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading starlette-0.12.10.tar.gz (46 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 46.3/46.3 kB 9.1 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting uvicorn==0.10.0 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading uvicorn-0.10.0.tar.gz (26 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting h11==0.8.* (from uvicorn==0.10.0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading h11-0.8.1-py2.py3-none-any.whl (55 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 55.8/55.8 kB 13.7 MB/s eta 0:00:00
Collecting websockets==8.* (from uvicorn==0.10.0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading websockets-8.1.tar.gz (58 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 58.9/58.9 kB 14.3 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting httptools==0.0.13 (from uvicorn==0.10.0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading httptools-0.0.13.tar.gz (104 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 104.2/104.2 kB 24.0 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting uvloop==0.14.0rc2 (from uvicorn==0.10.0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading uvloop-0.14.0rc2.tar.gz (2.0 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.0/2.0 MB 18.2 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: typing-extensions<5.0,>=4.5 in /opt/conda/lib/python3.9/site-packages (from graphql-core<4.0.0,>=3.0.0a0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql) (4.8.0)
Requirement already satisfied: alembic~=1.2 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (1.12.1)
Requirement already satisfied: archive-path~=0.4.2 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.4.2)
Requirement already satisfied: aio-pika~=6.6 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (6.8.1)
Requirement already satisfied: circus~=0.18.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.18.0)
Requirement already satisfied: click-spinner~=0.1.8 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.1.10)
INFO: pip is looking at multiple versions of aiida-core to determine which version is compatible with other requirements. This could take a while.
Collecting strawberry-graphql<0.17.0,>=0.16.7 (from aiida-graphql)
  Downloading strawberry_graphql-0.16.9-py3-none-any.whl (29 kB)
Collecting uvicorn==0.9.1 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading uvicorn-0.9.1.tar.gz (25 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting uvloop==0.* (from uvicorn==0.9.1->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading uvloop-0.19.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
Collecting strawberry-graphql<0.17.0,>=0.16.7 (from aiida-graphql)
  Downloading strawberry_graphql-0.16.8-py3-none-any.whl (29 kB)
  Downloading strawberry_graphql-0.16.7-py3-none-any.whl (29 kB)
Collecting aiida<2.0.0,>=1.0.0b6 (from aiida-graphql)
  Downloading aiida-1.0.0.tar.gz (1.9 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida-1.0.0b6.tar.gz (2.6 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting aiida-graphql
  Downloading aiida_graphql-0.0.1-py3-none-any.whl (6.6 kB)
Requirement already satisfied: click~=8.1 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (8.1.7)
Requirement already satisfied: disk-objectstore~=0.6.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.6.0)
Requirement already satisfied: docstring-parser in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.15)
Requirement already satisfied: get-annotations~=0.1 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.1.2)
Requirement already satisfied: graphviz~=0.19 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.20.1)
Requirement already satisfied: ipython>=7 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (8.17.2)
Requirement already satisfied: jinja2~=3.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (3.1.2)
Requirement already satisfied: jsonschema~=3.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (3.2.0)
Requirement already satisfied: kiwipy~=0.7.7 in /opt/conda/lib/python3.9/site-packages (from kiwipy[rmq]~=0.7.7->aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.7.8)
Requirement already satisfied: importlib-metadata~=4.13 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (4.13.0)
Requirement already satisfied: numpy~=1.21 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (1.26.2)
Requirement already satisfied: paramiko>=2.7.2,~=2.7 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.12.0)
Requirement already satisfied: plumpy~=0.21.6 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.21.10)
Requirement already satisfied: pgsu~=0.2.1 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.2.4)
Requirement already satisfied: psutil~=5.6 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (5.9.6)
Requirement already satisfied: psycopg2-binary~=2.8 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.9.9)
Requirement already satisfied: pytz~=2021.1 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2021.3)
Requirement already satisfied: pyyaml~=6.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (6.0.1)
Requirement already satisfied: requests~=2.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.31.0)
Requirement already satisfied: sqlalchemy~=1.4.22 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (1.4.50)
Requirement already satisfied: tabulate~=0.8.5 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.8.10)
Requirement already satisfied: tqdm~=4.45 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (4.66.1)
Requirement already satisfied: upf_to_json~=0.9.2 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.9.5)
Requirement already satisfied: wrapt~=1.11 in /opt/conda/lib/python3.9/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (1.16.0)
INFO: pip is looking at multiple versions of strawberry-graphql to determine which version is compatible with other requirements. This could take a while.
Collecting strawberry-graphql<0.17.0,>=0.16.5 (from aiida-graphql)
  Downloading strawberry_graphql-0.16.6-py3-none-any.whl (29 kB)
  Downloading strawberry_graphql-0.16.5-py3-none-any.whl (29 kB)
Collecting aiida-core (from aiida<2.0.0,>=1.0.0b6->aiida-graphql)
  Downloading aiida_core-2.4.1-py3-none-any.whl.metadata (10 kB)
INFO: pip is still looking at multiple versions of aiida-core to determine which version is compatible with other requirements. This could take a while.
Collecting uvicorn==0.9.0 (from strawberry-graphql<0.17.0,>=0.16.5->aiida-graphql)
  Downloading uvicorn-0.9.0.tar.gz (24 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
ERROR: Cannot install aiida-graphql because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida 1.0.0 depends on aiida-core==1.0
    aiida 1.0.0b6 depends on aiida-core==1.0.0b6
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W020'>W020</a>: Unable to read wheel file from PyPI release: <pre>No entry_points.txt found in wheel</pre>","<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'"],summaryinfo:[],pip_install_cmd:"pip install aiida-graphql",is_installable:"False"},"aiida-gromacs":{code_home:"https://github.com/jimboid/aiida-gromacs",documentation_url:"https://aiida-gromacs.readthedocs.io/",entry_point_prefix:"gromacs",pip_url:"git+https://github.com/jimboid/aiida-gromacs",name:"aiida-gromacs",package_name:"aiida_gromacs",hosted_on:"github.com",metadata:{description:"A plugin for using GROMACS with AiiDA for molecular dymanics simulations.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 5 - Production/Stable","Framework :: AiiDA"],author:"James Gebbie-Rayet",author_email:"james.gebbie@stfc.ac.uk"},aiida_version:">=2.0,<3",entry_points:{"aiida.data":{"gromacs.pdb2gmx":"aiida_gromacs.data.pdb2gmx:Pdb2gmxParameters","gromacs.editconf":"aiida_gromacs.data.editconf:EditconfParameters","gromacs.genion":"aiida_gromacs.data.genion:GenionParameters","gromacs.grompp":"aiida_gromacs.data.grompp:GromppParameters","gromacs.mdrun":"aiida_gromacs.data.mdrun:MdrunParameters","gromacs.solvate":"aiida_gromacs.data.solvate:SolvateParameters"},"aiida.calculations":{"gromacs.pdb2gmx":{description:["AiiDA calculation plugin wrapping the 'gmx pdb2gmx' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Pdb2gmxParameters",info:"Command line parameters for gmx pdb2gmx"},{name:"pdbfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"itpfile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"n_file",required:!1,valid_types:"SinglefileData",info:"Output index file"},{name:"q_file",required:!1,valid_types:"SinglefileData",info:"Output Structure file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.pdb2gmx:Pdb2gmxCalculation"},"gromacs.editconf":{description:["AiiDA calculation plugin wrapping the 'gmx editconf' executable.","","    AiiDA plugin wrapper for adding a simulation box to structure file."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure file."},{name:"parameters",required:!0,valid_types:"EditconfParameters",info:"Command line parameters for gmx editconf."},{name:"bf_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Generic data file."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output file containing simulation box."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"mead_file",required:!1,valid_types:"SinglefileData",info:"Coordination file for MEAD"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.editconf:EditconfCalculation"},"gromacs.genion":{description:["AiiDA calculation plugin wrapping the 'gmx genion' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"GenionParameters",info:"Command line parameters for gmx genion"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology file."},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Input tpr file."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output gro file with ions added."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output topology with ions added."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.genion:GenionCalculation"},"gromacs.grompp":{description:["AiiDA calculation plugin wrapping the 'gmx grompp' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure"},{name:"mdpfile",required:!0,valid_types:"SinglefileData",info:"grompp run file."},{name:"parameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"e_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Energy file"},{name:"itp_dirs",required:!1,valid_types:"FolderData",info:"Forcefield descriptions"},{name:"itp_files",required:!1,valid_types:"SinglefileData",info:"Restraint files"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file"},{name:"qmi_file",required:!1,valid_types:"SinglefileData, NoneType",info:"QM input file"},{name:"r_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Structure file"},{name:"rb_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Structure file"},{name:"ref_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Full precision trajectory file"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"t_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Full precision trajectory file"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Output gro file ready for adding ions."},{name:"imd_file",required:!1,valid_types:"SinglefileData",info:"Coordinate file in Gromos-87 format"},{name:"po_file",required:!1,valid_types:"SinglefileData",info:"grompp input file with MD parameters"},{name:"pp_file",required:!1,valid_types:"SinglefileData",info:"Topology file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.grompp:GromppCalculation"},"gromacs.mdrun":{description:["AiiDA calculation plugin wrapping the 'gmx mdrun' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun"},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"awh_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"cpi_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Checkpoint file"},{name:"ei_file",required:!1,valid_types:"SinglefileData, NoneType",info:"ED sampling input"},{name:"membed_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Generic data file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"mn_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file"},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"mp_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Topology file"},{name:"multidir_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Run directory"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"rerun_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Trajectory: xtc trr cpt gro g96 pdb tng"},{name:"table_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"tableb_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"tablep_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"}],outputs:[{name:"enfile",required:!0,valid_types:"SinglefileData",info:"Output energy file."},{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output structure file."},{name:"logfile",required:!0,valid_types:"SinglefileData",info:"Output log file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"trrfile",required:!0,valid_types:"SinglefileData",info:"Output trajectory."},{name:"cpo_file",required:!1,valid_types:"SinglefileData",info:"Checkpoint file."},{name:"dhdl_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"eo_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"field_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"if_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"mtx_file",required:!1,valid_types:"SinglefileData",info:"Hessian Matrix"},{name:"pf_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"px_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"ra_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"ro_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"rs_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"rt_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"swap_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"tpi_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"tpid_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"x_file",required:!1,valid_types:"SinglefileData",info:"Compressed trajectory (tng format or portable xdr format)"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.mdrun:MdrunCalculation"},"gromacs.solvate":{description:["AiiDA calculation plugin wrapping the 'gmx solvate' executable.","","    AiiDA plugin wrapper for solvating a molecular system."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure"},{name:"parameters",required:!0,valid_types:"SolvateParameters",info:"Command line parameters for gmx solvate."},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output solvated gro file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output topology file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.solvate:SolvateCalculation"},"gromacs.genericMD":{description:["AiiDA calculation plugin wrapping an executable with user defined","    input and output files."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"input_files",required:!1,valid_types:"SinglefileData",info:"Dictionary of input files."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"output_files",required:!1,valid_types:"List, NoneType",info:"List of output file names."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"log",required:!1,valid_types:"SinglefileData",info:"link to the default file.out."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."},{status:301,message:"Specified output file not produced by command."}]},class:"aiida_gromacs.calculations.genericMD:GenericCalculation"}},"aiida.parsers":{"gromacs.pdb2gmx":"aiida_gromacs.parsers.pdb2gmx:Pdb2gmxParser","gromacs.editconf":"aiida_gromacs.parsers.editconf:EditconfParser","gromacs.genion":"aiida_gromacs.parsers.genion:GenionParser","gromacs.grompp":"aiida_gromacs.parsers.grompp:GromppParser","gromacs.mdrun":"aiida_gromacs.parsers.mdrun:MdrunParser","gromacs.solvate":"aiida_gromacs.parsers.solvate:SolvateParser","gromacs.genericMD":"aiida_gromacs.parsers.genericMD:GenericParser"},"aiida.workflows":{"gromacs.setup":{description:["WorkChain for setting up a gromacs simulation automatically."],spec:{inputs:[{name:"editconfparameters",required:!0,valid_types:"EditconfParameters",info:"Command line parameters for gmx editconf"},{name:"genionparameters",required:!0,valid_types:"GenionParameters",info:"Command line parameters for gmx genion"},{name:"gromppionsparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp"},{name:"gromppminparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp minimisation run"},{name:"gromppnptparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp npt equilibration run"},{name:"gromppnvtparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp nvt equilibration run"},{name:"gromppprodparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp production run"},{name:"ionsmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for adding ions."},{name:"local_code",required:!0,valid_types:"Code",info:""},{name:"mdrunparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun production run"},{name:"minimiseparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun minimisation run"},{name:"minmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for minimisation."},{name:"nptmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for NPT equilibration."},{name:"nptparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun npt equilibration run"},{name:"nvtmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for NVT equilibration."},{name:"nvtparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun nvt equilibration run"},{name:"pdb2gmxparameters",required:!0,valid_types:"Pdb2gmxParameters",info:"Command line parameters for gmx pdb2gmx"},{name:"pdbfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"prodmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for production run."},{name:"solvateparameters",required:!0,valid_types:"SolvateParameters",info:"Command line parameters for gmx solvate"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"remote_code",required:!1,valid_types:"Code, NoneType",info:""}],outputs:[{name:"result",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_gromacs.workflows.simsetup:SetupWorkChain"}}},commits_count:216,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:7},{colorclass:"brown",text:"Parsers",count:7},{colorclass:"red",text:"Data",count:6},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/jimboid/aiida-gromacs",is_installable:"True"},"aiida-grouppathx":{code_home:"https://github.com/zhubonan/aiida-grouppathx",development_status:"beta",entry_point_prefix:"grouppathx",pip_url:"aiida-grouppathx",name:"aiida-grouppathx",package_name:"aiida_grouppathx",hosted_on:"github.com",metadata:{release_date:"2022-05-25",description:"AiiDA plugin provides the GroupPathX class",author_email:"Bonan Zhu <zhubonan@outlook.com>",classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.0"},aiida_version:">=1.6.4,<3",entry_points:{"aiida.cmdline.data":{gpx:"aiida_grouppathx.cli:grouppathx_cli"}},commits_count:3,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W020'>W020</a>: Unable to read wheel file from PyPI release: <pre>No entry_points.txt found in wheel</pre>","<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (alpha) does not match development_status in metadata (beta)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'gpx' does not start with prefix 'grouppathx.'"],summaryinfo:[{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-grouppathx",is_installable:"True"},"aiida-gudhi":{code_home:"https://github.com/ltalirz/aiida-gudhi",development_status:"beta",entry_point_prefix:"gudhi",pip_url:"aiida-gudhi",plugin_info:"https://raw.github.com/ltalirz/aiida-gudhi/master/setup.json",name:"aiida-gudhi",package_name:"aiida_gudhi",hosted_on:"github.com",metadata:{release_date:"2018-06-21",description:"AiiDA plugin for the [GUDHI](http://gudhi.gforge.inria.fr/) library for topological data analysis.",author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-gudhi",classifiers:["Programming Language :: Python"],version:"0.1.0a3"},aiida_version:"*",entry_points:{"aiida.calculations":{"gudhi.rdm":"aiida_gudhi.calculations.rips:RipsDistanceMatrixCalculation"},"aiida.data":{"gudhi.rdm":"aiida_gudhi.data.rips:RipsDistanceMatrixParameters"},"aiida.parsers":{"gudhi.rdm":"aiida_gudhi.parsers.rips:RipsParser"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install --pre aiida-gudhi",is_installable:"True"},"aiida-gulp":{code_home:"https://github.com/aiidaplugins/aiida-gulp",development_status:"beta",documentation_url:"https://aiida-gulp.readthedocs.io",entry_point_prefix:"gulp",pip_url:"aiida-gulp",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-gulp/master/setup.json",name:"aiida-gulp",package_name:"aiida_gulp",hosted_on:"github.com",metadata:{release_date:"2019-10-30",description:"AiiDA plugin for running the GULP MD code",author:"Chris Sewell",author_email:"chrisj_sewell@hotmail.com",license:"MIT",home_page:"https://github.com/chrisjsewell/aiida-gulp",classifiers:["Framework :: AiiDA","Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.6","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"0.10.0b5"},aiida_version:"1.0.0b5",entry_points:{"aiida.calculations":{"gulp.fitting":"aiida_gulp.calculations.gulp_fitting:GulpFittingCalculation","gulp.optimize":"aiida_gulp.calculations.gulp_optimize:GulpOptCalculation","gulp.single":"aiida_gulp.calculations.gulp_single:GulpSingleCalculation"},"aiida.cmdline.data":{"gulp.potentials":"aiida_gulp.cmndline.potentials:potentials"},"aiida.data":{"gulp.potential":"aiida_gulp.data.potential:EmpiricalPotential","gulp.symmetry":"aiida_gulp.data.symmetry:SymmetryData"},"aiida.parsers":{"gulp.fitting":"aiida_gulp.parsers.parse_fitting:GulpFittingParser","gulp.optimize":"aiida_gulp.parsers.parse_opt:GulpOptParser","gulp.single":"aiida_gulp.parsers.parse_single:GulpSingleParser"},"aiida.workflows":{},console_scripts:{gulp_mock:"aiida_gulp.tests.mock_gulp:main"},"gulp.potentials":{lj:"aiida_gulp.potentials.lj:PotentialWriterLJ",reaxff:"aiida_gulp.potentials.reaxff:PotentialWriterReaxff"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-gulp<pre>Collecting aiida-gulp
  Downloading aiida_gulp-0.10.0b5-py3-none-any.whl (287 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 287.6/287.6 kB 10.1 MB/s eta 0:00:00
INFO: pip is looking at multiple versions of aiida-gulp to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-gulp==0.10.0b5 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-gulp 0.10.0b5 depends on aiida-core==1.0.0b5
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"red",text:"Data",count:2},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Gulp potentials)",count:3}],pip_install_cmd:"pip install --pre aiida-gulp",is_installable:"False"},"aiida-kkr":{code_home:"https://github.com/JuDFTteam/aiida-kkr/tree/develop",development_status:"stable",documentation_url:"https://aiida-kkr.readthedocs.io/",entry_point_prefix:"kkr",pip_url:"aiida-kkr",plugin_info:"https://raw.githubusercontent.com/JuDFTteam/aiida-kkr/master/pyproject.toml",name:"aiida-kkr",package_name:"aiida_kkr",hosted_on:"github.com",metadata:{release_date:"2023-11-13",description:"AiiDA plugin for the JuKKR codes",author_email:"Philipp Ruessmann <p.ruessmann@fz-juelich.de>, Jens Broeder <j.broeder@fz-juelich.de>, Fabian Bertoldo <f.bertoldo@fz-juelich.de>",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.1.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{"kkr.kkr":{description:["AiiDA calculation plugin for a KKR calculation."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:`
Use a remote or local repository folder as parent folder
(also for restarts and similar). It should contain all the  needed
files for a KKR calc, only edited files should be uploaded from the
repository.
`},{name:"anomalous_density",required:!1,valid_types:"FolderData, NoneType",info:`
FolderData that contains anomalous density input files for
the KKRhost BdG calculation. If these are not give the code looks
for them in the retrieved of the parent calculation and takes them
from there.`},{name:"bfield",required:!1,valid_types:"Dict, NoneType",info:`
Non-collinear exteral B-field used for constraint calculations.

The Dict node should be of the form
initial_noco_angles = Dict(dict={
    'theta': [theta_at1, theta_at2, ..., theta_atN],
    # list theta values in degrees (0..180)
    'phi': [phi_at1, phi_at2, ..., phi_atN],
    # list phi values in degrees (0..360)
    'magnitude': [magnitude at_1, ..., magnitude at_N]
    # list of magnitude of the applied fields in Ry units
})
Note: The length of the theta, phi and magnitude lists have to be
equal to the number of atoms.
`},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"deciout_parent",required:!1,valid_types:"RemoteData, NoneType",info:"KkrCalculation RemoteData folder from deci-out calculation"},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:`
Use a Parameter node that specifies properties for a following
impurity calculation (e.g. setting of impurity cluster in scoef
file that is automatically created).`},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of
the impurities. These values will be written into the
\`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
initial_noco_angles = Dict(dict={
    'theta': [theta_at1, theta_at2, ..., theta_atN],
    # list theta values in degrees (0..180)
    'phi': [phi_at1, phi_at2, ..., phi_atN],
    # list phi values in degrees (0..360)
    'fix_dir': [True/False at_1, ..., True/False at_N]
    # list of booleans indicating if the direction of the magnetic
    # moment should be fixed or is allowed relax (True means keep the
    # direction of the magnetic moment fixed)
})
Note: The length of the theta, phi and fix_dir lists have to be
equal to the number of atoms.
`},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:`
Use a KpointsData node that specifies the kpoints for which a
bandstructure (i.e. 'qdos') calculation should be performed.`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieve_kkrflex",required:!1,valid_types:"Bool, NoneType",info:`
For a GF writeout calculation, determine whether or not
the kkrflex_* files are copied to the retrieved (can clutter the
database) or are ony left in the remote folder.
`},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the KKR calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"KKR output file not found"},{status:302,message:"KKR parser retuned an error"},{status:303,message:"Could not find shapefun from voronoi parent"}]},class:"aiida_kkr.calculations.kkr:KkrCalculation"},"kkr.kkrimp":{description:["AiiDA calculation plugin for a KKRimp calculation."],spec:{inputs:[{name:"host_Greenfunction_folder",required:!0,valid_types:"RemoteData",info:"Use a node that specifies the host KKR calculation contaning the host Green function and tmatrix (KkrCalculation with impurity_info input)."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"host_Greenfunction_folder_Efshift",required:!1,valid_types:"RemoteData, NoneType",info:"Use a node that specifies the host KKR calculation contaning the host Green function and tmatrix with Fermi level shift (used to set Fermi level)."},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:"Use a parameter node that specifies properties for a immpurity calculation."},{name:"impurity_potential",required:!1,valid_types:"SinglefileData, NoneType",info:"Use a node that contains the input potential."},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of the impurities. These values will be written into the \`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
    initial_noco_angles = Dict(dict={
        'theta': [theta_at1, theta_at2, ..., theta_atN], # list theta values in degrees (0..180)
        'phi': [phi_at1, phi_at2, ..., phi_atN],         # list phi values in degrees (0..360)
        'fix_dir': [True, False, ..., True/False],       # list of booleans indicating of the direction of the magentic moment should be fixed or is allowed to be updated (True means keep the direction of the magnetic moment fixed)
    })
    Note: The length of the theta, phi and fix_dir lists have to be equal to the number of atoms in the impurity cluster.
`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Use a node that specifies the input parameters (calculation settings)."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a node that specifies a parent KKRimp calculation."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the KKRimp calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"Retrieved folder of KKRimp calculation not found."},{status:302,message:"KKRimp parser returned an error."}]},class:"aiida_kkr.calculations.kkrimp:KkrimpCalculation"},"kkr.kkrimporter":{description:["Importer dummy calculation for a previous KKR run","","    :param remote_workdir: Absolute path to the directory where the job was run.","        The transport of the computer you link ask input to the calculation is","        the transport that will be used to retrieve the calculation's files.","        Therefore, ``remote_workdir`` should be the absolute path to the job's","        directory on that computer.","    :type remote_workdir: str","    :param input_file_names: The file names of the job's input file.","    :type input_file_name: dict with str entries","    :param output_file_name: The file names of the job's output file (i.e. the","        file containing the stdout of kkr.x).","    :type output_file_name: dict with str entries"],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:`
Use a remote or local repository folder as parent folder
(also for restarts and similar). It should contain all the  needed
files for a KKR calc, only edited files should be uploaded from the
repository.
`},{name:"anomalous_density",required:!1,valid_types:"FolderData, NoneType",info:`
FolderData that contains anomalous density input files for
the KKRhost BdG calculation. If these are not give the code looks
for them in the retrieved of the parent calculation and takes them
from there.`},{name:"bfield",required:!1,valid_types:"Dict, NoneType",info:`
Non-collinear exteral B-field used for constraint calculations.

The Dict node should be of the form
initial_noco_angles = Dict(dict={
    'theta': [theta_at1, theta_at2, ..., theta_atN],
    # list theta values in degrees (0..180)
    'phi': [phi_at1, phi_at2, ..., phi_atN],
    # list phi values in degrees (0..360)
    'magnitude': [magnitude at_1, ..., magnitude at_N]
    # list of magnitude of the applied fields in Ry units
})
Note: The length of the theta, phi and magnitude lists have to be
equal to the number of atoms.
`},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"deciout_parent",required:!1,valid_types:"RemoteData, NoneType",info:"KkrCalculation RemoteData folder from deci-out calculation"},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:`
Use a Parameter node that specifies properties for a following
impurity calculation (e.g. setting of impurity cluster in scoef
file that is automatically created).`},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of
the impurities. These values will be written into the
\`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
initial_noco_angles = Dict(dict={
    'theta': [theta_at1, theta_at2, ..., theta_atN],
    # list theta values in degrees (0..180)
    'phi': [phi_at1, phi_at2, ..., phi_atN],
    # list phi values in degrees (0..360)
    'fix_dir': [True/False at_1, ..., True/False at_N]
    # list of booleans indicating if the direction of the magnetic
    # moment should be fixed or is allowed relax (True means keep the
    # direction of the magnetic moment fixed)
})
Note: The length of the theta, phi and fix_dir lists have to be
equal to the number of atoms.
`},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:`
Use a KpointsData node that specifies the kpoints for which a
bandstructure (i.e. 'qdos') calculation should be performed.`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieve_kkrflex",required:!1,valid_types:"Bool, NoneType",info:`
For a GF writeout calculation, determine whether or not
the kkrflex_* files are copied to the retrieved (can clutter the
database) or are ony left in the remote folder.
`},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the KKR calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"KKR output file not found"},{status:302,message:"KKR parser retuned an error"},{status:303,message:"Could not find shapefun from voronoi parent"}]},class:"aiida_kkr.calculations.kkrimporter:KkrImporterCalculation"},"kkr.kkrnano":{description:["AiiDA calculation plugin for a KKRnano calculation"],spec:{inputs:[{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"convert",required:!1,valid_types:"Bool, NoneType",info:"Activate to use together with set up convert code in order to retrieve potential files."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"nocoangles",required:!1,valid_types:"Dict, NoneType",info:"Dict node that specifies the starting angles for non-colinear calculations                   (only needed in conjunction with non-colinear calculations, i. e. KORBIT=1                   (which is also necessary for SOC calculations!))"},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Dict node that specifies the input parameters for KKRnano (k-point density etc.)"},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a node that specifies a parent KKRnano or voronoi calculation"},{name:"passed_lattice_param_angs",required:!1,valid_types:"Float, NoneType",info:"Use a prespecified lattice constant in Angstrom as input for KKRnano, i. e. in the input.conf file.                    Default is the length of the longest Bravais vector in the structure object used for the voronoi calculation.                    This can be useful in the context of treating supercells."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"strucwithpot",required:!1,valid_types:"StrucWithPotData, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"KKRnano output file not found"},{status:302,message:"KKRnano parser retuned an error"}]},class:"aiida_kkr.calculations.kkrnano:KKRnanoCalculation"},"kkr.voro":{description:["AiiDA calculation plugin for a voronoi calculation (creation of starting potential and shapefun)."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_KKR",required:!1,valid_types:"RemoteData, NoneType",info:"Use a node that specifies a parent KKR calculation"},{name:"potential_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:"Use a node that specifies the potential which is used instead of the voronoi output potential"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"Use a node that specifies the input crystal structure"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"Voronoi output file not found"},{status:302,message:"Voronoi parser retuned an error"}]},class:"aiida_kkr.calculations.voro:VoronoiCalculation"}},"aiida.data":{"kkr.strucwithpot":"aiida_kkr.data.strucwithpot:StrucWithPotData"},"aiida.parsers":{"kkr.kkrimporterparser":"aiida_kkr.parsers.kkrimporter:KkrImporterParser","kkr.kkrimpparser":"aiida_kkr.parsers.kkrimp:KkrimpParser","kkr.kkrnanoparser":"aiida_kkr.parsers.kkrnano:KKRnanoParser","kkr.kkrparser":"aiida_kkr.parsers.kkr:KkrParser","kkr.voroparser":"aiida_kkr.parsers.voro:VoronoiParser"},"aiida.workflows":{"kkr.bs":{description:["Workchain for BandStructure calculation, starting from RemoteFolderData of the previous converged KKR calculation remote folder data","","    inputs:","    :param wf_parameters: (Dict), (optional); Workchain Specifications, contains nepts, tempr, emin (in eV relative to EF), emax (in eV),","                          and RCLUSTZ (can be used to increase the screening cluster radius) keys.","","    :param options: (Dict), (optional); Computer Specifications, scheduler command, parallel or serial","    :param kpoints: (KpointsData),(optional); Kpoints data type from the structure,","                                   but not mendatory as it can be extracted from structure internaly from the remote data","    :param remote_data: (RemoteData)(mendaory); From the previous kkr-converged calculation.","    :param kkr: (Code)(mendaory); KKR code specifiaction","    :param label: (Str) (optional) ; label for WC but will be found in the 'result_wf' output","                                     Dict as 'BS_wf_label' key","    :param description: (Str) (optional) : description for WC but will be found in the 'result_wf' output","                                     Dict as 'BS_wf_description' key","","","    returns:","    :out BS_Data : (ArrayData) ; Consist of BlochSpectralFunction, k_points (list), energy_points (list), special_kpoints(dict)","    :out result_wf: (Dict); work_chain_specifications node, BS_data node, remote_folder node"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost code, needed to run the qdos KkrCalculation"},{name:"remote_data",required:!0,valid_types:"RemoteData",info:"Parent folder of previoously converged KkrCalculation"},{name:"description",required:!1,valid_types:"Str, NoneType",info:"description for the workflow"},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`Initial non-collinear angles for the magnetic moments. See KkrCalculation for details.
            If this is found in the input potentially extracted nonco angles from the parent calulation are overwritten!`},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"K-points data for the calculation. If not given the seekpath library is used to find the irreducable k-points of a structure."},{name:"label",required:!1,valid_types:"Str, NoneType",info:"label for the workflow"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (walltime etc.) passed onto KkrCalculation"},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Overwrite some input parameters of the parent KKR calculation."},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters of the bandstructure workflow (see output of kkr_bs_wc.get_wf_default() for more details)."}],outputs:[{name:"BS_Data",required:!0,valid_types:"ArrayData",info:""},{name:"results_wf",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:161,message:"No remote_data was provided as Input"},{status:162,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:163,message:"calc_parameters given are not consistent! Hint: did you give an unknown keyword?"},{status:164,message:"calc_parameters not complete"},{status:165,message:"KKR Band Structure calculation failed"},{status:166,message:"No K-POINTS can be extracted from the structure data"},{status:167,message:"No K-POINTS can be extracted from the primtive structure data rather conventional structure data"},{status:168,message:"Input remote_data node neither output of a KKR/voronoi calculation nor of kkr_scf_wc workflow"}]},class:"aiida_kkr.workflows.bs:kkr_bs_wc"},"kkr.decimation":{description:["Workchain a decimation calculation with KKR starting from a thick slab (center potential should be bulk-like).","","    The workchain","     - creates the structure nodes of the substrate and decimation region from thick slab structure","     - creates starting potentials of the slab structure","     - runs auxiliary voronoi steps to get starting setup correctly for the KKR calculations","     - runs the deci-out step in serial","     - runs the decimation step","","     The workflow starts either from a converged thick film of from a previous decimation calculation (skips the structure and starting potential setup and the voronoi steps).","","     The workflow parameters input can be:","          {'nkz' : 30,   # number of k-points in z-direction for substrate","           'nprinc': 4,  # number of layer in principle layer","           'nplayer': 4, # number of principle layers (naez deci: nprinc*nplayer)","           'dosmode': False, # run DOS calculation","           'dos_params': {'emin_EF': -5.0, # EMIN-EF in eV","                          'emax_EF':  3.0, # EMAX-EF in eV","                          'nepts': 96,     # number of points in contour","                          'tempr': 100,    # smearing temperature","                          'kmesh': [50, 50, 50]}, # k-mesh used in dos calculation","           }","","    :param wf_parameters: Dict node with workchain parameters (see kkr_decimation_wc.get_wf_defaults())","    :param options: Dict node with specifications for the computer (used in decimation step only)","    :param remote_data: mandatory RemoteData node of either a parent slab or previous decimation calculation","    :param kkr: mandatory Code node with KKR code for running deci-out and decimation steps","    :param voronoi: Code node that is mandatory if starting from slab calculation. Is the voronoi code for auxiliary calculations","    :param kpoints: KpointsData node that triggers a band structure calculation. The kpoints specify the k-point path along which the bandstructure is computed with the qdos mode of KKRhost.","    :param calc_parameters: Dict node that contains KKR parameters which overwrites settings from the slab parent.","","    :returns structure_decimate: StructureData node of the structure of the decimation region.","    :returns structure_substrate: StructureData node of the structure of thesubstrate lattice continuation.","    :returns out_params_calc_deci_out: Dict node of the output parameters of the deci-out calculation.","    :returns out_params_calc_decimate: Dict node of the output parameters of the decimation calculation.","    :returns out_remote_calc_decimate: RemoteData node of the decimation calculation.","    :returns out_retrieved_calc_decimate: retrieved FolderData node of the decimation calculation.","    :returns dos_data: XyData node with the DOS data at finite imaginary part in the energy contour. Only present in DOS mode.","    :returns dos_data_interpol: XyData node with the interpolated DOS data onto the real axis. Only present in DOS mode."],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost code."},{name:"remote_data",required:!0,valid_types:"RemoteData",info:"Parent calculation (either previous decimation calculation, then voronoi steps are skipped or slab calculation)."},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:"If given overwrites KKR parameters starting from slab params (can be used to run DOS for instance)."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"If given this triggers a bandstructure (i.e. qdos) calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options used in the deicmation step (voronoi and deci-out steps run serially but use the walltime given here)."},{name:"voronoi",required:!1,valid_types:"Code, NoneType",info:"Voronoi code. Only needed if remote_data is slab claculation and not a previous decimation run."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"parameters for decimation setup (used only if not started from previous decimation calculation)."}],outputs:[{name:"out_params_calc_deci_out",required:!0,valid_types:"Dict",info:"Output parameter node of deci-out calculation."},{name:"out_params_calc_decimate",required:!0,valid_types:"Dict",info:"Output parameter node of decimation calculation."},{name:"out_remote_calc_decimate",required:!0,valid_types:"RemoteData",info:"Remote folder of decimation calculation."},{name:"out_retrieved_calc_decimate",required:!0,valid_types:"FolderData",info:"Retrieved folder of decimation calculation."},{name:"structure_decimate",required:!0,valid_types:"StructureData",info:"Structure of decimation region."},{name:"structure_substrate",required:!0,valid_types:"StructureData",info:"Structure of substrate lattice continuation."},{name:"dos_data",required:!1,valid_types:"XyData",info:"DOS data with finite imaginary part in the energy contour."},{name:"dos_data_interpol",required:!1,valid_types:"XyData",info:"interpolated DOS data onto the real axis."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"Given remote_data is not correct (needs to be a slab or decimation KKR calculation)"},{status:301,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:302,message:"The code you provided for voronoi does not use the plugin kkr.voro"},{status:303,message:"The voronoi step for the starting potential of the substrate failed."},{status:304,message:"The voronoi step for the starting potential of the decimation region failed."},{status:305,message:"The deci-out step (writeout of continuation GF) failed."}]},class:"aiida_kkr.workflows._decimation:kkr_decimation_wc"},"kkr.dos":{description:["Workchain a DOS calculation with KKR starting from the remoteData node","    of a previous calculation (either Voronoi or KKR).","","    :param wf_parameters: (Dict); Workchain specifications","    :param options: (Dict); specifications for the computer","    :param remote_data: (RemoteData), mandatory; from a KKR or Vornoi calculation","    :param kkr: (Code), mandatory; KKR code running the dos calculation","","    :return result_kkr_dos_wc: (Dict), Information of workflow results","        like Success, last result node, list with convergence behavior"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost Code node used to run the DOS calculation."},{name:"remote_data",required:!0,valid_types:"RemoteData",info:"RemoteData node of the parent calculation."},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`Initial non-collinear angles for the magnetic moments. See KkrCalculation for details.
            If this is found in the input potentially extracted nonco angles from the parent calulation are overwritten!`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options used by the workflow."},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Overwrite some input parameters of the parent KKR calculation."},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Workflow parameter (see `kkr_dos_wc.get_wf_defaults()`)."}],outputs:[{name:"results_wf",required:!0,valid_types:"Dict",info:"Results collected by the workflow."},{name:"dos_data",required:!1,valid_types:"XyData",info:"XyData node of the parsed DOS output."},{name:"dos_data_interpol",required:!1,valid_types:"XyData",info:"XyData node of the parsed DOS output, interpolated onto the real axis."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:161,message:"No remote_data was provided as Input"},{status:162,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:163,message:"calc_parameters given are not consistent! Hint: did you give an unknown keyword?"},{status:164,message:"calc_parameters not complete"},{status:165,message:"dos_params given in wf_params are not valid"},{status:166,message:"KKR dos calculation failed"}]},class:"aiida_kkr.workflows.dos:kkr_dos_wc"},"kkr.eos":{description:["Workchain of an equation of states calculation with KKR.","","    Layout of the workflow:","      1. determine V0, scale_range, etc. from input","      2. run voro_start for V0 and smallest volume","          2.1 get minimum for RMTCORE (needs to be fixed for all calculations to be able to compare total energies","      3. submit kkr_scf calculations for all volumes using RMTCORE setting determined in step 2","      4. collect results"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:`
            Code entry for the KKRhost calculations.
            `},{name:"structure",required:!0,valid_types:"StructureData",info:`
            Initial structure for which the EOS will be calculated.
            `},{name:"voronoi",required:!0,valid_types:"Code",info:`
            Code entry for the Voronoi calculations.
            `},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            KKR input parameters. Everything (except structural factors) which
            would normally be written in the inputcard.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            Workfunction specific parameters, controlling the behavior of the
            EOS workchain.
            `}],outputs:[{name:"eos_results",required:!0,valid_types:"Dict",info:""},{name:"explicit_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"get_explicit_kpoints_path_parameters",required:!1,valid_types:"Dict",info:""},{name:"gs_structure",required:!1,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:221,message:"ERROR: inputs invalid"},{status:222,message:"ERROR: need at least 3 successful calculations"},{status:223,message:"ERROR: nsteps is smaller than 3, need at least three data points to do fitting"},{status:224,message:"given fitfunction name not valid"},{status:225,message:"ERROR: kkr_startpot was not successful. Check you inputs."}]},class:"aiida_kkr.workflows.eos:kkr_eos_wc"},"kkr.gf_writeout":{description:["Workchain of a kkr_flex calculation to calculate the Green function with","    KKR starting from the RemoteData node of a previous calculation (either Voronoi or KKR).","","    :param options: (Dict), Workchain specifications","    :param wf_parameters: (Dict), Workflow parameters that deviate from previous KKR RemoteData","    :param remote_data: (RemoteData), mandatory; from a converged KKR calculation","    :param kkr: (Code), mandatory; KKR code running the flexfile writeout","    :param impurity_info: Dict, mandatory: node specifying information","                          of the impurities in the system","","    :return workflow_info: (Dict), Information of workflow results","                            like success, last result node, list with convergence behavior","    :return GF_host_remote: (RemoteData), host GF of the system"],spec:{inputs:[{name:"impurity_info",required:!0,valid_types:"Dict",info:""},{name:"remote_data",required:!0,valid_types:"RemoteData",info:""},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Set some input parameters of the KKR calculation."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"GF_host_remote",required:!0,valid_types:"RemoteData",info:""},{name:"workflow_info",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"ERROR: the 'impurity_info' input Dict node could not be used"},{status:102,message:"ERROR: the code you provided for kkr does not use the plugin kkr.kkr"},{status:103,message:"ERROR: No remote_data was provided as Input"},{status:104,message:"ERROR: calc_parameters given are not consistent! Hint: did you give an unknown keyword?"},{status:105,message:"ERROR: calc_parameters misses keys"},{status:106,message:"ERROR: KKR calculation to write out kkrflex files unsuccessful"},{status:107,message:"ERROR: Could not extract value for Fermi level from parent calculation"}]},class:"aiida_kkr.workflows.gf_writeout:kkr_flex_wc"},"kkr.imp":{description:["Workchain of a kkrimp calculation starting either from scratch (with a structure","    and impurity_info node), or with a converged host potential and impurity","    startpotentials, ... to calculate the converged host-impurity potential of the system.","","    :param options: (Dict), Workchain specifications","    :param wf_parameters: (Dict), specifications for the kkr impurity workflow","    :param voro_aux_parameters: (Dict), specification for the auxiliary voronoi calculation for the impurity","    :param kkrimp: (Code), mandatory: KKRimp code converging the host-imp-potential","    :param kkr: (Code), mandatory: KKR code for calculation the host potential","    :param voronoi: (Code), mandatory: Voronoi code to generate the impurity startpot","    :param remote_data_gf: (RemoteData): remote folder of a previous kkrflex","                                         calculation containing the flexfiles ...","    :param remote_data_host: (RemoteData): remote folder of a converged KKR","                                           host calculation","","    :return workflow_info: (Dict), Information of workflow results","    :return last_calc_output_parameters: (Dict), output parameters of","                                         the last called calculation","    :return last_calc_info: (Dict), information of the last called calculation"],spec:{inputs:[{name:"gf_writeout",required:!0,valid_types:"Data",info:""},{name:"impurity_info",required:!0,valid_types:"Dict",info:"Information of the impurity like position in the unit cell, screening cluster, atom type."},{name:"kkrimp",required:!0,valid_types:"Code",info:"KKRimp code used to converge the impurity calculation"},{name:"scf",required:!0,valid_types:"Data",info:""},{name:"voronoi",required:!0,valid_types:"Code",info:"Voronoi code used to create the impurity starting potential."},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"KKRhost code used to run GF writeout step."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Options for running the codes (walltime etc.)."},{name:"options_voronoi",required:!1,valid_types:"Dict, NoneType",info:"Options for running the Voronoi code (if differing from general `options` node)"},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Set some input parameters of the KKR calculation for the GF writeout step."},{name:"remote_data_gf",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of precomputed host Green function."},{name:"remote_data_gf_Efshift",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of precomputed host Green function with Fermi level shift (overwrite kkrflex_green and tmat files from first remote_data_gf node."},{name:"remote_data_host",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of the converged host calculation. Used to write out the host Green function."},{name:"startpot",required:!1,valid_types:"SinglefileData, NoneType",info:"Set starting potential (e.g. from preconverged calculation"},{name:"voro_aux_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the auxiliary voronoi starting potential workflow."},{name:"voro_params_overwrite",required:!1,valid_types:"Dict, NoneType",info:"If given, overwrite the some parameters used as input for auxiliary voronoi calculation of starting potential."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the KKRimp selfconsistency workflow."}],outputs:[{name:"last_calc_info",required:!0,valid_types:"Dict",info:""},{name:"last_calc_output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_data_gf",required:!0,valid_types:"RemoteData",info:""},{name:"workflow_info",required:!0,valid_types:"Dict",info:""},{name:"converged_potential",required:!1,valid_types:"SinglefileData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:141,message:"ERROR: one or more of the codes you provided do not use the necessary plugins: kkr.voro, kkr.kkr, kkr.kkrimp"},{status:142,message:"ERROR: since GF writeout step has to be conducted, 'kkrcode' is needed as an input"},{status:143,message:"ERROR: neither converged host remote nor GF writeout remote is given as an input. One of them is needed to proceed with this workflow!"},{status:144,message:"ERROR: sub-workflow for KKRimp convergence failed"},{status:145,message:"ERROR: sub-workflow Kkr_startpot failed (look for failure of voronoi calculation)."}]},class:"aiida_kkr.workflows.kkr_imp:kkr_imp_wc"},"kkr.imp_BdG":{description:["Workchain for one-shot BdG impurity DOS calculation from a converged normal state host calculation.","    1) Normal state impurity potential scf","    2) One-shot BdG DOS calcluation","        a) Writing out of the BdG kkrflex DOS files","        b) One-shot BdG impurity DOS","    The intermediate steps (1 & 2a) can be skipped by providing the corresponding nodes as inputs to the workflow.","","    inputs::","        :param options: (Dict), computer options","        :param impurity_info: (Dict), information about the impurity cluster","        :param voronoi: (Code), Voronoi code for creating the impurity starting potential","        :param kkr: (Code), KKR host code for the writing out kkrflex files","        :param kkrimp: (Code), KKR impurity code for the normal state impurity scf and BdG impurity DOS calculation","        :param BdG_settings: (Dict), set BdG parameters","","        :param imp_scf.startpot: (SinglefileData), converged impurity potential, skips the impurity scf calculation if provided","        :param imp_scf.wf_parameters: (Dict), parameters for the kkr impurity scf","        :param imp_scf.gf_writeout.params_kkr_overwrite: (Dict), set some input parameters of the KKR calculation for the GF writeout step of impurity scf workchain","        :param imp_scf.gf_writeout.options: (Dict), computer settings","        :param imp_scf.scf.params_overwrite: (Dict), set some input parameters of the KKR impurity scf","        :param imp_scf.options: (Dict), computer settings","        :param imp_scf.remote_data_host: (RemoteData), parent folder of converged host normal state KkrCalculation","","        :param dos.wf_parameters: (Dict), parameters for the DOS calculation","        :param dos.gf_dos_remote: (RemoteData), node of precomputed host GF for DOS energy contour","        :param dos.gf_writeout.params_kkr_overwrite: (Dict), set some input parameters of the KKR calculation for the GF writeout step of imßpurity dos workchain","        :param dos.gf_writeout.host_remote: (RemoteData), parent folder of kkrflex writeout step for DOS calculation","        :param dos.gf_writeout.kkr: (Code), KKR code for writing out of kkrflex files for impurity DOS calculation","        :param dos.gf_writeout.options: (Dict), computer settings","        :param dos.options: (Dict), computer settings","","    returns::","        :return workflow_info: (Dict), Information on workflow results","        :return output_parameters: (Dict), output parameters of the workflow","        :return dos_data: (XyData), impurity DOS data output node","        :return dos_data_interpol: (XyData), interpolated DOS data output node","        :return impurity_potential: (SinglefileData), converged normal state impurity potential node","        :return gf_host_BdG: (RemoteData), kkrflex writeout step files of DOS calculation"],spec:{inputs:[{name:"BdG_scf",required:!0,valid_types:"Data",info:""},{name:"dos",required:!0,valid_types:"Data",info:""},{name:"imp_scf",required:!0,valid_types:"Data",info:""},{name:"kkrimp",required:!0,valid_types:"Code",info:"KKRimp code used to converge the impurity calculation"},{name:"BdG_settings",required:!1,valid_types:"Dict",info:"Define BdG parameters"},{name:"calc_DOS",required:!1,valid_types:"Bool, NoneType",info:"Set this to TRUE to calculate DOS"},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:"Information of the impurity like position in the unit cell, screening cluster, atom type."},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"KKRhost code, needed to run the KkrCalculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (walltime etc.) passed onto KkrCalculation, fall back to settings from parent calculation if not given"},{name:"voronoi",required:!1,valid_types:"Code, NoneType",info:"Voronoi code used to create the impurity starting potential."}],outputs:[{name:"impurity_potential",required:!0,valid_types:"SinglefileData",info:""},{name:"dos_data",required:!1,valid_types:"XyData",info:""},{name:"dos_data_interpol",required:!1,valid_types:"XyData",info:""},{name:"gf_host_BdG",required:!1,valid_types:"RemoteData",info:""},{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"workflow_info",required:!1,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:101,message:"The code you provided for kkrimp does not use the plugin kkr.kkrimp"},{status:102,message:"The code you provided for voronoi does not use the plugin kkr.voronoi"},{status:200,message:"Parent calculation is not valid"}]},class:"aiida_kkr.workflows.imp_BdG:kkrimp_BdG_wc"},"kkr.imp_dos":{description:["Workchain of a DOS calculation for an impurity system starting from a","    converged impurity calculation or workflow","","    :param options: (Dict), computer options","    :param wf_parameters: (Dict), specifications for the DOS","    :param kkr: (Code), mandatory: KKR code for gf_writeout step","    :param kkrimp: (Code), mandatory: KKRimp code for DOS calculation","    :param imp_host_pot: (SinglefileData), mandatory: impurity startpotential","","    :return workflow_info: (Dict), Information on workflow results","    :return last_calc_output_parameters: (Dict), output parameters of","                                         the last called calculation","    :return last_calc_info: (Dict), information of the last called calculation"],spec:{inputs:[{name:"BdG",required:!0,valid_types:"Data",info:""},{name:"gf_writeout",required:!0,valid_types:"Data",info:""},{name:"kkrimp",required:!0,valid_types:"Code",info:"KKRimp code, always needed."},{name:"gf_dos_remote",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of precomputed host GF for DOS energy contour."},{name:"host_remote",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of the (converged) host calculation."},{name:"imp_pot_sfd",required:!1,valid_types:"SinglefileData, NoneType",info:"impurity potential single file data. Needs also impurity_info node."},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:"impurity info node that specifies the relation between imp_pot_sfd to the host system. Mandatory if imp_pot_sfd is given."},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of the impurities. These values will be written into the \`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
    initial_noco_angles = Dict(dict={
        'theta': [theta_at1, theta_at2, ..., theta_atN], # list theta values in degrees (0..180)
        'phi': [phi_at1, phi_at2, ..., phi_atN],         # list phi values in degrees (0..360)
        'fix_dir': [True, False, ..., True/False],       # list of booleans indicating of the direction of the magentic moment should be fixed or is allowed to be updated (True means keep the direction of the magnetic moment fixed)
    })
    Note: The length of the theta, phi and fix_dir lists have to be equal to the number of atoms in the impurity cluster.
`},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"KKRhost code, needed if gf_dos_remote is not given."},{name:"kkrimp_remote",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of previous (converged) KKRimp calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (resources, quene name, etc.)."},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Set some input parameters of the KKR calculation."},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:"Settings for LDA+U run (see KkrimpCalculation for details)."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"DOS workflow parameters (energy range, etc.)."}],outputs:[{name:"dos_data",required:!0,valid_types:"XyData",info:""},{name:"dos_data_interpol",required:!0,valid_types:"XyData",info:""},{name:"last_calc_info",required:!0,valid_types:"Dict",info:""},{name:"last_calc_output_parameters",required:!0,valid_types:"Dict",info:""},{name:"workflow_info",required:!0,valid_types:"Dict",info:""},{name:"dos_data_interpol_lm",required:!1,valid_types:"XyData",info:""},{name:"dos_data_lm",required:!1,valid_types:"XyData",info:""},{name:"gf_dos_remote",required:!1,valid_types:"XyData",info:"RemoteData node of the computed host GF."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:220,message:"Unknown problem detected."},{status:221,message:"Unable to find the parent remote_data node that led to the input impurity calculation. You need to specify `host_remote` and `impurity_info` nodes."},{status:222,message:"The gf_writeout workflow was not succesful, cannot continue."},{status:223,message:"The input nodes `imp_pot_sfd` and `kkrimp_remote` are given but are mutually exclusive"},{status:224,message:"KKRhost code node (`inputs.kkr`) is missing if gf_dos_remote is not given."},{status:225,message:"`host_remote` node is missing if gf_dos_remote is not given."},{status:226,message:"KKRimp sub-workflow failed."}]},class:"aiida_kkr.workflows.kkr_imp_dos:kkr_imp_dos_wc"},"kkr.imp_sub":{description:["Workchain of a kkrimp self consistency calculation starting from the","    host-impurity potential of the system. (Not the entire kkr_imp workflow!)","","    :param options: (Dict), Workchain specifications","    :param wf_parameters: (Dict), specifications for the calculation","    :param host_imp_startpot: (RemoteData), mandatory; input host-impurity potential","    :param kkrimp: (Code), mandatory; KKRimp code converging the host-imp-potential","    :param remote_data: (RemoteData), mandatory; remote folder of a previous","                           kkrflex calculation containing the flexfiles ...","    :param kkrimp_remote: (RemoteData), remote folder of a previous kkrimp calculation","    :param impurity_info: (Dict), Parameter node with information","                          about the impurity cluster","","    :return workflow_info: (Dict), Information of workflow results","                                   like success, last result node, list with","                                   convergence behavior","    :return host_imp_pot: (SinglefileData), output potential of the sytem"],spec:{inputs:[{name:"kkrimp",required:!0,valid_types:"Code",info:""},{name:"host_imp_startpot",required:!1,valid_types:"SinglefileData, NoneType",info:""},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:""},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of the impurities. These values will be written into the \`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
    initial_noco_angles = Dict(dict={
        'theta': [theta_at1, theta_at2, ..., theta_atN], # list theta values in degrees (0..180)
        'phi': [phi_at1, phi_at2, ..., phi_atN],         # list phi values in degrees (0..360)
        'fix_dir': [True, False, ..., True/False],       # list of booleans indicating of the direction of the magentic moment should be fixed or is allowed to be updated (True means keep the direction of the magnetic moment fixed)
    })
    Note: The length of the theta, phi and fix_dir lists have to be equal to the number of atoms in the impurity cluster.
`},{name:"kkrimp_remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"params_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Dict of parameters that are given to the KKRimpCalculation. Overwrites automatically set values!"},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"remote_data_Efshift",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:"LDA+U settings. See KKRimpCalculation for details."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"workflow_info",required:!0,valid_types:"Dict",info:""},{name:"host_imp_pot",required:!1,valid_types:"SinglefileData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:121,message:"ERROR: Not both host-impurity potential and GF remote found in the inputs. Provide either both of them or a RemoteData from a previous kkrimp calculation."},{status:122,message:"ERROR: The code you provided for KKRimp does not use the plugin kkr.kkrimp"},{status:123,message:"ERROR: Unable to extract parent paremeter node of input remote folder"},{status:124,message:"ERROR: No calculation parameters provided"},{status:125,message:`ERROR: Last KKRcalc in SUBMISSIONFAILED state!
stopping now`},{status:126,message:"ERROR: Maximal number of KKR restarts reached. Exiting now!"},{status:127,message:"ERROR: Last_remote could not be set to a previous succesful calculation"},{status:128,message:"ERROR: There are still missing calculation parameters"},{status:129,message:"ERROR: Parameters could not be updated"},{status:130,message:"ERROR: Last calculation is not in finished state"},{status:131,message:"The input `remote_data` node has no valid calculation parent."},{status:132,message:"The parent calculation of the input `remote_data` node was not succesful."},{status:133,message:"ERROR: Last calculation does not have an output potential."}]},class:"aiida_kkr.workflows.kkr_imp_sub:kkr_imp_sub_wc"},"kkr.jij":{description:["Workchain for calculation of exchange coupling constants Jij and Dij if parent calculation used the SOC solver.","","    inputs::","","        :param wf_parameters: optional Dict node of workchain specifications, contains settings like Jij radius cutoff,","                              selection of sites for i and j and numerical cutoffs. None values in the accuracy sub-dict","                              means that values from parent calculation are coptied.","        :param remote_data: mandatory RemoteData node of parent (i.e. converged) KkrCalculation","        :param kkr: optional Code for KKRhost executable (if not given the same as in the parent calculation is used)","        :param options: optional Dict computer options like scheduler command or parallelization","","    returns::","","        :return jij_data: ArrayData with the arrays 'Jij_expanded' (Table of all Jij and Dij pairs) and 'positions_expanded' (positions of all ij pairs)","        :return structure_jij_sites: StructureData"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost code, needed to run the Jij KkrCalculation"},{name:"remote_data",required:!0,valid_types:"RemoteData",info:"Parent folder of previously converged KkrCalculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (walltime etc.) passed onto KkrCalculation, fall back to settings from parent calculation if not given"},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Overwrite some input parameters of the parent KKR calculation."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters of the bandstructure workflow (see output of kkr_bs_wc.get_wf_default() for more details)."}],outputs:[{name:"jij_data",required:!0,valid_types:"ArrayData",info:""},{name:"results_wf",required:!0,valid_types:"Dict",info:""},{name:"structure_jij_sites",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:160,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:161,message:"Parent calculation is not valid"},{status:162,message:"KKR Band Structure calculation failed"},{status:163,message:"Parsing of Jij calculations failed"}]},class:"aiida_kkr.workflows.jijs:kkr_jij_wc"},"kkr.scf":{description:["Workchain for converging a KKR calculation (SCF).","","    It converges the charge potential.","    Two paths are possible:","","    (1) Start from a structure and run a voronoi calculation first,","    optional with calc_parameters","    (2) Start from an existing Voronoi or KKR calculation, with a remoteData","","    :param wf_parameters: (Dict), Workchain Specifications","    :param options: (Dict); specifications for the computer","    :param structure: (StructureData), Crystal structure","    :param calc_parameters: (Dict), Voronoi/Kkr Parameters","    :param remote_data: (RemoteData), from a KKR, or Voronoi calculation","    :param voronoi: (Code)","    :param kkr: (Code)","","    :return output_kkr_scf_wc_para: (Dict), Information of workflow results","        like Success, last result node, list with convergence behavior","","    minimum input example:","    1. Code1, Code2, Structure, (Parameters), (wf_parameters)","    2. Code2, remote_data, (Parameters), (wf_parameters)","","    maximum input example:","    1. Code1, Code2, Structure, Parameters","        wf_parameters: {'queue_name' : String,",`                        'resources' : dict({"num_machines": int, "num_mpiprocs_per_machine" : int})`,"                        'walltime' : int}","    2. Code2, (remote-data), wf_parameters as in 1.","","    Hints:","    1. This workflow does not work with local codes!"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost code node which will run the KkrCalculations"},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            KKR-specific calculation parameters (LMAX etc.),
            usually set up with the help of the \`kkrparams\` class.
            `},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
            Initial non-collinear angles for the magnetic moments of the
            impurities. See KkrCalculation for details.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:`
            Computer settings used by the calculations in the workflow
            (see also help string of wf_parameters).
            `},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:`
            RemoteFolder node of a preconverged calculation.
            Can be used as a starting point to skip the Voronoi step.
            `},{name:"startpot_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:`
            Potential SinglefileData, can be used to overwrite
            the starting potential from Voronoi
            (the shapefun will be used though and thus needs to be compatible).
            This can be used to construct a better starting potential from a
            preconverged calculation (e.g. in a smaller unit cell).
            `},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:`
            Input structure for which a calculation is started with a
            VoronoiCalculation.
            Can be skipped if a previous KkrCalculation is given with the
            \`remote_data\` input node.
            `},{name:"voronoi",required:!1,valid_types:"Code, NoneType",info:"\n            Voronoi code node, needed only if `structure` input node is given.\n            "},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            Settings for the workflow. Use \`KkrCalculation.get_wf_defaults()\`
            to get the default values and default options.
            `}],outputs:[{name:"output_kkr_scf_wc_ParameterResults",required:!0,valid_types:"Dict",info:""},{name:"final_dosdata_interpol",required:!1,valid_types:"XyData",info:""},{name:"last_InputParameters",required:!1,valid_types:"Dict",info:""},{name:"last_RemoteData",required:!1,valid_types:"RemoteData",info:""},{name:"last_calc_out",required:!1,valid_types:"Dict",info:""},{name:"last_noco_angles",required:!1,valid_types:"Dict",info:""},{name:"results_vorostart",required:!1,valid_types:"Dict",info:""},{name:"starting_dosdata_interpol",required:!1,valid_types:"XyData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:221,message:"Unable to extract parent paremeter node of input remote folder"},{status:222,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:223,message:"The code you provided for voronoi does not use the plugin kkr.voro"},{status:224,message:"ERROR: StructureData was provided, but no voronoi code was provided"},{status:225,message:"ERROR: No StructureData nor remote_data was provided as Input"},{status:226,message:"ERROR: kkr_startpot_wc step failed!"},{status:227,message:"DOS run unsuccessful. Check inputs."},{status:228,message:"ERROR: calc_parameters given are not consistent! Missing mandatory keys"},{status:229,message:"ERROR: calc_parameters given are not consistent! Hint: did you give an unknown keyword?"},{status:230,message:"ERROR: calc_parameters not given as input but are needed!"},{status:231,message:"ERROR: parameter update unsuccessful: some key, value pair not valid!"},{status:232,message:"ERROR: calc_parameters misses keys"},{status:233,message:"ERROR: last_remote could not be set to a previous successful calculation"},{status:234,message:"ERROR: maximal number of KKR restarts reached. Exiting now!"},{status:235,message:"ERROR: last KKRcalc in SUBMISSIONFAILED state"}]},class:"aiida_kkr.workflows.kkr_scf:kkr_scf_wc"},"kkr.startpot":{description:["Workchain  create starting potential for a KKR calculation by running","    voronoi and getting the starting DOS for first checks on the validity of the input setting.","    Starts from a structure together with a KKR parameter node.","","    :param wf_parameters: (Dict), Workchain specifications","    :param options: (Dict), specifications for the computer","    :param structure: (StructureData), aiida structure node to begin","        calculation from (needs to contain vacancies, if KKR needs empty spheres)","    :param kkr: (Code)","    :param voronoi: (Code)","    :param calc_parameters: (Dict), KKR parameter set, passed on to voronoi run.","","    :return result_kkr_startpot_wc: (Dict), Information of workflow results","        like Success, last result node, dos array data"],spec:{inputs:[{name:"voronoi",required:!0,valid_types:"Code",info:"Voronoi code"},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            KKR-specific parameters passed onto the VoronoiCalculation (lmax etc.).
            `},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"Kkr code, only needed only if DOS is calculated."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options passed onto the calculations"},{name:"parent_KKR",required:!1,valid_types:"RemoteData, NoneType",info:`
            RemoteData node of a KKR calculation which is used to overwrite
            the output potential Voronoi constructs
            (typically used to increase lmax). Cannot be used with a different
            structure in the input since the structure is extracted from the
            parent_KKR.
            `},{name:"startpot_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:`
            Potential which can be used instead of the output potential
            Voronoi constructs.
            `},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:`
            Structure for which the starting potential should be constructed,
            not needed if parent_KKR is given (typically used to increase the
            lmax but use the output potential of the parent_KKR as starting
            potential).
            `},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters that control the behavior of the workflow"}],outputs:[{name:"results_vorostart_wc",required:!0,valid_types:"Dict",info:""},{name:"last_doscal_dosdata",required:!1,valid_types:"XyData",info:""},{name:"last_doscal_dosdata_interpol",required:!1,valid_types:"XyData",info:""},{name:"last_doscal_results",required:!1,valid_types:"Dict",info:""},{name:"last_params_voronoi",required:!1,valid_types:"Dict",info:""},{name:"last_voronoi_remote",required:!1,valid_types:"RemoteData",info:""},{name:"last_voronoi_results",required:!1,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:202,message:"The code you provided for voronoi does not use the plugin kkr.voro"},{status:203,message:"Voronoi calculation unsuccessful. Check inputs"},{status:204,message:"Voronoi calculation unsuccessful. Check inputs."},{status:205,message:"Voronoi calculation unsuccessful. Structure inconsistent. Maybe you need empty spheres?"},{status:206,message:"DOS run unsuccessful. Check inputs."},{status:207,message:"Can only take either structure or parent_KKR as input."},{status:208,message:"Need either structure or parent_KKR as input."}]},class:"aiida_kkr.workflows.voro_start:kkr_startpot_wc"}},console_scripts:{"aiida-kkr":"aiida_kkr.cmdline:cmd_root"}},commits_count:163,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (beta) does not match development_status in metadata (stable)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:5},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:12},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-kkr",is_installable:"True"},"aiida-lammps":{code_home:"https://github.com/aiidaplugins/aiida-lammps",development_status:"beta",entry_point_prefix:"lammps",pip_url:"git+https://github.com/aiidaplugins/aiida-lammps",name:"aiida-lammps",package_name:"aiida_lammps",hosted_on:"github.com",metadata:{author:"Abel Carreras, Chris Sewell",author_email:"chrisj_sewell@hotmail.com",version:"0.8.0",description:"AiiDA plugin for LAMMPS",classifiers:["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Framework :: AiiDA"]},aiida_version:">=1.4.0,<2.0.0",entry_points:{"aiida.calculations":{"lammps.combinate":"aiida_lammps.calculations.lammps.combinate:CombinateCalculation","lammps.force":"aiida_lammps.calculations.lammps.force:ForceCalculation","lammps.md":"aiida_lammps.calculations.lammps.md:MdCalculation","lammps.md.multi":"aiida_lammps.calculations.lammps.md_multi:MdMultiCalculation","lammps.optimize":"aiida_lammps.calculations.lammps.optimize:OptimizeCalculation",dynaphopy:"aiida_lammps.calculations.dynaphopy: DynaphopyCalculation"},"aiida.parsers":{"lammps.force":"aiida_lammps.parsers.lammps.force:ForceParser","lammps.md":"aiida_lammps.parsers.lammps.md:MdParser","lammps.md.multi":"aiida_lammps.parsers.lammps.md_multi:MdMultiParser","lammps.optimize":"aiida_lammps.parsers.lammps.optimize:OptimizeParser",dynaphopy:"aiida_lammps.parsers.dynaphopy: DynaphopyParser"},"aiida.data":{"lammps.potential":"aiida_lammps.data.potential:EmpiricalPotential","lammps.trajectory":"aiida_lammps.data.trajectory:LammpsTrajectory"},"lammps.potentials":{eam:"aiida_lammps.data.pot_plugins.eam:EAM",lennard_jones:"aiida_lammps.data.pot_plugins.lennard_jones:LennardJones",reaxff:"aiida_lammps.data.pot_plugins.reaxff:Reaxff",tersoff:"aiida_lammps.data.pot_plugins.tersoff:Tersoff"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-lammps<pre>Collecting git+https://github.com/aiidaplugins/aiida-lammps
  Cloning https://github.com/aiidaplugins/aiida-lammps to /tmp/pip-req-build-yjdko7at
  Running command git clone --filter=blob:none --quiet https://github.com/aiidaplugins/aiida-lammps /tmp/pip-req-build-yjdko7at
  Resolved https://github.com/aiidaplugins/aiida-lammps to commit 8f618541784bbd6360efc653350570cf76398e83
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-lammps to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-lammps==0.8.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-lammps 0.8.0 depends on aiida-core<2.0.0 and >=1.4.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'dynaphopy' does not start with prefix 'lammps.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'dynaphopy' does not start with prefix 'lammps.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:6},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:2},{colorclass:"orange",text:"Other (Lammps potentials)",count:4}],pip_install_cmd:"pip install git+https://github.com/aiidaplugins/aiida-lammps",is_installable:"False"},"aiida-lsmo":{code_home:"https://github.com/lsmo-epfl/aiida-lsmo",development_status:"stable",entry_point_prefix:"lsmo",pip_url:"git+https://github.com/lsmo-epfl/aiida-lsmo",name:"aiida-lsmo",package_name:"aiida_lsmo",hosted_on:"github.com",metadata:{author:"Aliaksandr Yakutovich, Daniele Ongari, Leopold Talirz",author_email:"aliaksandr.yakutovich@epfl.ch",version:"1.0.0",description:"AiiDA workflows for the LSMO laboratory at EPFL",classifiers:["Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7"]},aiida_version:">=1.0.0",entry_points:{"aiida.calculations":{"lsmo.ff_builder":"aiida_lsmo.calcfunctions:ff_builder","lsmo.calc_ch4_working_cap":"aiida_lsmo.calcfunctions:calc_ch4_working_cap","lsmo.calc_h2_working_cap":"aiida_lsmo.calcfunctions:calc_h2_working_cap","lsmo.calc_o2_working_cap":"aiida_lsmo.calcfunctions:calc_o2_working_cap","lsmo.calc_selectivity":"aiida_lsmo.calcfunctions:calc_selectivity"},"aiida.parsers":{"lsmo.cp2k_bsse_parser":"aiida_lsmo.parsers:Cp2kBsseParser","lsmo.cp2k_advanced_parser":"aiida_lsmo.parsers:Cp2kAdvancedParser"},"aiida.workflows":{"lsmo.binding_site":"aiida_lsmo.workchains:BindingSiteWorkChain","lsmo.cp2k_binding_energy":"aiida_lsmo.workchains.cp2k_binding_energy:Cp2kBindingEnergyWorkChain","lsmo.cp2k_multistage":"aiida_lsmo.workchains:Cp2kMultistageWorkChain","lsmo.cp2k_multistage_ddec":"aiida_lsmo.workchains:Cp2kMultistageDdecWorkChain","lsmo.isotherm":"aiida_lsmo.workchains:IsothermWorkChain","lsmo.isotherm_multi_temp":"aiida_lsmo.workchains:IsothermMultiTempWorkChain","lsmo.isotherm_calc_pe":"aiida_lsmo.workchains:IsothermCalcPEWorkChain","lsmo.zeopp_multistage_ddec":"aiida_lsmo.workchains:ZeoppMultistageDdecWorkChain","lsmo.sim_annealing":"aiida_lsmo.workchains.sim_annealing:SimAnnealingWorkChain","lsmo.nanoporous_screening_1":"aiida_lsmo.workchains:NanoporousScreening1WorkChain"}},commits_count:15,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-lsmo<pre>Collecting git+https://github.com/lsmo-epfl/aiida-lsmo
  Cloning https://github.com/lsmo-epfl/aiida-lsmo to /tmp/pip-req-build-d2npi4oq
  Running command git clone --filter=blob:none --quiet https://github.com/lsmo-epfl/aiida-lsmo /tmp/pip-req-build-d2npi4oq
  Resolved https://github.com/lsmo-epfl/aiida-lsmo to commit 6bf08fa42e545dadf889ea8095d7fcdd8d1be15c
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-lsmo to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-lsmo==1.0.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-lsmo 1.0.0 depends on aiida-core~=1.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:5},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:10}],pip_install_cmd:"pip install git+https://github.com/lsmo-epfl/aiida-lsmo",is_installable:"False"},"aiida-metavo-scheduler":{code_home:"https://github.com/pzarabadip/aiida-metavo-scheduler",development_status:"stable",entry_point_prefix:"metavo_scheduler",pip_url:"git+https://github.com/pzarabadip/aiida-metavo-scheduler",name:"aiida-metavo-scheduler",package_name:"aiida_metavo_scheduler",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"1.0.0",description:"",classifiers:["Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering"]},aiida_version:">=1.0.0,<1.6",entry_points:{"aiida.cmdline.computer.configure":{sshmetavo:"aiida_metavo_scheduler.metavo.ssh_metavo:CONFIGURE_SSH_CMD"},"aiida.schedulers":{pbsprometavo:"aiida_metavo_scheduler.metavo.pbspro_metavo:PbsproSchedulerMetaVO"},"aiida.transports":{sshmetavo:"aiida_metavo_scheduler.metavo.ssh_metavo:SshTransport"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-metavo-scheduler<pre>Collecting git+https://github.com/pzarabadip/aiida-metavo-scheduler
  Cloning https://github.com/pzarabadip/aiida-metavo-scheduler to /tmp/pip-req-build-mf4vi13f
  Running command git clone --filter=blob:none --quiet https://github.com/pzarabadip/aiida-metavo-scheduler /tmp/pip-req-build-mf4vi13f
  Resolved https://github.com/pzarabadip/aiida-metavo-scheduler to commit 955697497641ca13e997431a8e925df6ec3a9eea
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-metavo-scheduler to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-metavo-scheduler==1.0.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-metavo-scheduler 1.0.0 depends on aiida_core<1.6 and >=1.0.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'sshmetavo' does not start with prefix 'metavo_scheduler.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'pbsprometavo' does not start with prefix 'metavo_scheduler.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'sshmetavo' does not start with prefix 'metavo_scheduler.'"],summaryinfo:[{colorclass:"orange",text:"Other (Cmdline computer configure, Schedulers, Transports)",count:3}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-metavo-scheduler",is_installable:"False"},"aiida-mpds":{code_home:"https://github.com/mpds-io/mpds-aiida",development_status:"beta",documentation_url:"https://github.com/mpds-io/mpds-aiida",entry_point_prefix:"mpds",pip_url:"git+https://github.com/mpds-io/mpds-aiida",name:"aiida-mpds",package_name:"aiida_mpds",hosted_on:"github.com",metadata:{author:"Andrey Sobolev",author_email:"as@tilde.pro",version:"",description:"Aiida workflows for MPDS based on CRYSTAL",classifiers:["Programming Language :: Python","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Information Analysis","Framework :: AiiDA"]},aiida_version:">=1.0.1",entry_points:{"aiida.workflows":{"crystal.mpds":"mpds_aiida.workflows.mpds:MPDSStructureWorkchain","crystal.cif":"mpds_aiida.workflows.cif:CIFStructureWorkchain","crystal.aiida":"mpds_aiida.workflows.aiida:AiidaStructureWorkchain"}},commits_count:6,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-mpds<pre>Collecting git+https://github.com/mpds-io/mpds-aiida
  Cloning https://github.com/mpds-io/mpds-aiida to /tmp/pip-req-build-7pnicywh
  Running command git clone --filter=blob:none --quiet https://github.com/mpds-io/mpds-aiida /tmp/pip-req-build-7pnicywh
  Resolved https://github.com/mpds-io/mpds-aiida to commit a00cdaab14fd25102ce224495256208fca7c00b3
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting mpds-ml-labs@ git+https://github.com/mpds-io/mpds-ml-labs (from mpds-aiida==0.10.0)
  Cloning https://github.com/mpds-io/mpds-ml-labs to /tmp/pip-install-firmy69s/mpds-ml-labs_fb680d20ffcc4a7093caa4af5258f7aa
  Running command git clone --filter=blob:none --quiet https://github.com/mpds-io/mpds-ml-labs /tmp/pip-install-firmy69s/mpds-ml-labs_fb680d20ffcc4a7093caa4af5258f7aa
  Resolved https://github.com/mpds-io/mpds-ml-labs to commit 574c6b08f824b1ab6400442a539fbb6de4b5b43b
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft (from mpds-aiida==0.10.0)
  Cloning https://github.com/tilde-lab/aiida-crystal-dft to /tmp/pip-install-firmy69s/aiida-crystal-dft_fd52a1ded30d459dbb4be2b28083be2f
  Running command git clone --filter=blob:none --quiet https://github.com/tilde-lab/aiida-crystal-dft /tmp/pip-install-firmy69s/aiida-crystal-dft_fd52a1ded30d459dbb4be2b28083be2f
  Resolved https://github.com/tilde-lab/aiida-crystal-dft to commit cc49b637caeb150a534baacfd8380f47a9aecca2
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
Collecting reentry>=1.3.1 (from mpds-aiida==0.10.0)
  Using cached reentry-1.3.3-py3-none-any.whl (17 kB)
Requirement already satisfied: six>=1.16.0 in /opt/conda/lib/python3.9/site-packages (from mpds-aiida==0.10.0) (1.16.0)
Requirement already satisfied: numpy>=1.17.5 in /opt/conda/lib/python3.9/site-packages (from mpds-aiida==0.10.0) (1.26.2)
Collecting ase>=3.19 (from mpds-aiida==0.10.0)
  Downloading ase-3.22.1-py3-none-any.whl (2.2 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.2/2.2 MB 71.6 MB/s eta 0:00:00
Collecting yascheduler>=1.0.12 (from mpds-aiida==0.10.0)
  Downloading yascheduler-1.2.0-py3-none-any.whl.metadata (12 kB)
Collecting matplotlib>=3.1.0 (from ase>=3.19->mpds-aiida==0.10.0)
  Downloading matplotlib-3.8.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.8 kB)
Collecting scipy>=1.1.0 (from ase>=3.19->mpds-aiida==0.10.0)
  Downloading scipy-1.11.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 60.4/60.4 kB 9.2 MB/s eta 0:00:00
Requirement already satisfied: setuptools>=36.2 in /opt/conda/lib/python3.9/site-packages (from reentry>=1.3.1->mpds-aiida==0.10.0) (68.2.2)
Requirement already satisfied: click in /opt/conda/lib/python3.9/site-packages (from reentry>=1.3.1->mpds-aiida==0.10.0) (8.1.7)
Collecting aiohttp~=3.8 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading aiohttp-3.9.0rc0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.4 kB)
Collecting asyncssh~=2.11 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading asyncssh-2.14.1-py3-none-any.whl.metadata (9.9 kB)
Collecting asyncstdlib~=3.10 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading asyncstdlib-3.10.9-py3-none-any.whl.metadata (3.5 kB)
Collecting attrs~=21.0 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading attrs-21.4.0-py2.py3-none-any.whl (60 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 60.6/60.6 kB 17.9 MB/s eta 0:00:00
Collecting azure-identity~=1.10.0 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading azure_identity-1.10.0-py3-none-any.whl (134 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 134.1/134.1 kB 20.9 MB/s eta 0:00:00
Collecting azure-mgmt-compute~=27.2.0 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading azure_mgmt_compute-27.2.0-py3-none-any.whl (5.7 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 5.7/5.7 MB 102.3 MB/s eta 0:00:00
Collecting azure-mgmt-network~=20.0.0 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading azure_mgmt_network-20.0.0-py3-none-any.whl (8.5 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 8.5/8.5 MB 82.0 MB/s eta 0:00:00
Collecting backoff~=2.1.2 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading backoff-2.1.2-py3-none-any.whl (14 kB)
Collecting hcloud~=1.17 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading hcloud-1.31.0-py3-none-any.whl.metadata (4.7 kB)
Collecting pg8000~=1.19 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading pg8000-1.30.3-py3-none-any.whl.metadata (79 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 79.9/79.9 kB 15.4 MB/s eta 0:00:00
Collecting python-daemon~=2.3 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading python_daemon-2.3.2-py3-none-any.whl (34 kB)
Requirement already satisfied: typing-extensions>=4.2.0 in /opt/conda/lib/python3.9/site-packages (from yascheduler>=1.0.12->mpds-aiida==0.10.0) (4.8.0)
Collecting upcloud_api~=2.0 (from yascheduler>=1.0.12->mpds-aiida==0.10.0)
  Downloading upcloud_api-2.5.1-py3-none-any.whl.metadata (7.8 kB)
Requirement already satisfied: aiida-core>=2.0.2 in /opt/conda/lib/python3.9/site-packages (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0) (2.4.1)
Collecting pycrystal>=1.0.10 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0)
  Downloading pycrystal-1.0.16.tar.gz (28 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting mpds_client>=0.24 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0)
  Downloading mpds_client-0.24.tar.gz (9.7 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting pyparsing>2.3.1 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0)
  Downloading pyparsing-3.1.1-py3-none-any.whl.metadata (5.1 kB)
Collecting spglib>=1.16.0 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0)
  Downloading spglib-2.1.0-cp39-cp39-manylinux_2_17_x86_64.whl.metadata (3.3 kB)
Requirement already satisfied: jinja2>=2.10 in /opt/conda/lib/python3.9/site-packages (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0) (3.1.2)
Requirement already satisfied: jsonschema>=3.0.1 in /opt/conda/lib/python3.9/site-packages (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0) (3.2.0)
Requirement already satisfied: packaging in /opt/conda/lib/python3.9/site-packages (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0) (23.2)
Collecting seekpath (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.0)
  Downloading seekpath-2.1.0-py2.py3-none-any.whl.metadata (4.7 kB)
Collecting pycodcif (from mpds-ml-labs@ git+https://github.com/mpds-io/mpds-ml-labs->mpds-aiida==0.10.0)
  Downloading pycodcif-3.0.1.tar.gz (79 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 79.6/79.6 kB 21.0 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting sklearn (from mpds-ml-labs@ git+https://github.com/mpds-io/mpds-ml-labs->mpds-aiida==0.10.0)
  Downloading sklearn-0.0.post11.tar.gz (3.6 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py egg_info did not run successfully.
  │ exit code: 1
  ╰─> [18 lines of output]
      The 'sklearn' PyPI package is deprecated, use 'scikit-learn'
      rather than 'sklearn' for pip commands.
      
      Here is how to fix this error in the main use cases:
      - use 'pip install scikit-learn' rather than 'pip install sklearn'
      - replace 'sklearn' by 'scikit-learn' in your pip requirements files
        (requirements.txt, setup.py, setup.cfg, Pipfile, etc ...)
      - if the 'sklearn' package is used by one of your dependencies,
        it would be great if you take some time to track which package uses
        'sklearn' instead of 'scikit-learn' and report it to their issue tracker
      - as a last resort, set the environment variable
        SKLEARN_ALLOW_DEPRECATED_SKLEARN_PACKAGE_INSTALL=True to avoid this error
      
      More information is available at
      https://github.com/scikit-learn/sklearn-pypi-package
      
      If the previous advice does not cover your use case, feel free to report it at
      https://github.com/scikit-learn/sklearn-pypi-package/issues/new
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'crystal.mpds' does not start with prefix 'mpds.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'crystal.cif' does not start with prefix 'mpds.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'crystal.aiida' does not start with prefix 'mpds.'"],summaryinfo:[{colorclass:"green",text:"Workflows",count:3}],pip_install_cmd:"pip install git+https://github.com/mpds-io/mpds-aiida",is_installable:"False"},"aiida-muon":{entry_point_prefix:"muon",code_home:"https://github.com/positivemuon/aiida-muon",version_file:"https://raw.githubusercontent.com/positivemuon/aiida-muon/main/aiida_muon/__init__.py",pip_url:"git+https://github.com/positivemuon/aiida-muon",name:"aiida-muon",package_name:"aiida_muon",hosted_on:"github.com",metadata:{description:"aiida-muon is allows to find candiate muon implantation sites and hyperfine field by DFT supercell relaxations and from further symmetry and kinetics analysis.  ",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 2 - Pre-Alpha","Framework :: AiiDA"],author:"Muon  group Parma"},aiida_version:">=2.0,<3",entry_points:{"aiida.workflows":{"muon.find_muon":{description:["FindMuonWorkChain finds the candidate implantation site for a positive muon.","    It first performs DFT relaxation calculations for a set of initial muon sites.","    It then analyzes the results of these calculations and finds candidate muon sites.","    If there are magnetic inequivalent sites not initially, they are recalculated","    It further calculates the muon contact hyperfine field at these candidate sites."],spec:{inputs:[{name:"sc_matrix",required:!0,valid_types:"List",info:" List of length 1 for supercell size "},{name:"structure",required:!0,valid_types:"StructureData",info:"Input initial structure"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"mu_spacing",required:!1,valid_types:"Float, NoneType",info:"Minimum distance in Angstrom between two starting muon positions  generated on a grid."},{name:"qe",required:!1,valid_types:"",info:"Input parameters, settings and options for QE DFT calculations"}],outputs:[{name:"all_index_uuid",required:!0,valid_types:"Dict",info:""},{name:"all_sites",required:!0,valid_types:"Dict",info:""},{name:"unique_sites",required:!0,valid_types:"Dict",info:""},{name:"unique_sites_dipolar",required:!1,valid_types:"List",info:""},{name:"unique_sites_hyperfine",required:!1,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:405,message:"One of the PwRelaxWorkChain subprocesses failed"},{status:406,message:"One of the PwBaseWorkChain subprocesses failed"},{status:407,message:"One of the PPWorkChain subprocesses failed"}]},class:"aiida_muon.workflows.find_muon:FindMuonWorkChain"}}},commits_count:21,development_status:"pre-alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/positivemuon/aiida-muon",is_installable:"True"},"aiida-musconv":{entry_point_prefix:"musconv",code_home:"https://github.com/positivemuon/aiida-musconv",version_file:"raw.githubusercontent.com/positivemuon/aiida-musconv/main/aiida_musconv/__init__.py",pip_url:"git+https://github.com/positivemuon/aiida-musconv",name:"aiida-musconv",package_name:"aiida_musconv",hosted_on:"github.com",metadata:{description:"aiida-musconv is a plugin that allows to obtain converged supercell size for an interstitial impurity calculation.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 2 - Pre-Alpha","Framework :: AiiDA"],author:"Muon  group Parma"},aiida_version:">=2.0,<3",entry_points:{"aiida.workflows":{musconv:{description:["WorkChain for finding converged supercell for interstitial impurity calculation"],spec:{inputs:[{name:"pwscf",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"Input initial structure"},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The minimum desired distance in 1/Å between k-points in reciprocal space."},{name:"max_iter_num",required:!1,valid_types:"Int, NoneType",info:"Maximum number of iteration in the supercell convergence loop"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_length",required:!1,valid_types:"Float, NoneType",info:"The minimum length of the smallest lattice vector for the first generated supercell "},{name:"pseudofamily",required:!1,valid_types:"Str, NoneType",info:"The label of the pseudo family"}],outputs:[{name:"Converged_SCmatrix",required:!0,valid_types:"ArrayData",info:""},{name:"Converged_supercell",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:402,message:"one of the PwCalculation subprocesses failed"},{status:702,message:"Max number of supercell convergence reached "},{status:704,message:"Error in fitting the forces to an exponential"}]},class:"aiida_musconv.workflows.musconv:MusconvWorkChain"}}},commits_count:43,development_status:"pre-alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/positivemuon/aiida-musconv",is_installable:"True"},"aiida-nanotech-empa":{code_home:"https://github.com/nanotech-empa/aiida-nanotech-empa",development_status:"beta",entry_point_prefix:"nanotech_empa",pip_url:"git+https://github.com/nanotech-empa/aiida-nanotech-empa",name:"aiida-nanotech-empa",package_name:"aiida_nanotech_empa",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:32,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E004'>E004</a>: Unable to retrieve plugin metadata, retrieve plugin info from 'https://raw.githubusercontent.com/nanotech-empa/aiida-nanotech-empa/master/setup.json' failed.<pre>Traceback (most recent call last):
  File "/home/runner/work/aiida-registry/aiida-registry/aiida_registry/utils.py", line 22, in fetch_file
    response.raise_for_status()
  File "/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py", line 1021, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/nanotech-empa/aiida-nanotech-empa/master/setup.json
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/nanotech-empa/aiida-nanotech-empa",is_installable:"True"},"aiida-nims-scheduler":{code_home:"https://github.com/atztogo/aiida-nims-scheduler",development_status:"stable",documentation_url:"https://github.com/atztogo/aiida-nims-scheduler",entry_point_prefix:"nims_scheduler",pip_url:"git+https://github.com/atztogo/aiida-nims-scheduler",name:"aiida-nims-scheduler",package_name:"aiida_nims_scheduler",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:34,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E004'>E004</a>: Unable to retrieve plugin metadata, retrieve plugin info from 'https://raw.githubusercontent.com/atztogo/aiida-nims-scheduler/master/setup.json' failed.<pre>Traceback (most recent call last):
  File "/home/runner/work/aiida-registry/aiida-registry/aiida_registry/utils.py", line 22, in fetch_file
    response.raise_for_status()
  File "/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py", line 1021, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/atztogo/aiida-nims-scheduler/master/setup.json
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/atztogo/aiida-nims-scheduler",is_installable:"True"},"aiida-nwchem":{code_home:"https://github.com/aiidateam/aiida-nwchem",documentation_url:"https://aiida-nwchem.readthedocs.io/",entry_point_prefix:"nwchem",pip_url:"aiida-nwchem",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-nwchem/master/setup.json",name:"aiida-nwchem",package_name:"aiida_nwchem",hosted_on:"github.com",metadata:{release_date:"2023-08-22",description:"The official AiiDA plugin for NWChem",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"3.0.1"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"nwchem.base":{description:["Base calculation class for NWChem."],spec:{inputs:[{name:"input_file",required:!0,valid_types:"SinglefileData",info:"NWChem input file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, FolderData, NoneType",info:"Remote directory of a completed NWChem calculation to restart from."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Required output files are missing."},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"The stdout output file could not be read."},{status:312,message:"The stdout output file was incomplete."},{status:313,message:"The stdout contains multiple calculations"},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception."}]},class:"aiida_nwchem.calculations.nwchem:NwchemBaseCalculation"},"nwchem.nwchem":{description:["Base calculation class for NWChem.","","    Synthesizes NWChem input file from parameter dictionary and StructureData."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure, with or without a cell"},{name:"add_cell",required:!1,valid_types:"Bool",info:"The input structure, with or without a cell"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, FolderData, NoneType",info:"Remote directory of a completed NWChem calculation to restart from."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Required output files are missing."},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"The stdout output file could not be read."},{status:312,message:"The stdout output file was incomplete."},{status:313,message:"The stdout contains multiple calculations"},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception."}]},class:"aiida_nwchem.calculations.nwchem:NwchemCalculation"}},"aiida.parsers":{"nwchem.nwchem":"aiida_nwchem.parsers.nwchem:NwchemBaseParser"},"aiida.workflows":{"nwchem.base":{description:["Workchain to run an NWChem calculation with automated error handling and restarts."],spec:{inputs:[{name:"nwchem",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_nwchem.workflows.base:NwchemBaseWorkChain"}}},commits_count:3,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-nwchem",is_installable:"True"},"aiida-open_circuit_voltage":{entry_point_prefix:"quantumespresso.ocv",code_home:"https://github.com/tsthakur/aiida-open_circuit_voltage",name:"aiida-open_circuit_voltage",package_name:"aiida_open_circuit_voltage",hosted_on:"github.com",metadata:{author:"Tushar Thakur",author_email:"tushar.thakur@epfl.ch",version:"0.1.0",description:"The AiiDA plugin to calculate ocv at various charge of states using QE",classifiers:["Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Development Status :: 3 - Alpha","Natural Language :: English","Intended Audience :: Science/Research"]},aiida_version:">=1.1.0,<2.0.0",entry_points:{"aiida.workflows":{"quantumespresso.ocv.ocvwc":"aiida_open_circuit_voltage.workflows.workchain:OCVWorkChain"}},commits_count:26,development_status:"alpha",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'quantumespresso.ocv' does not follow naming convention."],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"See source code repository."},"aiida-optimize":{code_home:"https://github.com/greschd/aiida-optimize",documentation_url:"https://aiida-optimize.readthedocs.io",entry_point_prefix:"optimize",pip_url:"aiida-optimize",plugin_info:"https://raw.githubusercontent.com/greschd/aiida-optimize/master/setup.json",name:"aiida-optimize",package_name:"aiida_optimize",hosted_on:"github.com",metadata:{release_date:"2023-03-30",description:"AiiDA Plugin for running optimization algorithms.",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-optimize.readthedocs.io/",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"1.0.2"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.workflows":{"optimize.optimize":{description:["Runs an optimization procedure, given an optimization engine that defines the optimization","    algorithm, and a process which evaluates the function to be optimized."],spec:{inputs:[{name:"engine",required:!0,valid_types:"Str",info:"Engine that runs the optimization."},{name:"engine_kwargs",required:!0,valid_types:"Dict",info:"Keyword arguments passed to the optimization engine."},{name:"evaluate_process",required:!0,valid_types:"Str",info:"Process which produces the result to be optimized."},{name:"evaluate",required:!1,valid_types:"",info:"Inputs that are passed to all evaluation processes."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"optimal_process_output",required:!0,valid_types:"",info:"Output value of the optimal evaluation process."},{name:"optimal_process_uuid",required:!0,valid_types:"",info:"UUID of the optimal evaluation process."},{name:"engine_outputs",required:!1,valid_types:"",info:""},{name:"optimal_process_input",required:!1,valid_types:"",info:"Input value of the optimal evaluation process."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Optimization failed because one of the evaluate processes did not finish ok."},{status:202,message:"Optimization failed because the engine did not finish ok."}]},class:"aiida_optimize._optimization_workchain:OptimizationWorkChain"},"optimize.wrappers.add_inputs":{description:["Wrapper workchain that takes inputs as keys and values and passes it","    on to a sub-process. This enables taking a process which was not","    designed to be used in optimization, and optimize with respect to","    some arbitrary input. Inputs which always remain the same can be","    specified in the ``inputs`` namespace, whereas the inputs to be","    optimized are given through the ``added_input_keys`` and","    ``added_input_values`` inputs.","","    The outputs of the wrapper workchain are the same as those of","    the wrapped process.","",'    The "added" inputs can only be BaseType sub-classes, or',"    attributes of a Dict. For each input, its port location is given",'    in the "added_input_keys" input. For example, ``x.y`` would set',"    the ``y`` input in the ``x`` namespace.","","    For cases where the input is a Dict attribute, the (possibly nested) attribute name is given after a colon. That means ``x:a.b`` would","    set the ``['a']['b']`` attribute of the ``Dict`` given in the ``x``","    input.","","    In cases where only a single input needs to be added, they can be","    specified directly instead of wrapped in a List."],spec:{inputs:[{name:"added_input_keys",required:!0,valid_types:"List, Str",info:"Specifies the location of each added input."},{name:"added_input_values",required:!0,valid_types:"List, BaseType",info:"Values of the added inputs to be passed into the sub-process."},{name:"sub_process",required:!0,valid_types:"Str",info:"The class of the process that should be wrapped."},{name:"inputs",required:!1,valid_types:"",info:"Inputs to be passed on to the sub-process."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Workchain failed because the sub-process did not finish ok."}]},class:"aiida_optimize.wrappers._add_inputs:AddInputsWorkChain"},"optimize.wrappers.concatenate":{description:["Allows concatenating an arbitrary number of sub-processes.","","    A wrapper workchain that allows concatenating an arbitrary number","    of sub-processes. Outputs of one processes can be configured to","    be passed to the next one."],spec:{inputs:[{name:"output_input_mappings",required:!0,valid_types:"List",info:"Defines how inputs are passed between sub-processes. Each list entry entry has the form `((process_label_a, process_label_b), mapping)`, and defines outputs of process A to be passed to process B. The `mapping` values are dictionaries `{'output_name': 'input_name'}` giving the output name (in process A) and input name (in process B) for each value to pass."},{name:"process_inputs",required:!0,valid_types:"",info:"Inputs which are passed on to the sub-processes. The inputs should be grouped into a namespace identified by the process label."},{name:"process_labels",required:!0,valid_types:"List",info:"A list of pairs (label, process_name). The labels can be any string, the process_name needs to be loadable by `aiida_optimize.process_inputs.load_object`, and defines which process is being run."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"process_outputs",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"Workchain failed because a sub-process failed."}]},class:"aiida_optimize.wrappers._concatenate:ConcatenateWorkChain"},"optimize.wrappers.create_evaluate":{description:["Wrapper workchain to combine two processes: The first process _creates_","    a result, and the second _evaluates_ that result.","","    The purpose of this workchain is to facilitate optimization of processes","    which don't natively produce an output that can be optimized, by only","    having to add the 'evaluation' part."],spec:{inputs:[{name:"create",required:!0,valid_types:"",info:"Inputs which are passed on to the create sub-process."},{name:"create_process",required:!0,valid_types:"Str",info:"The sub-process which performs the create step."},{name:"evaluate_process",required:!0,valid_types:"Str",info:"The sub-process which performs the evaluate step."},{name:"output_input_mapping",required:!0,valid_types:"Dict",info:"A mapping from output names of the create process to input names of the evaluate process. These outputs (if present) are forwarded to the evaluate process."},{name:"evaluate",required:!1,valid_types:"",info:"Inputs which are passed on to the evaluate sub-process."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"create",required:!0,valid_types:"",info:""},{name:"evaluate",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Workchain failed because the 'create' sub-process failed."},{status:202,message:"Workchain failed because the 'evaluate' sub-process failed."}]},class:"aiida_optimize.wrappers._create_evaluate:CreateEvaluateWorkChain"}}},commits_count:2,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"green",text:"Workflows",count:4}],pip_install_cmd:"pip install aiida-optimize",is_installable:"True"},"aiida-orca":{code_home:"https://github.com/pzarabadip/aiida-orca",development_status:"stable",documentation_url:"https://aiida-orca.readthedocs.io/",entry_point_prefix:"orca",pip_url:"git+https://github.com/pzarabadip/aiida-orca",name:"aiida-orca",package_name:"aiida_orca",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"0.5.1",description:"AiiDA plugin for ORCA code",classifiers:["Environment :: Plugins","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Framework :: AiiDA"]},aiida_version:">=1.0.0,<2.0.0",entry_points:{"aiida.calculations":{orca_main:"aiida_orca.calculations:OrcaCalculation",orca_asa:"aiida_orca.calculations:OrcaAsaCalculation"},"aiida.parsers":{orca_base_parser:"aiida_orca.parsers:OrcaBaseParser"},"aiida.workflows":{"orca.base":{description:["Workchain to run a orca calculation with automated error handling and restarts."],spec:{inputs:[{name:"orca",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"the results of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"relaxed_structure",required:!1,valid_types:"StructureData",info:"relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unidentified unrecoverable error."},{status:301,message:"The sub process excepted."},{status:301,message:"The calculation failed with an unrecoverable error coming from aiida-orca."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_orca.workchains:OrcaBaseWorkChain"}}},commits_count:40,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-orca",is_installable:"True"},"aiida-phonopy":{code_home:"https://github.com/aiida-phonopy/aiida-phonopy",documentation_url:"https://aiida-phonopy.readthedocs.io/",entry_point_prefix:"phonopy",pip_url:"aiida-phonopy",plugin_info:"https://raw.githubusercontent.com/aiida-phonopy/aiida-phonopy/master/setup.json",name:"aiida-phonopy",package_name:"aiida_phonopy",hosted_on:"github.com",metadata:{release_date:"2023-05-24",description:"The official AiiDA plugin for Phonopy",author_email:"Lorenzo Bastonero <bastonero.lorenzo@gmail.com>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"1.1.3"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{"phonopy.phonopy":{description:["Base `CalcJob` implementation for Phonopy post-processing."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:`Phonopy parameters (\`setting tags\`) for post processing. The following tags, along their type, are allowed:
PRIMITIVE_AXES
PRIMITIVE_AXIS
EIGENVECTORS
BAND
BAND_PATHS
BAND_POINTS
BAND_LABELS
BAND_CONNECTION
BAND_INDICES
MESH
MP
MESH_NUMBERS
MP_SHIFT
GAMMA_CENTER
WRITE_MESH
DOS
DOS_RANGE
FMIN
FMAX
FPITCH
PDOS
PROJECTION_DIRECTION
XYZ_DIRECTION
SIGMA
DEBYE_MODEL
MOMEMT
MOMENT_ORDER
TPROP
TMIN
TMAX
TSTEP
PRETEND_REAL
CUTOFF_FREQUENCY
TDISP
TDISPMAT
TDISPMAT_CIF
QPOINTS
WRITEDM
NAC_METHOD
Q_DIRECTION
GROUP_VELOCITY
GV_DELTA_Q
SYMMETRY_TOLERANCE
SYMMETRY
MESH_SYMMETRY
FC_SYMMETRY
FULL_FORCE_CONSTANTS
WRITE_FORCE_CONSTANTS
ANIME_TYPE
ANIME
MODULATION
IRREPS
SHOW_IRREPS
LITTLE_COGROUP`},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"force_constants",required:!1,valid_types:"ForceConstantsData, NoneType",info:"Force constants of the input structure."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"phonopy_data",required:!1,valid_types:"PhonopyData, NoneType",info:"The preprocess output info of a previous ForceConstantsWorkChain."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Settings for phonopy calculation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"irreducible_representations",required:!1,valid_types:"Dict",info:"Irreducible representation output."},{name:"modulation",required:!1,valid_types:"Dict",info:"Modulation information."},{name:"output_force_constants",required:!1,valid_types:"ArrayData",info:"Calculated force constants."},{name:"output_parameters",required:!1,valid_types:"Dict",info:"Sum up info of phonopy calculation."},{name:"phonon_bands",required:!1,valid_types:"BandsData",info:"Calculated phonon band structure."},{name:"projected_phonon_dos",required:!1,valid_types:"XyData",info:"Calculated projected DOS."},{name:"qpoints",required:!1,valid_types:"BandsData",info:"Calculated qpoints."},{name:"qpoints_mesh",required:!1,valid_types:"BandsData",info:"Calculated qpoint mesh."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"thermal_displacement_matrices",required:!1,valid_types:"Dict",info:"Calculated thermal displacements matrices."},{name:"thermal_displacements",required:!1,valid_types:"Dict",info:"Calculated thermal displacements."},{name:"thermal_properties",required:!1,valid_types:"XyData",info:"Calculated thermal properties."},{name:"total_phonon_dos",required:!1,valid_types:"XyData",info:"Calculated total DOS."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required phonopy file."},{status:304,message:"The retrieved folder did not contain one or more expected output files."},{status:305,message:"No run mode has been selected."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The loading of yaml file got an unexpected error."},{status:321,message:"The file loading via numpy got an unexpected error."},{status:350,message:"The parser raised an unexpected exception."},{status:400,message:"The parser was not able to parse one or more files."}]},class:"aiida_phonopy.calculations.phonopy:PhonopyCalculation"}},"aiida.data":{"phonopy.force_constants":"aiida_phonopy.data.force_constants:ForceConstantsData","phonopy.phonopy":"aiida_phonopy.data.phonopy:PhonopyData","phonopy.preprocess":"aiida_phonopy.data.preprocess:PreProcessData","phonopy.raw":"aiida_phonopy.data.raw:RawData"},"aiida.parsers":{"phonopy.phonopy":"aiida_phonopy.parsers.phonopy:PhonopyParser"},"aiida.workflows":{"phonopy.phonopy":{description:["Abstract workflow for automated frozen phonons.","","    Phonopy is used to produce structures with displacements,","    while the forces are calculated with a quantum engine of choice.","","    This workchain is meant to be used as a base for other specific force calculato plugin workchains,","    or as an example on how to set a possible workchain/workflow. For this reason, the outline of","    this class is not defined, while it provides the inputs and a `setup` method, which can be used","    in a specific workflow outline. Ideally, the workflow would look like:","","    1. Setup the preprocess data.","","        This is already provided in this class. It setups a `PreProcessData` node, from where","        supercell, primitive cell and supercells with displacements can be easily extracted using","        the methods of the nodes. This node can be taken from `self.ctx.preprocess_data`, and used","        during the outline of the workflow.","","    2. Run supercells using the selected quantum engine/force calculator code.","","        In specific code implementations, a force calculation on supercells needs to be run.","        To get these supercells, one need simply to run:","","        ```self.ctx.preprocess_data.calcfunctions.get_supercells_with_displacements()```","","        This will return a dictionary with all the supercells as StructureData to run for the phonon calculation.","        The keys of this dictionary are of the type `supercell_{number}`, where `number` is an integer.","        These numbers are essentials since the `phonopy` force sets is generated following these numbers,","        in order to make sure to refer to the correct displacement. Thus, it is required to keep track","        of them.","        Moreover,a calculation over the pristine supercell structure should be run before hand as reference.","        This structure can instead be gotten via:","","        ```self.ctx.preprocess_data.calcfunctions.get_supercell()```","","        This will return a StructureData without any label.","","        For an example of implementation, refer to aiidateam/aiida-common-worfklows.","","        * Note: some type of force calculation needs to map some variables from the unitcell to the supercell","        (and in certain case even the primitive cell), e.g. the atomic spin in VASP. Since this is code dependent,","        you will need to map these parameters before launching the force calculation of a certain supercell","        with displacement. This information can be gotten via:","","        ```self.ctx.preprocess_data.get_cells_mappings()```","","        Moreover, consider that cells in phonopy will always (re)fold the atoms in order to have positive coordinates.","","    3. Inspect all runs and expose the forces and energies (not mandatory) outputs.","","        * Suggested: when the calculation on each supercell has finished (correctly)","        expose the output forces (and energies) in the dynamical `supercells_forces(energies)` namespace(s).","        Provide each supercell forces as an `ArrayData` with the forces stored as `forces`","        (e.g. if your code plugin stores  the forces in `TrajectoryData`, extract them with a `calcfunction`).","        Expose each `ArrayData` choosing a **common prefix**, while as **suffix use","        _{number}**, with `{number}` referring to the correspective supercell label suffix (that you are supposed to","        keep track somewhere, e.g. in the label of the code calculation/workchain).","        Now you can gather all the information in one data noe, i.e. in a `PhonopyData` node.","        To do so, you can simple run:","","        ```self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(**self.outputs.supercells_forces)```","","        and then expose it as output in the `output_phonopy_data` namespace.","","        * Alternatively: instead of exposing the supercell forces as outputs, you can directly gather all the forces","        in a dictionary and run directly to the `generate_phonopy_data` method using this dictionary (always using","        the double *).","","        See the implementation in aiidateam/aiida-common-workflows for an example.","","    4. (optional) Run the non-analytical constants on the primitive cell.","","        Non-analytical constants should be run for polar insulators. These require usually a linear response code","        or a finite difference approach (e.g. using the electric enthalpy). Since this is usually the most expensive","        part, you should run them on the primitive cell. To get it, use:","","        ```self.ctx.preprocess_data.calcfunctions.get_primitive_cell()```","","        If you compute also these, collect the dielectric tensor and the effectic born charges in an ArrayData,","        with the arraynames `dielectric` and `born_charges` (in Cartesian coordinates!).","        Then, gather all the information of nac and forces in a unique `PhonopyData` via:","","        ```","        self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(","            nac_parameters=nac_paramters,","            **self.outputs.supercells_forces","            )","        ```","","        and expose the output.","","        * Note: we require in the input for generating the full phonopy data, to give the nac in the primitive cell.","        The primitive cell of phonopy will just rotate the lattice vectors, thus mantaining the Cartasian coordinate","        system. It can happen, though, that the unitcell is not the primitive cell of the system, meaning that the","        primitive cell will contain less atoms. We expect in input the nac computed on this number of atoms. If you","        want, for some reason, compute the nac on the unitcell, you will need to get the reduced nac.","        To do so, you can consider using a built-in function in phonopy, namely:","","        :py:func:`phonopy.structure.symmetry.elaborate_borns_and_epsilon`"],spec:{inputs:[{name:"options",required:!0,valid_types:"",info:"Options for how to run the workflow."},{name:"displacement_generator",required:!1,valid_types:"Dict, NoneType",info:`Info for displacements generation. The following flags are allowed:
 distance
 is_plusminus
 is_diagonal
 is_trigonal
 number_of_snapshots
 random_seed
 temperature
 cutoff_frequency`},{name:"fc_options",required:!1,valid_types:"Dict, NoneType",info:`Options for force constants calculation (optional). The following flags are allowed:
 calculate_full_force_constants
 fc_calculator
 fc_calculator_options`},{name:"is_symmetry",required:!1,valid_types:"Bool, NoneType",info:"Whether using or not the space group symmetries."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"nac_parameters",required:!1,valid_types:"ArrayData, NoneType",info:"Non-analytical parameters."},{name:"preprocess_data",required:!1,valid_types:"PhonopyData, PreProcessData, NoneType",info:"The preprocess data for frozen phonon calcualtion."},{name:"primitive_matrix",required:!1,valid_types:"List, NoneType",info:"The matrix used to generate the primitive cell from the input structure in the List format. Allowed shapes are 3x1 and 3x3 lists."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"The structure at equilibrium volume."},{name:"supercell_matrix",required:!1,valid_types:"List, NoneType",info:"The matrix used to generate the supercell from the input structure in the List format. Allowed shapes are 3x1 and 3x3 lists."},{name:"symmetry_tolerance",required:!1,valid_types:"Float, NoneType",info:"Symmetry tolerance for space group analysis on the input structure."}],outputs:[{name:"output_phonopy_data",required:!0,valid_types:"PhonopyData",info:"The phonopy data with supercells displacements, forces and (optionally)nac parameters to use in the post-processing calculation."},{name:"supercells_forces",required:!0,valid_types:"ArrayData",info:"The forces acting on the atoms of each supercell."},{name:"output_force_constants",required:!1,valid_types:"ForceConstantsData",info:"The matrix of force constants computed with finite displacements."},{name:"supercells",required:!1,valid_types:"StructureData",info:"The supercells with displacements."},{name:"supercells_energies",required:!1,valid_types:"Float",info:"The total energy of each supercell."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_phonopy.workflows.phonopy:PhonopyWorkChain"}}},commits_count:28,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:4},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-phonopy",is_installable:"True"},"aiida-phtools":{code_home:"https://github.com/ltalirz/aiida-phtools",entry_point_prefix:"phtools",pip_url:"aiida-phtools",plugin_info:"https://raw.github.com/ltalirz/aiida-phtools/master/setup.json",name:"aiida-phtools",package_name:"aiida_phtools",hosted_on:"github.com",metadata:{release_date:"2018-06-21",description:"AiiDA plugin for persistence homology tools, used to analyze nanoporous materials.",author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-phtools",classifiers:["Programming Language :: Python"],version:"0.1.0a1"},aiida_version:"*",entry_points:{"aiida.calculations":{"phtools.dmatrix":"aiida_phtools.calculations.distance_matrix:DistanceMatrixCalculation","phtools.surface":"aiida_phtools.calculations.pore_surface:PoreSurfaceCalculation"},"aiida.data":{"phtools.surface":"aiida_phtools.data.pore_surface:PoreSurfaceParameters"},"aiida.parsers":{"phtools.dmatrix":"aiida_phtools.parsers.distance_matrix:DistanceMatrixParser","phtools.surface":"aiida_phtools.parsers.pore_surface:PoreSurfaceParser"}},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install --pre aiida-phtools"},"aiida-plumed":{code_home:"https://github.com/ConradJohnston/aiida-plumed",entry_point_prefix:"plumed",pip_url:"aiida-plumed",plugin_info:"https://raw.github.com/ConradJohnston/aiida-plumed/AiiDA-v1.0-compatibility/setup.json",name:"aiida-plumed",package_name:"aiida_plumed",hosted_on:"github.com",metadata:{release_date:"2019-09-16",description:"AiiDA plugin providing support for Plumed2",author:"Conrad Johnston",author_email:"conrad.s.johnston@googlemail.com",license:"MIT",home_page:"https://github.com/ConradJohnston/aiida-plumed",classifiers:["Development Status :: 2 - Pre-Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0a0"},aiida_version:">=1.0.0b3,<2.0.0",entry_points:{"aiida.calculations":{plumed:"aiida_plumed.calculations:DiffCalculation"},"aiida.cmdline.data":{plumed:"aiida_plumed.cli:data_cli"},"aiida.data":{plumed:"aiida_plumed.data:DiffParameters"},"aiida.parsers":{plumed:"aiida_plumed.parsers:DiffParser"}},commits_count:0,development_status:"pre-alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-plumed<pre>Collecting aiida-plumed
  Downloading aiida-plumed-0.1.0a0.tar.gz (11 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-plumed to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-plumed==0.1.0a0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-plumed 0.1.0a0 depends on aiida-core<2.0.0 and >=1.0.0b3
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install --pre aiida-plumed",is_installable:"False"},"aiida-porousmaterials":{code_home:"https://github.com/pzarabadip/aiida-porousmaterials",development_status:"stable",entry_point_prefix:"porousmaterials",pip_url:"aiida-porousmaterials",name:"aiida-porousmaterials",package_name:"aiida_porousmaterials",hosted_on:"github.com",metadata:{release_date:"2020-03-05",description:"AiiDA plugin for PorousMaterials code",author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",license:"MIT",home_page:"https://github.com/pzarabadip/aiida-porousmaterials",classifiers:["Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8"],version:"1.0.0a3"},aiida_version:null,entry_points:{"aiida.calculations":{porousmaterials:"aiida_porousmaterials.calculations:PorousMaterialsCalculation"},"aiida.parsers":{porousmaterials:"aiida_porousmaterials.parser:PorousMaterialsParser"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-porousmaterials<pre>Collecting aiida-porousmaterials
  Downloading aiida-porousmaterials-1.0.0a3.tar.gz (5.7 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-porousmaterials to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida_porousmaterials-1.0.0a2-py3-none-any.whl (9.0 kB)
  Downloading aiida_porousmaterials-1.0.0a1-py3-none-any.whl (9.0 kB)
ERROR: Cannot install aiida-porousmaterials==1.0.0a1, aiida-porousmaterials==1.0.0a2 and aiida-porousmaterials==1.0.0a3 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-porousmaterials 1.0.0a3 depends on aiida_core<2.0.0 and >=1.0.0
    aiida-porousmaterials 1.0.0a2 depends on aiida-core<2.0.0 and >=1.0.0
    aiida-porousmaterials 1.0.0a1 depends on aiida-core<2.0.0 and >=1.0.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install --pre aiida-porousmaterials",is_installable:"False"},"aiida-pseudo":{code_home:"https://github.com/aiidateam/aiida-pseudo",entry_point_prefix:"pseudo",pip_url:"aiida-pseudo",plugin_info:"https://raw.github.com/aiidateam/aiida-pseudo/master/setup.cfg",name:"aiida-pseudo",package_name:"aiida_pseudo",hosted_on:"github.com",metadata:{release_date:"2023-10-25",description:"AiiDA plugin that simplifies working with pseudo potentials.",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>',classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"1.4.0"},aiida_version:">=2.1,<3.0",entry_points:{"aiida.data":{pseudo:"aiida_pseudo.data.pseudo.pseudo:PseudoPotentialData","pseudo.jthxml":"aiida_pseudo.data.pseudo.jthxml:JthXmlData","pseudo.psf":"aiida_pseudo.data.pseudo.psf:PsfData","pseudo.psml":"aiida_pseudo.data.pseudo.psml:PsmlData","pseudo.psp8":"aiida_pseudo.data.pseudo.psp8:Psp8Data","pseudo.upf":"aiida_pseudo.data.pseudo.upf:UpfData","pseudo.vps":"aiida_pseudo.data.pseudo.vps:VpsData"},"aiida.groups":{"pseudo.family":"aiida_pseudo.groups.family.pseudo:PseudoPotentialFamily","pseudo.family.cutoffs":"aiida_pseudo.groups.family.cutoffs:CutoffsPseudoPotentialFamily","pseudo.family.pseudo_dojo":"aiida_pseudo.groups.family.pseudo_dojo:PseudoDojoFamily","pseudo.family.sssp":"aiida_pseudo.groups.family.sssp:SsspFamily"},console_scripts:{"aiida-pseudo":"aiida_pseudo.cli:cmd_root"}},commits_count:23,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"red",text:"Data",count:7},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Groups)",count:4}],pip_install_cmd:"pip install aiida-pseudo",is_installable:"True"},"aiida-psi4":{code_home:"https://github.com/ltalirz/aiida-psi4/tree/master",development_status:"beta",entry_point_prefix:"psi4",pip_url:"git+https://github.com/ltalirz/aiida-psi4",name:"aiida-psi4",package_name:"aiida_psi4",hosted_on:"github.com",metadata:{author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",version:"0.1.0a0",description:"AiiDA plugin for the Psi4 Quantum Chemistry package.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.6.4,<2.0.0",entry_points:{"aiida.data":{"psi4.atomic_input":"aiida_psi4.data:AtomicInput"},"aiida.calculations":{psi4:"aiida_psi4.calculations:Psi4Calculation"},"aiida.parsers":{psi4:"aiida_psi4.parsers:QCSchemaParser"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-psi4<pre>Collecting git+https://github.com/ltalirz/aiida-psi4
  Cloning https://github.com/ltalirz/aiida-psi4 to /tmp/pip-req-build-591dors4
  Running command git clone --filter=blob:none --quiet https://github.com/ltalirz/aiida-psi4 /tmp/pip-req-build-591dors4
  Resolved https://github.com/ltalirz/aiida-psi4 to commit 637e6b0b29e724a158014269d55d9091c6af48c7
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-psi4 to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-psi4==0.1.0a0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-psi4 0.1.0a0 depends on aiida-core<2.0.0 and >=1.6.4
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install git+https://github.com/ltalirz/aiida-psi4",is_installable:"False"},"aiida-pyscf":{code_home:"https://github.com/microsoft/aiida-pyscf",entry_point_prefix:"pyscf",pip_url:"aiida-pyscf",plugin_info:"https://raw.githubusercontent.com/microsoft/aiida-pyscf/main/pyproject.toml",name:"aiida-pyscf",package_name:"aiida_pyscf",hosted_on:"github.com",metadata:{release_date:"2023-08-16",description:"AiiDA plugin for the Python-based Simulations of Chemistry Framework (PySCF).",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>, Adam Grofe <v-adamgrofe@microsoft.com>',classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"0.4.1"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{"pyscf.base":{description:["``CalcJob`` plugin for PySCF."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure with molecular structure definition."},{name:"checkpoint",required:!1,valid_types:"SinglefileData, NoneType",info:"Checkpoint of a previously completed calculation that failed to converge."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Input parameters used to render the PySCF script template."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cubegen",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"checkpoint",required:!1,valid_types:"SinglefileData",info:"The checkpoint file in case the calculation did not converge. Can be used as an input for a restart."},{name:"fcidump",required:!1,valid_types:"SinglefileData",info:"Computed fcidump files."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The computed Hessian."},{name:"model",required:!1,valid_types:"PickledData",info:"The model in serialized form. Can be deserialized and used without having to run the kernel again."},{name:"parameters",required:!1,valid_types:"Dict",info:"Various computed properties parsed from the `FILENAME_RESULTS` output file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The optimized structure if the input parameters contained the `optimizer` key."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The geometry optimization trajectory if the input parameters contained the `optimizer` key."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The stdout output file was not retrieved."},{status:303,message:"The results JSON file was not retrieved."},{status:410,message:"The electronic minimization cycle did not reach self-consistency."},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."}]},class:"aiida_pyscf.calculations.base:PyscfCalculation"}},"aiida.parsers":{"pyscf.base":"aiida_pyscf.parsers.base:PyscfParser"},"aiida.workflows":{"pyscf.base":{description:["Workchain to run a pyscf calculation with automated error handling and restarts."],spec:{inputs:[{name:"pyscf",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"cubegen",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"checkpoint",required:!1,valid_types:"SinglefileData",info:"The checkpoint file in case the calculation did not converge. Can be used as an input for a restart."},{name:"fcidump",required:!1,valid_types:"SinglefileData",info:"Computed fcidump files."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The computed Hessian."},{name:"model",required:!1,valid_types:"PickledData",info:"The model in serialized form. Can be deserialized and used without having to run the kernel again."},{name:"parameters",required:!1,valid_types:"Dict",info:"Various computed properties parsed from the `FILENAME_RESULTS` output file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The optimized structure if the input parameters contained the `optimizer` key."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The geometry optimization trajectory if the input parameters contained the `optimizer` key."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:310,message:"The calculation failed and did not retrieve a checkpoint file from which can be restarted."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_pyscf.workflows.base:PyscfBaseWorkChain"}}},commits_count:70,development_status:"alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-pyscf",is_installable:"True"},"aiida-python":{entry_point_prefix:"aiida-python",development_status:"beta",code_home:"https://github.com/addman2/aiida-python",pip_url:"aiida-python",documentation_url:"https://aiida-python.readthedocs.io",name:"aiida-python",package_name:"aiida_python",hosted_on:"github.com",metadata:{release_date:"2023-11-03",description:"AiiDA Python",author:"Ot(t)o Kohulák",author_email:"otto.kohulak@dontemail.me",license:"MIT",home_page:"https://todo.nothing/",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.0.6"},aiida_version:">=2.1.0",entry_points:{"aiida.calculations":{"python.calc":"aiida_python.calc:CalcJobPython"},"aiida.parsers":{"python.parser":"aiida_python.parser:ParserPython"},"aiida_python.serializers":{int:"aiida_python.serializers:SerializerInt",float:"aiida_python.serializers:SerializerFloat",str:"aiida_python.serializers:SerializerStr",list:"aiida_python.serializers:SerializerList",arraydata:"aiida_python.serializers:SerializerArrayData"},"aiida.data":{}},commits_count:62,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'aiida-python' does not follow naming convention.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'python.calc' does not start with prefix 'aiida-python.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'python.parser' does not start with prefix 'aiida-python.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"orange",text:"Other (Aiida python serializers)",count:5}],pip_install_cmd:"pip install aiida-python",is_installable:"True"},"aiida-qeq":{code_home:"https://github.com/ltalirz/aiida-qeq",development_status:"stable",entry_point_prefix:"qeq",pip_url:"aiida-qeq",plugin_info:"https://raw.githubusercontent.com/ltalirz/aiida-qeq/master/setup.json",name:"aiida-qeq",package_name:"aiida_qeq",hosted_on:"github.com",metadata:{release_date:"2018-11-21",description:"AiiDA plugin for computing electronic charges on atoms using equilibration-type models (QEq, EQEq, ...).",author:"Leopold Talirz, Daniele Ongari",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-qeq",classifiers:["Programming Language :: Python"],version:"0.1.0"},aiida_version:">=0.12.2,<1.0.0",entry_points:{"aiida.calculations":{"qeq.eqeq":"aiida_qeq.calculations.eqeq:EQeqCalculation","qeq.qeq":"aiida_qeq.calculations.qeq:QeqCalculation"},"aiida.data":{"qeq.eqeq":"aiida_qeq.data.eqeq:EQeqParameters","qeq.qeq":"aiida_qeq.data.qeq:QeqParameters"},"aiida.parsers":{"qeq.eqeq":"aiida_qeq.parsers.eqeq:EQeqParser","qeq.qeq":"aiida_qeq.parsers.qeq:QeqParser"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-qeq<pre>Collecting aiida-qeq
  Downloading aiida_qeq-1.0.0a1-py3-none-any.whl (16 kB)
INFO: pip is looking at multiple versions of aiida-qeq to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida-qeq-0.1.0.tar.gz (10 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
ERROR: Cannot install aiida-qeq==0.1.0 and aiida-qeq==1.0.0a1 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-qeq 1.0.0a1 depends on aiida-core<2.0.0 and >=1.0.0b1
    aiida-qeq 0.1.0 depends on aiida-core<1.0.0 and >=0.12.2
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:2}],pip_install_cmd:"pip install aiida-qeq",is_installable:"False"},"aiida-qp2":{code_home:"https://github.com/TREX-CoE/aiida-qp2",entry_point_prefix:"qp2",pip_url:"aiida-qp2",documentation_url:"https://trex-coe.github.io/aiida-qp2/index.html",name:"aiida-qp2",package_name:"aiida_qp2",hosted_on:"github.com",metadata:{release_date:"2022-02-26",description:"AiiDA plugin for the Quantum Package 2.0",author:"Evgeny Posenitskiy",author_email:"posenitskiy@irsamc.ups-tlse.fr",license:"MIT",home_page:"https://github.com/TREX-CoE/aiida-qp2",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python"],version:"0.2.0"},aiida_version:null,entry_points:{"aiida.calculations":{qp2:"aiida_qp2.calculations:QP2Calculation"},"aiida.parsers":{qp2:"aiida_qp2.parsers:QP2Parser"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-qp2<pre>Collecting aiida-qp2
  Downloading aiida-qp2-0.2.0.tar.gz (9.8 kB)
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-qp2 to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-qp2==0.2.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-qp2 0.2.0 depends on aiida-core<2.0.0 and >=1.1.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-qp2",is_installable:"False"},"aiida-quantumespresso":{code_home:"https://github.com/aiidateam/aiida-quantumespresso",documentation_url:"https://aiida-quantumespresso.readthedocs.io/",entry_point_prefix:"quantumespresso",pip_url:"aiida-quantumespresso",plugin_info:"https://raw.github.com/aiidateam/aiida-quantumespresso/master/setup.json",name:"aiida-quantumespresso",package_name:"aiida_quantumespresso",hosted_on:"github.com",metadata:{release_date:"2023-07-24",description:"The official AiiDA plugin for Quantum ESPRESSO",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"4.4.0"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{"quantumespresso.cp":{description:["`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters that are to be used to construct the input file."},{name:"pseudos",required:!0,valid_types:"UpfData, UpfData",info:"A mapping of `UpfData` nodes onto the kind name to which they should apply."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parallelization",required:!1,valid_types:"Dict, NoneType",info:`Parallelization options. The following flags are allowed:
`},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job and the parsing are performed."},{name:"vdw_table",required:!1,valid_types:"SinglefileData, NoneType",info:"Optional van der Waals table contained in a `SinglefileData`."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"output_trajectory",required:!0,valid_types:"TrajectoryData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The required XML file is not present in the retrieved folder."},{status:304,message:"The retrieved folder contains multiple XML files."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The required XML file could not be read."},{status:330,message:"The required POS file could not be read."},{status:340,message:"The required trajectory data could not be read."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."}]},class:"aiida_quantumespresso.calculations.cp:CpCalculation"},"quantumespresso.create_kpoints_from_distance":{description:["Generate a uniformly spaced kpoint mesh for a given structure.","","    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.","","    :param structure: the StructureData to which the mesh should apply","    :param distance: a Float with the desired distance between kpoints in reciprocal space","    :param force_parity: a Bool to specify whether the generated mesh should maintain parity","    :returns: a KpointsData with the generated mesh"],spec:{inputs:[{name:"distance",required:!0,valid_types:"Data",info:"a Float with the desired distance between kpoints in reciprocal space"},{name:"force_parity",required:!0,valid_types:"Data",info:"a Bool to specify whether the generated mesh should maintain parity"},{name:"structure",required:!0,valid_types:"Data",info:"the StructureData to which the mesh should apply"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_quantumespresso.calculations.functions.create_kpoints_from_distance:create_kpoints_from_distance"},"quantumespresso.create_magnetic_configuration":{description:["Create a new magnetic configuration from the given structure based on a list of magnetic moments per site.","","    To create the new list of kinds, the algorithm loops over all the elements in the structure and makes a list of the","    sites with that element and their corresponding magnetic moment. Next, it splits this list in three lists:","","    * Zero magnetic moments: Any site that has an absolute magnetic moment lower than ``ztol``","    * Positive magnetic moments","    * Negative magnetic moments","","    The algorithm then sorts the positive and negative lists from large to small absolute value, and loops over each of","    list. New magnetic kinds will be created when the absolute difference between the magnetic moment of the current","    kind and the site exceeds ``atol``.","","    The positive and negative magnetic moments are handled separately to avoid assigning two sites with opposite signs","    in their magnetic moment to the same kind and make sure that each kind has the correct magnetic moment, i.e. the","    largest magnetic moment in absolute value of the sites corresponding to that kind.","","    .. important:: the function currently does not support alloys.","","    :param structure: a `StructureData` instance.","    :param magnetic_moment_per_site: list of magnetic moments for each site in the structure.","    :param atol: the absolute tolerance on determining if two sites have the same magnetic moment.","    :param ztol: threshold for considering a kind to have non-zero magnetic moment."],spec:{inputs:[{name:"magnetic_moment_per_site",required:!0,valid_types:"Data",info:"list of magnetic moments for each site in the structure."},{name:"structure",required:!0,valid_types:"Data",info:"a `StructureData` instance."},{name:"atol",required:!1,valid_types:"Data",info:"the absolute tolerance on determining if two sites have the same magnetic moment."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"ztol",required:!1,valid_types:"Data",info:"threshold for considering a kind to have non-zero magnetic moment."}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_quantumespresso.calculations.functions.create_magnetic_configuration:create_magnetic_configuration"},"quantumespresso.dos":{description:["`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"output_dos",required:!0,valid_types:"XyData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:330,message:"The dos file could not be read from the retrieved folder."}]},class:"aiida_quantumespresso.calculations.dos:DosCalculation"},"quantumespresso.epw":{description:["`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"kfpoints",required:!0,valid_types:"KpointsData",info:"fine kpoint mesh"},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"coarse kpoint mesh"},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"parent_folder_nscf",required:!0,valid_types:"RemoteData",info:"the folder of a completed nscf `PwCalculation`"},{name:"parent_folder_ph",required:!0,valid_types:"RemoteData",info:"the folder of a completed `PhCalculation`"},{name:"qfpoints",required:!0,valid_types:"KpointsData",info:"fine qpoint mesh"},{name:"qpoints",required:!0,valid_types:"KpointsData",info:"coarse qpoint mesh"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_quantumespresso.calculations.epw:EpwCalculation"},"quantumespresso.matdyn":{description:["`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"force_constants",required:!0,valid_types:"ForceConstantsData",info:""},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"Kpoints on which to calculate the phonon frequencies."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"parent_folder",required:!1,valid_types:"RemoteData, FolderData, SinglefileData, NoneType",info:"Use a local or remote folder as parent folder (for restarts and similar)"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"output_phonon_bands",required:!0,valid_types:"BandsData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:330,message:"The output frequencies file could not be read from the retrieved folder."},{status:410,message:"Number of kpoints not found in the output data"},{status:411,message:"Number of kpoints in the inputs is not commensurate with those in the output"}]},class:"aiida_quantumespresso.calculations.matdyn:MatdynCalculation"},"quantumespresso.merge_ph_outputs":{description:["Calcfunction to merge outputs from multiple `ph.x` calculations with different q-points."],spec:{inputs:[{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_quantumespresso.calculations.functions.merge_ph_outputs:merge_ph_outputs"},"quantumespresso.namelists":{description:["`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."],spec:{inputs:[{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"parent_folder",required:!1,valid_types:"RemoteData, FolderData, SinglefileData, NoneType",info:"Use a local or remote folder as parent folder (for restarts and similar)"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."}]},class:"aiida_quantumespresso.calculations.namelists:NamelistsCalculation"},"quantumespresso.neb":{description:["Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."],spec:{inputs:[{name:"first_structure",required:!0,valid_types:"StructureData",info:"Initial structure"},{name:"last_structure",required:!0,valid_types:"StructureData",info:"Final structure"},{name:"parameters",required:!0,valid_types:"Dict",info:"NEB-specific input parameters"},{name:"pw",required:!0,valid_types:"Data",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job and the parsing are performed."}],outputs:[{name:"output_mep",required:!0,valid_types:"ArrayData",info:"The original and interpolated energy profiles along the minimum-energy path (mep)"},{name:"output_parameters",required:!0,valid_types:"Dict",info:"The output parameters dictionary of the NEB calculation"},{name:"output_trajectory",required:!0,valid_types:"TrajectoryData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"iteration_array",required:!1,valid_types:"ArrayData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:303,message:"The required XML file is not present in the retrieved folder."},{status:320,message:"The XML output file could not be read."},{status:321,message:"The XML output file could not be parsed."},{status:322,message:"The XML output file has an unsupported format."},{status:350,message:"The parser raised an unexpected exception: {exception}"}]},class:"aiida_quantumespresso.calculations.neb:NebCalculation"},"quantumespresso.open_grid":{description:["``CalcJob`` implementation for the ``open_grid.x`` code of Quantum ESPRESSO."],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:"The output folder of a completed `PwCalculation` on an irreducible Brillouin zone"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The explicit list of kpoints of the unfolded kmesh"},{name:"kpoints_mesh",required:!0,valid_types:"KpointsData",info:"The dimensions of the unfolded kmesh"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"The retrieved folder data node could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:312,message:"Found rotation or fractional translation not compatible with FFT grid."},{status:350,message:"Mismatch between kmesh dimensions and number of kpoints."}]},class:"aiida_quantumespresso.calculations.open_grid:OpenGridCalculation"},"quantumespresso.ph":{description:["`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:"the folder of a completed `PwCalculation`"},{name:"qpoints",required:!0,valid_types:"KpointsData",info:"qpoint mesh"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:305,message:"Both the stdout and XML output files could not be read or parsed."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:350,message:"The parser raised an unexpected exception: {exception}"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:410,message:"The minimization cycle did not reach self-consistency."},{status:462,message:"The code failed during the cholesky factorization."}]},class:"aiida_quantumespresso.calculations.ph:PhCalculation"},"quantumespresso.pp":{description:["`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters for the namelists"},{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:"Output folder of a completed `PwCalculation`"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job is performed."}],outputs:[{name:"output_data",required:!0,valid_types:"ArrayData",info:""},{name:"output_data_multiple",required:!0,valid_types:"ArrayData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The parent folder did not contain the required XML output file."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete."},{status:330,message:"The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."},{status:331,message:"The formatted data output file `{filename}` could not be read."},{status:332,message:"The data file format is not supported by the parser"},{status:333,message:"The formatted data output file `{filename}` could not be parsed: {exception}"},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception: {exception}"}]},class:"aiida_quantumespresso.calculations.pp:PpCalculation"},"quantumespresso.projwfc":{description:["`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.","","    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch","    wavefunctions onto atomic orbitals.","","    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:"The output folder of a pw.x calculation"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"Dos",required:!0,valid_types:"XyData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:""},{name:"bands_down",required:!1,valid_types:"BandsData",info:""},{name:"bands_up",required:!1,valid_types:"BandsData",info:""},{name:"projections",required:!1,valid_types:"ProjectionData",info:""},{name:"projections_down",required:!1,valid_types:"ProjectionData",info:""},{name:"projections_up",required:!1,valid_types:"ProjectionData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required XML file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The XML output file could not be read."},{status:321,message:"The XML output file could not be parsed."},{status:322,message:"The XML output file has an unsupported format."},{status:330,message:"The pdos_tot file could not be read from the retrieved folder."},{status:340,message:"An exception was raised parsing bands and projections."}]},class:"aiida_quantumespresso.calculations.projwfc:ProjwfcCalculation"},"quantumespresso.pw":{description:["`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"kpoint mesh or kpoint path"},{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters that are to be used to construct the input file."},{name:"pseudos",required:!0,valid_types:"UpfData, UpfData",info:"A mapping of `UpfData` nodes onto the kind name to which they should apply."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"hubbard_file",required:!1,valid_types:"SinglefileData, NoneType",info:"SinglefileData node containing the output Hubbard parameters from a HpCalculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parallelization",required:!1,valid_types:"Dict, NoneType",info:`Parallelization options. The following flags are allowed:
npool  : The number of 'pools', each taking care of a group of k-points.
nband  : The number of 'band groups', each taking care of a group of Kohn-Sham orbitals.
ntg    : The number of 'task groups' across which the FFT planes are distributed.
ndiag  : The number of 'linear algebra groups' used when parallelizing the subspace diagonalization / iterative orthonormalization. By default, no parameter is passed to Quantum ESPRESSO, meaning it will use its default.`},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job and the parsing are performed."},{name:"vdw_table",required:!1,valid_types:"SinglefileData, NoneType",info:"Optional van der Waals table contained in a `SinglefileData`."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_atomic_occupations",required:!1,valid_types:"Dict",info:""},{name:"output_band",required:!1,valid_types:"BandsData",info:"The `output_band` output node of the successful calculation if present."},{name:"output_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The `output_structure` output node of the successful calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required XML file."},{status:304,message:"The retrieved folder contained multiple XML files."},{status:305,message:"Both the stdout and XML output files could not be read or parsed."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The XML output file could not be read."},{status:321,message:"The XML output file could not be parsed."},{status:322,message:"The XML output file has an unsupported format."},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception: {exception}"},{status:360,message:"The code failed in finding a valid reciprocal lattice vector."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:410,message:"The electronic minimization cycle did not reach self-consistency."},{status:461,message:"The code failed with negative dexx in the exchange calculation."},{status:462,message:"The code failed during the cholesky factorization."},{status:463,message:"Too many bands failed to converge during the diagonalization."},{status:464,message:"The S matrix was found to be not positive definite."},{status:465,message:"The `zhegvd` failed in the PPCG diagonalization."},{status:466,message:"The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."},{status:467,message:"The eigenvector failed to converge."},{status:468,message:"The factorization in the Broyden routine failed."},{status:481,message:'The k-point parallelization "npools" is too high, some nodes have no k-points.'},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."},{status:501,message:"Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."},{status:502,message:"The ionic minimization cycle did not converge after the maximum number of steps."},{status:503,message:"The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."},{status:510,message:"The electronic minimization cycle failed during an ionic minimization cycle."},{status:511,message:"The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."},{status:520,message:"The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."},{status:521,message:"The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."},{status:531,message:"The electronic minimization cycle did not reach self-consistency."},{status:541,message:"The variable cell optimization broke the symmetry of the k-points."},{status:542,message:"The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."},{status:710,message:"The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."}]},class:"aiida_quantumespresso.calculations.pw:PwCalculation"},"quantumespresso.pw2gw":{description:["`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData",info:"Output folder of a completed `PwCalculation`"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"eps",required:!0,valid_types:"ArrayData",info:"The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, `epsTOT`"},{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation.`"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:305,message:"The eps*.dat output files could not be read or parsed."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:330,message:"The eps*.dat output files do not have the expected shape (N, 2)."},{status:331,message:"The eps*.dat output files contains different values of energies."},{status:350,message:"The parser raised an unexpected exception: {exception}"}]},class:"aiida_quantumespresso.calculations.pw2gw:Pw2gwCalculation"},"quantumespresso.pw2wannier90":{description:["`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.","","    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"],spec:{inputs:[{name:"nnkp_file",required:!0,valid_types:"SinglefileData",info:"A SinglefileData containing the .nnkp file generated by wannier90.x -pp"},{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:"The output folder of a pw.x calculation"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:340,message:"Encountered a generic error message"},{status:350,message:"The parser raised an unexpected exception: {exception}"}]},class:"aiida_quantumespresso.calculations.pw2wannier90:Pw2wannier90Calculation"},"quantumespresso.pwimmigrant":{description:["Create a PwCalculation object that can be used to import old jobs.","","    This is a sublass of aiida_quantumespresso.calculations.PwCalculation","    with slight modifications to some of the class variables and additional","    methods that","","        a. parse the job's input file to create the calculation's input","           nodes that would exist if the calculation were submitted using AiiDa,","        b. bypass the functions of the daemon, and prepare the node's attributes","           such that all the processes (copying of the files to the repository,","           results parsing, ect.) can be performed","","    .. note:: The keyword arguments of PwCalculation are also available.","","    :param remote_workdir: Absolute path to the directory where the job was run.","        The transport of the computer you link ask input to the calculation is","        the transport that will be used to retrieve the calculation's files.","        Therefore, ``remote_workdir`` should be the absolute path to the job's","        directory on that computer.","    :type remote_workdir: str","","    :param input_file_name: The file name of the job's input file.","    :type input_file_name: str","","    :param output_file_name: The file name of the job's output file (i.e. the","        file containing the stdout of QE).","    :type output_file_name: str"],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"kpoint mesh or kpoint path"},{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters that are to be used to construct the input file."},{name:"pseudos",required:!0,valid_types:"UpfData, UpfData",info:"A mapping of `UpfData` nodes onto the kind name to which they should apply."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"hubbard_file",required:!1,valid_types:"SinglefileData, NoneType",info:"SinglefileData node containing the output Hubbard parameters from a HpCalculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parallelization",required:!1,valid_types:"Dict, NoneType",info:`Parallelization options. The following flags are allowed:
npool  : The number of 'pools', each taking care of a group of k-points.
nband  : The number of 'band groups', each taking care of a group of Kohn-Sham orbitals.
ntg    : The number of 'task groups' across which the FFT planes are distributed.
ndiag  : The number of 'linear algebra groups' used when parallelizing the subspace diagonalization / iterative orthonormalization. By default, no parameter is passed to Quantum ESPRESSO, meaning it will use its default.`},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job and the parsing are performed."},{name:"vdw_table",required:!1,valid_types:"SinglefileData, NoneType",info:"Optional van der Waals table contained in a `SinglefileData`."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_atomic_occupations",required:!1,valid_types:"Dict",info:""},{name:"output_band",required:!1,valid_types:"BandsData",info:"The `output_band` output node of the successful calculation if present."},{name:"output_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The `output_structure` output node of the successful calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required XML file."},{status:304,message:"The retrieved folder contained multiple XML files."},{status:305,message:"Both the stdout and XML output files could not be read or parsed."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The XML output file could not be read."},{status:321,message:"The XML output file could not be parsed."},{status:322,message:"The XML output file has an unsupported format."},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception: {exception}"},{status:360,message:"The code failed in finding a valid reciprocal lattice vector."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:410,message:"The electronic minimization cycle did not reach self-consistency."},{status:461,message:"The code failed with negative dexx in the exchange calculation."},{status:462,message:"The code failed during the cholesky factorization."},{status:463,message:"Too many bands failed to converge during the diagonalization."},{status:464,message:"The S matrix was found to be not positive definite."},{status:465,message:"The `zhegvd` failed in the PPCG diagonalization."},{status:466,message:"The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."},{status:467,message:"The eigenvector failed to converge."},{status:468,message:"The factorization in the Broyden routine failed."},{status:481,message:'The k-point parallelization "npools" is too high, some nodes have no k-points.'},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."},{status:501,message:"Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."},{status:502,message:"The ionic minimization cycle did not converge after the maximum number of steps."},{status:503,message:"The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."},{status:510,message:"The electronic minimization cycle failed during an ionic minimization cycle."},{status:511,message:"The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."},{status:520,message:"The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."},{status:521,message:"The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."},{status:531,message:"The electronic minimization cycle did not reach self-consistency."},{status:541,message:"The variable cell optimization broke the symmetry of the k-points."},{status:542,message:"The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."},{status:710,message:"The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."}]},class:"aiida_quantumespresso.calculations.pwimmigrant:PwimmigrantCalculation"},"quantumespresso.q2r":{description:["`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"force_constants",required:!0,valid_types:"ForceConstantsData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:330,message:"The force constants file could not be read."}]},class:"aiida_quantumespresso.calculations.q2r:Q2rCalculation"},"quantumespresso.seekpath_structure_analysis":{description:["Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.","","    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the","    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the","    original structure in which case the k-points are only congruent with the primitive cell.","","    The keyword arguments can be used to specify various Seekpath parameters, such as:","","        with_time_reversal: True","        reference_distance: 0.025","        recipe: 'hpkot'","        threshold: 1e-07","        symprec: 1e-05","        angle_tolerance: -1.0","","    Note that exact parameters that are available and their defaults will depend on your Seekpath version."],spec:{inputs:[{name:"structure",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_quantumespresso.calculations.functions.seekpath_structure_analysis:seekpath_structure_analysis"},"quantumespresso.xspectra":{description:["CalcJob implementation for the xspectra.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"core_wfc_data",required:!0,valid_types:"SinglefileData",info:"Core wavefunction data, generated by the upf2plotcore.sh utility"},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The K-point sampling to be used for the XSpectra calculation"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"gamma_file",required:!1,valid_types:"SinglefileData, NoneType",info:"An optional file containing the data for the broadening function used when `gamma_mode=file`"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"spectra",required:!0,valid_types:"XyData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:313,message:"xiabs was set incorrectly, check and ensure that the index value correctly refers to the atomic species containing the core-hole (where the index starts from 1)."},{status:314,message:"xiabs was either set to 0 or less, or was greater than ntyp."},{status:330,message:"The xspectra output file could not be read from the retrieved folder."},{status:331,message:"The spectrum data file could not be read using NumPy genfromtxt"},{status:400,message:"The time limit set for the calculation was exceeded, and the job wrote a save file before exiting."}]},class:"aiida_quantumespresso.calculations.xspectra:XspectraCalculation"}},"aiida.data":{"quantumespresso.force_constants":"aiida_quantumespresso.data.force_constants:ForceConstantsData","quantumespresso.hubbard_structure":"aiida_quantumespresso.data.hubbard_structure:HubbardStructureData"},"aiida.parsers":{"quantumespresso.cp":"aiida_quantumespresso.parsers.cp:CpParser","quantumespresso.dos":"aiida_quantumespresso.parsers.dos:DosParser","quantumespresso.matdyn":"aiida_quantumespresso.parsers.matdyn:MatdynParser","quantumespresso.neb":"aiida_quantumespresso.parsers.neb:NebParser","quantumespresso.open_grid":"aiida_quantumespresso.parsers.open_grid:OpenGridParser","quantumespresso.ph":"aiida_quantumespresso.parsers.ph:PhParser","quantumespresso.pp":"aiida_quantumespresso.parsers.pp:PpParser","quantumespresso.projwfc":"aiida_quantumespresso.parsers.projwfc:ProjwfcParser","quantumespresso.pw":"aiida_quantumespresso.parsers.pw:PwParser","quantumespresso.pw2gw":"aiida_quantumespresso.parsers.pw2gw:Pw2gwParser","quantumespresso.pw2wannier90":"aiida_quantumespresso.parsers.pw2wannier90:Pw2wannier90Parser","quantumespresso.q2r":"aiida_quantumespresso.parsers.q2r:Q2rParser","quantumespresso.xspectra":"aiida_quantumespresso.parsers.xspectra:XspectraParser"},"aiida.tools.calculations":{"quantumespresso.pw":"aiida_quantumespresso.tools.calculations.pw:PwCalculationTools"},"aiida.tools.data.orbitals":{noncollinearhydrogen:"aiida_quantumespresso.tools.data.orbital.noncollinearhydrogen:NoncollinearHydrogenOrbital",spinorbithydrogen:"aiida_quantumespresso.tools.data.orbital.spinorbithydrogen:SpinorbitHydrogenOrbital"},"aiida.workflows":{"quantumespresso.matdyn.base":{description:["Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"matdyn",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"output_phonon_bands",required:!0,valid_types:"BandsData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_quantumespresso.workflows.matdyn.base:MatdynBaseWorkChain"},"quantumespresso.pdos":{description:["A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."],spec:{inputs:[{name:"dos",required:!0,valid_types:"Data",info:"Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax` and `DeltaE` values have to match with those in the `projwfc` inputs."},{name:"nscf",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` of the `nscf` calculation."},{name:"projwfc",required:!0,valid_types:"Data",info:"Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Emax` and `DeltaE` values have to match with those in the `dos` inputs."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"align_to_fermi",required:!1,valid_types:"Bool",info:"If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from the `nscf` calculation. Note that it only makes sense to align `Emax` and `Emin` to the fermi level in case they are actually provided by in the `dos` and `projwfc` inputs, since otherwise the "},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If ``True``, work directories of all called calculation will be cleaned at the end of execution."},{name:"dry_run",required:!1,valid_types:"Bool, NoneType",info:"Terminate workchain steps before submitting calculations (test purposes only)."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"scf",required:!1,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` of the `scf` calculation."},{name:"serial_clean",required:!1,valid_types:"Bool, NoneType",info:"If ``True``, calculations will be run in serial, and work directories will be cleaned before the next step."}],outputs:[{name:"dos",required:!0,valid_types:"",info:""},{name:"nscf",required:!0,valid_types:"",info:""},{name:"projwfc",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."},{status:401,message:"the SCF sub process failed"},{status:402,message:"the NSCF sub process failed"},{status:403,message:"the DOS sub process failed"},{status:404,message:"the PROJWFC sub process failed"},{status:404,message:"both the DOS and PROJWFC sub process failed"}]},class:"aiida_quantumespresso.workflows.pdos:PdosWorkChain"},"quantumespresso.ph.base":{description:["Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"ph",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"only_initialization",required:!1,valid_types:"Bool",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:204,message:"The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:401,message:"The work chain failed to merge the q-points data from multiple `PhCalculation`s because not all q-points were parsed."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_quantumespresso.workflows.ph.base:PhBaseWorkChain"},"quantumespresso.pw.bands":{description:["Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.","","    The logic for the computation of various parameters for the BANDS step is as follows:","","    Number of bands:","        One can specify the number of bands to be used in the BANDS step either directly through the input parameters","        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When","        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being","        used. If the `nbands_factor` is specified the maximum value of the following values will be used:","","        * `nbnd` of the preceding SCF calculation","        * 0.5 * nelectrons * nbands_factor","        * 0.5 * nelectrons + 4","","    Kpoints:","        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the","        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.","        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry","        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that","        of `bands_kpoints_distance` or the SeekPath default if not specified."],spec:{inputs:[{name:"bands",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` for the BANDS calculation."},{name:"scf",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` for the SCF calculation."},{name:"structure",required:!0,valid_types:"StructureData",info:"The inputs structure."},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints to use for the BANDS calculation. Specify either this or `bands_kpoints_distance`."},{name:"bands_kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"Minimum kpoints distance for the BANDS calculation. Specify either this or `bands_kpoints`."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"nbands_factor",required:!1,valid_types:"Float, NoneType",info:"The number of bands for the BANDS calculation is that used for the SCF multiplied by this factor."},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation step is skipped."}],outputs:[{name:"band_parameters",required:!0,valid_types:"Dict",info:"The output parameters of the BANDS `PwBaseWorkChain`."},{name:"band_structure",required:!0,valid_types:"BandsData",info:"The computed band structure."},{name:"scf_parameters",required:!0,valid_types:"Dict",info:"The output parameters of the SCF `PwBaseWorkChain`."},{name:"primitive_structure",required:!1,valid_types:"StructureData",info:"The normalized and primitivized structure for which the bands are computed."},{name:"seekpath_parameters",required:!1,valid_types:"Dict",info:"The parameters used in the SeeKpath call to normalize the input or relaxed structure."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."},{status:202,message:"Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."},{status:401,message:"The PwRelaxWorkChain sub process failed"},{status:402,message:"The scf PwBasexWorkChain sub process failed"},{status:403,message:"The bands PwBasexWorkChain sub process failed"}]},class:"aiida_quantumespresso.workflows.pw.bands:PwBandsWorkChain"},"quantumespresso.pw.base":{description:["Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"pw",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"An explicit k-points list or mesh. Either this or `kpoints_distance` has to be provided."},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The minimum desired distance in 1/Å between k-points in reciprocal space. The explicit k-points will be generated automatically by a calculation function based on the input structure."},{name:"kpoints_force_parity",required:!1,valid_types:"Bool, NoneType",info:"Optional input when constructing the k-points based on a desired `kpoints_distance`. Setting this to `True` will force the k-point mesh to have an even number of points along each lattice vector except for any non-periodic directions."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_atomic_occupations",required:!1,valid_types:"Dict",info:""},{name:"output_band",required:!1,valid_types:"BandsData",info:"The `output_band` output node of the successful calculation if present."},{name:"output_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The `output_structure` output node of the successful calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified."},{status:203,message:"Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."},{status:204,message:"The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."},{status:210,message:"Required key for `automatic_parallelization` was not specified.This exit status has been deprecated as the automatic parallellization feature was removed."},{status:211,message:"Unrecognized keys were specified for `automatic_parallelization`.This exit status has been deprecated as the automatic parallellization feature was removed."},{status:300,message:"The calculation failed with an unidentified unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:310,message:"The calculation failed with a known unrecoverable error."},{status:320,message:"The initialization calculation failed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:501,message:"Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."},{status:710,message:"The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."}]},class:"aiida_quantumespresso.workflows.pw.base:PwBaseWorkChain"},"quantumespresso.pw.relax":{description:["Workchain to relax a structure using Quantum ESPRESSO pw.x."],spec:{inputs:[{name:"base",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` for the main relax loop."},{name:"structure",required:!0,valid_types:"StructureData",info:"The inputs structure."},{name:"base_final_scf",required:!1,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` for the final scf."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"max_meta_convergence_iterations",required:!1,valid_types:"Int",info:"The maximum number of variable cell relax iterations in the meta convergence cycle."},{name:"meta_convergence",required:!1,valid_types:"Bool",info:"If `True` the workchain will perform a meta-convergence on the cell volume."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"volume_convergence",required:!1,valid_types:"Float",info:"The volume difference threshold between two consecutive meta convergence iterations."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_atomic_occupations",required:!1,valid_types:"Dict",info:""},{name:"output_band",required:!1,valid_types:"BandsData",info:"The `output_band` output node of the successful calculation if present."},{name:"output_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The successfully relaxed structure."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"the relax PwBaseWorkChain sub process failed"},{status:402,message:"the final scf PwBaseWorkChain sub process failed"}]},class:"aiida_quantumespresso.workflows.pw.relax:PwRelaxWorkChain"},"quantumespresso.q2r.base":{description:["Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"q2r",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"force_constants",required:!0,valid_types:"ForceConstantsData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_quantumespresso.workflows.q2r.base:Q2rBaseWorkChain"},"quantumespresso.xps":{description:["Workchain to compute X-ray photoelectron spectra (XPS) for a given structure.","","    The WorkChain itself firstly calls the PwRelaxWorkChain to relax the input structure if","    required. Then determines the input settings for each XPS calculation automatically using","    ``get_xspectra_structures()``. The input structures are generated from the standardized","    structure by converting each to a supercell with cell dimensions of at least 8.0 angstrom","    in each periodic dimension in order to sufficiently reduce the unphysical interaction","    of the core-hole with neighbouring images. The size of the minimum size requirement can be","    overriden by the user if required. Then the standard Delta-Self-Consistent-Field (ΔSCF)","    method is used to get the XPS binding energy. Finally, the XPS spectrum is calculated","    using the Voigt profile."],spec:{inputs:[{name:"ch_scf",required:!0,valid_types:"Data",info:"Input parameters for the basic xps workflow (core-hole SCF)."},{name:"core_hole_pseudos",required:!0,valid_types:"UpfData, UpfData",info:'Dynamic namespace for pairs of excited-state pseudopotentials for each absorbing element. Must use the mapping "{element}" : {Upf}".'},{name:"gipaw_pseudos",required:!0,valid_types:"UpfData, UpfData",info:'Dynamic namespace for pairs of ground-state pseudopotentials for each absorbing element. Must use the mapping "{element}" : {Upf}".'},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for calculation."},{name:"abs_atom_marker",required:!1,valid_types:"Str",info:"The name for the Kind representing the absorbing atom in the structure. Will be used in all structures generated in ``get_xspectra_structures`` step."},{name:"calc_binding_energy",required:!1,valid_types:"Bool",info:"If `True`, run scf calculation for the supercell."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculations will be cleaned at the end of execution."},{name:"core_hole_treatments",required:!1,valid_types:"Dict, NoneType",info:"Optional dictionary to set core-hole treatment to all elements present. The default full-core-hole treatment will be used if not specified."},{name:"correction_energies",required:!1,valid_types:"Dict, NoneType",info:"Optional dictionary to set the correction energy to all elements present. "},{name:"dry_run",required:!1,valid_types:"Bool, NoneType",info:"Terminate workchain steps before submitting calculations (test purposes only)."},{name:"elements_list",required:!1,valid_types:"List, NoneType",info:"The list of elements to be considered for analysis, each must be valid elements of the periodic table."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"Data",info:"Input parameters for the relax process. If not specified at all, the relaxation step is skipped."},{name:"spglib_settings",required:!1,valid_types:"Dict, NoneType",info:"Optional settings dictionary for the spglib call within ``get_xspectra_structures``."},{name:"structure_preparation_settings",required:!1,valid_types:"Dict, Float, Int, Bool, Str",info:"Optional settings dictionary for the ``get_xspectra_structures()`` method."},{name:"voight_gamma",required:!1,valid_types:"Float",info:"The gamma parameter for the Lorenzian broadening in the Voight method."},{name:"voight_sigma",required:!1,valid_types:"Float",info:"The sigma parameter for the gaussian broadening in the Voight method."}],outputs:[{name:"binding_energies",required:!0,valid_types:"Dict",info:"All the binding energy values for each element calculated by the WorkChain."},{name:"chemical_shifts",required:!0,valid_types:"Dict",info:"All the chemical shift values for each element calculated by the WorkChain."},{name:"final_spectra_be",required:!0,valid_types:"XyData",info:"The fully-resolved spectra for each element based on binding energy."},{name:"final_spectra_cls",required:!0,valid_types:"XyData",info:"The fully-resolved spectra for each element based on chemical shift."},{name:"output_parameters_ch_scf",required:!0,valid_types:"Dict",info:"The output parameters of each ``PwBaseWorkChain`` performed``."},{name:"supercell_structure",required:!0,valid_types:"StructureData",info:"The supercell of ``outputs.standardized_structure`` used to generate structures for XPS sub-processes."},{name:"symmetry_analysis_data",required:!0,valid_types:"Dict",info:"The output parameters from ``get_xspectra_structures()``."},{name:"optimized_structure",required:!1,valid_types:"StructureData",info:"The optimized structure from the ``relax`` process."},{name:"output_parameters_relax",required:!1,valid_types:"Dict",info:"The output_parameters of the relax step."},{name:"output_parameters_scf",required:!1,valid_types:"Dict",info:"The output_parameters of the scf step."},{name:"standardized_structure",required:!1,valid_types:"StructureData",info:"The standardized crystal structure used to generate structures for XPS sub-processes."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The Relax sub process failed"},{status:402,message:"The SCF Pw sub processes failed"},{status:402,message:"One or more CH_SCF Pw sub processes failed"}]},class:"aiida_quantumespresso.workflows.xps:XpsWorkChain"},"quantumespresso.xspectra.base":{description:["Workchain to run a Quantum ESPRESSO xspectra.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"xspectra",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"An explicit k-points mesh. Either this or `kpoints_distance` has to be provided."},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The minimum desired distance in 1/Å between k-points in reciprocal space. The explicit k-points will be generated automatically by a calculation function based on the input structure."},{name:"kpoints_force_parity",required:!1,valid_types:"Bool, NoneType",info:"Optional input when constructing the k-points based on a desired `kpoints_distance`. Setting this to `True` will force the k-point mesh to have an even number of points along each lattice vector except for any non-periodic directions."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"spectra",required:!0,valid_types:"XyData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_quantumespresso.workflows.xspectra.base:XspectraBaseWorkChain"},"quantumespresso.xspectra.core":{description:["Workchain to compute X-ray absorption spectra for a given structure using Quantum ESPRESSO.","","    The workflow follows the process required to compute the XAS of an input structure: an SCF calculation is performed","    using the provided structure, which is then followed by the calculation of the XAS itself by XSpectra. The","    calculations performed by the WorkChain in a typical run will be:","","    - PwSCF calculation with pw.x of the input structure with a core-hole present.","    - Generation of core-wavefunction data with upf2plotcore.sh (if requested).","    - XAS calculation with xspectra.x to compute the Lanczos coefficients and print the XANES spectra for the","      polarisation vectors requested in the input.","    - Collation of output data from pw.x and xspectra.x calculations, including a combination of XANES dipole spectra","      based on polarisation vectors to represent the powder spectrum of the structure (if requested).","","    If ``run_replot = True`` is set in the inputs (defaults to False), the WorkChain will run a second xspectra.x","    calculation which replots the spectra produced from the ``xs_prod`` step. This option can be very useful for","    obtaining a final spectrum at low levels of broadening (relative to the default of 0.5 eV), particularly as higher","    levels of broadening significantly speed up the convergence of the Lanczos procedure. Inputs for the replot","    calculation are found in the ``xs_plot`` namespace.","","    The core-wavefunction plot derived from the ground-state of the absorbing element can be provided as a top-level","    input or produced by the WorkChain. If left to the WorkChain, the ground-state pseudopotential assigned to the","    absorbing element will be used to generate this data using the upf2plotcore.sh utility script (via the","    ``aiida-shell`` plugin).","","    In its current stage of development, the workflow requires the following:","","    - An input structure where the desired absorbing atom in the system is marked as a separate Kind. The default","      behaviour for the WorkChain is to set the Kind name as 'X', however this can be changed via the `overrides`","      dictionary.","    - A code node for ``upf2plotcore``, configured for the ``aiida-shell`` plugin","      (https://github.com/sphuber/aiida-shell). Alternatively, a ``SinglefileData`` node from a previous ``ShellJob``","      run can be supplied under ``inputs.core_wfc_data``.","    - A suitable pair of pseudopotentials for the element type of the absorbing atom, one for the ground-state occupancy","      which contains GIPAW informtation for the core level of interest for the XAS (e.g. 1s in the case of a K-edge","      calculation) and the other containing a core hole. (For the moment this can be passed either via the","      ``core_hole_pseudos`` field in ``get_builder_from_protocol`` or via the overrides, but will be changed later once","      full families of core-hole pseudopotentials become available)."],spec:{inputs:[{name:"eps_vectors",required:!0,valid_types:"List",info:"The list of 3-vectors to use in XSpectra sub-processes. The number of sub-lists will subsequently define the number of XSpectra calculations to perform"},{name:"scf",required:!0,valid_types:"Data",info:"Input parameters for the `pw.x` calculation."},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for calculation, with at least one site containing the `abs_atom_marker` as the kind label."},{name:"xs_prod",required:!0,valid_types:"Data",info:"Input parameters for the `xspectra.x` calculation to compute the Lanczos."},{name:"abs_atom_marker",required:!1,valid_types:"Str, NoneType",info:"The name for the Kind representing the absorbing atom in the structure. Must corespond to a Kind within the StructureData node supplied to the calculation."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"core_wfc_data",required:!1,valid_types:"SinglefileData, NoneType",info:"The core wavefunction data file extracted from the ground-state pseudo for the absorbing atom."},{name:"dry_run",required:!1,valid_types:"Bool, NoneType",info:"Terminate workchain steps before submitting calculations (test purposes only)."},{name:"get_powder_spectrum",required:!1,valid_types:"Bool",info:"If `True`, the WorkChain will combine XANES dipole spectra computed using the XAS basis vectors defined according to the `get_powder_spectrum` CalcFunction."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"run_replot",required:!1,valid_types:"Bool",info:""},{name:"upf2plotcore_code",required:!1,valid_types:"Code, NoneType",info:"The code node required for upf2plotcore.sh configured for ``aiida-shell``. Must be provided if `core_wfc_data` is not provided."},{name:"xs_plot",required:!1,valid_types:"Data",info:"Input parameters for the re-plot `xspectra.x` calculation of the Lanczos."}],outputs:[{name:"parameters_scf",required:!0,valid_types:"Dict",info:"The output parameters of the SCF `PwBaseWorkChain`."},{name:"parameters_xspectra",required:!0,valid_types:"Dict",info:"The output dictionaries of each `XspectraBaseWorkChain` performed"},{name:"spectra",required:!0,valid_types:"XyData",info:"An XyData node containing all the final spectra produced by the WorkChain."},{name:"powder_spectrum",required:!1,valid_types:"XyData",info:"The simulated powder spectrum"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The SCF sub process failed"},{status:402,message:"One or more XSpectra sub processes failed"},{status:403,message:"The pseudo for the absorbing element contains no GIPAW information."}]},class:"aiida_quantumespresso.workflows.xspectra.core:XspectraCoreWorkChain"},"quantumespresso.xspectra.crystal":{description:["Workchain to compute all X-ray absorption spectra for a given structure using Quantum ESPRESSO.","","    The WorkChain follows the process required to compute all the K-edge XAS spectra for each","    element in a given structure. The WorkChain itself firstly calls the PwRelaxWorkChain to","    relax the input structure, then determines the input settings for each XAS","    calculation automatically using ``get_xspectra_structures()``:","","        - Firstly the input structure is converted to its conventional standard cell using","          ``spglib`` and detects the space group number for the conventional cell.","        - Symmetry analysis of the standardized structure using ``spglib`` is then used to","          determine the number of non-equivalent atomic sites in the structure for each","          element considered for analysis.","","    Using the symmetry data returned from ``get_xspectra_structures``, input structures for","    the XspectraCoreWorkChain are generated from the standardized structure by converting each","    to a supercell with cell dimensions of at least 8.0 angstroms in each periodic dimension -","    required in order to sufficiently reduce the unphysical interaction of the core-hole with","    neighbouring images. The size of the minimum size requirement can be overriden by the","    user if required. The WorkChain then uses the space group number to set the list of","    polarisation vectors for the ``XspectraCoreWorkChain`` to compute for all subsequent","    calculations."],spec:{inputs:[{name:"core",required:!0,valid_types:"Data",info:"Input parameters for the basic xspectra workflow (core-hole SCF + XAS."},{name:"core_hole_pseudos",required:!0,valid_types:"UpfData, UpfData",info:'Dynamic namespace for pairs of excited-state pseudopotentials for each absorbing element. Must use the mapping "{element}" : {Upf}".'},{name:"elements_list",required:!0,valid_types:"List",info:"The list of elements to be considered for analysis, each must be a valid element of the periodic table."},{name:"gipaw_pseudos",required:!0,valid_types:"UpfData, UpfData",info:'Dynamic namespace for pairs of ground-state pseudopotentials for each absorbing element. Must use the mapping "{element}" : {Upf}.'},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for calculation."},{name:"abs_atom_marker",required:!1,valid_types:"Str",info:"The name for the Kind representing the absorbing atom in the structure. Will be used in all structures generated in ``get_xspectra_structures`` step."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculations will be cleaned at the end of execution."},{name:"core_hole_treatments",required:!1,valid_types:"Dict, NoneType",info:"Optional dictionary to set core-hole treatment to given elements present. The default full-core-hole treatment will be used if not specified."},{name:"core_wfc_data",required:!1,valid_types:"SinglefileData",info:"Input namespace to provide core wavefunction inputs for each element. Must follow the format: ``core_wfc_data__{symbol} = {node}``"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"Data",info:"Input parameters for the relax process. If not specified at all, the relaxation step is skipped."},{name:"return_all_powder_spectra",required:!1,valid_types:"Bool",info:"If ``True``, the WorkChain will return all ``powder_spectrum`` nodes from each ``XspectraCoreWorkChain`` sub-process."},{name:"spglib_settings",required:!1,valid_types:"Dict, NoneType",info:"Optional settings dictionary for the spglib call within ``get_xspectra_structures``."},{name:"structure_preparation_settings",required:!1,valid_types:"Dict, Float, Int, Bool, Str",info:"Optional settings dictionary for the ``get_xspectra_structures()`` method."},{name:"upf2plotcore_code",required:!1,valid_types:"Code, NoneType",info:"Code node for the upf2plotcore.sh ShellJob code."}],outputs:[{name:"final_spectra",required:!0,valid_types:"XyData",info:"The fully-resolved spectra for each element"},{name:"supercell_structure",required:!0,valid_types:"StructureData",info:"The supercell of ``outputs.standardized_structure`` used to generate structures for XSpectra sub-processes."},{name:"symmetry_analysis_data",required:!0,valid_types:"Dict",info:"The output parameters from ``get_xspectra_structures()``."},{name:"optimized_structure",required:!1,valid_types:"StructureData",info:"The optimized structure from the ``relax`` process."},{name:"parameters_relax",required:!1,valid_types:"Dict",info:"The output_parameters of the relax step."},{name:"parameters_scf",required:!1,valid_types:"Dict",info:"The output parameters of each ``PwBaseWorkChain`` performed in each ``XspectraCoreWorkChain``."},{name:"parameters_xspectra",required:!1,valid_types:"Dict",info:"The output dictionaries of each `XspectraCalculation` performed"},{name:"powder_spectra",required:!1,valid_types:"XyData",info:"All the spectra generated by the WorkChain."},{name:"standardized_structure",required:!1,valid_types:"StructureData",info:"The standardized crystal structure used to generate structures for XSpectra sub-processes."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The Relax sub process failed"},{status:402,message:"One or more XSpectra workflows failed"},{status:403,message:"The pseudos for one or more absorbing elements contain no GIPAW information."}]},class:"aiida_quantumespresso.workflows.xspectra.crystal:XspectraCrystalWorkChain"}},console_scripts:{"aiida-quantumespresso":"aiida_quantumespresso.cli:cmd_root"}},commits_count:73,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'noncollinearhydrogen' does not start with prefix 'quantumespresso.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'spinorbithydrogen' does not start with prefix 'quantumespresso.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:20},{colorclass:"brown",text:"Parsers",count:13},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:11},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Tools calculations, Tools data orbitals)",count:3}],pip_install_cmd:"pip install aiida-quantumespresso",is_installable:"True"},"aiida-quantumespresso-hp":{code_home:"https://github.com/sphuber/aiida-quantumespresso-hp",entry_point_prefix:"quantumespresso.hp",pip_url:"git+https://github.com/sphuber/aiida-quantumespresso-hp",name:"aiida-quantumespresso-hp",package_name:"aiida_quantumespresso_hp",hosted_on:"github.com",metadata:{author:"Sebastiaan P. Huber",author_email:"mail@sphuber.net",version:"0.1.0",description:"The AiiDA plugin for the Hubbard module of Quantum ESPRESSO",classifiers:["License :: OSI Approved :: MIT License","Programming Language :: Python :: 2.7","Development Status :: 4 - Beta"]},aiida_version:">=1.0.0b6,<2.0",entry_points:{"aiida.calculations":{"quantumespresso.hp":"aiida_quantumespresso_hp.calculations.hp:HpCalculation"},"aiida.parsers":{"quantumespresso.hp":"aiida_quantumespresso_hp.parsers.hp:HpParser"},"aiida.workflows":{"quantumespresso.hp.main":"aiida_quantumespresso_hp.workflows.hp.main:HpWorkChain","quantumespresso.hp.parallelize_atoms":"aiida_quantumespresso_hp.workflows.hp.parallelize_atoms:HpParallelizeAtomsWorkChain","quantumespresso.hp.base":"aiida_quantumespresso_hp.workflows.hp.base:HpBaseWorkChain","quantumespresso.hp.hubbard":"aiida_quantumespresso_hp.workflows.hubbard:SelfConsistentHubbardWorkChain"},console_scripts:{launch_calculation_hp:"aiida_quantumespresso_hp.cli.calculations.hp:launch",launch_workflow_hp_base:"aiida_quantumespresso_hp.cli.workflows.hp.base:launch",launch_workflow_hp_main:"aiida_quantumespresso_hp.cli.workflows.hp.main:launch",launch_workflow_hp_hubbard:"aiida_quantumespresso_hp.cli.workflows.hubbard:launch"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-quantumespresso-hp<pre>Collecting git+https://github.com/sphuber/aiida-quantumespresso-hp
  Cloning https://github.com/sphuber/aiida-quantumespresso-hp to /tmp/pip-req-build-omca92qb
  Running command git clone --filter=blob:none --quiet https://github.com/sphuber/aiida-quantumespresso-hp /tmp/pip-req-build-omca92qb
  Resolved https://github.com/sphuber/aiida-quantumespresso-hp to commit 1fbea899424f63e71054815e9abe5d09b0a2b1cf
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-quantumespresso-hp to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-quantumespresso-hp==0.1.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-quantumespresso-hp 0.1.0 depends on aiida-core<2.0 and >=1.0.0b6
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'quantumespresso.hp' does not follow naming convention."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:4},{colorclass:"purple",text:"Console scripts",count:4}],pip_install_cmd:"pip install git+https://github.com/sphuber/aiida-quantumespresso-hp",is_installable:"False"},"aiida-raspa":{code_home:"https://github.com/yakutovicha/aiida-raspa",entry_point_prefix:"raspa",pip_url:"aiida-raspa",plugin_info:"https://raw.github.com/yakutovicha/aiida-raspa/master/setup.json",name:"aiida-raspa",package_name:"aiida_raspa",hosted_on:"github.com",metadata:{release_date:"2023-08-26",description:"AiiDA plugin for RASPA code",author_email:"Aliaksandr Yakutovich <aliaksandr.yakutovich@epfl.ch>, Miriam Pougin <miriam.pougin@epfl.ch>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.0"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{raspa:{description:["This is a RaspaCalculation, subclass of CalcJob, to prepare input for RASPA code.","    For information on RASPA, refer to: https://github.com/iraspa/raspa2."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"block_pocket",required:!1,valid_types:"SinglefileData",info:"Zeo++ block pocket file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"file",required:!1,valid_types:"SinglefileData",info:"Additional input file(s)"},{name:"framework",required:!1,valid_types:"CifData",info:"Input framework(s)"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote folder used to continue the same simulation stating from the binary restarts."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieved_parent_folder",required:!1,valid_types:"FolderData, NoneType",info:"To use an old calculation as a starting poing for a new one."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional input parameters"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The results of a calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"warnings",required:!1,valid_types:"List",info:"Warnings that appeared during the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"The retrieved folder does not contain an output file."},{status:102,message:'The output does not contain "Starting simulation".'},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:500,message:"The calculation could not be completed due to the lack of time."}]},class:"aiida_raspa.calculations:RaspaCalculation"}},"aiida.parsers":{raspa:"aiida_raspa.parsers:RaspaParser"},"aiida.workflows":{"raspa.base":{description:["Workchain to run a RASPA calculation with automated error handling and restarts."],spec:{inputs:[{name:"raspa",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The results of a calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"warnings",required:!1,valid_types:"List",info:"Warnings that appeared during the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_raspa.workchains:RaspaBaseWorkChain"}}},commits_count:3,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-raspa",is_installable:"True"},"aiida-shell":{code_home:"https://github.com/sphuber/aiida-shell",entry_point_prefix:"core",pip_url:"aiida-shell",plugin_info:"https://raw.github.com/sphuber/aiida-shell/master/pyproject.toml",name:"aiida-shell",package_name:"aiida_shell",hosted_on:"github.com",metadata:{release_date:"2023-11-02",description:"AiiDA plugin that makes running shell commands easy.",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>',classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"0.6.0"},aiida_version:">=2.1,<3.0",entry_points:{"aiida.calculations":{"core.shell":{description:["Implementation of :class:`aiida.engine.CalcJob` to run a simple shell command."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"arguments",required:!1,valid_types:"List, NoneType",info:""},{name:"filenames",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"nodes",required:!1,valid_types:"Data",info:""},{name:"outputs",required:!1,valid_types:"List, NoneType",info:""},{name:"parser",required:!1,valid_types:"EntryPointData, PickledData, NoneType",info:""},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Exit status could not be determined: exit status file was not retrieved."},{status:301,message:"Exit status could not be determined: exit status file does not contain a valid integer."},{status:302,message:"The stdout file was not retrieved."},{status:303,message:"One or more output files defined in the `outputs` input were not retrieved: {missing_filepaths}."},{status:310,message:"Callable specified in the `parser` input excepted: {exception}."},{status:400,message:"The command exited with a non-zero status: {status} {stderr}."},{status:410,message:"The command exited with a zero status but the stderr was not empty."}]},class:"aiida_shell.calculations.shell:ShellJob"}},"aiida.data":{"core.code.installed.shell":"aiida_shell.data.code:ShellCode","core.entry_point":"aiida_shell.data.entry_point:EntryPointData","core.pickled":"aiida_shell.data.pickled:PickledData"},"aiida.parsers":{"core.shell":"aiida_shell.parsers.shell:ShellParser"}},commits_count:47,development_status:"alpha",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'core' does not follow naming convention."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:3}],pip_install_cmd:"pip install aiida-shell",is_installable:"True"},"aiida-siesta":{code_home:"https://github.com/siesta-project/aiida_siesta_plugin/tree/master",documentation_url:"https://aiida-siesta-plugin.readthedocs.io/",entry_point_prefix:"siesta",pip_url:"aiida-siesta",name:"aiida-siesta",package_name:"aiida_siesta",hosted_on:"github.com",metadata:{release_date:"2022-07-17",description:"A plugin for Siesta's basic functionality within the AiiDA framework.",author_email:'Albero Garcia <albertog@icmab.es>, "Victor M. Garcia-Suarez" <garciavictor@uniovi.es>, Emanuele Bosoni <ebosoni@icmab.es>, Vladimir Dikan <vdikan@icmab.es>, Pol Febrer <pol.febrer@icn2.cat>',classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{"siesta.siesta":{description:["Siesta calculator class for AiiDA."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The calculation results"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"Optional band structure"},{name:"forces_and_stress",required:!1,valid_types:"ArrayData",info:"Optional forces and stress"},{name:"ion_files",required:!1,valid_types:"IonData",info:""},{name:"optical_eps2",required:!1,valid_types:"ArrayData",info:"Optional eps2 optical data"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Optional relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:350,message:'Statement "Job completed" not detected, unknown error'},{status:448,message:"Problems in the polarization of a basis element"},{status:449,message:"Split_norm parameter too small"},{status:450,message:"Calculation did not reach scf convergence!"},{status:451,message:"Calculation did not reach geometry convergence!"},{status:452,message:"Bands analysis was requested, but file is not present"},{status:453,message:"Failure while parsing the bands file"},{status:454,message:"Optical calculation requested, but file is not present"}]},class:"aiida_siesta.calculations.siesta:SiestaCalculation"},"siesta.stm":{description:['Plugin for the "plstm" program in the Siesta distribution.',"",'    The "plstm" program takes the .LDOS file and generates a plot file with a simulated STM image.','    It supports both the old "plstm" versions (inputs in a files) and the new ones (inputs in the command','    line). Spin options are supported only in recent "plstm" versions, therefore ignored otherwise.'],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"ldos_folder",required:!0,valid_types:"RemoteData",info:"Parent folder"},{name:"mode",required:!0,valid_types:"Str",info:'Allowed values are "constant-height" or "constant-current"'},{name:"value",required:!0,valid_types:"Float",info:"Value of height in Ang or value of current in e/bohr**3"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"spin_option",required:!1,valid_types:"Str",info:'Spin option follows plstm sintax: "q" no spin, "s" total spin, "x","y","z" the three spin components'}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"For the moment only parser version and name of .STM file"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stm_array",required:!0,valid_types:"ArrayData",info:"The contour data for the STM image"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"The retrieved folder does not contain a CH.STM file"},{status:102,message:"The .STM file can not be read"},{status:102,message:"The array containing the STM data can not be produced"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_siesta.calculations.stm:STMCalculation"}},"aiida.parsers":{"siesta.parser":"aiida_siesta.parsers.siesta:SiestaParser","siesta.stm":"aiida_siesta.parsers.stm:STMParser"},"aiida.workflows":{"siesta.base":{description:["Base Workchain to launch a total energy calculation via Siesta."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The calculation results"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"Optional band structure"},{name:"forces_and_stress",required:!1,valid_types:"ArrayData",info:"Optional forces and stress"},{name:"ion_files",required:!1,valid_types:"IonData",info:""},{name:"optical_eps2",required:!1,valid_types:"ArrayData",info:"Optional eps2 optical data"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Optional relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:403,message:"Basis polarization problem."},{status:404,message:"Error in the parsing of bands"}]},class:"aiida_siesta.workflows.base:SiestaBaseWorkChain"},"siesta.eos":{description:["WorkChain to calculate the equation of state of a solid.","","    The cell shape is fixed, only the volume is rescaled.","    In particular the volumes considered are 7 equidistant volumes","    around a starting volume. The starting volume is","    an optional input of the WorkChain (called volume_per_atom).","    If not specified, the input structure volume is used with no modifications.","    All the SiestaBaseWorkChain inputs are other inputs of the workchain.","    This WorkChain also tries to perform a Birch_Murnaghan fit","    on the calculatad E(V) data."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"batch_size",required:!1,valid_types:"Int",info:`The maximum number of simulations that should run at the same time.
            You can set this to a very large number to make sure that all simulations run in
            one single batch if you want.`},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"iterate_mode",required:!1,valid_types:"Str",info:`Indicates the way the parameters should be iterated.
            Currently allowed values are:
            - 'zip': zips all the parameters together (all parameters should
              have the same number of values!)
            - 'product': performs a cartesian product of the parameters. That is,
              all possible combinations of parameters and values are explored.
            `},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"scales",required:!1,valid_types:"",info:`
            Factors by which the structure should be scaled.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"volume_per_atom",required:!1,valid_types:"Float, NoneType",info:"Volume per atom around which to perform the EqOfState"}],outputs:[{name:"results_dict",required:!0,valid_types:"Dict",info:"Containing the calculated E(V) data and, if the fit is sucessfull, the resulting fit parameters"},{name:"equilibrium_structure",required:!1,valid_types:"StructureData",info:"Equilibrium volume structure. Returned only if the fit is succesfull"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.eos:EqOfStateFixedCellShape"},"siesta.bandgap":{description:["Workchain to obtain the bands and bandgap of a structure through Siesta.","",'    If "bandskpoints" are set in inputs, it behaves like `SiestaBaseWorkChain`',"    adding just the bandgap calculation at the end. If no bandskpoints","    was specified, the bands are computed anyway on a kpoints path automatically","    assigned using seekpath and the input (output) structure","    of the single-point (relaxation/md) calculation."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"seekpath_dict",required:!1,valid_types:"Dict",info:"dictionary of seekpath parameters that are pased to `get_explicit_kpoints_path`"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The calculation results"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"band_gap_info",required:!1,valid_types:"Dict",info:""},{name:"bands",required:!1,valid_types:"BandsData",info:"Optional band structure"},{name:"forces_and_stress",required:!1,valid_types:"ArrayData",info:"Optional forces and stress"},{name:"ion_files",required:!1,valid_types:"IonData",info:""},{name:"optical_eps2",required:!1,valid_types:"ArrayData",info:"Optional eps2 optical data"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Optional relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The main SiestaBaseWorkChain failed"},{status:201,message:"The SiestaBaseWorkChain to obtain the bands failed"}]},class:"aiida_siesta.workflows.bandgap:BandgapWorkChain"},"siesta.stm":{description:["STM Workchain.","","    This workchain runs a DFT calculation with siesta, calculates","    the local density of states in an energy window specified by the user (stored","    in a .LDOS file) and post-process it in order to produce simulated STM images."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"emax",required:!0,valid_types:"Float",info:"Higher boundary energy (in eV respect to Ef) for LDOS calculation"},{name:"emin",required:!0,valid_types:"Float",info:"Lower boundary energy (in eV respect to Ef) for LDOS calculation"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"stm_code",required:!0,valid_types:"Code",info:"STM plstm code"},{name:"stm_mode",required:!0,valid_types:"Str",info:'Allowed values are "constant-height" or "constant-current"'},{name:"stm_spin",required:!0,valid_types:"Str",info:'Allowed values are "none", "collinear" or "non-collinear"'},{name:"stm_value",required:!0,valid_types:"Float",info:"Value of height in Ang or value of current in e/bohr**3"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"stm_options",required:!1,valid_types:"Dict, NoneType",info:"STM plstm code resources and options"}],outputs:[{name:"stm_array",required:!0,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The main SiestaBaseWorkChain failed"},{status:201,message:"The SiestaBaseWorkChain to obtain the .LDOS file failed"},{status:202,message:"The STM post-process failed"}]},class:"aiida_siesta.workflows.stm:SiestaSTMWorkChain"},"siesta.baseneb":{description:["Workchain to run a NEB MEP optimization starting from a guessed path.","","    In theory, such task can be accomplished using directly the SiestaCalculation","    and passing the guessed path as xyz files in lua.input_files input (see","    `examples/plugins/siesta/example_neb.py`). Here, instead, the","    guessed path must be specified as a set of structures in a `TrajectoryData` object.","    The structures in `TrajectoryData` are then transformed in xyz files and placed","    in a directory that is the passed to lua.input_files when the SiestaCalculation is called.","    This better preserves the provenance. Moreover allows cleaner use of ghost (often necessaries)","    Finally, we have a dedicated output containing all the NEB quantities.","    This workchain can also become the place where to deal with possible errors due","    to the lua features."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"neb_script",required:!0,valid_types:"SinglefileData",info:"Lua script for NEB engine"},{name:"options",required:!0,valid_types:"Dict",info:"Options"},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"starting_path",required:!0,valid_types:"TrajectoryData",info:"Starting Path"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"spring_constant",required:!1,valid_types:"Float",info:""}],outputs:[{name:"neb_output_package",required:!0,valid_types:"TrajectoryData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"The NEB calculation failed"},{status:202,message:"The .xyz files or the NEB.results file could not be retrieved"}]},class:"aiida_siesta.workflows.neb_base:SiestaBaseNEBWorkChain"},"siesta.epsilon":{description:["Workchain to obtain the electronic contribution to the static dielectric constant using Siesta."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"optical",required:!0,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The calculation results"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"Optional band structure"},{name:"epsilon",required:!1,valid_types:"Float",info:"Low-frequency dielectric constant"},{name:"forces_and_stress",required:!1,valid_types:"ArrayData",info:"Optional forces and stress"},{name:"ion_files",required:!1,valid_types:"IonData",info:""},{name:"optical_eps2",required:!1,valid_types:"ArrayData",info:"Optional eps2 optical data"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Optional relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:403,message:"Basis polarization problem."},{status:404,message:"Error in the parsing of bands"}]},class:"aiida_siesta.workflows.epsilon:EpsilonWorkChain"},"siesta.iterator":{description:["Iterator for the SietaBaseWorkChain.","","    The iterator is extended to iterate over any Siesta keyword.","    WARNING: if a keyword not recognized by Siesta is used in `iterate_over`, the iterator will not","    complain. It will just add the keyword to the parameters dict and run the calculation!"],spec:{inputs:[{name:"iterate_over",required:!0,valid_types:"Dict",info:`A dictionary where each key is the name of a parameter we want to iterate
                over (str) and each value is a list with all the values to iterate over for
                that parameter. Each value in the list can be either a node (unstored or stored)
                or a simple python object (str, float, int, bool).
                Note that each subclass might parse this keys and values differently, so you should
                know how they do it.
                `},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"batch_size",required:!1,valid_types:"Int",info:`The maximum number of simulations that should run at the same time.
            You can set this to a very large number to make sure that all simulations run in
            one single batch if you want.`},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"Code",info:"Input code"},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"iterate_mode",required:!1,valid_types:"Str",info:`Indicates the way the parameters should be iterated.
            Currently allowed values are:
            - 'zip': zips all the parameters together (all parameters should
              have the same number of values!)
            - 'product': performs a cartesian product of the parameters. That is,
              all possible combinations of parameters and values are explored.
            `},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"options",required:!1,valid_types:"Dict",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"Input parameters"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"structure",required:!1,valid_types:"StructureData",info:"Input structure"}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.iterate:SiestaIterator"},"siesta.converger":{description:["Only connects the two parent classes."],spec:{inputs:[{name:"iterate_over",required:!0,valid_types:"Dict",info:`A dictionary where each key is the name of a parameter we want to iterate
                over (str) and each value is a list with all the values to iterate over for
                that parameter. Each value in the list can be either a node (unstored or stored)
                or a simple python object (str, float, int, bool).
                Note that each subclass might parse this keys and values differently, so you should
                know how they do it.
                `},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"batch_size",required:!1,valid_types:"Int",info:`The maximum number of simulations that should run at the same time.
            You can set this to a very large number to make sure that all simulations run in
            one single batch if you want.`},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"Code",info:"Input code"},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"iterate_mode",required:!1,valid_types:"Str",info:`Indicates the way the parameters should be iterated.
            Currently allowed values are:
            - 'zip': zips all the parameters together (all parameters should
              have the same number of values!)
            - 'product': performs a cartesian product of the parameters. That is,
              all possible combinations of parameters and values are explored.
            `},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"options",required:!1,valid_types:"Dict",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"Input parameters"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"structure",required:!1,valid_types:"StructureData",info:"Input structure"},{name:"target",required:!1,valid_types:"Str, NoneType",info:"The parameter that you want to track."},{name:"threshold",required:!1,valid_types:"Int, Float",info:"The maximum difference between two consecutive steps to consider that convergence is reached"}],outputs:[{name:"converged",required:!0,valid_types:"",info:"Whether the target has converged"},{name:"converged_parameters",required:!1,valid_types:"",info:"The values for the parameters that was enough to achieve convergence. If converged is not achieved, it won't be returned"},{name:"converged_target_value",required:!1,valid_types:"",info:"The value of the target with convergence reached."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.converge:SiestaConverger"},"siesta.sequential_converger":{description:["An iterator of convergers."],spec:{inputs:[{name:"converger_inputs",required:!0,valid_types:"Data",info:""},{name:"iterate_over",required:!0,valid_types:"List",info:`A dictionary where each key is the name of a parameter we want to iterate
                over (str) and each value is a list with all the values to iterate over for
                that parameter. Each value in the list can be either a node (unstored or stored)
                or a simple python object (str, float, int, bool).
                Note that each subclass might parse this keys and values differently, so you should
                know how they do it.
                `},{name:"batch_size",required:!1,valid_types:"Int",info:`The maximum number of simulations that should run at the same time.
            You can set this to a very large number to make sure that all simulations run in
            one single batch if you want.`},{name:"iterate_mode",required:!1,valid_types:"Str",info:`Indicates the way the parameters should be iterated.
            Currently allowed values are:
            - 'zip': zips all the parameters together (all parameters should
              have the same number of values!)
            - 'product': performs a cartesian product of the parameters. That is,
              all possible combinations of parameters and values are explored.
            `},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"converged_parameters",required:!0,valid_types:"",info:"The values for the parameters that was enough to achieve convergence. If convergence is not achieved, it will be an empty dictionary"},{name:"converged_target_value",required:!1,valid_types:"",info:"The value of the target with convergence reached."},{name:"unconverged_parameters",required:!1,valid_types:"",info:"The list of unconverged parameters."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.converge:SiestaSequentialConverger"},"siesta.forbasisopt":{description:["Wrapper of SiestaBaseWorkChain.","","    Class wrapping the SiestaBaseWorkChain with the scope of","    assigning the variables of the optimization process to the right","    input of the SiestaBaseWorkChain."],spec:{inputs:[{name:"lower_bounds",required:!0,valid_types:"List",info:""},{name:"out_name",required:!0,valid_types:"Str",info:""},{name:"siesta_base",required:!0,valid_types:"Data",info:""},{name:"the_names",required:!0,valid_types:"List",info:""},{name:"the_values",required:!0,valid_types:"List",info:""},{name:"upper_bounds",required:!0,valid_types:"List",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"ene",required:!0,valid_types:"Float",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows._for_optimization:ForBasisOptWorkChain"},"siesta.simplex_basis":{description:["Workchain running a simple NelderMead optimization (simplex) varing variables defined in the basis dictionaries."],spec:{inputs:[{name:"siesta_base",required:!0,valid_types:"Data",info:""},{name:"simplex",required:!0,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"last_simplex",required:!0,valid_types:"List",info:""},{name:"optimal_process_output",required:!0,valid_types:"",info:"Output value of the optimal evaluation process."},{name:"optimal_process_uuid",required:!0,valid_types:"",info:"UUID of the optimal evaluation process."},{name:"optimal_process_input",required:!1,valid_types:"",info:"Input value of the optimal evaluation process."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The OptimizationWorkChain did not finished"}]},class:"aiida_siesta.workflows.simplex_basis:SimplexBasisOptimization"},"siesta.two_step_basis_opt":{description:["Optimization that is more similar to the simplex code in the siesta utils.","",'    The optimization has two levels, a "marcrostep" that consists in the restart of',"    a simplex with gradual reduction of the dimention of the initial simplex."],spec:{inputs:[{name:"macrostep",required:!0,valid_types:"",info:""},{name:"siesta_base",required:!0,valid_types:"Data",info:""},{name:"simplex",required:!0,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"last_simplex",required:!0,valid_types:"List",info:""},{name:"optimal_process_output",required:!0,valid_types:"",info:"Output value of the optimal evaluation process."},{name:"optimal_process_uuid",required:!0,valid_types:"",info:"UUID of the optimal evaluation process."},{name:"optimal_process_input",required:!1,valid_types:"",info:"Input value of the optimal evaluation process."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.two_steps_optimization:TwoStepsBasisOpt"},"siesta.basis_optimization":{description:["WorkChain for basis optimization."],spec:{inputs:[{name:"optimization_schema",required:!0,valid_types:"",info:""},{name:"siesta_base",required:!0,valid_types:"Data",info:""},{name:"simplex",required:!0,valid_types:"",info:""},{name:"add_orbital",required:!1,valid_types:"Dict, NoneType",info:""},{name:"basis_sizes",required:!1,valid_types:"List",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"sizes_monitored_quantity",required:!1,valid_types:"Str",info:""}],outputs:[{name:"optimal_basis_block",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The SiestaIterator running pao sizes failed"},{status:201,message:"The basis optimization failed, probably not sufficient steps"},{status:202,message:"The basis optimization failed, probably not sufficient steps"}]},class:"aiida_siesta.workflows.basis_optimization:BasisOptimizationWorkChain"}},"aiida.data":{"siesta.ion":"aiida_siesta.data.ion:IonData"},"aiida.tools.data.orbitals":{"siesta.atomic_orbital":"aiida_siesta.data.atomic_orbitals:SislAtomicOrbital"}},commits_count:0,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:13},{colorclass:"orange",text:"Other (Tools data orbitals)",count:1}],pip_install_cmd:"pip install aiida-siesta",is_installable:"True"},"aiida-spex":{code_home:"https://github.com/JuDFTteam/aiida-spex",entry_point_prefix:"spex",pip_url:"git+https://github.com/JuDFTteam/aiida-spex",name:"aiida-spex",package_name:"aiida_spex",hosted_on:"github.com",metadata:{author:"The SPEX Team",author_email:"a.chandran@fz-juelich.de",version:"1.1.2",description:"AiiDA plugin for SPEX code",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.0.0b3,<3.0.0",entry_points:{"aiida.calculations":{"spex.spex":"aiida_spex.calculations.spex:SpexCalculation"},"aiida.data":{"spex.spexinp":"aiida_spex.data.spexinp:SpexinpData"},"aiida.parsers":{"spex.spexparser":"aiida_spex.parsers.spex:SpexParser"},"aiida.workflows":{"spex.job":"aiida_spex.workflows.job:SpexJobWorkchain"}},commits_count:0,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/JuDFTteam/aiida-spex"},"aiida-spirit":{code_home:"https://github.com/JuDFTteam/aiida-spirit/tree/main",documentation_url:"https://aiida-spirit.readthedocs.io/",entry_point_prefix:"spirit",name:"aiida-spirit",pip_url:"aiida-spirit",package_name:"aiida_spirit",hosted_on:"github.com",metadata:{release_date:"2023-06-23",description:"AiiDA plugin for the spirit code",author:"The JuDFT Team",author_email:"p.ruessmann@fz-juelich.de",license:"MIT",home_page:"https://github.com/JuDFTteam/aiida-spirit",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.2"},aiida_version:null,entry_points:{"aiida.calculations":{spirit:"aiida_spirit.calculations:SpiritCalculation"},"aiida.parsers":{spirit:"aiida_spirit.parsers:SpiritParser"}},commits_count:3,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-spirit"},"aiida-ssh2win":{entry_point_prefix:"ssh2win",code_home:"https://github.com/edan-bainglass/aiida-ssh2win",version_file:"https://raw.githubusercontent.com/edan-bainglass/aiida-ssh2win/develop/aiida_ssh2win/__init__.py",pip_url:"git+https://github.com/edan-bainglass/aiida-ssh2win",name:"aiida-ssh2win",package_name:"aiida_ssh2win",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:13,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/edan-bainglass/aiida-ssh2win"},"aiida-sshonly":{code_home:"https://github.com/adegomme/aiida-sshonly",development_status:"beta",entry_point_prefix:"sshonly",pip_url:"aiida-sshonly",plugin_info:"https://raw.github.com/adegomme/aiida-sshonly/master/setup.json",name:"aiida-sshonly",package_name:"aiida_sshonly",hosted_on:"github.com",metadata:{release_date:"2020-10-07",description:"AiiDA plugin adding a sshonly transport option, using only SSH to transfer files, avoiding SFTP, in case it's blocked or non functional on a remote system",author:"adegomme",license:"MIT",home_page:"https://github.com/adegomme/aiida-sshonly",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0a3"},aiida_version:">=1.3.0,<2.0.0",entry_points:{"aiida.transports":{ssh_only:"aiida_sshonly.transports.sshonly:SshOnlyTransport"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-sshonly<pre>Collecting aiida-sshonly
  Downloading aiida-sshonly-0.1.0a3.tar.gz (19 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-sshonly to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida_sshonly-0.1.0a2-py3-none-any.whl (20 kB)
  Downloading aiida_sshonly-0.1.0a1-py3-none-any.whl (20 kB)
  Downloading aiida-sshonly-0.1.0a0.tar.gz (19 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
ERROR: Cannot install aiida-sshonly==0.1.0a0, aiida-sshonly==0.1.0a1, aiida-sshonly==0.1.0a2 and aiida-sshonly==0.1.0a3 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-sshonly 0.1.0a3 depends on aiida-core<2.0.0 and >=1.3.0
    aiida-sshonly 0.1.0a2 depends on aiida-core<2.0.0 and >=1.3.0
    aiida-sshonly 0.1.0a1 depends on aiida-core<2.0.0 and >=1.3.0
    aiida-sshonly 0.1.0a0 depends on aiida-core<2.0.0 and >=1.1.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'ssh_only' does not start with prefix 'sshonly.'"],summaryinfo:[{colorclass:"orange",text:"Other (Transports)",count:1}],pip_install_cmd:"pip install --pre aiida-sshonly",is_installable:"False"},"aiida-statefile-schedulers":{code_home:"https://github.com/dev-zero/aiida-statefile-schedulers",development_status:"beta",entry_point_prefix:"statefile_schedulers",pip_url:"aiida-statefile-schedulers",name:"aiida-statefile-schedulers",package_name:"aiida_statefile_schedulers",hosted_on:"github.com",metadata:{release_date:"2021-11-23",description:"Simple statefile-driven task schedulers for AiiDA",author:"Tiziano Müller",author_email:"tm@dev-zero.ch",license:"MIT",home_page:"https://github.com/dev-zero/aiida-statefile-schedulers",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.1"},aiida_version:null,entry_points:{"aiida.schedulers":{"statefile_schedulers.direct":"aiida_statefile_schedulers.schedulers.direct:StatefileDirectScheduler"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"orange",text:"Other (Schedulers)",count:1}],pip_install_cmd:"pip install aiida-statefile-schedulers",is_installable:"True"},"aiida-strain":{code_home:"https://github.com/greschd/aiida-strain",documentation_url:"https://aiida-strain.readthedocs.io",entry_point_prefix:"strain",pip_url:"aiida-strain",name:"aiida-strain",package_name:"aiida_strain",hosted_on:"github.com",metadata:{release_date:"2019-11-22",description:"AiiDA Plugin for applying strain to structures",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-strain.readthedocs.io",classifiers:["Development Status :: 3 - Alpha","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0"},aiida_version:null,entry_points:{"aiida.workflows":{"strain.apply_strains":{description:["Workchain to create strained structures from a given input structure."],spec:{inputs:[{name:"strain_kind",required:!0,valid_types:"Str",info:""},{name:"strain_parameters",required:!0,valid_types:"Str",info:""},{name:"strain_strengths",required:!0,valid_types:"List",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_strain:ApplyStrains"},"strain.apply_strains_with_symmetry":{description:["Workchain to create strained structures from an input structure, and select the symmetries which are compatible with the strained structure from a set of given input symmetries."],spec:{inputs:[{name:"strain_kind",required:!0,valid_types:"Str",info:""},{name:"strain_parameters",required:!0,valid_types:"Str",info:""},{name:"strain_strengths",required:!0,valid_types:"List",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:""},{name:"symmetry_repr_code",required:!0,valid_types:"Code",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_strain:ApplyStrainsWithSymmetry"}}},commits_count:0,development_status:"alpha",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"green",text:"Workflows",count:2}],pip_install_cmd:"pip install aiida-strain",is_installable:"True"},"aiida-supercell":{code_home:"https://github.com/pzarabadip/aiida-supercell",development_status:"stable",documentation_url:"https://aiida-supercell.readthedocs.io/",entry_point_prefix:"supercell",pip_url:"git+https://github.com/pzarabadip/aiida-supercell",name:"aiida-supercell",package_name:"aiida_supercell",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"1.0.1",description:"AiiDA Plugin for Supercell program",classifiers:["Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"]},aiida_version:">=1.0.0,<2.0",entry_points:{"aiida.calculations":{supercell:"aiida_supercell.calculations:SupercellCalculation"},"aiida.parsers":{supercell:"aiida_supercell.parsers:SupercellParser"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-supercell<pre>Collecting git+https://github.com/pzarabadip/aiida-supercell
  Cloning https://github.com/pzarabadip/aiida-supercell to /tmp/pip-req-build-a2drq9a3
  Running command git clone --filter=blob:none --quiet https://github.com/pzarabadip/aiida-supercell /tmp/pip-req-build-a2drq9a3
  Resolved https://github.com/pzarabadip/aiida-supercell to commit 24a89f990fcf84584a51f49b53311a5c6db18347
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-supercell to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-supercell==1.0.1 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-supercell 1.0.1 depends on aiida-core<2.0 and >=1.0.0
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-supercell",is_installable:"False"},"aiida-symmetry-representation":{code_home:"https://github.com/greschd/aiida_symmetry_representation",documentation_url:"https://aiida-symmetry-representation.readthedocs.io",entry_point_prefix:"symmetry_representation",pip_url:"aiida-symmetry-representation",name:"aiida-symmetry-representation",package_name:"aiida_symmetry_representation",hosted_on:"github.com",metadata:{release_date:"2019-11-18",description:"AiiDA Plugin for symmetry representations.",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-symmetry-representation.readthedocs.io",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0"},aiida_version:null,entry_points:{"aiida.calculations":{"symmetry_representation.filter_symmetries":{description:["Calculation class to run the ``symmetry-repr filter_symmetries`` command."],spec:{inputs:[{name:"structure",required:!0,valid_types:"StructureData",info:"Structure with which the filtered symmetries should be compatible."},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:"File containing the symmetries (in HDF5 format)."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:"The HDF5 file containing the symmetries which are compatible with the structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_symmetry_representation.calculations.filter_symmetries:FilterSymmetriesCalculation"}},"aiida.parsers":{"symmetry_representation.symmetry":"aiida_symmetry_representation.parsers.symmetries:SymmetriesParser"}},commits_count:0,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-symmetry-representation",is_installable:"True"},"aiida-tbextraction":{code_home:"https://github.com/greschd/aiida-tbextraction",documentation_url:"https://aiida-tbextraction.readthedocs.io/",entry_point_prefix:"tbextraction",pip_url:"aiida-tbextraction",name:"aiida-tbextraction",package_name:"aiida_tbextraction",hosted_on:"github.com",metadata:{release_date:"2020-02-25",description:"AiiDA Plugin for extracting tight-binding models",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-tbextraction.readthedocs.io",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0b1"},aiida_version:null,entry_points:{"aiida.workflows":{"tbextraction.fp_run.base":"aiida_tbextraction.fp_run:FirstPrinciplesRunBase","tbextraction.fp_run.reference_bands.base":"aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase","tbextraction.fp_run.wannier_input.base":"aiida_tbextraction.fp_run.wannier_input:WannierInputBase","tbextraction.calculate_tb":"aiida_tbextraction.calculate_tb:TightBindingCalculation","tbextraction.model_evaluation.base":"aiida_tbextraction.model_evaluation:ModelEvaluationBase","tbextraction.model_evaluation.band_difference":"aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation","tbextraction.energy_windows.run_window":"aiida_tbextraction.energy_windows.run_window:RunWindow","tbextraction.energy_windows.window_search":"aiida_tbextraction.energy_windows.window_search:WindowSearch","tbextraction.optimize_fp_tb":"aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding","tbextraction.optimize_strained_fp_tb":"aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-tbextraction<pre>Collecting aiida-tbextraction
  Downloading aiida-tbextraction-0.2.0b1.tar.gz (19 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py egg_info did not run successfully.
  │ exit code: 1
  ╰─> [20 lines of output]
      /opt/conda/lib/python3.9/site-packages/setuptools/__init__.py:80: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated.
      !!
      
              ********************************************************************************
              Requirements should be satisfied by a PEP 517 installer.
              If you are using pip, you can try \`pip install --use-pep517\`.
              ********************************************************************************
      
      !!
        dist.fetch_build_eggs(dist.setup_requires)
      [ REENTRY ] registering entry points with reentry...
      [ REENTRY ] ... registered to /home/aiida/.config/reentry/data/fb804e5deb254c259a00b9e16a29b7b797b2c8f0a8a97f3aa7401e8a85ce8cdb
      [ REENTRY ] Following entrypoints were registered
      
          aiida-tbextraction -> {'aiida.workflows': {'tbextraction.fp_run.base': 'tbextraction.fp_run.base = aiida_tbextraction.fp_run:FirstPrinciplesRunBase', 'tbextraction.fp_run.reference_bands.base': 'tbextraction.fp_run.reference_bands.base = aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase', 'tbextraction.fp_run.wannier_input.base': 'tbextraction.fp_run.wannier_input.base = aiida_tbextraction.fp_run.wannier_input:WannierInputBase', 'tbextraction.calculate_tb': 'tbextraction.calculate_tb = aiida_tbextraction.calculate_tb:TightBindingCalculation', 'tbextraction.model_evaluation.base': 'tbextraction.model_evaluation.base = aiida_tbextraction.model_evaluation:ModelEvaluationBase', 'tbextraction.model_evaluation.band_difference': 'tbextraction.model_evaluation.band_difference = aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation', 'tbextraction.energy_windows.run_window': 'tbextraction.energy_windows.run_window = aiida_tbextraction.energy_windows.run_window:RunWindow', 'tbextraction.energy_windows.window_search': 'tbextraction.energy_windows.window_search = aiida_tbextraction.energy_windows.window_search:WindowSearch', 'tbextraction.optimize_fp_tb': 'tbextraction.optimize_fp_tb = aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding', 'tbextraction.optimize_strained_fp_tb': 'tbextraction.optimize_strained_fp_tb = aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding'}}
      [ REENTRY ] Current entry point map at /home/aiida/.config/reentry/data/fb804e5deb254c259a00b9e16a29b7b797b2c8f0a8a97f3aa7401e8a85ce8cdb:
          aiida-tbextraction -> {'aiida.workflows': {'tbextraction.fp_run.base': 'tbextraction.fp_run.base = aiida_tbextraction.fp_run:FirstPrinciplesRunBase', 'tbextraction.fp_run.reference_bands.base': 'tbextraction.fp_run.reference_bands.base = aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase', 'tbextraction.fp_run.wannier_input.base': 'tbextraction.fp_run.wannier_input.base = aiida_tbextraction.fp_run.wannier_input:WannierInputBase', 'tbextraction.calculate_tb': 'tbextraction.calculate_tb = aiida_tbextraction.calculate_tb:TightBindingCalculation', 'tbextraction.model_evaluation.base': 'tbextraction.model_evaluation.base = aiida_tbextraction.model_evaluation:ModelEvaluationBase', 'tbextraction.model_evaluation.band_difference': 'tbextraction.model_evaluation.band_difference = aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation', 'tbextraction.energy_windows.run_window': 'tbextraction.energy_windows.run_window = aiida_tbextraction.energy_windows.run_window:RunWindow', 'tbextraction.energy_windows.window_search': 'tbextraction.energy_windows.window_search = aiida_tbextraction.energy_windows.window_search:WindowSearch', 'tbextraction.optimize_fp_tb': 'tbextraction.optimize_fp_tb = aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding', 'tbextraction.optimize_strained_fp_tb': 'tbextraction.optimize_strained_fp_tb = aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding'}}
      error in aiida-tbextraction setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers; Expected end or semicolon (after version specifier)
          aiida-core>=1.0.0<2
                    ~~~~~~~^
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"green",text:"Workflows",count:10}],pip_install_cmd:"pip install --pre aiida-tbextraction",is_installable:"False"},"aiida-tbmodels":{code_home:"https://github.com/greschd/aiida-tbmodels",documentation_url:"https://aiida-tbmodels.readthedocs.io",entry_point_prefix:"tbmodels",pip_url:"aiida-tbmodels",name:"aiida-tbmodels",package_name:"aiida_tbmodels",hosted_on:"github.com",metadata:{release_date:"2020-03-03",description:"AiiDA Plugin for running TBmodels",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-tbmodels.readthedocs.io",classifiers:["Development Status :: 3 - Alpha","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.3.0"},aiida_version:null,entry_points:{"aiida.calculations":{"tbmodels.eigenvals":"aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation","tbmodels.parse":"aiida_tbmodels.calculations.parse:ParseCalculation","tbmodels.slice":"aiida_tbmodels.calculations.slice:SliceCalculation","tbmodels.symmetrize":"aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation"},"aiida.parsers":{"tbmodels.model":"aiida_tbmodels.parsers.model:ModelParser"}},commits_count:0,development_status:"alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-tbmodels<pre>Collecting aiida-tbmodels
  Downloading aiida_tbmodels-0.4.0rc2-py3-none-any.whl (15 kB)
Requirement already satisfied: aiida-core>=1.1.0<2.0.0 in /opt/conda/lib/python3.9/site-packages (from aiida-tbmodels) (2.4.1)
Collecting aiida-bands-inspect>=0.4.0 (from aiida-tbmodels)
  Downloading aiida-bands-inspect-0.4.0.tar.gz (10 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting tbmodels>=1.4.0rc2<2 (from aiida-tbmodels)
  Downloading tbmodels-1.4.3-py3-none-any.whl (36 kB)
Requirement already satisfied: numpy in /opt/conda/lib/python3.9/site-packages (from aiida-bands-inspect>=0.4.0->aiida-tbmodels) (1.26.2)
INFO: pip is looking at multiple versions of aiida-bands-inspect to determine which version is compatible with other requirements. This could take a while.
Collecting aiida-tbmodels
  Downloading aiida-tbmodels-0.4.0rc1.tar.gz (10 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py egg_info did not run successfully.
  │ exit code: 1
  ╰─> [21 lines of output]
      /opt/conda/lib/python3.9/site-packages/setuptools/__init__.py:80: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated.
      !!
      
              ********************************************************************************
              Requirements should be satisfied by a PEP 517 installer.
              If you are using pip, you can try \`pip install --use-pep517\`.
              ********************************************************************************
      
      !!
        dist.fetch_build_eggs(dist.setup_requires)
      [ REENTRY ] registering entry points with reentry...
      [ REENTRY ] ... registered to /home/aiida/.config/reentry/data/fb804e5deb254c259a00b9e16a29b7b797b2c8f0a8a97f3aa7401e8a85ce8cdb
      [ REENTRY ] Following entrypoints were registered
      
          aiida-tbmodels -> {'aiida.calculations': {'tbmodels.eigenvals': 'tbmodels.eigenvals = aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation', 'tbmodels.parse': 'tbmodels.parse = aiida_tbmodels.calculations.parse:ParseCalculation', 'tbmodels.slice': 'tbmodels.slice = aiida_tbmodels.calculations.slice:SliceCalculation', 'tbmodels.symmetrize': 'tbmodels.symmetrize = aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation'}, 'aiida.parsers': {'tbmodels.model': 'tbmodels.model = aiida_tbmodels.parsers.model:ModelParser'}, 'aiida.workflows': {'tbmodels.parse': 'tbmodels.parse = aiida_tbmodels.workflows.parse:ParseWorkChain'}}
      [ REENTRY ] Current entry point map at /home/aiida/.config/reentry/data/fb804e5deb254c259a00b9e16a29b7b797b2c8f0a8a97f3aa7401e8a85ce8cdb:
          aiida-bands-inspect -> {'aiida.calculations': {'bands_inspect.align': 'bands_inspect.align = aiida_bands_inspect.calculations.align:AlignCalculation', 'bands_inspect.difference': 'bands_inspect.difference = aiida_bands_inspect.calculations.difference:DifferenceCalculation', 'bands_inspect.plot': 'bands_inspect.plot = aiida_bands_inspect.calculations.plot:PlotCalculation'}, 'aiida.parsers': {'bands_inspect.bands': 'bands_inspect.bands = aiida_bands_inspect.parsers.bands:BandsParser', 'bands_inspect.difference': 'bands_inspect.difference = aiida_bands_inspect.parsers.difference:DifferenceParser', 'bands_inspect.align': 'bands_inspect.align = aiida_bands_inspect.parsers.align:AlignParser', 'bands_inspect.plot': 'bands_inspect.plot = aiida_bands_inspect.parsers.plot:PlotParser'}}
          aiida-tbmodels -> {'aiida.calculations': {'tbmodels.eigenvals': 'tbmodels.eigenvals = aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation', 'tbmodels.parse': 'tbmodels.parse = aiida_tbmodels.calculations.parse:ParseCalculation', 'tbmodels.slice': 'tbmodels.slice = aiida_tbmodels.calculations.slice:SliceCalculation', 'tbmodels.symmetrize': 'tbmodels.symmetrize = aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation'}, 'aiida.parsers': {'tbmodels.model': 'tbmodels.model = aiida_tbmodels.parsers.model:ModelParser'}, 'aiida.workflows': {'tbmodels.parse': 'tbmodels.parse = aiida_tbmodels.workflows.parse:ParseWorkChain'}}
      error in aiida-tbmodels setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers; Expected end or semicolon (after version specifier)
          aiida-core>=1.1.0<2.0.0
                    ~~~~~~~^
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-tbmodels",is_installable:"False"},"aiida-tcod":{code_home:"https://github.com/aiidateam/aiida-tcod",development_status:"beta",entry_point_prefix:"tcod",pip_url:"git+https://github.com/aiidateam/aiida-tcod",name:"aiida-tcod",package_name:"aiida_tcod",hosted_on:"github.com",metadata:{author:"The AiiDA team",author_email:"developers@aiida.net",version:"0.1.0a0",description:"AiiDA plugin to interact with the TCOD",classifiers:["Programming Language :: Python"]},aiida_version:">=1.0.0b1",entry_points:{"aiida.tools.dbexporters":{tcod:"aiida.tools.dbexporters.tcod"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"orange",text:"Other (Database Exporters)",count:1}],pip_install_cmd:"pip install git+https://github.com/aiidateam/aiida-tcod",is_installable:"True"},"aiida-uppasd":{code_home:"https://github.com/uppasd/aiida-uppasd",documentation_url:"https://github.com/uppasd/aiida-uppasd/blob/master/README.md",entry_point_prefix:"uppasd",pip_url:"git+https://github.com/unkcpz/aiida-uppasd",name:"aiida-uppasd",package_name:"aiida_uppasd",hosted_on:"github.com",metadata:{author:"Qichen Xu, Anders Bergman, Anna Delin, Jonathan Chico",author_email:"qichenx@kth.se",version:"0.1.0",description:"Interface for UppASD and AiiDA",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.1.0,<2.0.0",entry_points:{"aiida.calculations":{UppASD_core_calculations:"UppASD_AiiDA.calculations.core_calcs:UppASD"},"aiida.parsers":{UppASD_core_parsers:"UppASD_AiiDA.parsers.core_parser:SpinDynamic_core_parser"}},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'UppASD_core_calculations' does not start with prefix 'uppasd.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'UppASD_core_parsers' does not start with prefix 'uppasd.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/unkcpz/aiida-uppasd"},"aiida-vasp":{code_home:"https://github.com/aiida-vasp/aiida-vasp",documentation_url:"https://aiida-vasp.readthedocs.io/",entry_point_prefix:"vasp",pip_url:"aiida-vasp",plugin_info:"https://raw.githubusercontent.com/aiida-vasp/aiida-vasp/master/setup.json",name:"aiida-vasp",package_name:"aiida_vasp",hosted_on:"github.com",metadata:{release_date:"2023-07-03",description:"AiiDA plugin for running VASP calculations and workflows.",author_email:"Espen Flage-Larsen <espen.flage-larsen@sigma2.no>",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"3.0.1"},aiida_version:">=2.4,<3.0",entry_points:{"aiida.calculations":{"vasp.immigrant":{description:["Parse VASP output objects stored in a specified directory.","","    Simulate running the VaspCalculation up to the point where it can be","    retrieved and parsed, then hand over control to the runner for the rest.","","    Usage examples","    --------------","    Immigrant calculation can be perfomed as follows.","","    ::","","       code = Code.get_from_string('vasp@local')","       folder = '/home/username/vasp-calc-dir'","       settings = {'parser_settings': {'add_energies': True,","                                       'add_forces': True,","                                       'electronic_step_energies': True}}","       VaspImmigrant = CalculationFactory('vasp.immigrant')","       builder = VaspImmigrant.get_builder_from_folder(code,","                                                       folder,","                                                       settings=settings)","       submit(builder)","","    Instead of ``builder``, inputs dict is obtained similarly as","","    ::","","       code = Code.get_from_string('vasp@local')","       folder = '/home/username/vasp-calc-dir'","       settings = {'parser_settings': {'add_energies': True,","                                       'add_forces': True,","                                       'electronic_step_energies': True}}","       VaspImmigrant = CalculationFactory('vasp.immigrant')","       inputs = VaspImmigrant.get_inputs_from_folder(code,","                                                     folder,","                                                     settings=settings)","       submit(VaspImmigrant, **inputs)","","    Note","    ----","    The defaul metadata is set automatically as follows::","","       {'options': {'max_wallclock_seconds': 1,","        'resources': {'num_machines': 1, 'num_mpiprocs_per_machine': 1}}}","","    Specific scheduler may require setting ``resources`` differently","    (e.g., sge ``'parallel_env'``).","","    ``get_inputs_from_folder`` and ``get_builder_from_folder`` accept several","    kwargs, see the docstring of ``get_inputs_from_folder``."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The kpoints to use (KPOINTS)."},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential",required:!0,valid_types:"PotcarData",info:"The potentials (POTCAR)."},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR)."},{name:"charge_density",required:!1,valid_types:"ChargedensityData, NoneType",info:"The charge density. (CHGCAR)"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"dynamics",required:!1,valid_types:"Dict, NoneType",info:"The VASP parameters related to ionic dynamics, e.g. flags to set the selective dynamics"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"remote_workdir",required:!1,valid_types:"str, NoneType",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional parameters not related to VASP itself."},{name:"wavefunctions",required:!1,valid_types:"WavefunData, NoneType",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:333,message:"VASP did not produce any output and did likely not execute properly."},{status:350,message:"the retrieved folder data node could not be accessed."},{status:351,message:"the retrieved_temporary folder data node could not be accessed."},{status:352,message:"an object that is marked by the parser as critical is missing."},{status:700,message:"Calculation did not reach the end of execution."},{status:701,message:"The electronic structure is not converged."},{status:702,message:"The ionic relaxation is not converged."},{status:703,message:"VASP calculation encountered a critical error: {error_message}."},{status:704,message:"Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."},{status:1001,message:"parsing an object has failed."},{status:1002,message:"the parser is not able to parse the {quantity} quantity"},{status:1003,message:"the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"},{status:1004,message:"the parser is not able to compose one or more output nodes: {nodes}"}]},class:"aiida_vasp.calcs.immigrant:VaspImmigrant"},"vasp.neb":{description:["NEB calculations using VASP","","    ------------------------------------","    Calculations for performing NEB calculations.","    NEB calculations requires standard VASP inputs, but POSCAR are placed in","    folder names 00, 01, 02... N for N-1 number of images.","","    Input frames should be placed under the ``neb_images`` input namespace as a dictionary like::","      {","          'image_00': structure_1,","          'image_01': structure_2","          ....","      }","","    Output of individual frames are placed in the corresponding namespace under the same convention."],spec:{inputs:[{name:"final_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for the final image."},{name:"initial_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for initial image."},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The kpoints to use (KPOINTS)."},{name:"neb_images",required:!0,valid_types:"StructureData, CifData",info:"Starting structure for the NEB images"},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential",required:!0,valid_types:"PotcarData",info:"The potentials (POTCAR)."},{name:"charge_density",required:!1,valid_types:"ChargedensityData",info:"The charge density. (CHGCAR)"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"dynamics",required:!1,valid_types:"Dict, NoneType",info:"The VASP parameters related to ionic dynamics, e.g. flags to set the selective dynamics"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional parameters not related to VASP itself."},{name:"wavefunctions",required:!1,valid_types:"WavefunData",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"Per-image misc output."},{name:"neb_misc",required:!0,valid_types:"Dict",info:"NEB related data combined for each image"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"structure",required:!0,valid_types:"StructureData",info:"NEB images"},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"Kpoints for each image."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization for each image."},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output file containing the plane wave coefficients."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:333,message:"VASP did not produce any output files and did likely not execute properly."},{status:350,message:"the retrieved folder data node could not be accessed."},{status:351,message:"the retrieved_temporary folder data node could not be accessed."},{status:352,message:"an object that is marked by the parser as critical is missing."},{status:352,message:"a file that is marked by the parser as critical is missing."},{status:700,message:"Calculation did not reach the end of execution."},{status:701,message:"The electronic structure is not converged."},{status:702,message:"The ionic relaxation is not converged."},{status:703,message:"VASP calculation encountered a critical error: {error_message}."},{status:704,message:"Outputs for diagnosis are missing, please make sure the `neb_data` and `run_status` quantities are requested for parsing."},{status:1001,message:"parsing an object has failed."},{status:1001,message:"parsing a file has failed."},{status:1002,message:"the parser is not able to parse the {quantity} quantity"},{status:1003,message:"the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"},{status:1004,message:"the parser is not able to compose one or more output nodes: {nodes}"}]},class:"aiida_vasp.calcs.neb:VaspNEBCalculation"},"vasp.vasp":{description:["General-purpose VASP calculation.","","    ---------------------------------","    By default retrieves only the 'OUTCAR', 'vasprun.xml', 'EIGENVAL', 'DOSCAR'","    and Wannier90 input / output objects. These objects are deleted after parsing.","    Additional retrieve objects can be specified via the","    ``settings['ADDITIONAL_RETRIEVE_TEMPORARY_LIST']`` input. In addition, if you want to keep","    any objects after parsing, put them in ``settings['ADDITIONAL_RETRIEVE_LIST']`` which is empty","    by default.","","    Floating point precision for writing POSCAR objects can be adjusted using","    ``settings['poscar_precision']``, default: 10","","    The following assumes you are familiar with the AiiDA data structures and","    how to set up and run an AiiDA calculation in general.","","    Example usage::","","        from aiida.orm import CalculationFactory, DataFactory","        from aiida.work import submit","","        proc = CalculationFactory('vasp.vasp').process()","        inputs = proc.get_inputs_template()","        inputs.parameter = <Dict with INCAR params>","        inputs.structure = <StructureData>","        inputs.kpoints = <KpointsData>","        inputs.settings = <Dict with parser settings etc.>","        inputs.potential = DataFactory('vasp.potcar').get_potcars_from_structure(structure, ...)","        inputs.code = <Code representing vasp on your cluster>","","        submit(proc, **inputs)","","    Which is very similar to the workchain example.","","    Since we do not want the content parsers to know about the AiiDA infrastructure,","    i.e. processes etc. we have no access to the exit codes defined on the CalcJob.","    We thus have to deal with failures in parsing directly in the write calls here."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The kpoints to use (KPOINTS)."},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential",required:!0,valid_types:"PotcarData",info:"The potentials (POTCAR)."},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR)."},{name:"charge_density",required:!1,valid_types:"ChargedensityData, NoneType",info:"The charge density. (CHGCAR)"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"dynamics",required:!1,valid_types:"Dict, NoneType",info:"The VASP parameters related to ionic dynamics, e.g. flags to set the selective dynamics"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional parameters not related to VASP itself."},{name:"wavefunctions",required:!1,valid_types:"WavefunData, NoneType",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:333,message:"VASP did not produce any output and did likely not execute properly."},{status:350,message:"the retrieved folder data node could not be accessed."},{status:351,message:"the retrieved_temporary folder data node could not be accessed."},{status:352,message:"an object that is marked by the parser as critical is missing."},{status:700,message:"Calculation did not reach the end of execution."},{status:701,message:"The electronic structure is not converged."},{status:702,message:"The ionic relaxation is not converged."},{status:703,message:"VASP calculation encountered a critical error: {error_message}."},{status:704,message:"Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."},{status:1001,message:"parsing an object has failed."},{status:1002,message:"the parser is not able to parse the {quantity} quantity"},{status:1003,message:"the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"},{status:1004,message:"the parser is not able to compose one or more output nodes: {nodes}"}]},class:"aiida_vasp.calcs.vasp:VaspCalculation"},"vasp.vasp2w90":{description:["General purpose Calculation for using vasp with the vasp2wannier90 interface."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The kpoints to use (KPOINTS)."},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential",required:!0,valid_types:"PotcarData",info:"The potentials (POTCAR)."},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR)."},{name:"charge_density",required:!1,valid_types:"ChargedensityData, NoneType",info:"The charge density. (CHGCAR)"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"dynamics",required:!1,valid_types:"Dict, NoneType",info:"The VASP parameters related to ionic dynamics, e.g. flags to set the selective dynamics"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional parameters not related to VASP itself."},{name:"wannier_parameters",required:!1,valid_types:"Dict, NoneType",info:"Input parameters for the Wannier90 interface."},{name:"wannier_projections",required:!1,valid_types:"OrbitalData, List, NoneType",info:"Projections to be defined in the Wannier90 input."},{name:"wavefunctions",required:!1,valid_types:"WavefunData, NoneType",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:333,message:"VASP did not produce any output and did likely not execute properly."},{status:350,message:"the retrieved folder data node could not be accessed."},{status:351,message:"the retrieved_temporary folder data node could not be accessed."},{status:352,message:"an object that is marked by the parser as critical is missing."},{status:700,message:"Calculation did not reach the end of execution."},{status:701,message:"The electronic structure is not converged."},{status:702,message:"The ionic relaxation is not converged."},{status:703,message:"VASP calculation encountered a critical error: {error_message}."},{status:704,message:"Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."},{status:1001,message:"parsing an object has failed."},{status:1002,message:"the parser is not able to parse the {quantity} quantity"},{status:1003,message:"the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"},{status:1004,message:"the parser is not able to compose one or more output nodes: {nodes}"}]},class:"aiida_vasp.calcs.vasp2w90:Vasp2w90Calculation"}},"aiida.cmdline.data":{"vasp-potcar":"aiida_vasp.commands.potcar:potcar"},"aiida.data":{"vasp.archive":"aiida_vasp.data.archive:ArchiveData","vasp.chargedensity":"aiida_vasp.data.chargedensity:ChargedensityData","vasp.potcar":"aiida_vasp.data.potcar:PotcarData","vasp.potcar_file":"aiida_vasp.data.potcar:PotcarFileData","vasp.wavefun":"aiida_vasp.data.wavefun:WavefunData"},"aiida.groups":{"vasp.potcar":"aiida_vasp.data.potcar:PotcarGroup"},"aiida.parsers":{"vasp.neb":"aiida_vasp.parsers.neb:VtstNebParser","vasp.vasp":"aiida_vasp.parsers.vasp:VaspParser","vasp.vasp2w90":"aiida_vasp.parsers.vasp2w90:Vasp2w90Parser"},"aiida.workflows":{"vasp.bands":{description:["Extract the band structure using k-point paths fetched from SeeKpath."],spec:{inputs:[{name:"bands",required:!0,valid_types:"",info:""},{name:"code",required:!0,valid_types:"Code",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"restart_folder",required:!0,valid_types:"RemoteData",info:`
            The folder to restart in, which contains the outputs from the prerun to extract the charge density.
            `},{name:"smearing",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successful calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"bands",required:!0,valid_types:"BandsData",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the bands workchain"},{status:2001,message:"BandsData not found in exposed_outputs"}]},class:"aiida_vasp.workchains.bands:BandsWorkChain"},"vasp.converge":{description:["A workchain to perform convergence tests."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"converge",required:!0,valid_types:"",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successful calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"converge",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"relax",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the converge workchain"}]},class:"aiida_vasp.workchains.converge:ConvergeWorkChain"},"vasp.immigrant":{description:["Import a VASP run executed in the directory specified by folder_path."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successful calculation.
            `},{name:"folder_path",required:!1,valid_types:"Str, NoneType",info:"Deprecated."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"potential_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"potential_mapping",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote_workdir",required:!1,valid_types:"str, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"use_chgcar",required:!1,valid_types:"Bool, NoneType",info:`
            If True, WavefunData (of WAVECAR) is attached.
            `},{name:"use_wavecar",required:!1,valid_types:"Bool, NoneType",info:`
            If True, WavefunData (of WAVECAR) is attached.
            `},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_vasp.workchains.immigrant:VaspImmigrantWorkChain"},"vasp.master":{description:["The master workchain that selects sub workchains to perform necessary calculations."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"converge",required:!0,valid_types:"",info:""},{name:"dos",required:!0,valid_types:"",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"extract_bands",required:!1,valid_types:"Bool, NoneType",info:"Do you want to extract the band structure?"},{name:"extract_dos",required:!1,valid_types:"Bool, NoneType",info:"Do you want to extract the density of states?"},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The maximum distance between k-points in inverse AA."},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"bands",required:!1,valid_types:"",info:""},{name:"dos",required:!1,valid_types:"",info:""}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the master workchain"}]},class:"aiida_vasp.workchains.master:MasterWorkChain"},"vasp.neb":{description:["The NEB workchain.","","    -------------------","    Error handling enriched wrapper around VaspNEBCalculation.","","    Deliberately conserves most of the interface (required inputs) of the VaspNEBCalculation class, but","    makes it possible for a user to interact with a workchain and not a calculation.","","    In addition, implement restarts of calculation when the calculation is net full converged for error handling."],spec:{inputs:[{name:"dynamics",required:!0,valid_types:"",info:""},{name:"final_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for the final image."},{name:"initial_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for initial image."},{name:"neb_images",required:!0,valid_types:"StructureData, CifData",info:"Starting structure for the NEB images"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"charge_density",required:!1,valid_types:"ChargedensityData",info:"The charge density. (CHGCAR)"},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successful calculation.
            `},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Spacing for the kpoints in units A^-1 * 2pi (CASTEP style `kpoints_mp_spacing`)"},{name:"kpoints_spacing_vasp",required:!1,valid_types:"Float, NoneType",info:"Spacing for the kpoints in units A^-1 (VASP style)"},{name:"ldau_mapping",required:!1,valid_types:"Dict, NoneType",info:"Mappings, see the doc string of 'get_ldau_keys'"},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional parameters not related to VASP itself."},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavefunctions",required:!1,valid_types:"WavefunData",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"Per-image misc output."},{name:"neb_misc",required:!0,valid_types:"Dict",info:"NEB related data combined for each image"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"structure",required:!0,valid_types:"StructureData",info:"NEB images"},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"Kpoints for each image."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization for each image."},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output file containing the plane wave coefficients."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:501,message:"Unrecoverable error in launched NEB calculations."},{status:700,message:"the user did not supply a potential family name"},{status:701,message:"ValueError was returned from get_potcars_from_structure"},{status:702,message:"the potential does not exist"},{status:703,message:"the exception: {exception} was thrown while massaging the parameters"}]},class:"aiida_vasp.workchains.neb:VaspNEBWorkChain"},"vasp.relax":{description:["Structure relaxation workchain."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"kpoints",required:!0,valid_types:"KpointsData",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"relax",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successful calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"relax",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"the called workchain does not contain the necessary relaxed output structure"},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the relax workchain"},{status:502,message:"there was an error overriding the parameters"}]},class:"aiida_vasp.workchains.relax:RelaxWorkChain"},"vasp.vasp":{description:["The VASP workchain.","","    -------------------","    Error handling enriched wrapper around VaspCalculation.","","    Deliberately conserves most of the interface (required inputs) of the VaspCalculation class, but","    makes it possible for a user to interact with a workchain and not a calculation.","","    This is intended to be used instead of directly submitting a VaspCalculation,","    so that future features like","    automatic restarting, error checking etc. can be propagated to higher level workchains","    automatically by implementing them here.","","    Handlers are implemented to try fix common problems and improves the robustness.","    Individual handlers can be enabled/disabled by setting the ``handler_overrides`` input port.",'    Additional settings may be passed under the "settings" input, which is also forwarded to the',"    calculations. The available options are:","","    - ``USE_WAVECAR_FOR_RESTART`` wether calculation restarts should use the WAVECAR. The default is ``True``.","","    Usage::","","        from aiida.common.extendeddicts import AttributeDict","        from aiida.work import submit","        basevasp = WorkflowFactory('vasp.vasp')","        inputs = basevasp.get_builder()","        inputs = AttributeDict()","        ## ... set inputs","        submit(basevasp, **inputs)","","    To see a working example, including generation of input nodes from scratch, please","    refer to ``examples/run_vasp_lean.py``."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"kpoints",required:!0,valid_types:"KpointsData",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successful calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"custom_outputs",required:!1,valid_types:"",info:""},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"the calculation is missing at least one required output in the restart workchain"},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:400,message:"the run_calculation step did not successfully add a calculation node to the context"},{status:401,message:"the maximum number of iterations was exceeded"},{status:402,message:"the calculation finished with an unexpected calculation state"},{status:403,message:"the calculation experienced and unexpected failure"},{status:404,message:"the calculation failed to submit, twice in a row"},{status:405,message:"the calculation failed for an unknown reason, twice in a row"},{status:500,message:"Missing critical output for inspecting the status of the calculation."},{status:501,message:"Cannot handle the error - inputs are likely need to be revised manually. Message: {message}"},{status:502,message:"Cannot handle the error - the last calculation did not reach the end of execution."},{status:503,message:"Cannot handle the error - the last calculation did not reach electronic convergence."},{status:504,message:"The ionic relaxation is not converged."},{status:505,message:"At least one of the ionic steps during the relaxation has did not have converged electronic structure."},{status:700,message:"the user did not supply a potential family name"},{status:701,message:"ValueError was returned from get_potcars_from_structure"},{status:702,message:"the potential does not exist"},{status:703,message:"the exception: {exception} was thrown while massaging the parameters"}]},class:"aiida_vasp.workchains.vasp:VaspWorkChain"}},console_scripts:{"mock-vasp":"aiida_vasp.commands.mock_vasp:mock_vasp","mock-vasp-strict":"aiida_vasp.commands.mock_vasp:mock_vasp_strict"}},commits_count:95,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"red",text:"Data",count:5},{colorclass:"green",text:"Workflows",count:7},{colorclass:"purple",text:"Console scripts",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:2}],pip_install_cmd:"pip install aiida-vasp",is_installable:"True"},"aiida-vibroscopy":{entry_point_prefix:"vibroscopy",plugin_info:"https://raw.githubusercontent.com/bastonero/aiida-vibroscopy/main/pyproject.toml",code_home:"https://github.com/bastonero/aiida-vibroscopy",version_file:"https://raw.githubusercontent.com/bastonero/aiida-vibroscopy/main/src/aiida_vibroscopy/__init__.py",pip_url:"aiida-vibroscopy",documentation_url:"https://aiida-vibroscopy.readthedocs.io/en/latest/",name:"aiida-vibroscopy",package_name:"aiida_vibroscopy",hosted_on:"github.com",metadata:{release_date:"2023-08-10",description:"AiiDA plugin for vibrational spectoscopy using Quantum ESPRESSO.",author_email:"Lorenzo Bastonero <bastonero.lorenzo@gmail.com>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: Other/Proprietary License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"1.0.2"},aiida_version:">=2.2.2,<3.0.0",entry_points:{"aiida.data":{"vibroscopy.fp":"aiida_vibroscopy.data.vibro_fp:VibrationalFrozenPhononData","vibroscopy.vibrational":"aiida_vibroscopy.data.vibro_lr:VibrationalData"},"aiida.workflows":{"vibroscopy.dielectric":{description:["Workchain computing different second and third order tensors.","","    It computes the high frequency dielectric tensor, the Born effective charges,","    the non-linear optical susceptibility and Raman tensors","    using homogeneous small electric fields via the electric enthalpy functional."],spec:{inputs:[{name:"central_difference",required:!0,valid_types:"",info:"The inputs for the central difference scheme."},{name:"property",required:!0,valid_types:"str",info:`irValid inputs are: 
 
 * born-chargesValid inputs are: 
 
 * dielectricValid inputs are: 
 
 * nacValid inputs are: 
 
 * becValid inputs are: 
 
 * ramanValid inputs are: 
 
 * susceptibility-derivativeValid inputs are: 
 
 * non-linear-susceptibility`},{name:"scf",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` that will be used to run the electric enthalpy scfs."},{name:"settings",required:!0,valid_types:"",info:"Options for how to run the workflow."},{name:"symmetry",required:!0,valid_types:"",info:"Namespace for symmetry related inputs."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"kpoints_parallel_distance",required:!1,valid_types:"Float, NoneType",info:"Distance of the k-points in reciprocal space along the parallel direction of each applied electric field."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parent_scf",required:!1,valid_types:"RemoteData, NoneType",info:"Scf parent folder from where restarting the scfs with electric fields."}],outputs:[{name:"fields_data",required:!0,valid_types:"",info:"Namespace for passing TrajectoryData containing forces and polarization."},{name:"tensors",required:!0,valid_types:"ArrayData",info:"Contains high frequency dielectric and Born effectivecharges tensors computed in Cartesian coordinates. Depending on the inputs, it can also contain the derivatives of the susceptibility in respect to the atomic positions (called `Raman tensors`) and the non linear optical susceptibility, always expressed in Cartesian coordinates."},{name:"accuracy_order",required:!1,valid_types:"Int",info:""},{name:"critical_electric_field",required:!1,valid_types:"Float",info:""},{name:"electric_field_step",required:!1,valid_types:"Float",info:""},{name:"units",required:!1,valid_types:"Dict",info:"Units of the susceptibility derivatives tensors."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"The initial scf work chain failed."},{status:401,message:"The nscf work chain failed."},{status:402,message:"The electric field scf work chain failed for direction {direction}."},{status:403,message:"The numerical derivatives calculation failed."},{status:404,message:"The scf PwBaseWorkChain sub process in iteration returned a non integer total magnetization (threshold exceeded)."}]},class:"aiida_vibroscopy.workflows.dielectric.base:DielectricWorkChain"},"vibroscopy.dielectric.numerical_derivatives":{description:["Workchain carrying out numerical derivatives.","","    It computes the first and second order derivatives","    of forces and polarization in respect to electric field,","    to obtain dielectric tensor, Born effective charges,","    non linear optical susceptibility and Raman tensors.","","    Forces and polarization must be passed as TrajectoryData","    as a dictionary in `data`. Numerical derivatives can have","    different number of evaluation points, depending on order and accuracy.","    The price to pay is the standardization of the structure of","    the dictionary to pass to this namespace.","","    To understand, let's review the approach.In central differencs approach","    we need the evaluation of the function at the value we want","    the derivative (in our case at :math:`\\mathcal{E}=0`,","    E is the electric field), and at","    displaced positions from this value.","    The evaluation of the function at these points will","    have weights (or coefficients), which depend on order and accuracy.","    For example:","","    - :math:`\\frac{df}{dx} = \\frac{ 0.5 \\cdot f(+1.0 \\cdot h) -0.5 \\cdot f(-1.0 \\cdot h) }{h} +\\mathcal{O}(h^2)`","    - :math:`\\frac{d^2 f}{dx^2} = \\frac{ 1.0 \\cdot f(+1.0 \\cdot h) -2.0 \\cdot f(0. \\cdot h) +1.0 \\cdot f(-1.0 \\cdot h) }{h^2} +\\mathcal{O}(h^2)`","","    Referring to the coefficients for each step as :math:`c_i`,","    where `i` is an integer, our convention is","    to put in sequence the Trajectory data with increasing","    numbers as labels, for example:","","    | '0': TrajectoryData for :math:`c_1`,","    | '1': TrajectoryData for :math:`c_{-1}`,","    | '2': TrajectoryData for :math:`c_2`,","    | '3': TrajectoryData for :math:`c_{-2}`,","    | ...","","    This way to creating an analogous of an array with","    coefficients :math:`[c_1,c_{-1},c_2,c_{-2}, \\dots]`.","","    These dictionaries are going to be put as sub-dictionary","    in a general `data` dictionary. Each sub-dict","    has to be put with a key with suffix a number indicating","    which tensor component is referring to.","    In our case, we use a similar Voigt notation.","    Namely we have two cases:","","    * first order derivatives: keys suffices are 0,1,2;","        0 for :math:`[i,x]`, 1 for :math:`[i,y]`, 2 for","        :math:`[i,z]` (with :math:`i={x,y,z}`)","    * second order derivatives: keys suffices are 0,...5;","        0 for :math:`[i,x,x]`, :math:`\\dots` (as in Voigt),","        5 for :math:`[i,x,y]` (with :math:`i={x,y,z}`)","","    The prefix can be anything. Best practice is using ``field_``","    with and underscorre as prefix. The Trajectory data for the","    :math:`c_0` coefficient (i.e. the one with :math:`\\mathcal{E}=0`)","    must be passed with a different key, namely ``null_field``.","    This is to avoid errors and due to the fact that is common","    to the all derivatives."],spec:{inputs:[{name:"central_difference",required:!0,valid_types:"",info:"The inputs for the central difference scheme."},{name:"data",required:!0,valid_types:"",info:"Namespace for passing TrajectoryData containing forces and polarization."},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"symmetry",required:!0,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"tensors",required:!0,valid_types:"ArrayData",info:"Contains high frequency dielectric and Born effectivecharges tensors computed in Cartesian coordinates. Depending on the inputs, it can also contain the derivatives of the susceptibility in respect to the atomic positions (called `Raman tensors`) and the non linear optical susceptibility, always expressed in Cartesian coordinates."},{name:"units",required:!1,valid_types:"Dict",info:"Units of the susceptibility derivatives tensors."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_vibroscopy.workflows.dielectric.numerical_derivatives:NumericalDerivativesWorkChain"},"vibroscopy.phonons.harmonic":{description:["Workchain for frozen phonons calculations.","","    Non-analytical constants (NAC) and higher order mixed  derivatives are computed","    via finite differences through finite electric fields.","    See :class:`~aiida_vibroscopy.workflows.DielectricWorkChain`","    for more details on how they are carried out."],spec:{inputs:[{name:"phonon",required:!0,valid_types:"Data",info:"Inputs for the `PhononWorkChain` that will beused to calculate the force constants."},{name:"settings",required:!0,valid_types:"",info:"Options for how to run the workflow."},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"symmetry",required:!0,valid_types:"",info:"Namespace for symmetry related inputs."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"dielectric",required:!1,valid_types:"Data",info:"Inputs for the `DielectricWorkChain` that will beused to calculate the mixed derivatives with electric field."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"phonopy",required:!1,valid_types:"Data",info:"Inputs for the `PhonopyCalculation` that willbe used to calculate the inter-atomic force constants, or for post-processing."}],outputs:[{name:"output_phonon",required:!0,valid_types:"",info:"Outputs of the `PhononWorkChain`."},{name:"vibrational_data",required:!0,valid_types:"VibrationalData, VibrationalFrozenPhononData",info:"The phonopy data with supercells displacements, forces and (optionally)nac parameters to use in the post-processing calculation."},{name:"output_dielectric",required:!1,valid_types:"",info:"Outputs of the `DielectricWorkChain`."},{name:"output_phonopy",required:!1,valid_types:"",info:"Outputs of the post-processing via `phonopy`."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"The phonon workchain failed."},{status:401,message:"The dielectric workchain failed."},{status:402,message:"The phonopy calculation failed."}]},class:"aiida_vibroscopy.workflows.phonons.harmonic:HarmonicWorkChain"},"vibroscopy.phonons.phonon":{description:["Class for computing force constants of phonons, without non-analytical corrections."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` that will be used to run the electric enthalpy scfs."},{name:"settings",required:!0,valid_types:"",info:"Options for how to run the workflow."},{name:"symmetry",required:!0,valid_types:"",info:"Namespace for symmetry related inputs."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"displacement_generator",required:!1,valid_types:"Dict, NoneType",info:`Info for displacements generation. The following flags are allowed:
 distance
 is_plusminus
 is_diagonal
 is_trigonal
 number_of_snapshots
 random_seed
 cutoff_frequency`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"phonopy",required:!1,valid_types:"Data",info:"Inputs for the `PhonopyCalculation` that willbe used to calculate the inter-atomic force constants, or for post-processing."},{name:"primitive_matrix",required:!1,valid_types:"List, NoneType",info:"Primitive matrix that defines the primitive cell from the unitcell."},{name:"supercell_matrix",required:!1,valid_types:"List, NoneType",info:"Supercell matrix that defines the supercell from the unitcell."}],outputs:[{name:"phonopy_data",required:!0,valid_types:"PhonopyData",info:"The phonopy data with supercells displacements, forces to use in the post-processing calculation."},{name:"supercells_forces",required:!0,valid_types:"ArrayData, TrajectoryData",info:"The forces acting on the atoms of each supercell."},{name:"output_phonopy",required:!1,valid_types:"",info:""},{name:"supercells",required:!1,valid_types:"StructureData",info:"The supercells with displacements."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"The initial supercell scf work chain failed."},{status:401,message:"The initial PwBaseWorkChain sub process returned a non integer total magnetization."},{status:402,message:"At least one sub processe did not finish successfully."},{status:403,message:"The phonopy calculation did not finish correctly."}]},class:"aiida_vibroscopy.workflows.phonons.base:PhononWorkChain"},"vibroscopy.spectra.intensities_average":{description:["Workchain that computes IR and Raman spatial and q-direction average spectra."],spec:{inputs:[{name:"vibrational_data",required:!0,valid_types:"VibrationalData, VibrationalFrozenPhononData",info:"Vibrational data containing force constants or frozen phonons forces, nac parameters and/or susceptibility derivatives."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"Options for averaging on the non-analytical directions."}],outputs:[{name:"ir_averaged",required:!0,valid_types:"ArrayData",info:"Contains high frequency dielectric tensor computed in Cartesian coordinates."},{name:"raman_averaged",required:!1,valid_types:"ArrayData",info:"Contains Born effective charges tensors computed in Cartesian coordinates."},{name:"units",required:!1,valid_types:"Dict",info:"Units of intensities and frequencies."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_vibroscopy.workflows.spectra.intensities_average:IntensitiesAverageWorkChain"},"vibroscopy.spectra.iraman":{description:["Workchain for automatically compute IR and Raman spectra using finite displacements and fields.","","    For other details of the sub-workchains used, see also:","        * :class:`~aiida_vibroscopy.workflows.dielectric.base.DielectricWorkChain` for finite fields","        * :class:`~aiida_vibroscopy.workflows.phonons.base.PhononWorkChain` for finite displacements"],spec:{inputs:[{name:"dielectric",required:!0,valid_types:"Data",info:"Inputs for the `DielectricWorkChain` that will beused to calculate the mixed derivatives with electric field."},{name:"phonon",required:!0,valid_types:"Data",info:"Inputs for the `PhononWorkChain` that will beused to calculate the force constants."},{name:"settings",required:!0,valid_types:"",info:"Options for how to run the workflow."},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"symmetry",required:!0,valid_types:"",info:"Namespace for symmetry related inputs."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"intensities_average",required:!1,valid_types:"Data",info:"Inputs for the `IntensitiesAverageWorkChain` that willbe used to run the average calculation over intensities."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_phonon",required:!0,valid_types:"",info:"Outputs of the `PhononWorkChain`."},{name:"vibrational_data",required:!0,valid_types:"VibrationalData, VibrationalFrozenPhononData",info:"The phonopy data with supercells displacements, forces and (optionally)nac parameters to use in the post-processing calculation."},{name:"fake",required:!1,valid_types:"",info:""},{name:"output_dielectric",required:!1,valid_types:"",info:"Outputs of the `DielectricWorkChain`."},{name:"output_intensities_average",required:!1,valid_types:"",info:"Intensities average over space and q-points."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"The averaging procedure for intensities had an unexpected error."},{status:401,message:"The averaging procedure for intensities had an unexpected error."}]},class:"aiida_vibroscopy.workflows.spectra.iraman:IRamanSpectraWorkChain"}}},commits_count:56,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:6}],pip_install_cmd:"pip install aiida-vibroscopy",is_installable:"True"},"aiida-wannier90":{code_home:"https://github.com/aiidateam/aiida-wannier90",documentation_url:"https://aiida-wannier90.readthedocs.io/",entry_point_prefix:"wannier90",pip_url:"aiida-wannier90",plugin_info:"https://raw.github.com/aiidateam/aiida-wannier90/master/setup.json",name:"aiida-wannier90",package_name:"aiida_wannier90",hosted_on:"github.com",metadata:{release_date:"2023-07-03",description:"AiiDA Plugin for the Wannier90 code",author:"Junfeng Qiao, Dominik Gresch, Antimo Marrazzo, Daniel Marchand, Giovanni Pizzi, Norma Rivano, The AiiDA team",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.1.0"},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{"wannier90.postw90":{description:["Plugin for Wannier90.","","    Wannier90 is a code for computing maximally-localized Wannier functions.","    See http://www.wannier.org/ for more details."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the Wannier90 code"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possibly stored in a remote computer."},{name:"structure",required:!0,valid_types:"StructureData",info:"input crystal structure"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"A list of k-points along a path to be used for bands interpolation; it should contain `labels`. Specify either this or `kpoint_path`."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"kpoint_path",required:!1,valid_types:"Dict, NoneType",info:"Description of the k-points path to be used for bands interpolation; it should contain two properties: a list ``path`` of length-2 tuples with the labels of the endpoints of the path; and a dictionary ``point_coords`` giving the scaled coordinates for each high-symmetry endpoint."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"k-point mesh used in the NSCF calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"projections",required:!1,valid_types:"OrbitalData, Dict, List, NoneType",info:"Starting projections for the Wannierisation procedure."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional settings to manage the Wannier90 calculation."}],outputs:[{name:"boltzwann",required:!0,valid_types:"",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:"The ``output_parameters`` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"interpolated_bands",required:!1,valid_types:"BandsData",info:"The interpolated band structure by Wannier90 (if any)."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required stdout output file."},{status:300,message:"A Wannier90 error file (.werr) has been found."},{status:400,message:'The string "Exiting..." has been found in the Wannier90 output (some partial output might have been parsed).'},{status:401,message:"An error related to bvectors has been found in the Wannier90 output."},{status:402,message:"Energy window contains fewer states than number of target WFs."},{status:403,message:"Error plotting Wanier functions in cube format."},{status:404,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:405,message:"Some output files were missing probably because the calculation got interrupted."},{status:406,message:"The retrieved temporary folder could not be accessed."}]},class:"aiida_wannier90.calculations:Postw90Calculation"},"wannier90.wannier90":{description:["Plugin for Wannier90.","","    Wannier90 is a code for computing maximally-localized Wannier functions.","    See http://www.wannier.org/ for more details."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"k-point mesh used in the NSCF calculation."},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the Wannier90 code"},{name:"structure",required:!0,valid_types:"StructureData",info:"input crystal structure"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"A list of k-points along a path to be used for bands interpolation; it should contain `labels`. Specify either this or `kpoint_path`."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"kpoint_path",required:!1,valid_types:"Dict, NoneType",info:"Description of the k-points path to be used for bands interpolation; it should contain two properties: a list ``path`` of length-2 tuples with the labels of the endpoints of the path; and a dictionary ``point_coords`` giving the scaled coordinates for each high-symmetry endpoint."},{name:"local_input_folder",required:!1,valid_types:"FolderData, NoneType",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``FolderData`` stored in the AiiDA repository."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"projections",required:!1,valid_types:"OrbitalData, Dict, List, NoneType",info:"Starting projections for the Wannierisation procedure."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"remote_input_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possibly stored in a remote computer."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional settings to manage the Wannier90 calculation."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The ``output_parameters`` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"interpolated_bands",required:!1,valid_types:"BandsData",info:"The interpolated band structure by Wannier90 (if any)."},{name:"nnkp_file",required:!1,valid_types:"SinglefileData",info:"The ``.nnkp`` file, produced only in -pp (postproc) mode."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required stdout output file."},{status:300,message:"A Wannier90 error file (.werr) has been found."},{status:400,message:'The string "Exiting..." has been found in the Wannier90 output (some partial output might have been parsed).'},{status:401,message:"An error related to bvectors has been found in the Wannier90 output."},{status:402,message:"Energy window contains fewer states than number of target WFs."},{status:403,message:"Error plotting Wanier functions in cube format."},{status:404,message:"The stdout output file was incomplete probably because the calculation got interrupted."}]},class:"aiida_wannier90.calculations:Wannier90Calculation"}},"aiida.parsers":{"wannier90.postw90":"aiida_wannier90.parsers:Postw90Parser","wannier90.wannier90":"aiida_wannier90.parsers:Wannier90Parser"},"aiida.workflows":{"wannier90.minimal":{description:["Workchain to run a full stack of Quantum ESPRESSO + Wannier90 for GaAs.","","    Note that this is mostly to be used as an example, as there is no","    error checking and runs directly Quantum ESPRESSO calculations rather","    than the base workflows."],spec:{inputs:[{name:"kpoint_path",required:!0,valid_types:"Dict",info:"The kpoints path for the NSCF run and Wannierisation."},{name:"kpoints_nscf",required:!0,valid_types:"KpointsData",info:"The kpoints for the NSCF run and Wannierisation."},{name:"kpoints_scf",required:!0,valid_types:"KpointsData",info:"The kpoints for the SCF run."},{name:"projections",required:!0,valid_types:"OrbitalData",info:"The projections for the Wannierisation."},{name:"pseudo_family",required:!0,valid_types:"Str",info:"The name of a pseudopotential family to use."},{name:"pw2wannier90_code",required:!0,valid_types:"Code",info:"The `pw2wannier90.x` code to use for the `Pw2Wannier90Calculation`s."},{name:"pw_code",required:!0,valid_types:"Code",info:"The `pw.x` code to use for the `PwCalculation`s."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"wannier_code",required:!0,valid_types:"Code",info:"The `wannier90.x` code to use for the `Wannier90Calculation`s."},{name:"max_wallclock_seconds",required:!1,valid_types:"Int, NoneType",info:"Maximum wallclock time in seconds"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"num_machines",required:!1,valid_types:"Int, NoneType",info:"The number of machines (nodes) to use"}],outputs:[{name:"matrices_folder",required:!0,valid_types:"FolderData",info:""},{name:"nnkp_file",required:!0,valid_types:"SinglefileData",info:""},{name:"nscf_output",required:!0,valid_types:"Dict",info:""},{name:"p2wannier_output",required:!0,valid_types:"Dict",info:""},{name:"pw2wan_remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"scf_output",required:!0,valid_types:"Dict",info:""},{name:"wannier_bands",required:!0,valid_types:"BandsData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_wannier90.workflows.minimal:MinimalW90WorkChain"}}},commits_count:20,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-wannier90",is_installable:"True"},"aiida-wannier90-workflows":{code_home:"https://github.com/aiidateam/aiida-wannier90-workflows",development_status:"stable",entry_point_prefix:"wannier90_workflows",pip_url:"aiida-wannier90-workflows",plugin_info:"https://raw.github.com/aiidateam/aiida-wannier90-workflows/master/setup.json",name:"aiida-wannier90-workflows",package_name:"aiida_wannier90_workflows",hosted_on:"github.com",metadata:{release_date:"2023-07-04",description:"Advanced AiiDA workflows for Wannier90",author:"Junfeng Qiao, Antimo Marrazzo, Giovanni Pizzi",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.1.0"},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{"wannier90_workflows.split":"aiida_wannier90_workflows.calculations.split:Wannier90SplitCalculation"},"aiida.parsers":{"wannier90_workflows.split":"aiida_wannier90_workflows.parsers.split:Wannier90SplitParser"},"aiida.workflows":{"wannier90_workflows.bands":"aiida_wannier90_workflows.workflows.bands:Wannier90BandsWorkChain","wannier90_workflows.base.open_grid":"aiida_wannier90_workflows.workflows.base.open_grid:OpenGridBaseWorkChain","wannier90_workflows.base.projwfc":"aiida_wannier90_workflows.workflows.base.projwfc:ProjwfcBaseWorkChain","wannier90_workflows.base.pw2wannier90":"aiida_wannier90_workflows.workflows.base.pw2wannier90:Pw2wannier90BaseWorkChain","wannier90_workflows.base.wannier90":"aiida_wannier90_workflows.workflows.base.wannier90:Wannier90BaseWorkChain","wannier90_workflows.open_grid":"aiida_wannier90_workflows.workflows.open_grid:Wannier90OpenGridWorkChain","wannier90_workflows.optimize":"aiida_wannier90_workflows.workflows.optimize:Wannier90OptimizeWorkChain","wannier90_workflows.projwfcbands":"aiida_wannier90_workflows.workflows.projwfcbands:ProjwfcBandsWorkChain","wannier90_workflows.split":"aiida_wannier90_workflows.workflows.split:Wannier90SplitWorkChain","wannier90_workflows.wannier90":"aiida_wannier90_workflows.workflows.wannier90:Wannier90WorkChain"},console_scripts:{"aiida-wannier90-workflows":"aiida_wannier90_workflows.cli:cmd_root"}},commits_count:43,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E003'>E003</a>: Failed to fetch entry point metadata for package aiida_wannier90_workflows<pre>Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/plumpy/processes.py", line 188, in spec
    return cls.__getattribute__(cls, '_spec')
AttributeError: 'Protect' object has no attribute '_spec'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 189, in <module>
    cli()  # pylint: disable=no-value-for-parameter
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1157, in __call__
    return self.main(*args, **kwargs)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1078, in main
    rv = self.invoke(ctx)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1434, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 783, in invoke
    return __callback(*args, **kwargs)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 179, in cli
    result[ep_group] = document_entry_point_group(ep_group)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 68, in document_entry_point_group
    process_info = document_entry_point(entry_point_group, entry_point)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 94, in document_entry_point
    return document_process_info(plugin)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 114, in document_process_info
    spec=document_process_spec(process.spec()), description=docstring
  File "/opt/conda/lib/python3.9/site-packages/aiida/engine/processes/workchains/workchain.py", line 135, in spec
    return super().spec()  # type: ignore[return-value]
  File "/opt/conda/lib/python3.9/site-packages/aiida/engine/processes/process.py", line 88, in spec
    return super().spec()  # type: ignore[return-value]
  File "/opt/conda/lib/python3.9/site-packages/plumpy/processes.py", line 193, in spec
    cls.define(cls._spec)  # type: ignore
  File "/opt/conda/lib/python3.9/site-packages/aiida_wannier90_workflows/workflows/bands.py", line 50, in define
    super().define(spec)
  File "/opt/conda/lib/python3.9/site-packages/aiida_wannier90_workflows/workflows/open_grid.py", line 45, in define
    super().define(spec)
  File "/opt/conda/lib/python3.9/site-packages/aiida_wannier90_workflows/workflows/wannier90.py", line 109, in define
    spec.inputs["nscf"]["pw"].validator = PwCalculation.validate_inputs_base
AttributeError: type object 'PwCalculation' has no attribute 'validate_inputs_base'
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:10},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-wannier90-workflows",is_installable:"True"},"aiida-wien2k":{code_home:"https://github.com/rubel75/aiida-wien2k",entry_point_prefix:"wien2k",name:"aiida-wien2k",package_name:"aiida_wien2k",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:7,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-yambo":{code_home:"https://github.com/yambo-code/yambo-aiida/",development_status:"stable",entry_point_prefix:"yambo",pip_url:"aiida-yambo",plugin_info:"https://raw.github.com/yambo-code/yambo-aiida/master/setup.json",name:"aiida-yambo",package_name:"aiida_yambo",hosted_on:"github.com",metadata:{release_date:"2020-11-05",description:"YAMBO plugin and workflows for AiiDA",author:"Miki Bonacci, Michael Atambo, Antimo Marrazzo, Prandini Gianluca",author_email:"miki.bonacci@unimore.it",license:"MIT",home_page:"https://github.com/yambo-code/yambo-aiida",classifiers:["Environment :: Plugins","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Topic :: Scientific/Engineering :: Physics"],version:"1.3.0"},aiida_version:">=1.0.0a2",entry_points:{"aiida.calculations":{"yambo.yambo":"aiida_yambo.calculations.yambo:YamboCalculation"},"aiida.data":{},"aiida.parsers":{"yambo.yambo":"aiida_yambo.parsers.parsers:YamboParser"}},commits_count:75,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E003'>E003</a>: Failed to fetch entry point metadata for package aiida_yambo<pre>Traceback (most recent call last):
  File "/opt/conda/lib/python3.9/site-packages/plumpy/processes.py", line 188, in spec
    return cls.__getattribute__(cls, '_spec')
AttributeError: 'Protect' object has no attribute '_spec'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 189, in <module>
    cli()  # pylint: disable=no-value-for-parameter
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1157, in __call__
    return self.main(*args, **kwargs)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1078, in main
    rv = self.invoke(ctx)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 1434, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/opt/conda/lib/python3.9/site-packages/click/core.py", line 783, in invoke
    return __callback(*args, **kwargs)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 179, in cli
    result[ep_group] = document_entry_point_group(ep_group)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 68, in document_entry_point_group
    process_info = document_entry_point(entry_point_group, entry_point)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 94, in document_entry_point
    return document_process_info(plugin)
  File "/tmp/scripts/./bin/analyze_entrypoints.py", line 114, in document_process_info
    spec=document_process_spec(process.spec()), description=docstring
  File "/opt/conda/lib/python3.9/site-packages/aiida/engine/processes/workchains/workchain.py", line 135, in spec
    return super().spec()  # type: ignore[return-value]
  File "/opt/conda/lib/python3.9/site-packages/aiida/engine/processes/process.py", line 88, in spec
    return super().spec()  # type: ignore[return-value]
  File "/opt/conda/lib/python3.9/site-packages/plumpy/processes.py", line 193, in spec
    cls.define(cls._spec)  # type: ignore
  File "/opt/conda/lib/python3.9/site-packages/aiida_quantumespresso/workflows/matdyn/base.py", line 23, in define
    super(MatdynBaseWorkChain, cls).define(spec)
  File "/opt/conda/lib/python3.9/site-packages/aiida_quantumespresso/common/workchain/base/restart.py", line 91, in define
    spec.input('max_iterations', valid_type=orm.Int, default=orm.Int(5),
  File "/opt/conda/lib/python3.9/site-packages/aiida/orm/nodes/data/base.py", line 33, in __init__
    super().__init__(**kwargs)
  File "/opt/conda/lib/python3.9/site-packages/aiida/orm/nodes/data/data.py", line 50, in __init__
    super().__init__(*args, **kwargs)
  File "/opt/conda/lib/python3.9/site-packages/aiida/orm/nodes/node.py", line 180, in __init__
    backend = backend or get_manager().get_profile_storage()
  File "/opt/conda/lib/python3.9/site-packages/aiida/manage/manager.py", line 242, in get_profile_storage
    raise ConfigurationError(
aiida.common.exceptions.ConfigurationError: Could not determine the current profile. Consider loading a profile using \`aiida.load_profile()\`.
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-yambo",is_installable:"True"},"aiida-yambo-wannier90":{code_home:"https://github.com/aiidaplugins/aiida-yambo-wannier90",entry_point_prefix:"yambo_wannier90",pip_url:"aiida-yambo-wannier90",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/pyproject.toml",documentation_url:"https://aiida-yambo-wannier90.readthedocs.io/en/latest/",version_file:"https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/aiida_yambo_wannier90/__init__.py",name:"aiida-yambo-wannier90",package_name:"aiida_yambo_wannier90",hosted_on:"github.com",metadata:{release_date:"2022-07-06",description:"Plugin to combine Wannier90 interpolations with GW corrections computed by Yambo",author:"The AiiDA Team",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0b0"},aiida_version:">=1.6.4,<3",entry_points:{"aiida.calculations":{"yambo_wannier90.gw2wannier90":"aiida_yambo_wannier90.calculations.gw2wannier90:Gw2wannier90Calculation"},"aiida.parsers":{"yambo_wannier90.gw2wannier90":"aiida_yambo_wannier90.parsers.gw2wannier90:Gw2wannier90Parser"},"aiida.workflows":{yambo_wannier90:"aiida_yambo_wannier90.workflows:YamboWannier90WorkChain"},console_scripts:{"aiida-yambo-wannier90":"aiida_yambo_wannier90.cli:cmd_root"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-yambo-wannier90<pre>Collecting aiida-yambo-wannier90
  Downloading aiida_yambo_wannier90-0.1.0b0-py3-none-any.whl (27 kB)
Requirement already satisfied: aiida-core<3,>=1.6.4 in /opt/conda/lib/python3.9/site-packages (from aiida-yambo-wannier90) (2.4.1)
Collecting voluptuous (from aiida-yambo-wannier90)
  Downloading voluptuous-0.14.0-py3-none-any.whl.metadata (20 kB)
Collecting aiida-yambo>=1.3.0 (from aiida-yambo-wannier90)
  Downloading aiida_yambo-1.3.0-py3-none-any.whl (57 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 57.8/57.8 kB 12.6 MB/s eta 0:00:00
Collecting aiida-wannier90-workflows>=1.0.1 (from aiida-yambo-wannier90)
  Downloading aiida_wannier90_workflows-2.1.0-py3-none-any.whl.metadata (4.7 kB)
Requirement already satisfied: alembic~=1.2 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (1.12.1)
Requirement already satisfied: archive-path~=0.4.2 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.4.2)
Requirement already satisfied: aio-pika~=6.6 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (6.8.1)
Requirement already satisfied: circus~=0.18.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.18.0)
Requirement already satisfied: click-spinner~=0.1.8 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.1.10)
Requirement already satisfied: click~=8.1 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (8.1.7)
Requirement already satisfied: disk-objectstore~=0.6.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.6.0)
Requirement already satisfied: docstring-parser in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.15)
Requirement already satisfied: get-annotations~=0.1 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.1.2)
Requirement already satisfied: graphviz~=0.19 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.20.1)
Requirement already satisfied: ipython>=7 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (8.17.2)
Requirement already satisfied: jinja2~=3.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (3.1.2)
Requirement already satisfied: jsonschema~=3.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (3.2.0)
Requirement already satisfied: kiwipy~=0.7.7 in /opt/conda/lib/python3.9/site-packages (from kiwipy[rmq]~=0.7.7->aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.7.8)
Requirement already satisfied: importlib-metadata~=4.13 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (4.13.0)
Requirement already satisfied: numpy~=1.21 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (1.26.2)
Requirement already satisfied: paramiko>=2.7.2,~=2.7 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2.12.0)
Requirement already satisfied: plumpy~=0.21.6 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.21.10)
Requirement already satisfied: pgsu~=0.2.1 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.2.4)
Requirement already satisfied: psutil~=5.6 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (5.9.6)
Requirement already satisfied: psycopg2-binary~=2.8 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2.9.9)
Requirement already satisfied: pytz~=2021.1 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2021.3)
Requirement already satisfied: pyyaml~=6.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (6.0.1)
Requirement already satisfied: requests~=2.0 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2.31.0)
Requirement already satisfied: sqlalchemy~=1.4.22 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (1.4.50)
Requirement already satisfied: tabulate~=0.8.5 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.8.10)
Requirement already satisfied: tqdm~=4.45 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (4.66.1)
Requirement already satisfied: upf_to_json~=0.9.2 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.9.5)
Requirement already satisfied: wrapt~=1.11 in /opt/conda/lib/python3.9/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (1.16.0)
Collecting aiida-pseudo>=0.6 (from aiida-wannier90-workflows>=1.0.1->aiida-yambo-wannier90)
  Downloading aiida_pseudo-1.4.0-py3-none-any.whl.metadata (10 kB)
Collecting aiida-quantumespresso>=4.3 (from aiida-wannier90-workflows>=1.0.1->aiida-yambo-wannier90)
  Downloading aiida_quantumespresso-4.4.0-py3-none-any.whl.metadata (32 kB)
Collecting aiida-wannier90>=2.1 (from aiida-wannier90-workflows>=1.0.1->aiida-yambo-wannier90)
  Downloading aiida_wannier90-2.1.0-py3-none-any.whl.metadata (4.1 kB)
Requirement already satisfied: colorama in /opt/conda/lib/python3.9/site-packages (from aiida-wannier90-workflows>=1.0.1->aiida-yambo-wannier90) (0.4.6)
INFO: pip is looking at multiple versions of aiida-yambo to determine which version is compatible with other requirements. This could take a while.
Collecting aiida-wannier90-workflows>=1.0.1 (from aiida-yambo-wannier90)
  Downloading aiida_wannier90_workflows-1.0.2-py3-none-any.whl (22 kB)
INFO: pip is looking at multiple versions of aiida-wannier90-workflows to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida_wannier90_workflows-1.0.1-py2.py3-none-any.whl (20 kB)
ERROR: Cannot install aiida-yambo-wannier90 and aiida-yambo-wannier90==0.1.0b0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-yambo-wannier90 0.1.0b0 depends on aiida-core<3 and >=1.6.4
    aiida-wannier90-workflows 1.0.2 depends on aiida-core<2 and >=1.1.1
    aiida-yambo-wannier90 0.1.0b0 depends on aiida-core<3 and >=1.6.4
    aiida-wannier90-workflows 1.0.1 depends on aiida-core<2 and >=1.1.1
    The user requested (constraint) aiida-core==2.4.1

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install --pre aiida-yambo-wannier90",is_installable:"False"},"aiida-yascheduler":{code_home:"https://github.com/tilde-lab/yascheduler",documentation_url:"https://github.com/tilde-lab/yascheduler",entry_point_prefix:"yascheduler",pip_url:"yascheduler",plugin_info:"https://raw.githubusercontent.com/tilde-lab/yascheduler/master/setup.json",name:"aiida-yascheduler",package_name:"aiida_yascheduler",hosted_on:"github.com",metadata:{release_date:"2023-07-29",description:"Yet another computing scheduler and cloud orchestration engine",author:"Andrey Sobolev",author_email:"Evgeny Blokhin <eb@tilde.pro>, Sergei Korolev <knopki@duck.com>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Information Analysis","Topic :: Scientific/Engineering :: Physics","Topic :: Software Development :: Libraries :: Python Modules"],version:"1.2.0"},aiida_version:null,entry_points:{"aiida.schedulers":{yascheduler:"yascheduler.aiida_plugin:YaScheduler"},console_scripts:{yainit:"yascheduler.utils:init",yanodes:"yascheduler.utils:show_nodes",yascheduler:"yascheduler.utils:daemonize",yasetnode:"yascheduler.utils:manage_node",yastatus:"yascheduler.utils:check_status",yasubmit:"yascheduler.utils:submit"}},commits_count:57,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E002'>E002</a>: Failed to import package aiida_yascheduler<pre>Traceback (most recent call last):
  File "<string>", line 1, in <module>
ModuleNotFoundError: No module named 'aiida_yascheduler'
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"purple",text:"Console scripts",count:6},{colorclass:"orange",text:"Other (Schedulers)",count:1}],pip_install_cmd:"pip install yascheduler",is_installable:"True"},"aiida-z2pack":{code_home:"https://github.com/AntimoMarrazzo/aiida-z2pack",entry_point_prefix:"z2pack",pip_url:"git+https://github.com/AntimoMarrazzo/aiida-z2pack",name:"aiida-z2pack",package_name:"aiida_z2pack",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:18,development_status:"planning",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E004'>E004</a>: Unable to retrieve plugin metadata, retrieve plugin info from 'https://raw.githubusercontent.com/antimomarrazzo/aiida-z2pack/master/setup.json' failed.<pre>Traceback (most recent call last):
  File "/home/runner/work/aiida-registry/aiida-registry/aiida_registry/utils.py", line 22, in fetch_file
    response.raise_for_status()
  File "/opt/hostedtoolcache/Python/3.10.13/x64/lib/python3.10/site-packages/requests/models.py", line 1021, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: https://raw.githubusercontent.com/antimomarrazzo/aiida-z2pack/master/setup.json
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/AntimoMarrazzo/aiida-z2pack"},"aiida-zeopp":{code_home:"https://github.com/lsmo-epfl/aiida-zeopp",development_status:"stable",entry_point_prefix:"zeopp",pip_url:"aiida-zeopp",plugin_info:"https://raw.github.com/lsmo-epfl/aiida-zeopp/master/setup.json",name:"aiida-zeopp",package_name:"aiida_zeopp",hosted_on:"github.com",metadata:{release_date:"2023-08-26",description:"AiiDA plugin for zeo++",author_email:"Leopold Talirz <leopold.talirz@epfl.ch>, Miriam Pougin <miriam.pougin@epfl.ch>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.0"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{"zeopp.network":{description:["AiiDA calculation plugin for the zeo++ network binary"],spec:{inputs:[{name:"parameters",required:!0,valid_types:"NetworkParameters",info:"command line parameters for zeo++"},{name:"structure",required:!0,valid_types:"CifData",info:"input structure to be analyzed"},{name:"atomic_radii",required:!1,valid_types:"SinglefileData, NoneType",info:"atomic radii file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"key-value pairs parsed from zeo++ output file(s)."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"block",required:!1,valid_types:"SinglefileData",info:"Blocked pockets fileoutput file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation completed successfully."},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"Not all expected output files were found."},{status:102,message:"Empty block file. This indicates the calculation of blocked pockets did not finish."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_zeopp.calculations.network:NetworkCalculation"}},"aiida.data":{"zeopp.parameters":"aiida_zeopp.data.parameters:NetworkParameters"},"aiida.parsers":{"zeopp.network":"aiida_zeopp.parsers.network:NetworkParser"}},commits_count:4,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install aiida-zeopp",is_installable:"True"}},z1=[{name:"Calculations",colorclass:"blue",num_entries:57,total_num:140},{name:"Parsers",colorclass:"brown",num_entries:58,total_num:118},{name:"Data",colorclass:"red",num_entries:32,total_num:106},{name:"Workflows",colorclass:"green",num_entries:42,total_num:161},{name:"Console scripts",colorclass:"purple",num_entries:16,total_num:27},{name:"Other",tooltip:"Aenet potentials, Aiida python serializers, Calculations importers, ...",colorclass:"orange",num_entries:28,total_num:105}],W1={planning:["Not yet ready to use. Developers welcome!","status-planning-d9644d.svg"],"pre-alpha":["Not yet ready to use. Developers welcome!","status-planning-d9644d.svg"],alpha:["Adds new functionality, not yet ready for production. Testing welcome!","status-alpha-d6af23.svg"],beta:["Adds new functionality, not yet ready for production. Testing welcome!","status-beta-d6af23.svg"],stable:["Ready for production calculations. Bug reports welcome!","status-stable-4cc61e.svg"],mature:["Ready for production calculations. Bug reports welcome!","status-stable-4cc61e.svg"],inactive:["No longer maintained.","status-inactive-bbbbbb.svg"]},$1={"aiida.calculations":"CalcJobs and calculation functions","aiida.parsers":"CalcJob parsers","aiida.data":"Data node types","aiida.cmdline.data":"verdi data commands","aiida.groups":"Group types","aiida.workflows":"WorkChains and work functions","aiida.schedulers":"Job scheduler support","aiida.transports":"Data transport protocols","aiida.tests":"Development test modules","aiida.tools.dbexporters":"Support for exporting to external databases","aiida.tools.dbimporters":"Support for importing from external databases",console_scripts:"Console scripts"},fa={plugins:B1,globalsummary:z1,status_dict:W1,entrypointtypes:$1};var ep={},l_={exports:{}};(function(e){function t(a){return a&&a.__esModule?a:{default:a}}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports})(l_);var tp=l_.exports,_u={};function x(){return x=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},x.apply(this,arguments)}function ba(e){return e!==null&&typeof e=="object"&&e.constructor===Object}function u_(e){if(!ba(e))return e;const t={};return Object.keys(e).forEach(a=>{t[a]=u_(e[a])}),t}function yt(e,t,a={clone:!0}){const i=a.clone?x({},e):e;return ba(e)&&ba(t)&&Object.keys(t).forEach(n=>{n!=="__proto__"&&(ba(t[n])&&n in e&&ba(e[n])?i[n]=yt(e[n],t[n],a):a.clone?i[n]=ba(t[n])?u_(t[n]):t[n]:i[n]=t[n])}),i}function si(e){let t="https://mui.com/production-error/?code="+e;for(let a=1;a<arguments.length;a+=1)t+="&args[]="+encodeURIComponent(arguments[a]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}var pe={};/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ap=Symbol.for("react.element"),ip=Symbol.for("react.portal"),Qo=Symbol.for("react.fragment"),Yo=Symbol.for("react.strict_mode"),Zo=Symbol.for("react.profiler"),el=Symbol.for("react.provider"),tl=Symbol.for("react.context"),U1=Symbol.for("react.server_context"),al=Symbol.for("react.forward_ref"),il=Symbol.for("react.suspense"),nl=Symbol.for("react.suspense_list"),sl=Symbol.for("react.memo"),rl=Symbol.for("react.lazy"),K1=Symbol.for("react.offscreen"),d_;d_=Symbol.for("react.module.reference");function $t(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case ap:switch(e=e.type,e){case Qo:case Zo:case Yo:case il:case nl:return e;default:switch(e=e&&e.$$typeof,e){case U1:case tl:case al:case rl:case sl:case el:return e;default:return t}}case ip:return t}}}pe.ContextConsumer=tl;pe.ContextProvider=el;pe.Element=ap;pe.ForwardRef=al;pe.Fragment=Qo;pe.Lazy=rl;pe.Memo=sl;pe.Portal=ip;pe.Profiler=Zo;pe.StrictMode=Yo;pe.Suspense=il;pe.SuspenseList=nl;pe.isAsyncMode=function(){return!1};pe.isConcurrentMode=function(){return!1};pe.isContextConsumer=function(e){return $t(e)===tl};pe.isContextProvider=function(e){return $t(e)===el};pe.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===ap};pe.isForwardRef=function(e){return $t(e)===al};pe.isFragment=function(e){return $t(e)===Qo};pe.isLazy=function(e){return $t(e)===rl};pe.isMemo=function(e){return $t(e)===sl};pe.isPortal=function(e){return $t(e)===ip};pe.isProfiler=function(e){return $t(e)===Zo};pe.isStrictMode=function(e){return $t(e)===Yo};pe.isSuspense=function(e){return $t(e)===il};pe.isSuspenseList=function(e){return $t(e)===nl};pe.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===Qo||e===Zo||e===Yo||e===il||e===nl||e===K1||typeof e=="object"&&e!==null&&(e.$$typeof===rl||e.$$typeof===sl||e.$$typeof===el||e.$$typeof===tl||e.$$typeof===al||e.$$typeof===d_||e.getModuleId!==void 0)};pe.typeOf=$t;function G(e){if(typeof e!="string")throw new Error(si(7));return e.charAt(0).toUpperCase()+e.slice(1)}function Ed(...e){return e.reduce((t,a)=>a==null?t:function(...n){t.apply(this,n),a.apply(this,n)},()=>{})}function ol(e,t=166){let a;function i(...n){const s=()=>{e.apply(this,n)};clearTimeout(a),a=setTimeout(s,t)}return i.clear=()=>{clearTimeout(a)},i}function V1(e,t){return()=>null}function zr(e,t){var a,i;return b.isValidElement(e)&&t.indexOf((a=e.type.muiName)!=null?a:(i=e.type)==null||(i=i._payload)==null||(i=i.value)==null?void 0:i.muiName)!==-1}function _t(e){return e&&e.ownerDocument||document}function ca(e){return _t(e).defaultView||window}function H1(e,t){return()=>null}function To(e,t){typeof e=="function"?e(t):e&&(e.current=t)}const G1=typeof window<"u"?b.useLayoutEffect:b.useEffect,Pa=G1;let cm=0;function X1(e){const[t,a]=b.useState(e),i=e||t;return b.useEffect(()=>{t==null&&(cm+=1,a(`mui-${cm}`))},[t]),i}const pm=Hr["useId".toString()];function np(e){if(pm!==void 0){const t=pm();return e??t}return X1(e)}function J1(e,t,a,i,n){return null}function Id({controlled:e,default:t,name:a,state:i="value"}){const{current:n}=b.useRef(e!==void 0),[s,r]=b.useState(t),o=n?e:s,l=b.useCallback(u=>{n||r(u)},[]);return[o,l]}function xi(e){const t=b.useRef(e);return Pa(()=>{t.current=e}),b.useRef((...a)=>(0,t.current)(...a)).current}function Qe(...e){return b.useMemo(()=>e.every(t=>t==null)?null:t=>{e.forEach(a=>{To(a,t)})},e)}let ll=!0,Nd=!1,fm;const Q1={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Y1(e){const{type:t,tagName:a}=e;return!!(a==="INPUT"&&Q1[t]&&!e.readOnly||a==="TEXTAREA"&&!e.readOnly||e.isContentEditable)}function Z1(e){e.metaKey||e.altKey||e.ctrlKey||(ll=!0)}function vu(){ll=!1}function eT(){this.visibilityState==="hidden"&&Nd&&(ll=!0)}function tT(e){e.addEventListener("keydown",Z1,!0),e.addEventListener("mousedown",vu,!0),e.addEventListener("pointerdown",vu,!0),e.addEventListener("touchstart",vu,!0),e.addEventListener("visibilitychange",eT,!0)}function aT(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch{}return ll||Y1(t)}function c_(){const e=b.useCallback(n=>{n!=null&&tT(n.ownerDocument)},[]),t=b.useRef(!1);function a(){return t.current?(Nd=!0,window.clearTimeout(fm),fm=window.setTimeout(()=>{Nd=!1},100),t.current=!1,!0):!1}function i(n){return aT(n)?(t.current=!0,!0):!1}return{isFocusVisibleRef:t,onFocus:i,onBlur:a,ref:e}}function p_(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}function f_(e,t){const a=x({},t);return Object.keys(e).forEach(i=>{if(i.toString().match(/^(components|slots)$/))a[i]=x({},e[i],a[i]);else if(i.toString().match(/^(componentsProps|slotProps)$/)){const n=e[i]||{},s=t[i];a[i]={},!s||!Object.keys(s)?a[i]=n:!n||!Object.keys(n)?a[i]=s:(a[i]=x({},s),Object.keys(n).forEach(r=>{a[i][r]=f_(n[r],s[r])}))}else a[i]===void 0&&(a[i]=e[i])}),a}function me(e,t,a=void 0){const i={};return Object.keys(e).forEach(n=>{i[n]=e[n].reduce((s,r)=>{if(r){const o=t(r);o!==""&&s.push(o),a&&a[r]&&s.push(a[r])}return s},[]).join(" ")}),i}const mm=e=>e,iT=()=>{let e=mm;return{configure(t){e=t},generate(t){return e(t)},reset(){e=mm}}},nT=iT(),sp=nT,sT={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function fe(e,t,a="Mui"){const i=sT[t];return i?`${a}-${i}`:`${sp.generate(e)}-${t}`}function re(e,t,a="Mui"){const i={};return t.forEach(n=>{i[n]=fe(e,n,a)}),i}function $(e,t){if(e==null)return{};var a={},i=Object.keys(e),n,s;for(s=0;s<i.length;s++)n=i[s],!(t.indexOf(n)>=0)&&(a[n]=e[n]);return a}function m_(e){var t,a,i="";if(typeof e=="string"||typeof e=="number")i+=e;else if(typeof e=="object")if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=m_(e[t]))&&(i&&(i+=" "),i+=a);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function V(){for(var e,t,a=0,i="";a<arguments.length;)(e=arguments[a++])&&(t=m_(e))&&(i&&(i+=" "),i+=t);return i}function h_(e){var t=Object.create(null);return function(a){return t[a]===void 0&&(t[a]=e(a)),t[a]}}var rT=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,oT=h_(function(e){return rT.test(e)||e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)<91});function lT(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}function uT(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),e.nonce!==void 0&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}var dT=function(){function e(a){var i=this;this._insertTag=function(n){var s;i.tags.length===0?i.insertionPoint?s=i.insertionPoint.nextSibling:i.prepend?s=i.container.firstChild:s=i.before:s=i.tags[i.tags.length-1].nextSibling,i.container.insertBefore(n,s),i.tags.push(n)},this.isSpeedy=a.speedy===void 0?!0:a.speedy,this.tags=[],this.ctr=0,this.nonce=a.nonce,this.key=a.key,this.container=a.container,this.prepend=a.prepend,this.insertionPoint=a.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(i){i.forEach(this._insertTag)},t.insert=function(i){this.ctr%(this.isSpeedy?65e3:1)===0&&this._insertTag(uT(this));var n=this.tags[this.tags.length-1];if(this.isSpeedy){var s=lT(n);try{s.insertRule(i,s.cssRules.length)}catch{}}else n.appendChild(document.createTextNode(i));this.ctr++},t.flush=function(){this.tags.forEach(function(i){return i.parentNode&&i.parentNode.removeChild(i)}),this.tags=[],this.ctr=0},e}(),tt="-ms-",ko="-moz-",ie="-webkit-",g_="comm",rp="rule",op="decl",cT="@import",y_="@keyframes",pT="@layer",fT=Math.abs,ul=String.fromCharCode,mT=Object.assign;function hT(e,t){return Ge(e,0)^45?(((t<<2^Ge(e,0))<<2^Ge(e,1))<<2^Ge(e,2))<<2^Ge(e,3):0}function __(e){return e.trim()}function gT(e,t){return(e=t.exec(e))?e[0]:e}function ne(e,t,a){return e.replace(t,a)}function jd(e,t){return e.indexOf(t)}function Ge(e,t){return e.charCodeAt(t)|0}function Os(e,t,a){return e.slice(t,a)}function ia(e){return e.length}function lp(e){return e.length}function br(e,t){return t.push(e),e}function yT(e,t){return e.map(t).join("")}var dl=1,kn=1,v_=0,bt=0,Oe=0,In="";function cl(e,t,a,i,n,s,r){return{value:e,root:t,parent:a,type:i,props:n,children:s,line:dl,column:kn,length:r,return:""}}function Vn(e,t){return mT(cl("",null,null,"",null,null,0),e,{length:-e.length},t)}function _T(){return Oe}function vT(){return Oe=bt>0?Ge(In,--bt):0,kn--,Oe===10&&(kn=1,dl--),Oe}function qt(){return Oe=bt<v_?Ge(In,bt++):0,kn++,Oe===10&&(kn=1,dl++),Oe}function da(){return Ge(In,bt)}function Wr(){return bt}function Gs(e,t){return Os(In,e,t)}function Ms(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function b_(e){return dl=kn=1,v_=ia(In=e),bt=0,[]}function w_(e){return In="",e}function $r(e){return __(Gs(bt-1,Fd(e===91?e+2:e===40?e+1:e)))}function bT(e){for(;(Oe=da())&&Oe<33;)qt();return Ms(e)>2||Ms(Oe)>3?"":" "}function wT(e,t){for(;--t&&qt()&&!(Oe<48||Oe>102||Oe>57&&Oe<65||Oe>70&&Oe<97););return Gs(e,Wr()+(t<6&&da()==32&&qt()==32))}function Fd(e){for(;qt();)switch(Oe){case e:return bt;case 34:case 39:e!==34&&e!==39&&Fd(Oe);break;case 40:e===41&&Fd(e);break;case 92:qt();break}return bt}function TT(e,t){for(;qt()&&e+Oe!==47+10;)if(e+Oe===42+42&&da()===47)break;return"/*"+Gs(t,bt-1)+"*"+ul(e===47?e:qt())}function kT(e){for(;!Ms(da());)qt();return Gs(e,bt)}function xT(e){return w_(Ur("",null,null,null,[""],e=b_(e),0,[0],e))}function Ur(e,t,a,i,n,s,r,o,l){for(var u=0,d=0,h=r,g=0,p=0,m=0,c=1,k=1,y=1,_=0,v="",w=n,D=s,q=i,T=v;k;)switch(m=_,_=qt()){case 40:if(m!=108&&Ge(T,h-1)==58){jd(T+=ne($r(_),"&","&\f"),"&\f")!=-1&&(y=-1);break}case 34:case 39:case 91:T+=$r(_);break;case 9:case 10:case 13:case 32:T+=bT(m);break;case 92:T+=wT(Wr()-1,7);continue;case 47:switch(da()){case 42:case 47:br(DT(TT(qt(),Wr()),t,a),l);break;default:T+="/"}break;case 123*c:o[u++]=ia(T)*y;case 125*c:case 59:case 0:switch(_){case 0:case 125:k=0;case 59+d:y==-1&&(T=ne(T,/\f/g,"")),p>0&&ia(T)-h&&br(p>32?gm(T+";",i,a,h-1):gm(ne(T," ","")+";",i,a,h-2),l);break;case 59:T+=";";default:if(br(q=hm(T,t,a,u,d,n,o,v,w=[],D=[],h),s),_===123)if(d===0)Ur(T,t,q,q,w,s,h,o,D);else switch(g===99&&Ge(T,3)===110?100:g){case 100:case 108:case 109:case 115:Ur(e,q,q,i&&br(hm(e,q,q,0,0,n,o,v,n,w=[],h),D),n,D,h,o,i?w:D);break;default:Ur(T,q,q,q,[""],D,0,o,D)}}u=d=p=0,c=y=1,v=T="",h=r;break;case 58:h=1+ia(T),p=m;default:if(c<1){if(_==123)--c;else if(_==125&&c++==0&&vT()==125)continue}switch(T+=ul(_),_*c){case 38:y=d>0?1:(T+="\f",-1);break;case 44:o[u++]=(ia(T)-1)*y,y=1;break;case 64:da()===45&&(T+=$r(qt())),g=da(),d=h=ia(v=T+=kT(Wr())),_++;break;case 45:m===45&&ia(T)==2&&(c=0)}}return s}function hm(e,t,a,i,n,s,r,o,l,u,d){for(var h=n-1,g=n===0?s:[""],p=lp(g),m=0,c=0,k=0;m<i;++m)for(var y=0,_=Os(e,h+1,h=fT(c=r[m])),v=e;y<p;++y)(v=__(c>0?g[y]+" "+_:ne(_,/&\f/g,g[y])))&&(l[k++]=v);return cl(e,t,a,n===0?rp:o,l,u,d)}function DT(e,t,a){return cl(e,t,a,g_,ul(_T()),Os(e,2,-2),0)}function gm(e,t,a,i){return cl(e,t,a,op,Os(e,0,i),Os(e,i+1,-1),i)}function mn(e,t){for(var a="",i=lp(e),n=0;n<i;n++)a+=t(e[n],n,e,t)||"";return a}function qT(e,t,a,i){switch(e.type){case pT:if(e.children.length)break;case cT:case op:return e.return=e.return||e.value;case g_:return"";case y_:return e.return=e.value+"{"+mn(e.children,i)+"}";case rp:e.value=e.props.join(",")}return ia(a=mn(e.children,i))?e.return=e.value+"{"+a+"}":""}function CT(e){var t=lp(e);return function(a,i,n,s){for(var r="",o=0;o<t;o++)r+=e[o](a,i,n,s)||"";return r}}function ST(e){return function(t){t.root||(t=t.return)&&e(t)}}var PT=function(t,a,i){for(var n=0,s=0;n=s,s=da(),n===38&&s===12&&(a[i]=1),!Ms(s);)qt();return Gs(t,bt)},AT=function(t,a){var i=-1,n=44;do switch(Ms(n)){case 0:n===38&&da()===12&&(a[i]=1),t[i]+=PT(bt-1,a,i);break;case 2:t[i]+=$r(n);break;case 4:if(n===44){t[++i]=da()===58?"&\f":"",a[i]=t[i].length;break}default:t[i]+=ul(n)}while(n=qt());return t},RT=function(t,a){return w_(AT(b_(t),a))},ym=new WeakMap,ET=function(t){if(!(t.type!=="rule"||!t.parent||t.length<1)){for(var a=t.value,i=t.parent,n=t.column===i.column&&t.line===i.line;i.type!=="rule";)if(i=i.parent,!i)return;if(!(t.props.length===1&&a.charCodeAt(0)!==58&&!ym.get(i))&&!n){ym.set(t,!0);for(var s=[],r=RT(a,s),o=i.props,l=0,u=0;l<r.length;l++)for(var d=0;d<o.length;d++,u++)t.props[u]=s[l]?r[l].replace(/&\f/g,o[d]):o[d]+" "+r[l]}}},IT=function(t){if(t.type==="decl"){var a=t.value;a.charCodeAt(0)===108&&a.charCodeAt(2)===98&&(t.return="",t.value="")}};function T_(e,t){switch(hT(e,t)){case 5103:return ie+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return ie+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return ie+e+ko+e+tt+e+e;case 6828:case 4268:return ie+e+tt+e+e;case 6165:return ie+e+tt+"flex-"+e+e;case 5187:return ie+e+ne(e,/(\w+).+(:[^]+)/,ie+"box-$1$2"+tt+"flex-$1$2")+e;case 5443:return ie+e+tt+"flex-item-"+ne(e,/flex-|-self/,"")+e;case 4675:return ie+e+tt+"flex-line-pack"+ne(e,/align-content|flex-|-self/,"")+e;case 5548:return ie+e+tt+ne(e,"shrink","negative")+e;case 5292:return ie+e+tt+ne(e,"basis","preferred-size")+e;case 6060:return ie+"box-"+ne(e,"-grow","")+ie+e+tt+ne(e,"grow","positive")+e;case 4554:return ie+ne(e,/([^-])(transform)/g,"$1"+ie+"$2")+e;case 6187:return ne(ne(ne(e,/(zoom-|grab)/,ie+"$1"),/(image-set)/,ie+"$1"),e,"")+e;case 5495:case 3959:return ne(e,/(image-set\([^]*)/,ie+"$1$`$1");case 4968:return ne(ne(e,/(.+:)(flex-)?(.*)/,ie+"box-pack:$3"+tt+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+ie+e+e;case 4095:case 3583:case 4068:case 2532:return ne(e,/(.+)-inline(.+)/,ie+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(ia(e)-1-t>6)switch(Ge(e,t+1)){case 109:if(Ge(e,t+4)!==45)break;case 102:return ne(e,/(.+:)(.+)-([^]+)/,"$1"+ie+"$2-$3$1"+ko+(Ge(e,t+3)==108?"$3":"$2-$3"))+e;case 115:return~jd(e,"stretch")?T_(ne(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(Ge(e,t+1)!==115)break;case 6444:switch(Ge(e,ia(e)-3-(~jd(e,"!important")&&10))){case 107:return ne(e,":",":"+ie)+e;case 101:return ne(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+ie+(Ge(e,14)===45?"inline-":"")+"box$3$1"+ie+"$2$3$1"+tt+"$2box$3")+e}break;case 5936:switch(Ge(e,t+11)){case 114:return ie+e+tt+ne(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return ie+e+tt+ne(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return ie+e+tt+ne(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return ie+e+tt+e+e}return e}var NT=function(t,a,i,n){if(t.length>-1&&!t.return)switch(t.type){case op:t.return=T_(t.value,t.length);break;case y_:return mn([Vn(t,{value:ne(t.value,"@","@"+ie)})],n);case rp:if(t.length)return yT(t.props,function(s){switch(gT(s,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return mn([Vn(t,{props:[ne(s,/:(read-\w+)/,":"+ko+"$1")]})],n);case"::placeholder":return mn([Vn(t,{props:[ne(s,/:(plac\w+)/,":"+ie+"input-$1")]}),Vn(t,{props:[ne(s,/:(plac\w+)/,":"+ko+"$1")]}),Vn(t,{props:[ne(s,/:(plac\w+)/,tt+"input-$1")]})],n)}return""})}},jT=[NT],FT=function(t){var a=t.key;if(a==="css"){var i=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(i,function(c){var k=c.getAttribute("data-emotion");k.indexOf(" ")!==-1&&(document.head.appendChild(c),c.setAttribute("data-s",""))})}var n=t.stylisPlugins||jT,s={},r,o=[];r=t.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+a+' "]'),function(c){for(var k=c.getAttribute("data-emotion").split(" "),y=1;y<k.length;y++)s[k[y]]=!0;o.push(c)});var l,u=[ET,IT];{var d,h=[qT,ST(function(c){d.insert(c)})],g=CT(u.concat(n,h)),p=function(k){return mn(xT(k),g)};l=function(k,y,_,v){d=_,p(k?k+"{"+y.styles+"}":y.styles),v&&(m.inserted[y.name]=!0)}}var m={key:a,sheet:new dT({key:a,container:r,nonce:t.nonce,speedy:t.speedy,prepend:t.prepend,insertionPoint:t.insertionPoint}),nonce:t.nonce,inserted:s,registered:{},insert:l};return m.sheet.hydrate(o),m},k_={exports:{}},de={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ue=typeof Symbol=="function"&&Symbol.for,up=Ue?Symbol.for("react.element"):60103,dp=Ue?Symbol.for("react.portal"):60106,pl=Ue?Symbol.for("react.fragment"):60107,fl=Ue?Symbol.for("react.strict_mode"):60108,ml=Ue?Symbol.for("react.profiler"):60114,hl=Ue?Symbol.for("react.provider"):60109,gl=Ue?Symbol.for("react.context"):60110,cp=Ue?Symbol.for("react.async_mode"):60111,yl=Ue?Symbol.for("react.concurrent_mode"):60111,_l=Ue?Symbol.for("react.forward_ref"):60112,vl=Ue?Symbol.for("react.suspense"):60113,OT=Ue?Symbol.for("react.suspense_list"):60120,bl=Ue?Symbol.for("react.memo"):60115,wl=Ue?Symbol.for("react.lazy"):60116,MT=Ue?Symbol.for("react.block"):60121,LT=Ue?Symbol.for("react.fundamental"):60117,BT=Ue?Symbol.for("react.responder"):60118,zT=Ue?Symbol.for("react.scope"):60119;function At(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case up:switch(e=e.type,e){case cp:case yl:case pl:case ml:case fl:case vl:return e;default:switch(e=e&&e.$$typeof,e){case gl:case _l:case wl:case bl:case hl:return e;default:return t}}case dp:return t}}}function x_(e){return At(e)===yl}de.AsyncMode=cp;de.ConcurrentMode=yl;de.ContextConsumer=gl;de.ContextProvider=hl;de.Element=up;de.ForwardRef=_l;de.Fragment=pl;de.Lazy=wl;de.Memo=bl;de.Portal=dp;de.Profiler=ml;de.StrictMode=fl;de.Suspense=vl;de.isAsyncMode=function(e){return x_(e)||At(e)===cp};de.isConcurrentMode=x_;de.isContextConsumer=function(e){return At(e)===gl};de.isContextProvider=function(e){return At(e)===hl};de.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===up};de.isForwardRef=function(e){return At(e)===_l};de.isFragment=function(e){return At(e)===pl};de.isLazy=function(e){return At(e)===wl};de.isMemo=function(e){return At(e)===bl};de.isPortal=function(e){return At(e)===dp};de.isProfiler=function(e){return At(e)===ml};de.isStrictMode=function(e){return At(e)===fl};de.isSuspense=function(e){return At(e)===vl};de.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===pl||e===yl||e===ml||e===fl||e===vl||e===OT||typeof e=="object"&&e!==null&&(e.$$typeof===wl||e.$$typeof===bl||e.$$typeof===hl||e.$$typeof===gl||e.$$typeof===_l||e.$$typeof===LT||e.$$typeof===BT||e.$$typeof===zT||e.$$typeof===MT)};de.typeOf=At;k_.exports=de;var WT=k_.exports,D_=WT,$T={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},UT={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},q_={};q_[D_.ForwardRef]=$T;q_[D_.Memo]=UT;var KT=!0;function VT(e,t,a){var i="";return a.split(" ").forEach(function(n){e[n]!==void 0?t.push(e[n]+";"):i+=n+" "}),i}var C_=function(t,a,i){var n=t.key+"-"+a.name;(i===!1||KT===!1)&&t.registered[n]===void 0&&(t.registered[n]=a.styles)},S_=function(t,a,i){C_(t,a,i);var n=t.key+"-"+a.name;if(t.inserted[a.name]===void 0){var s=a;do t.insert(a===s?"."+n:"",s,t.sheet,!0),s=s.next;while(s!==void 0)}};function HT(e){for(var t=0,a,i=0,n=e.length;n>=4;++i,n-=4)a=e.charCodeAt(i)&255|(e.charCodeAt(++i)&255)<<8|(e.charCodeAt(++i)&255)<<16|(e.charCodeAt(++i)&255)<<24,a=(a&65535)*1540483477+((a>>>16)*59797<<16),a^=a>>>24,t=(a&65535)*1540483477+((a>>>16)*59797<<16)^(t&65535)*1540483477+((t>>>16)*59797<<16);switch(n){case 3:t^=(e.charCodeAt(i+2)&255)<<16;case 2:t^=(e.charCodeAt(i+1)&255)<<8;case 1:t^=e.charCodeAt(i)&255,t=(t&65535)*1540483477+((t>>>16)*59797<<16)}return t^=t>>>13,t=(t&65535)*1540483477+((t>>>16)*59797<<16),((t^t>>>15)>>>0).toString(36)}var GT={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},XT=/[A-Z]|^ms/g,JT=/_EMO_([^_]+?)_([^]*?)_EMO_/g,P_=function(t){return t.charCodeAt(1)===45},_m=function(t){return t!=null&&typeof t!="boolean"},bu=h_(function(e){return P_(e)?e:e.replace(XT,"-$&").toLowerCase()}),vm=function(t,a){switch(t){case"animation":case"animationName":if(typeof a=="string")return a.replace(JT,function(i,n,s){return na={name:n,styles:s,next:na},n})}return GT[t]!==1&&!P_(t)&&typeof a=="number"&&a!==0?a+"px":a};function Ls(e,t,a){if(a==null)return"";if(a.__emotion_styles!==void 0)return a;switch(typeof a){case"boolean":return"";case"object":{if(a.anim===1)return na={name:a.name,styles:a.styles,next:na},a.name;if(a.styles!==void 0){var i=a.next;if(i!==void 0)for(;i!==void 0;)na={name:i.name,styles:i.styles,next:na},i=i.next;var n=a.styles+";";return n}return QT(e,t,a)}case"function":{if(e!==void 0){var s=na,r=a(e);return na=s,Ls(e,t,r)}break}}if(t==null)return a;var o=t[a];return o!==void 0?o:a}function QT(e,t,a){var i="";if(Array.isArray(a))for(var n=0;n<a.length;n++)i+=Ls(e,t,a[n])+";";else for(var s in a){var r=a[s];if(typeof r!="object")t!=null&&t[r]!==void 0?i+=s+"{"+t[r]+"}":_m(r)&&(i+=bu(s)+":"+vm(s,r)+";");else if(Array.isArray(r)&&typeof r[0]=="string"&&(t==null||t[r[0]]===void 0))for(var o=0;o<r.length;o++)_m(r[o])&&(i+=bu(s)+":"+vm(s,r[o])+";");else{var l=Ls(e,t,r);switch(s){case"animation":case"animationName":{i+=bu(s)+":"+l+";";break}default:i+=s+"{"+l+"}"}}}return i}var bm=/label:\s*([^\s;\n{]+)\s*(;|$)/g,na,pp=function(t,a,i){if(t.length===1&&typeof t[0]=="object"&&t[0]!==null&&t[0].styles!==void 0)return t[0];var n=!0,s="";na=void 0;var r=t[0];r==null||r.raw===void 0?(n=!1,s+=Ls(i,a,r)):s+=r[0];for(var o=1;o<t.length;o++)s+=Ls(i,a,t[o]),n&&(s+=r[o]);bm.lastIndex=0;for(var l="",u;(u=bm.exec(s))!==null;)l+="-"+u[1];var d=HT(s)+l;return{name:d,styles:s,next:na}},YT=function(t){return t()},A_=Hr["useInsertionEffect"]?Hr["useInsertionEffect"]:!1,ZT=A_||YT,wm=A_||b.useLayoutEffect,R_=b.createContext(typeof HTMLElement<"u"?FT({key:"css"}):null);R_.Provider;var E_=function(t){return b.forwardRef(function(a,i){var n=b.useContext(R_);return t(a,n,i)})},fp=b.createContext({}),ek=E_(function(e,t){var a=e.styles,i=pp([a],void 0,b.useContext(fp)),n=b.useRef();return wm(function(){var s=t.key+"-global",r=new t.sheet.constructor({key:s,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),o=!1,l=document.querySelector('style[data-emotion="'+s+" "+i.name+'"]');return t.sheet.tags.length&&(r.before=t.sheet.tags[0]),l!==null&&(o=!0,l.setAttribute("data-emotion",s),r.hydrate([l])),n.current=[r,o],function(){r.flush()}},[t]),wm(function(){var s=n.current,r=s[0],o=s[1];if(o){s[1]=!1;return}if(i.next!==void 0&&S_(t,i.next,!0),r.tags.length){var l=r.tags[r.tags.length-1].nextElementSibling;r.before=l,r.flush()}t.insert("",i,r,!1)},[t,i.name]),null});function tk(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];return pp(t)}var mp=function(){var t=tk.apply(void 0,arguments),a="animation-"+t.name;return{name:a,styles:"@keyframes "+a+"{"+t.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},ak=oT,ik=function(t){return t!=="theme"},Tm=function(t){return typeof t=="string"&&t.charCodeAt(0)>96?ak:ik},km=function(t,a,i){var n;if(a){var s=a.shouldForwardProp;n=t.__emotion_forwardProp&&s?function(r){return t.__emotion_forwardProp(r)&&s(r)}:s}return typeof n!="function"&&i&&(n=t.__emotion_forwardProp),n},nk=function(t){var a=t.cache,i=t.serialized,n=t.isStringTag;return C_(a,i,n),ZT(function(){return S_(a,i,n)}),null},sk=function e(t,a){var i=t.__emotion_real===t,n=i&&t.__emotion_base||t,s,r;a!==void 0&&(s=a.label,r=a.target);var o=km(t,a,i),l=o||Tm(n),u=!l("as");return function(){var d=arguments,h=i&&t.__emotion_styles!==void 0?t.__emotion_styles.slice(0):[];if(s!==void 0&&h.push("label:"+s+";"),d[0]==null||d[0].raw===void 0)h.push.apply(h,d);else{h.push(d[0][0]);for(var g=d.length,p=1;p<g;p++)h.push(d[p],d[0][p])}var m=E_(function(c,k,y){var _=u&&c.as||n,v="",w=[],D=c;if(c.theme==null){D={};for(var q in c)D[q]=c[q];D.theme=b.useContext(fp)}typeof c.className=="string"?v=VT(k.registered,w,c.className):c.className!=null&&(v=c.className+" ");var T=pp(h.concat(w),k.registered,D);v+=k.key+"-"+T.name,r!==void 0&&(v+=" "+r);var C=u&&o===void 0?Tm(_):l,A={};for(var S in c)u&&S==="as"||C(S)&&(A[S]=c[S]);return A.className=v,A.ref=y,b.createElement(b.Fragment,null,b.createElement(nk,{cache:k,serialized:T,isStringTag:typeof _=="string"}),b.createElement(_,A))});return m.displayName=s!==void 0?s:"Styled("+(typeof n=="string"?n:n.displayName||n.name||"Component")+")",m.defaultProps=t.defaultProps,m.__emotion_real=m,m.__emotion_base=n,m.__emotion_styles=h,m.__emotion_forwardProp=o,Object.defineProperty(m,"toString",{value:function(){return"."+r}}),m.withComponent=function(c,k){return e(c,x({},a,k,{shouldForwardProp:km(m,k,!0)})).apply(void 0,h)},m}},rk=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"],Od=sk.bind();rk.forEach(function(e){Od[e]=Od(e)});function ok(e){return e==null||Object.keys(e).length===0}function lk(e){const{styles:t,defaultTheme:a={}}=e,i=typeof t=="function"?n=>t(ok(n)?a:n):t;return f.jsx(ek,{styles:i})}/**
 * @mui/styled-engine v5.14.18
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function I_(e,t){return Od(e,t)}const uk=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))},dk=["values","unit","step"],ck=e=>{const t=Object.keys(e).map(a=>({key:a,val:e[a]}))||[];return t.sort((a,i)=>a.val-i.val),t.reduce((a,i)=>x({},a,{[i.key]:i.val}),{})};function pk(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:a="px",step:i=5}=e,n=$(e,dk),s=ck(t),r=Object.keys(s);function o(g){return`@media (min-width:${typeof t[g]=="number"?t[g]:g}${a})`}function l(g){return`@media (max-width:${(typeof t[g]=="number"?t[g]:g)-i/100}${a})`}function u(g,p){const m=r.indexOf(p);return`@media (min-width:${typeof t[g]=="number"?t[g]:g}${a}) and (max-width:${(m!==-1&&typeof t[r[m]]=="number"?t[r[m]]:p)-i/100}${a})`}function d(g){return r.indexOf(g)+1<r.length?u(g,r[r.indexOf(g)+1]):o(g)}function h(g){const p=r.indexOf(g);return p===0?o(r[1]):p===r.length-1?l(r[p]):u(g,r[r.indexOf(g)+1]).replace("@media","@media not all and")}return x({keys:r,values:s,up:o,down:l,between:u,only:d,not:h,unit:a},n)}const fk={borderRadius:4},mk=fk;function ms(e,t){return t?yt(e,t,{clone:!1}):e}const hp={xs:0,sm:600,md:900,lg:1200,xl:1536},xm={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${hp[e]}px)`};function Aa(e,t,a){const i=e.theme||{};if(Array.isArray(t)){const s=i.breakpoints||xm;return t.reduce((r,o,l)=>(r[s.up(s.keys[l])]=a(t[l]),r),{})}if(typeof t=="object"){const s=i.breakpoints||xm;return Object.keys(t).reduce((r,o)=>{if(Object.keys(s.values||hp).indexOf(o)!==-1){const l=s.up(o);r[l]=a(t[o],o)}else{const l=o;r[l]=t[l]}return r},{})}return a(t)}function hk(e={}){var t;return((t=e.keys)==null?void 0:t.reduce((i,n)=>{const s=e.up(n);return i[s]={},i},{}))||{}}function gk(e,t){return e.reduce((a,i)=>{const n=a[i];return(!n||Object.keys(n).length===0)&&delete a[i],a},t)}function Tl(e,t,a=!0){if(!t||typeof t!="string")return null;if(e&&e.vars&&a){const i=`vars.${t}`.split(".").reduce((n,s)=>n&&n[s]?n[s]:null,e);if(i!=null)return i}return t.split(".").reduce((i,n)=>i&&i[n]!=null?i[n]:null,e)}function xo(e,t,a,i=a){let n;return typeof e=="function"?n=e(a):Array.isArray(e)?n=e[a]||i:n=Tl(e,a)||i,t&&(n=t(n,i,e)),n}function oe(e){const{prop:t,cssProperty:a=e.prop,themeKey:i,transform:n}=e,s=r=>{if(r[t]==null)return null;const o=r[t],l=r.theme,u=Tl(l,i)||{};return Aa(r,o,h=>{let g=xo(u,n,h);return h===g&&typeof h=="string"&&(g=xo(u,n,`${t}${h==="default"?"":G(h)}`,h)),a===!1?g:{[a]:g}})};return s.propTypes={},s.filterProps=[t],s}function yk(e){const t={};return a=>(t[a]===void 0&&(t[a]=e(a)),t[a])}const _k={m:"margin",p:"padding"},vk={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Dm={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},bk=yk(e=>{if(e.length>2)if(Dm[e])e=Dm[e];else return[e];const[t,a]=e.split(""),i=_k[t],n=vk[a]||"";return Array.isArray(n)?n.map(s=>i+s):[i+n]}),gp=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],yp=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"];[...gp,...yp];function Xs(e,t,a,i){var n;const s=(n=Tl(e,t,!1))!=null?n:a;return typeof s=="number"?r=>typeof r=="string"?r:s*r:Array.isArray(s)?r=>typeof r=="string"?r:s[r]:typeof s=="function"?s:()=>{}}function N_(e){return Xs(e,"spacing",8)}function Js(e,t){if(typeof t=="string"||t==null)return t;const a=Math.abs(t),i=e(a);return t>=0?i:typeof i=="number"?-i:`-${i}`}function wk(e,t){return a=>e.reduce((i,n)=>(i[n]=Js(t,a),i),{})}function Tk(e,t,a,i){if(t.indexOf(a)===-1)return null;const n=bk(a),s=wk(n,i),r=e[a];return Aa(e,r,s)}function j_(e,t){const a=N_(e.theme);return Object.keys(e).map(i=>Tk(e,t,i,a)).reduce(ms,{})}function Re(e){return j_(e,gp)}Re.propTypes={};Re.filterProps=gp;function Ee(e){return j_(e,yp)}Ee.propTypes={};Ee.filterProps=yp;function kk(e=8){if(e.mui)return e;const t=N_({spacing:e}),a=(...i)=>(i.length===0?[1]:i).map(s=>{const r=t(s);return typeof r=="number"?`${r}px`:r}).join(" ");return a.mui=!0,a}function kl(...e){const t=e.reduce((i,n)=>(n.filterProps.forEach(s=>{i[s]=n}),i),{}),a=i=>Object.keys(i).reduce((n,s)=>t[s]?ms(n,t[s](i)):n,{});return a.propTypes={},a.filterProps=e.reduce((i,n)=>i.concat(n.filterProps),[]),a}function ra(e){return typeof e!="number"?e:`${e}px solid`}const xk=oe({prop:"border",themeKey:"borders",transform:ra}),Dk=oe({prop:"borderTop",themeKey:"borders",transform:ra}),qk=oe({prop:"borderRight",themeKey:"borders",transform:ra}),Ck=oe({prop:"borderBottom",themeKey:"borders",transform:ra}),Sk=oe({prop:"borderLeft",themeKey:"borders",transform:ra}),Pk=oe({prop:"borderColor",themeKey:"palette"}),Ak=oe({prop:"borderTopColor",themeKey:"palette"}),Rk=oe({prop:"borderRightColor",themeKey:"palette"}),Ek=oe({prop:"borderBottomColor",themeKey:"palette"}),Ik=oe({prop:"borderLeftColor",themeKey:"palette"}),xl=e=>{if(e.borderRadius!==void 0&&e.borderRadius!==null){const t=Xs(e.theme,"shape.borderRadius",4),a=i=>({borderRadius:Js(t,i)});return Aa(e,e.borderRadius,a)}return null};xl.propTypes={};xl.filterProps=["borderRadius"];kl(xk,Dk,qk,Ck,Sk,Pk,Ak,Rk,Ek,Ik,xl);const Dl=e=>{if(e.gap!==void 0&&e.gap!==null){const t=Xs(e.theme,"spacing",8),a=i=>({gap:Js(t,i)});return Aa(e,e.gap,a)}return null};Dl.propTypes={};Dl.filterProps=["gap"];const ql=e=>{if(e.columnGap!==void 0&&e.columnGap!==null){const t=Xs(e.theme,"spacing",8),a=i=>({columnGap:Js(t,i)});return Aa(e,e.columnGap,a)}return null};ql.propTypes={};ql.filterProps=["columnGap"];const Cl=e=>{if(e.rowGap!==void 0&&e.rowGap!==null){const t=Xs(e.theme,"spacing",8),a=i=>({rowGap:Js(t,i)});return Aa(e,e.rowGap,a)}return null};Cl.propTypes={};Cl.filterProps=["rowGap"];const Nk=oe({prop:"gridColumn"}),jk=oe({prop:"gridRow"}),Fk=oe({prop:"gridAutoFlow"}),Ok=oe({prop:"gridAutoColumns"}),Mk=oe({prop:"gridAutoRows"}),Lk=oe({prop:"gridTemplateColumns"}),Bk=oe({prop:"gridTemplateRows"}),zk=oe({prop:"gridTemplateAreas"}),Wk=oe({prop:"gridArea"});kl(Dl,ql,Cl,Nk,jk,Fk,Ok,Mk,Lk,Bk,zk,Wk);function hn(e,t){return t==="grey"?t:e}const $k=oe({prop:"color",themeKey:"palette",transform:hn}),Uk=oe({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:hn}),Kk=oe({prop:"backgroundColor",themeKey:"palette",transform:hn});kl($k,Uk,Kk);function kt(e){return e<=1&&e!==0?`${e*100}%`:e}const Vk=oe({prop:"width",transform:kt}),_p=e=>{if(e.maxWidth!==void 0&&e.maxWidth!==null){const t=a=>{var i,n;const s=((i=e.theme)==null||(i=i.breakpoints)==null||(i=i.values)==null?void 0:i[a])||hp[a];return s?((n=e.theme)==null||(n=n.breakpoints)==null?void 0:n.unit)!=="px"?{maxWidth:`${s}${e.theme.breakpoints.unit}`}:{maxWidth:s}:{maxWidth:kt(a)}};return Aa(e,e.maxWidth,t)}return null};_p.filterProps=["maxWidth"];const Hk=oe({prop:"minWidth",transform:kt}),Gk=oe({prop:"height",transform:kt}),Xk=oe({prop:"maxHeight",transform:kt}),Jk=oe({prop:"minHeight",transform:kt});oe({prop:"size",cssProperty:"width",transform:kt});oe({prop:"size",cssProperty:"height",transform:kt});const Qk=oe({prop:"boxSizing"});kl(Vk,_p,Hk,Gk,Xk,Jk,Qk);const Yk={border:{themeKey:"borders",transform:ra},borderTop:{themeKey:"borders",transform:ra},borderRight:{themeKey:"borders",transform:ra},borderBottom:{themeKey:"borders",transform:ra},borderLeft:{themeKey:"borders",transform:ra},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:xl},color:{themeKey:"palette",transform:hn},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:hn},backgroundColor:{themeKey:"palette",transform:hn},p:{style:Ee},pt:{style:Ee},pr:{style:Ee},pb:{style:Ee},pl:{style:Ee},px:{style:Ee},py:{style:Ee},padding:{style:Ee},paddingTop:{style:Ee},paddingRight:{style:Ee},paddingBottom:{style:Ee},paddingLeft:{style:Ee},paddingX:{style:Ee},paddingY:{style:Ee},paddingInline:{style:Ee},paddingInlineStart:{style:Ee},paddingInlineEnd:{style:Ee},paddingBlock:{style:Ee},paddingBlockStart:{style:Ee},paddingBlockEnd:{style:Ee},m:{style:Re},mt:{style:Re},mr:{style:Re},mb:{style:Re},ml:{style:Re},mx:{style:Re},my:{style:Re},margin:{style:Re},marginTop:{style:Re},marginRight:{style:Re},marginBottom:{style:Re},marginLeft:{style:Re},marginX:{style:Re},marginY:{style:Re},marginInline:{style:Re},marginInlineStart:{style:Re},marginInlineEnd:{style:Re},marginBlock:{style:Re},marginBlockStart:{style:Re},marginBlockEnd:{style:Re},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:Dl},rowGap:{style:Cl},columnGap:{style:ql},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:kt},maxWidth:{style:_p},minWidth:{transform:kt},height:{transform:kt},maxHeight:{transform:kt},minHeight:{transform:kt},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}},Sl=Yk;function Zk(...e){const t=e.reduce((i,n)=>i.concat(Object.keys(n)),[]),a=new Set(t);return e.every(i=>a.size===Object.keys(i).length)}function ex(e,t){return typeof e=="function"?e(t):e}function tx(){function e(a,i,n,s){const r={[a]:i,theme:n},o=s[a];if(!o)return{[a]:i};const{cssProperty:l=a,themeKey:u,transform:d,style:h}=o;if(i==null)return null;if(u==="typography"&&i==="inherit")return{[a]:i};const g=Tl(n,u)||{};return h?h(r):Aa(r,i,m=>{let c=xo(g,d,m);return m===c&&typeof m=="string"&&(c=xo(g,d,`${a}${m==="default"?"":G(m)}`,m)),l===!1?c:{[l]:c}})}function t(a){var i;const{sx:n,theme:s={}}=a||{};if(!n)return null;const r=(i=s.unstable_sxConfig)!=null?i:Sl;function o(l){let u=l;if(typeof l=="function")u=l(s);else if(typeof l!="object")return l;if(!u)return null;const d=hk(s.breakpoints),h=Object.keys(d);let g=d;return Object.keys(u).forEach(p=>{const m=ex(u[p],s);if(m!=null)if(typeof m=="object")if(r[p])g=ms(g,e(p,m,s,r));else{const c=Aa({theme:s},m,k=>({[p]:k}));Zk(c,m)?g[p]=t({sx:m,theme:s}):g=ms(g,c)}else g=ms(g,e(p,m,s,r))}),gk(h,g)}return Array.isArray(n)?n.map(o):o(n)}return t}const F_=tx();F_.filterProps=["sx"];const Pl=F_,ax=["breakpoints","palette","spacing","shape"];function vp(e={},...t){const{breakpoints:a={},palette:i={},spacing:n,shape:s={}}=e,r=$(e,ax),o=pk(a),l=kk(n);let u=yt({breakpoints:o,direction:"ltr",components:{},palette:x({mode:"light"},i),spacing:l,shape:x({},mk,s)},r);return u=t.reduce((d,h)=>yt(d,h),u),u.unstable_sxConfig=x({},Sl,r==null?void 0:r.unstable_sxConfig),u.unstable_sx=function(h){return Pl({sx:h,theme:this})},u}function ix(e){return Object.keys(e).length===0}function nx(e=null){const t=b.useContext(fp);return!t||ix(t)?e:t}const sx=vp();function Al(e=sx){return nx(e)}function rx({styles:e,themeId:t,defaultTheme:a={}}){const i=Al(a),n=typeof e=="function"?e(t&&i[t]||i):e;return f.jsx(lk,{styles:n})}const ox=["sx"],lx=e=>{var t,a;const i={systemProps:{},otherProps:{}},n=(t=e==null||(a=e.theme)==null?void 0:a.unstable_sxConfig)!=null?t:Sl;return Object.keys(e).forEach(s=>{n[s]?i.systemProps[s]=e[s]:i.otherProps[s]=e[s]}),i};function O_(e){const{sx:t}=e,a=$(e,ox),{systemProps:i,otherProps:n}=lx(a);let s;return Array.isArray(t)?s=[i,...t]:typeof t=="function"?s=(...r)=>{const o=t(...r);return ba(o)?x({},i,o):i}:s=x({},i,t),x({},n,{sx:s})}const ux=["className","component"];function dx(e={}){const{themeId:t,defaultTheme:a,defaultClassName:i="MuiBox-root",generateClassName:n}=e,s=I_("div",{shouldForwardProp:o=>o!=="theme"&&o!=="sx"&&o!=="as"})(Pl);return b.forwardRef(function(l,u){const d=Al(a),h=O_(l),{className:g,component:p="div"}=h,m=$(h,ux);return f.jsx(s,x({as:p,ref:u,className:V(g,n?n(i):i),theme:t&&d[t]||d},m))})}const cx=["variant"];function qm(e){return e.length===0}function M_(e){const{variant:t}=e,a=$(e,cx);let i=t||"";return Object.keys(a).sort().forEach(n=>{n==="color"?i+=qm(i)?e[n]:G(e[n]):i+=`${qm(i)?n:G(n)}${G(e[n].toString())}`}),i}const px=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function fx(e){return Object.keys(e).length===0}function mx(e){return typeof e=="string"&&e.charCodeAt(0)>96}const hx=(e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null,Do=e=>{const t={};return e&&e.forEach(a=>{const i=M_(a.props);t[i]=a.style}),t},gx=(e,t)=>{let a=[];return t&&t.components&&t.components[e]&&t.components[e].variants&&(a=t.components[e].variants),Do(a)},qo=(e,t,a)=>{const{ownerState:i={}}=e,n=[];return a&&a.forEach(s=>{let r=!0;Object.keys(s.props).forEach(o=>{i[o]!==s.props[o]&&e[o]!==s.props[o]&&(r=!1)}),r&&n.push(t[M_(s.props)])}),n},yx=(e,t,a,i)=>{var n;const s=a==null||(n=a.components)==null||(n=n[i])==null?void 0:n.variants;return qo(e,t,s)};function hs(e){return e!=="ownerState"&&e!=="theme"&&e!=="sx"&&e!=="as"}const _x=vp(),vx=e=>e&&e.charAt(0).toLowerCase()+e.slice(1);function Kr({defaultTheme:e,theme:t,themeId:a}){return fx(t)?e:t[a]||t}function bx(e){return e?(t,a)=>a[e]:null}const Cm=({styledArg:e,props:t,defaultTheme:a,themeId:i})=>{const n=e(x({},t,{theme:Kr(x({},t,{defaultTheme:a,themeId:i}))}));let s;if(n&&n.variants&&(s=n.variants,delete n.variants),s){const r=qo(t,Do(s),s);return[n,...r]}return n};function wx(e={}){const{themeId:t,defaultTheme:a=_x,rootShouldForwardProp:i=hs,slotShouldForwardProp:n=hs}=e,s=r=>Pl(x({},r,{theme:Kr(x({},r,{defaultTheme:a,themeId:t}))}));return s.__mui_systemSx=!0,(r,o={})=>{uk(r,w=>w.filter(D=>!(D!=null&&D.__mui_systemSx)));const{name:l,slot:u,skipVariantsResolver:d,skipSx:h,overridesResolver:g=bx(vx(u))}=o,p=$(o,px),m=d!==void 0?d:u&&u!=="Root"&&u!=="root"||!1,c=h||!1;let k,y=hs;u==="Root"||u==="root"?y=i:u?y=n:mx(r)&&(y=void 0);const _=I_(r,x({shouldForwardProp:y,label:k},p)),v=(w,...D)=>{const q=D?D.map(S=>{if(typeof S=="function"&&S.__emotion_real!==S)return I=>Cm({styledArg:S,props:I,defaultTheme:a,themeId:t});if(ba(S)){let I=S,j;return S&&S.variants&&(j=S.variants,delete I.variants,I=O=>{let E=S;return qo(O,Do(j),j).forEach(M=>{E=yt(E,M)}),E}),I}return S}):[];let T=w;if(ba(w)){let S;w&&w.variants&&(S=w.variants,delete T.variants,T=I=>{let j=w;return qo(I,Do(S),S).forEach(E=>{j=yt(j,E)}),j})}else typeof w=="function"&&w.__emotion_real!==w&&(T=S=>Cm({styledArg:w,props:S,defaultTheme:a,themeId:t}));l&&g&&q.push(S=>{const I=Kr(x({},S,{defaultTheme:a,themeId:t})),j=hx(l,I);if(j){const O={};return Object.entries(j).forEach(([E,F])=>{O[E]=typeof F=="function"?F(x({},S,{theme:I})):F}),g(S,O)}return null}),l&&!m&&q.push(S=>{const I=Kr(x({},S,{defaultTheme:a,themeId:t}));return yx(S,gx(l,I),I,l)}),c||q.push(s);const C=q.length-D.length;if(Array.isArray(w)&&C>0){const S=new Array(C).fill("");T=[...w,...S],T.raw=[...w.raw,...S]}const A=_(T,...q);return r.muiName&&(A.muiName=r.muiName),A};return _.withConfig&&(v.withConfig=_.withConfig),v}}function Tx(e){const{theme:t,name:a,props:i}=e;return!t||!t.components||!t.components[a]||!t.components[a].defaultProps?i:f_(t.components[a].defaultProps,i)}function kx({props:e,name:t,defaultTheme:a,themeId:i}){let n=Al(a);return i&&(n=n[i]||n),Tx({theme:n,name:t,props:e})}function bp(e,t=0,a=1){return Math.min(Math.max(t,e),a)}function xx(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let a=e.match(t);return a&&a[0].length===1&&(a=a.map(i=>i+i)),a?`rgb${a.length===4?"a":""}(${a.map((i,n)=>n<3?parseInt(i,16):Math.round(parseInt(i,16)/255*1e3)/1e3).join(", ")})`:""}function Ni(e){if(e.type)return e;if(e.charAt(0)==="#")return Ni(xx(e));const t=e.indexOf("("),a=e.substring(0,t);if(["rgb","rgba","hsl","hsla","color"].indexOf(a)===-1)throw new Error(si(9,e));let i=e.substring(t+1,e.length-1),n;if(a==="color"){if(i=i.split(" "),n=i.shift(),i.length===4&&i[3].charAt(0)==="/"&&(i[3]=i[3].slice(1)),["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(n)===-1)throw new Error(si(10,n))}else i=i.split(",");return i=i.map(s=>parseFloat(s)),{type:a,values:i,colorSpace:n}}function Rl(e){const{type:t,colorSpace:a}=e;let{values:i}=e;return t.indexOf("rgb")!==-1?i=i.map((n,s)=>s<3?parseInt(n,10):n):t.indexOf("hsl")!==-1&&(i[1]=`${i[1]}%`,i[2]=`${i[2]}%`),t.indexOf("color")!==-1?i=`${a} ${i.join(" ")}`:i=`${i.join(", ")}`,`${t}(${i})`}function Dx(e){e=Ni(e);const{values:t}=e,a=t[0],i=t[1]/100,n=t[2]/100,s=i*Math.min(n,1-n),r=(u,d=(u+a/30)%12)=>n-s*Math.max(Math.min(d-3,9-d,1),-1);let o="rgb";const l=[Math.round(r(0)*255),Math.round(r(8)*255),Math.round(r(4)*255)];return e.type==="hsla"&&(o+="a",l.push(t[3])),Rl({type:o,values:l})}function Sm(e){e=Ni(e);let t=e.type==="hsl"||e.type==="hsla"?Ni(Dx(e)).values:e.values;return t=t.map(a=>(e.type!=="color"&&(a/=255),a<=.03928?a/12.92:((a+.055)/1.055)**2.4)),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function qx(e,t){const a=Sm(e),i=Sm(t);return(Math.max(a,i)+.05)/(Math.min(a,i)+.05)}function ka(e,t){return e=Ni(e),t=bp(t),(e.type==="rgb"||e.type==="hsl")&&(e.type+="a"),e.type==="color"?e.values[3]=`/${t}`:e.values[3]=t,Rl(e)}function Md(e,t){if(e=Ni(e),t=bp(t),e.type.indexOf("hsl")!==-1)e.values[2]*=1-t;else if(e.type.indexOf("rgb")!==-1||e.type.indexOf("color")!==-1)for(let a=0;a<3;a+=1)e.values[a]*=1-t;return Rl(e)}function Ld(e,t){if(e=Ni(e),t=bp(t),e.type.indexOf("hsl")!==-1)e.values[2]+=(100-e.values[2])*t;else if(e.type.indexOf("rgb")!==-1)for(let a=0;a<3;a+=1)e.values[a]+=(255-e.values[a])*t;else if(e.type.indexOf("color")!==-1)for(let a=0;a<3;a+=1)e.values[a]+=(1-e.values[a])*t;return Rl(e)}function Cx(e,t){return x({toolbar:{minHeight:56,[e.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[e.up("sm")]:{minHeight:64}}},t)}const Sx={black:"#000",white:"#fff"},Bs=Sx,Px={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Ax=Px,Rx={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},Bi=Rx,Ex={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},zi=Ex,Ix={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},Hn=Ix,Nx={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},Wi=Nx,jx={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},$i=jx,Fx={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Ui=Fx,Ox=["mode","contrastThreshold","tonalOffset"],Pm={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Bs.white,default:Bs.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},wu={text:{primary:Bs.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Bs.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function Am(e,t,a,i){const n=i.light||i,s=i.dark||i*1.5;e[t]||(e.hasOwnProperty(a)?e[t]=e[a]:t==="light"?e.light=Ld(e.main,n):t==="dark"&&(e.dark=Md(e.main,s)))}function Mx(e="light"){return e==="dark"?{main:Wi[200],light:Wi[50],dark:Wi[400]}:{main:Wi[700],light:Wi[400],dark:Wi[800]}}function Lx(e="light"){return e==="dark"?{main:Bi[200],light:Bi[50],dark:Bi[400]}:{main:Bi[500],light:Bi[300],dark:Bi[700]}}function Bx(e="light"){return e==="dark"?{main:zi[500],light:zi[300],dark:zi[700]}:{main:zi[700],light:zi[400],dark:zi[800]}}function zx(e="light"){return e==="dark"?{main:$i[400],light:$i[300],dark:$i[700]}:{main:$i[700],light:$i[500],dark:$i[900]}}function Wx(e="light"){return e==="dark"?{main:Ui[400],light:Ui[300],dark:Ui[700]}:{main:Ui[800],light:Ui[500],dark:Ui[900]}}function $x(e="light"){return e==="dark"?{main:Hn[400],light:Hn[300],dark:Hn[700]}:{main:"#ed6c02",light:Hn[500],dark:Hn[900]}}function Ux(e){const{mode:t="light",contrastThreshold:a=3,tonalOffset:i=.2}=e,n=$(e,Ox),s=e.primary||Mx(t),r=e.secondary||Lx(t),o=e.error||Bx(t),l=e.info||zx(t),u=e.success||Wx(t),d=e.warning||$x(t);function h(c){return qx(c,wu.text.primary)>=a?wu.text.primary:Pm.text.primary}const g=({color:c,name:k,mainShade:y=500,lightShade:_=300,darkShade:v=700})=>{if(c=x({},c),!c.main&&c[y]&&(c.main=c[y]),!c.hasOwnProperty("main"))throw new Error(si(11,k?` (${k})`:"",y));if(typeof c.main!="string")throw new Error(si(12,k?` (${k})`:"",JSON.stringify(c.main)));return Am(c,"light",_,i),Am(c,"dark",v,i),c.contrastText||(c.contrastText=h(c.main)),c},p={dark:wu,light:Pm};return yt(x({common:x({},Bs),mode:t,primary:g({color:s,name:"primary"}),secondary:g({color:r,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:g({color:o,name:"error"}),warning:g({color:d,name:"warning"}),info:g({color:l,name:"info"}),success:g({color:u,name:"success"}),grey:Ax,contrastThreshold:a,getContrastText:h,augmentColor:g,tonalOffset:i},p[t]),n)}const Kx=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"];function Vx(e){return Math.round(e*1e5)/1e5}const Rm={textTransform:"uppercase"},Em='"Roboto", "Helvetica", "Arial", sans-serif';function Hx(e,t){const a=typeof t=="function"?t(e):t,{fontFamily:i=Em,fontSize:n=14,fontWeightLight:s=300,fontWeightRegular:r=400,fontWeightMedium:o=500,fontWeightBold:l=700,htmlFontSize:u=16,allVariants:d,pxToRem:h}=a,g=$(a,Kx),p=n/14,m=h||(y=>`${y/u*p}rem`),c=(y,_,v,w,D)=>x({fontFamily:i,fontWeight:y,fontSize:m(_),lineHeight:v},i===Em?{letterSpacing:`${Vx(w/_)}em`}:{},D,d),k={h1:c(s,96,1.167,-1.5),h2:c(s,60,1.2,-.5),h3:c(r,48,1.167,0),h4:c(r,34,1.235,.25),h5:c(r,24,1.334,0),h6:c(o,20,1.6,.15),subtitle1:c(r,16,1.75,.15),subtitle2:c(o,14,1.57,.1),body1:c(r,16,1.5,.15),body2:c(r,14,1.43,.15),button:c(o,14,1.75,.4,Rm),caption:c(r,12,1.66,.4),overline:c(r,12,2.66,1,Rm),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return yt(x({htmlFontSize:u,pxToRem:m,fontFamily:i,fontSize:n,fontWeightLight:s,fontWeightRegular:r,fontWeightMedium:o,fontWeightBold:l},k),g,{clone:!1})}const Gx=.2,Xx=.14,Jx=.12;function xe(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,${Gx})`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,${Xx})`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,${Jx})`].join(",")}const Qx=["none",xe(0,2,1,-1,0,1,1,0,0,1,3,0),xe(0,3,1,-2,0,2,2,0,0,1,5,0),xe(0,3,3,-2,0,3,4,0,0,1,8,0),xe(0,2,4,-1,0,4,5,0,0,1,10,0),xe(0,3,5,-1,0,5,8,0,0,1,14,0),xe(0,3,5,-1,0,6,10,0,0,1,18,0),xe(0,4,5,-2,0,7,10,1,0,2,16,1),xe(0,5,5,-3,0,8,10,1,0,3,14,2),xe(0,5,6,-3,0,9,12,1,0,3,16,2),xe(0,6,6,-3,0,10,14,1,0,4,18,3),xe(0,6,7,-4,0,11,15,1,0,4,20,3),xe(0,7,8,-4,0,12,17,2,0,5,22,4),xe(0,7,8,-4,0,13,19,2,0,5,24,4),xe(0,7,9,-4,0,14,21,2,0,5,26,4),xe(0,8,9,-5,0,15,22,2,0,6,28,5),xe(0,8,10,-5,0,16,24,2,0,6,30,5),xe(0,8,11,-5,0,17,26,2,0,6,32,5),xe(0,9,11,-5,0,18,28,2,0,7,34,6),xe(0,9,12,-6,0,19,29,2,0,7,36,6),xe(0,10,13,-6,0,20,31,3,0,8,38,7),xe(0,10,13,-6,0,21,33,3,0,8,40,7),xe(0,10,14,-6,0,22,35,3,0,8,42,7),xe(0,11,14,-7,0,23,36,3,0,9,44,8),xe(0,11,15,-7,0,24,38,3,0,9,46,8)],Yx=Qx,Zx=["duration","easing","delay"],eD={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},tD={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Im(e){return`${Math.round(e)}ms`}function aD(e){if(!e)return 0;const t=e/36;return Math.round((4+15*t**.25+t/5)*10)}function iD(e){const t=x({},eD,e.easing),a=x({},tD,e.duration);return x({getAutoHeightDuration:aD,create:(n=["all"],s={})=>{const{duration:r=a.standard,easing:o=t.easeInOut,delay:l=0}=s;return $(s,Zx),(Array.isArray(n)?n:[n]).map(u=>`${u} ${typeof r=="string"?r:Im(r)} ${o} ${typeof l=="string"?l:Im(l)}`).join(",")}},e,{easing:t,duration:a})}const nD={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},sD=nD,rD=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];function L_(e={},...t){const{mixins:a={},palette:i={},transitions:n={},typography:s={}}=e,r=$(e,rD);if(e.vars)throw new Error(si(18));const o=Ux(i),l=vp(e);let u=yt(l,{mixins:Cx(l.breakpoints,a),palette:o,shadows:Yx.slice(),typography:Hx(o,s),transitions:iD(n),zIndex:x({},sD)});return u=yt(u,r),u=t.reduce((d,h)=>yt(d,h),u),u.unstable_sxConfig=x({},Sl,r==null?void 0:r.unstable_sxConfig),u.unstable_sx=function(h){return Pl({sx:h,theme:this})},u}const oD=L_(),El=oD,Qs="$$material";function he({props:e,name:t}){return kx({props:e,name:t,defaultTheme:El,themeId:Qs})}const Rt=e=>hs(e)&&e!=="classes",lD=hs,uD=wx({themeId:Qs,defaultTheme:El,rootShouldForwardProp:Rt}),W=uD;function dD(e){return fe("MuiSvgIcon",e)}re("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const cD=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],pD=e=>{const{color:t,fontSize:a,classes:i}=e,n={root:["root",t!=="inherit"&&`color${G(t)}`,`fontSize${G(a)}`]};return me(n,dD,i)},fD=W("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.color!=="inherit"&&t[`color${G(a.color)}`],t[`fontSize${G(a.fontSize)}`]]}})(({theme:e,ownerState:t})=>{var a,i,n,s,r,o,l,u,d,h,g,p,m;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:(a=e.transitions)==null||(i=a.create)==null?void 0:i.call(a,"fill",{duration:(n=e.transitions)==null||(n=n.duration)==null?void 0:n.shorter}),fontSize:{inherit:"inherit",small:((s=e.typography)==null||(r=s.pxToRem)==null?void 0:r.call(s,20))||"1.25rem",medium:((o=e.typography)==null||(l=o.pxToRem)==null?void 0:l.call(o,24))||"1.5rem",large:((u=e.typography)==null||(d=u.pxToRem)==null?void 0:d.call(u,35))||"2.1875rem"}[t.fontSize],color:(h=(g=(e.vars||e).palette)==null||(g=g[t.color])==null?void 0:g.main)!=null?h:{action:(p=(e.vars||e).palette)==null||(p=p.action)==null?void 0:p.active,disabled:(m=(e.vars||e).palette)==null||(m=m.action)==null?void 0:m.disabled,inherit:void 0}[t.color]}}),B_=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiSvgIcon"}),{children:n,className:s,color:r="inherit",component:o="svg",fontSize:l="medium",htmlColor:u,inheritViewBox:d=!1,titleAccess:h,viewBox:g="0 0 24 24"}=i,p=$(i,cD),m=b.isValidElement(n)&&n.type==="svg",c=x({},i,{color:r,component:o,fontSize:l,instanceFontSize:t.fontSize,inheritViewBox:d,viewBox:g,hasSvgAsChild:m}),k={};d||(k.viewBox=g);const y=pD(c);return f.jsxs(fD,x({as:o,className:V(y.root,s),focusable:"false",color:u,"aria-hidden":h?void 0:!0,role:h?"img":void 0,ref:a},k,p,m&&n.props,{ownerState:c,children:[m?n.props.children:n,h?f.jsx("title",{children:h}):null]}))});B_.muiName="SvgIcon";const Nm=B_;function Oi(e,t){function a(i,n){return f.jsx(Nm,x({"data-testid":`${t}Icon`,ref:n},i,{children:e}))}return a.muiName=Nm.muiName,b.memo(b.forwardRef(a))}const mD={configure:e=>{sp.configure(e)}},hD=Object.freeze(Object.defineProperty({__proto__:null,capitalize:G,createChainedFunction:Ed,createSvgIcon:Oi,debounce:ol,deprecatedPropType:V1,isMuiElement:zr,ownerDocument:_t,ownerWindow:ca,requirePropFactory:H1,setRef:To,unstable_ClassNameGenerator:mD,unstable_useEnhancedEffect:Pa,unstable_useId:np,unsupportedProp:J1,useControlled:Id,useEventCallback:xi,useForkRef:Qe,useIsFocusVisible:c_},Symbol.toStringTag,{value:"Module"})),gD=fb(hD);var jm;function wp(){return jm||(jm=1,function(e){"use client";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.createSvgIcon}});var t=gD}(_u)),_u}var yD=tp;Object.defineProperty(ep,"__esModule",{value:!0});var z_=ep.default=void 0,_D=yD(wp()),vD=f,bD=(0,_D.default)((0,vD.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),"Search");z_=ep.default=bD;var Tp={},wD=tp;Object.defineProperty(Tp,"__esModule",{value:!0});var W_=Tp.default=void 0,TD=wD(wp()),kD=f,xD=(0,TD.default)((0,kD.jsx)("path",{d:"M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z"}),"KeyboardReturn");W_=Tp.default=xD;function Ra(e){return Array.isArray?Array.isArray(e):K_(e)==="[object Array]"}const DD=1/0;function qD(e){if(typeof e=="string")return e;let t=e+"";return t=="0"&&1/e==-DD?"-0":t}function CD(e){return e==null?"":qD(e)}function oa(e){return typeof e=="string"}function $_(e){return typeof e=="number"}function SD(e){return e===!0||e===!1||PD(e)&&K_(e)=="[object Boolean]"}function U_(e){return typeof e=="object"}function PD(e){return U_(e)&&e!==null}function Tt(e){return e!=null}function Tu(e){return!e.trim().length}function K_(e){return e==null?e===void 0?"[object Undefined]":"[object Null]":Object.prototype.toString.call(e)}const AD="Incorrect 'index' type",RD=e=>`Invalid value for key ${e}`,ED=e=>`Pattern length exceeds max of ${e}.`,ID=e=>`Missing ${e} property in key`,ND=e=>`Property 'weight' in key '${e}' must be a positive integer`,Fm=Object.prototype.hasOwnProperty;class jD{constructor(t){this._keys=[],this._keyMap={};let a=0;t.forEach(i=>{let n=V_(i);a+=n.weight,this._keys.push(n),this._keyMap[n.id]=n,a+=n.weight}),this._keys.forEach(i=>{i.weight/=a})}get(t){return this._keyMap[t]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function V_(e){let t=null,a=null,i=null,n=1,s=null;if(oa(e)||Ra(e))i=e,t=Om(e),a=Bd(e);else{if(!Fm.call(e,"name"))throw new Error(ID("name"));const r=e.name;if(i=r,Fm.call(e,"weight")&&(n=e.weight,n<=0))throw new Error(ND(r));t=Om(r),a=Bd(r),s=e.getFn}return{path:t,id:a,weight:n,src:i,getFn:s}}function Om(e){return Ra(e)?e:e.split(".")}function Bd(e){return Ra(e)?e.join("."):e}function FD(e,t){let a=[],i=!1;const n=(s,r,o)=>{if(Tt(s))if(!r[o])a.push(s);else{let l=r[o];const u=s[l];if(!Tt(u))return;if(o===r.length-1&&(oa(u)||$_(u)||SD(u)))a.push(CD(u));else if(Ra(u)){i=!0;for(let d=0,h=u.length;d<h;d+=1)n(u[d],r,o+1)}else r.length&&n(u,r,o+1)}};return n(e,oa(t)?t.split("."):t,0),i?a:a[0]}const OD={includeMatches:!1,findAllMatches:!1,minMatchCharLength:1},MD={isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(e,t)=>e.score===t.score?e.idx<t.idx?-1:1:e.score<t.score?-1:1},LD={location:0,threshold:.6,distance:100},BD={useExtendedSearch:!1,getFn:FD,ignoreLocation:!1,ignoreFieldNorm:!1,fieldNormWeight:1};var H={...MD,...OD,...LD,...BD};const zD=/[^ ]+/g;function WD(e=1,t=3){const a=new Map,i=Math.pow(10,t);return{get(n){const s=n.match(zD).length;if(a.has(s))return a.get(s);const r=1/Math.pow(s,.5*e),o=parseFloat(Math.round(r*i)/i);return a.set(s,o),o},clear(){a.clear()}}}class kp{constructor({getFn:t=H.getFn,fieldNormWeight:a=H.fieldNormWeight}={}){this.norm=WD(a,3),this.getFn=t,this.isCreated=!1,this.setIndexRecords()}setSources(t=[]){this.docs=t}setIndexRecords(t=[]){this.records=t}setKeys(t=[]){this.keys=t,this._keysMap={},t.forEach((a,i)=>{this._keysMap[a.id]=i})}create(){this.isCreated||!this.docs.length||(this.isCreated=!0,oa(this.docs[0])?this.docs.forEach((t,a)=>{this._addString(t,a)}):this.docs.forEach((t,a)=>{this._addObject(t,a)}),this.norm.clear())}add(t){const a=this.size();oa(t)?this._addString(t,a):this._addObject(t,a)}removeAt(t){this.records.splice(t,1);for(let a=t,i=this.size();a<i;a+=1)this.records[a].i-=1}getValueForItemAtKeyId(t,a){return t[this._keysMap[a]]}size(){return this.records.length}_addString(t,a){if(!Tt(t)||Tu(t))return;let i={v:t,i:a,n:this.norm.get(t)};this.records.push(i)}_addObject(t,a){let i={i:a,$:{}};this.keys.forEach((n,s)=>{let r=n.getFn?n.getFn(t):this.getFn(t,n.path);if(Tt(r)){if(Ra(r)){let o=[];const l=[{nestedArrIndex:-1,value:r}];for(;l.length;){const{nestedArrIndex:u,value:d}=l.pop();if(Tt(d))if(oa(d)&&!Tu(d)){let h={v:d,i:u,n:this.norm.get(d)};o.push(h)}else Ra(d)&&d.forEach((h,g)=>{l.push({nestedArrIndex:g,value:h})})}i.$[s]=o}else if(oa(r)&&!Tu(r)){let o={v:r,n:this.norm.get(r)};i.$[s]=o}}}),this.records.push(i)}toJSON(){return{keys:this.keys,records:this.records}}}function H_(e,t,{getFn:a=H.getFn,fieldNormWeight:i=H.fieldNormWeight}={}){const n=new kp({getFn:a,fieldNormWeight:i});return n.setKeys(e.map(V_)),n.setSources(t),n.create(),n}function $D(e,{getFn:t=H.getFn,fieldNormWeight:a=H.fieldNormWeight}={}){const{keys:i,records:n}=e,s=new kp({getFn:t,fieldNormWeight:a});return s.setKeys(i),s.setIndexRecords(n),s}function wr(e,{errors:t=0,currentLocation:a=0,expectedLocation:i=0,distance:n=H.distance,ignoreLocation:s=H.ignoreLocation}={}){const r=t/e.length;if(s)return r;const o=Math.abs(i-a);return n?r+o/n:o?1:r}function UD(e=[],t=H.minMatchCharLength){let a=[],i=-1,n=-1,s=0;for(let r=e.length;s<r;s+=1){let o=e[s];o&&i===-1?i=s:!o&&i!==-1&&(n=s-1,n-i+1>=t&&a.push([i,n]),i=-1)}return e[s-1]&&s-i>=t&&a.push([i,s-1]),a}const _i=32;function KD(e,t,a,{location:i=H.location,distance:n=H.distance,threshold:s=H.threshold,findAllMatches:r=H.findAllMatches,minMatchCharLength:o=H.minMatchCharLength,includeMatches:l=H.includeMatches,ignoreLocation:u=H.ignoreLocation}={}){if(t.length>_i)throw new Error(ED(_i));const d=t.length,h=e.length,g=Math.max(0,Math.min(i,h));let p=s,m=g;const c=o>1||l,k=c?Array(h):[];let y;for(;(y=e.indexOf(t,m))>-1;){let T=wr(t,{currentLocation:y,expectedLocation:g,distance:n,ignoreLocation:u});if(p=Math.min(T,p),m=y+d,c){let C=0;for(;C<d;)k[y+C]=1,C+=1}}m=-1;let _=[],v=1,w=d+h;const D=1<<d-1;for(let T=0;T<d;T+=1){let C=0,A=w;for(;C<A;)wr(t,{errors:T,currentLocation:g+A,expectedLocation:g,distance:n,ignoreLocation:u})<=p?C=A:w=A,A=Math.floor((w-C)/2+C);w=A;let S=Math.max(1,g-A+1),I=r?h:Math.min(g+A,h)+d,j=Array(I+2);j[I+1]=(1<<T)-1;for(let E=I;E>=S;E-=1){let F=E-1,M=a[e.charAt(F)];if(c&&(k[F]=+!!M),j[E]=(j[E+1]<<1|1)&M,T&&(j[E]|=(_[E+1]|_[E])<<1|1|_[E+1]),j[E]&D&&(v=wr(t,{errors:T,currentLocation:F,expectedLocation:g,distance:n,ignoreLocation:u}),v<=p)){if(p=v,m=F,m<=g)break;S=Math.max(1,2*g-m)}}if(wr(t,{errors:T+1,currentLocation:g,expectedLocation:g,distance:n,ignoreLocation:u})>p)break;_=j}const q={isMatch:m>=0,score:Math.max(.001,v)};if(c){const T=UD(k,o);T.length?l&&(q.indices=T):q.isMatch=!1}return q}function VD(e){let t={};for(let a=0,i=e.length;a<i;a+=1){const n=e.charAt(a);t[n]=(t[n]||0)|1<<i-a-1}return t}class G_{constructor(t,{location:a=H.location,threshold:i=H.threshold,distance:n=H.distance,includeMatches:s=H.includeMatches,findAllMatches:r=H.findAllMatches,minMatchCharLength:o=H.minMatchCharLength,isCaseSensitive:l=H.isCaseSensitive,ignoreLocation:u=H.ignoreLocation}={}){if(this.options={location:a,threshold:i,distance:n,includeMatches:s,findAllMatches:r,minMatchCharLength:o,isCaseSensitive:l,ignoreLocation:u},this.pattern=l?t:t.toLowerCase(),this.chunks=[],!this.pattern.length)return;const d=(g,p)=>{this.chunks.push({pattern:g,alphabet:VD(g),startIndex:p})},h=this.pattern.length;if(h>_i){let g=0;const p=h%_i,m=h-p;for(;g<m;)d(this.pattern.substr(g,_i),g),g+=_i;if(p){const c=h-_i;d(this.pattern.substr(c),c)}}else d(this.pattern,0)}searchIn(t){const{isCaseSensitive:a,includeMatches:i}=this.options;if(a||(t=t.toLowerCase()),this.pattern===t){let m={isMatch:!0,score:0};return i&&(m.indices=[[0,t.length-1]]),m}const{location:n,distance:s,threshold:r,findAllMatches:o,minMatchCharLength:l,ignoreLocation:u}=this.options;let d=[],h=0,g=!1;this.chunks.forEach(({pattern:m,alphabet:c,startIndex:k})=>{const{isMatch:y,score:_,indices:v}=KD(t,m,c,{location:n+k,distance:s,threshold:r,findAllMatches:o,minMatchCharLength:l,includeMatches:i,ignoreLocation:u});y&&(g=!0),h+=_,y&&v&&(d=[...d,...v])});let p={isMatch:g,score:g?h/this.chunks.length:1};return g&&i&&(p.indices=d),p}}class di{constructor(t){this.pattern=t}static isMultiMatch(t){return Mm(t,this.multiRegex)}static isSingleMatch(t){return Mm(t,this.singleRegex)}search(){}}function Mm(e,t){const a=e.match(t);return a?a[1]:null}class HD extends di{constructor(t){super(t)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(t){const a=t===this.pattern;return{isMatch:a,score:a?0:1,indices:[0,this.pattern.length-1]}}}class GD extends di{constructor(t){super(t)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(t){const i=t.indexOf(this.pattern)===-1;return{isMatch:i,score:i?0:1,indices:[0,t.length-1]}}}class XD extends di{constructor(t){super(t)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(t){const a=t.startsWith(this.pattern);return{isMatch:a,score:a?0:1,indices:[0,this.pattern.length-1]}}}class JD extends di{constructor(t){super(t)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(t){const a=!t.startsWith(this.pattern);return{isMatch:a,score:a?0:1,indices:[0,t.length-1]}}}class QD extends di{constructor(t){super(t)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(t){const a=t.endsWith(this.pattern);return{isMatch:a,score:a?0:1,indices:[t.length-this.pattern.length,t.length-1]}}}class YD extends di{constructor(t){super(t)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(t){const a=!t.endsWith(this.pattern);return{isMatch:a,score:a?0:1,indices:[0,t.length-1]}}}class X_ extends di{constructor(t,{location:a=H.location,threshold:i=H.threshold,distance:n=H.distance,includeMatches:s=H.includeMatches,findAllMatches:r=H.findAllMatches,minMatchCharLength:o=H.minMatchCharLength,isCaseSensitive:l=H.isCaseSensitive,ignoreLocation:u=H.ignoreLocation}={}){super(t),this._bitapSearch=new G_(t,{location:a,threshold:i,distance:n,includeMatches:s,findAllMatches:r,minMatchCharLength:o,isCaseSensitive:l,ignoreLocation:u})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(t){return this._bitapSearch.searchIn(t)}}class J_ extends di{constructor(t){super(t)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(t){let a=0,i;const n=[],s=this.pattern.length;for(;(i=t.indexOf(this.pattern,a))>-1;)a=i+s,n.push([i,a-1]);const r=!!n.length;return{isMatch:r,score:r?0:1,indices:n}}}const zd=[HD,J_,XD,JD,YD,QD,GD,X_],Lm=zd.length,ZD=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,eq="|";function tq(e,t={}){return e.split(eq).map(a=>{let i=a.trim().split(ZD).filter(s=>s&&!!s.trim()),n=[];for(let s=0,r=i.length;s<r;s+=1){const o=i[s];let l=!1,u=-1;for(;!l&&++u<Lm;){const d=zd[u];let h=d.isMultiMatch(o);h&&(n.push(new d(h,t)),l=!0)}if(!l)for(u=-1;++u<Lm;){const d=zd[u];let h=d.isSingleMatch(o);if(h){n.push(new d(h,t));break}}}return n})}const aq=new Set([X_.type,J_.type]);class iq{constructor(t,{isCaseSensitive:a=H.isCaseSensitive,includeMatches:i=H.includeMatches,minMatchCharLength:n=H.minMatchCharLength,ignoreLocation:s=H.ignoreLocation,findAllMatches:r=H.findAllMatches,location:o=H.location,threshold:l=H.threshold,distance:u=H.distance}={}){this.query=null,this.options={isCaseSensitive:a,includeMatches:i,minMatchCharLength:n,findAllMatches:r,ignoreLocation:s,location:o,threshold:l,distance:u},this.pattern=a?t:t.toLowerCase(),this.query=tq(this.pattern,this.options)}static condition(t,a){return a.useExtendedSearch}searchIn(t){const a=this.query;if(!a)return{isMatch:!1,score:1};const{includeMatches:i,isCaseSensitive:n}=this.options;t=n?t:t.toLowerCase();let s=0,r=[],o=0;for(let l=0,u=a.length;l<u;l+=1){const d=a[l];r.length=0,s=0;for(let h=0,g=d.length;h<g;h+=1){const p=d[h],{isMatch:m,indices:c,score:k}=p.search(t);if(m){if(s+=1,o+=k,i){const y=p.constructor.type;aq.has(y)?r=[...r,...c]:r.push(c)}}else{o=0,s=0,r.length=0;break}}if(s){let h={isMatch:!0,score:o/s};return i&&(h.indices=r),h}}return{isMatch:!1,score:1}}}const Wd=[];function nq(...e){Wd.push(...e)}function $d(e,t){for(let a=0,i=Wd.length;a<i;a+=1){let n=Wd[a];if(n.condition(e,t))return new n(e,t)}return new G_(e,t)}const Co={AND:"$and",OR:"$or"},Ud={PATH:"$path",PATTERN:"$val"},Kd=e=>!!(e[Co.AND]||e[Co.OR]),sq=e=>!!e[Ud.PATH],rq=e=>!Ra(e)&&U_(e)&&!Kd(e),Bm=e=>({[Co.AND]:Object.keys(e).map(t=>({[t]:e[t]}))});function Q_(e,t,{auto:a=!0}={}){const i=n=>{let s=Object.keys(n);const r=sq(n);if(!r&&s.length>1&&!Kd(n))return i(Bm(n));if(rq(n)){const l=r?n[Ud.PATH]:s[0],u=r?n[Ud.PATTERN]:n[l];if(!oa(u))throw new Error(RD(l));const d={keyId:Bd(l),pattern:u};return a&&(d.searcher=$d(u,t)),d}let o={children:[],operator:s[0]};return s.forEach(l=>{const u=n[l];Ra(u)&&u.forEach(d=>{o.children.push(i(d))})}),o};return Kd(e)||(e=Bm(e)),i(e)}function oq(e,{ignoreFieldNorm:t=H.ignoreFieldNorm}){e.forEach(a=>{let i=1;a.matches.forEach(({key:n,norm:s,score:r})=>{const o=n?n.weight:null;i*=Math.pow(r===0&&o?Number.EPSILON:r,(o||1)*(t?1:s))}),a.score=i})}function lq(e,t){const a=e.matches;t.matches=[],Tt(a)&&a.forEach(i=>{if(!Tt(i.indices)||!i.indices.length)return;const{indices:n,value:s}=i;let r={indices:n,value:s};i.key&&(r.key=i.key.src),i.idx>-1&&(r.refIndex=i.idx),t.matches.push(r)})}function uq(e,t){t.score=e.score}function dq(e,t,{includeMatches:a=H.includeMatches,includeScore:i=H.includeScore}={}){const n=[];return a&&n.push(lq),i&&n.push(uq),e.map(s=>{const{idx:r}=s,o={item:t[r],refIndex:r};return n.length&&n.forEach(l=>{l(s,o)}),o})}class Nn{constructor(t,a={},i){this.options={...H,...a},this.options.useExtendedSearch,this._keyStore=new jD(this.options.keys),this.setCollection(t,i)}setCollection(t,a){if(this._docs=t,a&&!(a instanceof kp))throw new Error(AD);this._myIndex=a||H_(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}add(t){Tt(t)&&(this._docs.push(t),this._myIndex.add(t))}remove(t=()=>!1){const a=[];for(let i=0,n=this._docs.length;i<n;i+=1){const s=this._docs[i];t(s,i)&&(this.removeAt(i),i-=1,n-=1,a.push(s))}return a}removeAt(t){this._docs.splice(t,1),this._myIndex.removeAt(t)}getIndex(){return this._myIndex}search(t,{limit:a=-1}={}){const{includeMatches:i,includeScore:n,shouldSort:s,sortFn:r,ignoreFieldNorm:o}=this.options;let l=oa(t)?oa(this._docs[0])?this._searchStringList(t):this._searchObjectList(t):this._searchLogical(t);return oq(l,{ignoreFieldNorm:o}),s&&l.sort(r),$_(a)&&a>-1&&(l=l.slice(0,a)),dq(l,this._docs,{includeMatches:i,includeScore:n})}_searchStringList(t){const a=$d(t,this.options),{records:i}=this._myIndex,n=[];return i.forEach(({v:s,i:r,n:o})=>{if(!Tt(s))return;const{isMatch:l,score:u,indices:d}=a.searchIn(s);l&&n.push({item:s,idx:r,matches:[{score:u,value:s,norm:o,indices:d}]})}),n}_searchLogical(t){const a=Q_(t,this.options),i=(o,l,u)=>{if(!o.children){const{keyId:h,searcher:g}=o,p=this._findMatches({key:this._keyStore.get(h),value:this._myIndex.getValueForItemAtKeyId(l,h),searcher:g});return p&&p.length?[{idx:u,item:l,matches:p}]:[]}const d=[];for(let h=0,g=o.children.length;h<g;h+=1){const p=o.children[h],m=i(p,l,u);if(m.length)d.push(...m);else if(o.operator===Co.AND)return[]}return d},n=this._myIndex.records,s={},r=[];return n.forEach(({$:o,i:l})=>{if(Tt(o)){let u=i(a,o,l);u.length&&(s[l]||(s[l]={idx:l,item:o,matches:[]},r.push(s[l])),u.forEach(({matches:d})=>{s[l].matches.push(...d)}))}}),r}_searchObjectList(t){const a=$d(t,this.options),{keys:i,records:n}=this._myIndex,s=[];return n.forEach(({$:r,i:o})=>{if(!Tt(r))return;let l=[];i.forEach((u,d)=>{l.push(...this._findMatches({key:u,value:r[d],searcher:a}))}),l.length&&s.push({idx:o,item:r,matches:l})}),s}_findMatches({key:t,value:a,searcher:i}){if(!Tt(a))return[];let n=[];if(Ra(a))a.forEach(({v:s,i:r,n:o})=>{if(!Tt(s))return;const{isMatch:l,score:u,indices:d}=i.searchIn(s);l&&n.push({score:u,key:t,value:s,idx:r,norm:o,indices:d})});else{const{v:s,n:r}=a,{isMatch:o,score:l,indices:u}=i.searchIn(s);o&&n.push({score:l,key:t,value:s,norm:r,indices:u})}return n}}Nn.version="6.6.2";Nn.createIndex=H_;Nn.parseIndex=$D;Nn.config=H;Nn.parseQuery=Q_;nq(iq);const Y_=b.createContext(),Ys=()=>b.useContext(Y_),cq=({children:e})=>{const[t,a]=b.useState(""),[i,n]=b.useState(),[s,r]=b.useState(!1);return f.jsx(Y_.Provider,{value:{searchQuery:t,setSearchQuery:a,searchResults:i,setSearchResults:n,isSearchSubmitted:s,setIsSearchSubmitted:r},children:e})};function Z_(e,t){const a=JSON.parse(e);let i=[];function n(o,l){if(typeof l=="string"&&l.toLowerCase().includes(t.toLowerCase()))return l.trim();if(typeof l=="object")for(const u in l){const d=n(u,l[u]);u>0&&typeof d=="string"?i.push(o+": "+l[(u-"1").toString()]+" "+d):u==0&&l.length>1&&typeof d=="string"?i.push(o+": "+d+" "+l[1]):typeof d=="string"&&i.push(u+": "+d)}}for(const o in a)n(o,a[o]);const s=i[0];let r=[];try{const o=s.toLowerCase(),l=t.toLowerCase(),u=o.indexOf(l);if(u!==-1){const d=s.substring(0,u),h=s.substring(u,u+l.length),g=s.substring(u+l.length);r=[d,h,g]}}catch{r=[null,null,null]}return r}const pq=fa.plugins;let zm=["name","metadata.description","entry_point_prefix","metadata.author"];function fq(e){const t=[],a=JSON.parse(JSON.stringify(e));return Object.entries(a).forEach(([n,s])=>{Object.entries(s.entry_points).forEach(([r,o])=>{for(const l in o){let u=["entry_points",r,l];s.entry_points[r][l]=JSON.stringify(s.entry_points[r][l]),zm.push(u)}}),t.push(s)}),new Nn(t,{keys:zm,includeScore:!0,ignoreLocation:!0,threshold:.1,includeMatches:!0})}const mq=fq(pq);function hq(){const{searchQuery:e,setSearchQuery:t,setSearchResults:a,isSearchSubmitted:i,setIsSearchSubmitted:n}=Ys(),s=l=>{t(l),document.querySelector(".suggestions-list").style.display="block",document.querySelector(".dropdown-search").style.display="block",(l==""||i==!0)&&(n(!1),document.querySelector(".dropdown-search").style.display="none");const u=document.querySelector(".enter-symbol");u&&(u.style.opacity=l?"1":"0")};let r=mq.search(e);const o=l=>{l.preventDefault(),e&&(a(r),n(!0),document.querySelector(".suggestions-list").style.display="none",document.querySelector(".dropdown-search").style.display="none")};return f.jsx(f.Fragment,{children:f.jsxs("div",{className:"search",children:[f.jsxs("form",{className:"search-form",children:[f.jsx("button",{style:{fontSize:"20px",minWidth:"90px",backgroundColor:"white",border:"1px solid #ccc",borderRadius:"4px"},onClick:l=>{o(l)},children:f.jsx(z_,{})}),f.jsxs("div",{className:"input-container",children:[f.jsx("input",{type:"text",placeholder:"Search for plugins",value:e,label:"search",onChange:l=>s(l.target.value)}),f.jsx(W_,{className:"enter-symbol"})]})]}),f.jsxs("ul",{className:"suggestions-list",children:[r.slice(0,3).map(l=>f.jsxs(f.Fragment,{children:[f.jsx(Ii,{to:`/${l.item.name}`,children:f.jsxs("h3",{className:"suggestion-item",children:[l.item.name," "]},l.item.name)}),f.jsx("ul",{children:l.matches.filter(u=>typeof u.key=="object").slice(0,1).map(u=>f.jsxs(f.Fragment,{children:[f.jsx(Ii,{to:`/${l.item.name}#${u.key[1]}.${u.key[2]}`,children:f.jsxs("li",{className:"suggestion-item",children:[u.key[2]," "]},u.key)}),f.jsx(ev,{match_value:u.value})]}))})]})),f.jsx("button",{className:"dropdown-search",onClick:l=>{o(l)},children:" Search"})]})]})})}function gq(){const{searchResults:e,searchQuery:t}=Ys();return f.jsxs(f.Fragment,{children:[f.jsxs("h2",{children:["Showing ",e.length," pages matching the search query."]}),e.length===0&&f.jsx("div",{children:f.jsxs("h3",{className:"submenu-entry",style:{textAlign:"center",color:"black"},children:["Can't find what you're looking for?",f.jsx("br",{}),"Join the AiiDA community on Discourse and request a plugin ",f.jsx("a",{href:"https://aiida.discourse.group/new-topic?title=Request%20for%20Plugin...&category=community/plugin-requests",target:"_blank",children:"here."})]})}),e.map(a=>f.jsx(f.Fragment,{children:f.jsxs("div",{className:"submenu-entry",children:[f.jsx(Ii,{to:`/${a.item.name}`,children:f.jsx("h3",{className:"suggestion-item",children:a.item.name},a.item.name)}),f.jsx("ul",{children:a.matches.filter(i=>typeof i.key=="object").map(i=>f.jsx(f.Fragment,{children:Z_(i.value,t)[0]!=null&&f.jsxs(f.Fragment,{children:[f.jsx(Ii,{to:`/${a.item.name}#${i.key[1]}.${i.key[2]}`,children:f.jsx("li",{className:"suggestion-item",children:i.key[2]},i.key)}),f.jsx(ev,{match_value:i.value})]})}))})]})}))]})}function ev({match_value:e}){const{searchQuery:t}=Ys(),[a,i,n]=Z_(e,t);return f.jsx(f.Fragment,{children:a!=null&&f.jsxs("p",{children:[a,f.jsx("span",{style:{backgroundColor:"yellow"},children:i}),n,"..."]})})}function jn(){const e=Al(El);return e[Qs]||e}const yq=e=>{let t;return e<1?t=5.11916*e**2:t=4.5*Math.log(e+1)+2,(t/100).toFixed(2)},Wm=yq,_q=L_(),vq=dx({themeId:Qs,defaultTheme:_q,defaultClassName:"MuiBox-root",generateClassName:sp.generate}),bq=vq;function Zs({props:e,states:t,muiFormControl:a}){return t.reduce((i,n)=>(i[n]=e[n],a&&typeof e[n]>"u"&&(i[n]=a[n]),i),{})}const wq=b.createContext(void 0),xp=wq;function er(){return b.useContext(xp)}function Tq(e){return fe("MuiFormLabel",e)}const kq=re("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),gs=kq,xq=["children","className","color","component","disabled","error","filled","focused","required"],Dq=e=>{const{classes:t,color:a,focused:i,disabled:n,error:s,filled:r,required:o}=e,l={root:["root",`color${G(a)}`,n&&"disabled",s&&"error",r&&"filled",i&&"focused",o&&"required"],asterisk:["asterisk",s&&"error"]};return me(l,Tq,t)},qq=W("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>x({},t.root,e.color==="secondary"&&t.colorSecondary,e.filled&&t.filled)})(({theme:e,ownerState:t})=>x({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${gs.focused}`]:{color:(e.vars||e).palette[t.color].main},[`&.${gs.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${gs.error}`]:{color:(e.vars||e).palette.error.main}})),Cq=W("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})(({theme:e})=>({[`&.${gs.error}`]:{color:(e.vars||e).palette.error.main}})),Sq=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiFormLabel"}),{children:n,className:s,component:r="label"}=i,o=$(i,xq),l=er(),u=Zs({props:i,muiFormControl:l,states:["color","required","focused","disabled","error","filled"]}),d=x({},i,{color:u.color||"primary",component:r,disabled:u.disabled,error:u.error,filled:u.filled,focused:u.focused,required:u.required}),h=Dq(d);return f.jsxs(qq,x({as:r,ownerState:d,className:V(h.root,s),ref:a},o,{children:[n,u.required&&f.jsxs(Cq,{ownerState:d,"aria-hidden":!0,className:h.asterisk,children:[" ","*"]})]}))}),Pq=Sq;function Aq(e){return fe("MuiInputLabel",e)}re("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const Rq=["disableAnimation","margin","shrink","variant","className"],Eq=e=>{const{classes:t,formControl:a,size:i,shrink:n,disableAnimation:s,variant:r,required:o}=e,l={root:["root",a&&"formControl",!s&&"animated",n&&"shrink",i&&i!=="normal"&&`size${G(i)}`,r],asterisk:[o&&"asterisk"]},u=me(l,Aq,t);return x({},t,u)},Iq=W(Pq,{shouldForwardProp:e=>Rt(e)||e==="classes",name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[{[`& .${gs.asterisk}`]:t.asterisk},t.root,a.formControl&&t.formControl,a.size==="small"&&t.sizeSmall,a.shrink&&t.shrink,!a.disableAnimation&&t.animated,a.focused&&t.focused,t[a.variant]]}})(({theme:e,ownerState:t})=>x({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},t.size==="small"&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},t.variant==="filled"&&x({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},t.size==="small"&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&x({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},t.size==="small"&&{transform:"translate(12px, 4px) scale(0.75)"})),t.variant==="outlined"&&x({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},t.size==="small"&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"}))),Nq=b.forwardRef(function(t,a){const i=he({name:"MuiInputLabel",props:t}),{disableAnimation:n=!1,shrink:s,className:r}=i,o=$(i,Rq),l=er();let u=s;typeof u>"u"&&l&&(u=l.filled||l.focused||l.adornedStart);const d=Zs({props:i,muiFormControl:l,states:["size","variant","required","focused"]}),h=x({},i,{disableAnimation:n,formControl:l,shrink:u,size:d.size,variant:d.variant,required:d.required,focused:d.focused}),g=Eq(h);return f.jsx(Iq,x({"data-shrink":u,ownerState:h,ref:a,className:V(g.root,r)},o,{classes:g}))}),jq=Nq,Fq=b.createContext({}),Vd=Fq;function Hd(e,t){return Hd=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(i,n){return i.__proto__=n,i},Hd(e,t)}function tv(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Hd(e,t)}const $m={disabled:!1},So=Xt.createContext(null);var Oq=function(t){return t.scrollTop},is="unmounted",gi="exited",yi="entering",Hi="entered",Gd="exiting",Na=function(e){tv(t,e);function t(i,n){var s;s=e.call(this,i,n)||this;var r=n,o=r&&!r.isMounting?i.enter:i.appear,l;return s.appearStatus=null,i.in?o?(l=gi,s.appearStatus=yi):l=Hi:i.unmountOnExit||i.mountOnEnter?l=is:l=gi,s.state={status:l},s.nextCallback=null,s}t.getDerivedStateFromProps=function(n,s){var r=n.in;return r&&s.status===is?{status:gi}:null};var a=t.prototype;return a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(n){var s=null;if(n!==this.props){var r=this.state.status;this.props.in?r!==yi&&r!==Hi&&(s=yi):(r===yi||r===Hi)&&(s=Gd)}this.updateStatus(!1,s)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var n=this.props.timeout,s,r,o;return s=r=o=n,n!=null&&typeof n!="number"&&(s=n.exit,r=n.enter,o=n.appear!==void 0?n.appear:r),{exit:s,enter:r,appear:o}},a.updateStatus=function(n,s){if(n===void 0&&(n=!1),s!==null)if(this.cancelNextCallback(),s===yi){if(this.props.unmountOnExit||this.props.mountOnEnter){var r=this.props.nodeRef?this.props.nodeRef.current:vr.findDOMNode(this);r&&Oq(r)}this.performEnter(n)}else this.performExit();else this.props.unmountOnExit&&this.state.status===gi&&this.setState({status:is})},a.performEnter=function(n){var s=this,r=this.props.enter,o=this.context?this.context.isMounting:n,l=this.props.nodeRef?[o]:[vr.findDOMNode(this),o],u=l[0],d=l[1],h=this.getTimeouts(),g=o?h.appear:h.enter;if(!n&&!r||$m.disabled){this.safeSetState({status:Hi},function(){s.props.onEntered(u)});return}this.props.onEnter(u,d),this.safeSetState({status:yi},function(){s.props.onEntering(u,d),s.onTransitionEnd(g,function(){s.safeSetState({status:Hi},function(){s.props.onEntered(u,d)})})})},a.performExit=function(){var n=this,s=this.props.exit,r=this.getTimeouts(),o=this.props.nodeRef?void 0:vr.findDOMNode(this);if(!s||$m.disabled){this.safeSetState({status:gi},function(){n.props.onExited(o)});return}this.props.onExit(o),this.safeSetState({status:Gd},function(){n.props.onExiting(o),n.onTransitionEnd(r.exit,function(){n.safeSetState({status:gi},function(){n.props.onExited(o)})})})},a.cancelNextCallback=function(){this.nextCallback!==null&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(n,s){s=this.setNextCallback(s),this.setState(n,s)},a.setNextCallback=function(n){var s=this,r=!0;return this.nextCallback=function(o){r&&(r=!1,s.nextCallback=null,n(o))},this.nextCallback.cancel=function(){r=!1},this.nextCallback},a.onTransitionEnd=function(n,s){this.setNextCallback(s);var r=this.props.nodeRef?this.props.nodeRef.current:vr.findDOMNode(this),o=n==null&&!this.props.addEndListener;if(!r||o){setTimeout(this.nextCallback,0);return}if(this.props.addEndListener){var l=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],u=l[0],d=l[1];this.props.addEndListener(u,d)}n!=null&&setTimeout(this.nextCallback,n)},a.render=function(){var n=this.state.status;if(n===is)return null;var s=this.props,r=s.children;s.in,s.mountOnEnter,s.unmountOnExit,s.appear,s.enter,s.exit,s.timeout,s.addEndListener,s.onEnter,s.onEntering,s.onEntered,s.onExit,s.onExiting,s.onExited,s.nodeRef;var o=$(s,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]);return Xt.createElement(So.Provider,{value:null},typeof r=="function"?r(n,o):Xt.cloneElement(Xt.Children.only(r),o))},t}(Xt.Component);Na.contextType=So;Na.propTypes={};function Ki(){}Na.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Ki,onEntering:Ki,onEntered:Ki,onExit:Ki,onExiting:Ki,onExited:Ki};Na.UNMOUNTED=is;Na.EXITED=gi;Na.ENTERING=yi;Na.ENTERED=Hi;Na.EXITING=Gd;const Dp=Na;function Mq(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function qp(e,t){var a=function(s){return t&&b.isValidElement(s)?t(s):s},i=Object.create(null);return e&&b.Children.map(e,function(n){return n}).forEach(function(n){i[n.key]=a(n)}),i}function Lq(e,t){e=e||{},t=t||{};function a(d){return d in t?t[d]:e[d]}var i=Object.create(null),n=[];for(var s in e)s in t?n.length&&(i[s]=n,n=[]):n.push(s);var r,o={};for(var l in t){if(i[l])for(r=0;r<i[l].length;r++){var u=i[l][r];o[i[l][r]]=a(u)}o[l]=a(l)}for(r=0;r<n.length;r++)o[n[r]]=a(n[r]);return o}function Di(e,t,a){return a[t]!=null?a[t]:e.props[t]}function Bq(e,t){return qp(e.children,function(a){return b.cloneElement(a,{onExited:t.bind(null,a),in:!0,appear:Di(a,"appear",e),enter:Di(a,"enter",e),exit:Di(a,"exit",e)})})}function zq(e,t,a){var i=qp(e.children),n=Lq(t,i);return Object.keys(n).forEach(function(s){var r=n[s];if(b.isValidElement(r)){var o=s in t,l=s in i,u=t[s],d=b.isValidElement(u)&&!u.props.in;l&&(!o||d)?n[s]=b.cloneElement(r,{onExited:a.bind(null,r),in:!0,exit:Di(r,"exit",e),enter:Di(r,"enter",e)}):!l&&o&&!d?n[s]=b.cloneElement(r,{in:!1}):l&&o&&b.isValidElement(u)&&(n[s]=b.cloneElement(r,{onExited:a.bind(null,r),in:u.props.in,exit:Di(r,"exit",e),enter:Di(r,"enter",e)}))}}),n}var Wq=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},$q={component:"div",childFactory:function(t){return t}},Cp=function(e){tv(t,e);function t(i,n){var s;s=e.call(this,i,n)||this;var r=s.handleExited.bind(Mq(s));return s.state={contextValue:{isMounting:!0},handleExited:r,firstRender:!0},s}var a=t.prototype;return a.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},a.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(n,s){var r=s.children,o=s.handleExited,l=s.firstRender;return{children:l?Bq(n,o):zq(n,r,o),firstRender:!1}},a.handleExited=function(n,s){var r=qp(this.props.children);n.key in r||(n.props.onExited&&n.props.onExited(s),this.mounted&&this.setState(function(o){var l=x({},o.children);return delete l[n.key],{children:l}}))},a.render=function(){var n=this.props,s=n.component,r=n.childFactory,o=$(n,["component","childFactory"]),l=this.state.contextValue,u=Wq(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,s===null?Xt.createElement(So.Provider,{value:l},u):Xt.createElement(So.Provider,{value:l},Xt.createElement(s,o,u))},t}(Xt.Component);Cp.propTypes={};Cp.defaultProps=$q;const Uq=Cp;function Kq(e){const{className:t,classes:a,pulsate:i=!1,rippleX:n,rippleY:s,rippleSize:r,in:o,onExited:l,timeout:u}=e,[d,h]=b.useState(!1),g=V(t,a.ripple,a.rippleVisible,i&&a.ripplePulsate),p={width:r,height:r,top:-(r/2)+s,left:-(r/2)+n},m=V(a.child,d&&a.childLeaving,i&&a.childPulsate);return!o&&!d&&h(!0),b.useEffect(()=>{if(!o&&l!=null){const c=setTimeout(l,u);return()=>{clearTimeout(c)}}},[l,o,u]),f.jsx("span",{className:g,style:p,children:f.jsx("span",{className:m})})}const Vq=re("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Ft=Vq,Hq=["center","classes","className"];let Il=e=>e,Um,Km,Vm,Hm;const Xd=550,Gq=80,Xq=mp(Um||(Um=Il`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),Jq=mp(Km||(Km=Il`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Qq=mp(Vm||(Vm=Il`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),Yq=W("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),Zq=W(Kq,{name:"MuiTouchRipple",slot:"Ripple"})(Hm||(Hm=Il`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Ft.rippleVisible,Xq,Xd,({theme:e})=>e.transitions.easing.easeInOut,Ft.ripplePulsate,({theme:e})=>e.transitions.duration.shorter,Ft.child,Ft.childLeaving,Jq,Xd,({theme:e})=>e.transitions.easing.easeInOut,Ft.childPulsate,Qq,({theme:e})=>e.transitions.easing.easeInOut),eC=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiTouchRipple"}),{center:n=!1,classes:s={},className:r}=i,o=$(i,Hq),[l,u]=b.useState([]),d=b.useRef(0),h=b.useRef(null);b.useEffect(()=>{h.current&&(h.current(),h.current=null)},[l]);const g=b.useRef(!1),p=b.useRef(0),m=b.useRef(null),c=b.useRef(null);b.useEffect(()=>()=>{p.current&&clearTimeout(p.current)},[]);const k=b.useCallback(w=>{const{pulsate:D,rippleX:q,rippleY:T,rippleSize:C,cb:A}=w;u(S=>[...S,f.jsx(Zq,{classes:{ripple:V(s.ripple,Ft.ripple),rippleVisible:V(s.rippleVisible,Ft.rippleVisible),ripplePulsate:V(s.ripplePulsate,Ft.ripplePulsate),child:V(s.child,Ft.child),childLeaving:V(s.childLeaving,Ft.childLeaving),childPulsate:V(s.childPulsate,Ft.childPulsate)},timeout:Xd,pulsate:D,rippleX:q,rippleY:T,rippleSize:C},d.current)]),d.current+=1,h.current=A},[s]),y=b.useCallback((w={},D={},q=()=>{})=>{const{pulsate:T=!1,center:C=n||D.pulsate,fakeElement:A=!1}=D;if((w==null?void 0:w.type)==="mousedown"&&g.current){g.current=!1;return}(w==null?void 0:w.type)==="touchstart"&&(g.current=!0);const S=A?null:c.current,I=S?S.getBoundingClientRect():{width:0,height:0,left:0,top:0};let j,O,E;if(C||w===void 0||w.clientX===0&&w.clientY===0||!w.clientX&&!w.touches)j=Math.round(I.width/2),O=Math.round(I.height/2);else{const{clientX:F,clientY:M}=w.touches&&w.touches.length>0?w.touches[0]:w;j=Math.round(F-I.left),O=Math.round(M-I.top)}if(C)E=Math.sqrt((2*I.width**2+I.height**2)/3),E%2===0&&(E+=1);else{const F=Math.max(Math.abs((S?S.clientWidth:0)-j),j)*2+2,M=Math.max(Math.abs((S?S.clientHeight:0)-O),O)*2+2;E=Math.sqrt(F**2+M**2)}w!=null&&w.touches?m.current===null&&(m.current=()=>{k({pulsate:T,rippleX:j,rippleY:O,rippleSize:E,cb:q})},p.current=setTimeout(()=>{m.current&&(m.current(),m.current=null)},Gq)):k({pulsate:T,rippleX:j,rippleY:O,rippleSize:E,cb:q})},[n,k]),_=b.useCallback(()=>{y({},{pulsate:!0})},[y]),v=b.useCallback((w,D)=>{if(clearTimeout(p.current),(w==null?void 0:w.type)==="touchend"&&m.current){m.current(),m.current=null,p.current=setTimeout(()=>{v(w,D)});return}m.current=null,u(q=>q.length>0?q.slice(1):q),h.current=D},[]);return b.useImperativeHandle(a,()=>({pulsate:_,start:y,stop:v}),[_,y,v]),f.jsx(Yq,x({className:V(Ft.root,s.root,r),ref:c},o,{children:f.jsx(Uq,{component:null,exit:!0,children:l})}))}),tC=eC;function aC(e){return fe("MuiButtonBase",e)}const iC=re("MuiButtonBase",["root","disabled","focusVisible"]),nC=iC,sC=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],rC=e=>{const{disabled:t,focusVisible:a,focusVisibleClassName:i,classes:n}=e,r=me({root:["root",t&&"disabled",a&&"focusVisible"]},aC,n);return a&&i&&(r.root+=` ${i}`),r},oC=W("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${nC.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),lC=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiButtonBase"}),{action:n,centerRipple:s=!1,children:r,className:o,component:l="button",disabled:u=!1,disableRipple:d=!1,disableTouchRipple:h=!1,focusRipple:g=!1,LinkComponent:p="a",onBlur:m,onClick:c,onContextMenu:k,onDragLeave:y,onFocus:_,onFocusVisible:v,onKeyDown:w,onKeyUp:D,onMouseDown:q,onMouseLeave:T,onMouseUp:C,onTouchEnd:A,onTouchMove:S,onTouchStart:I,tabIndex:j=0,TouchRippleProps:O,touchRippleRef:E,type:F}=i,M=$(i,sC),B=b.useRef(null),P=b.useRef(null),N=Qe(P,E),{isFocusVisibleRef:L,onFocus:te,onBlur:X,ref:Ne}=c_(),[Z,we]=b.useState(!1);u&&Z&&we(!1),b.useImperativeHandle(n,()=>({focusVisible:()=>{we(!0),B.current.focus()}}),[]);const[le,Ke]=b.useState(!1);b.useEffect(()=>{Ke(!0)},[]);const Et=le&&!d&&!u;b.useEffect(()=>{Z&&g&&!d&&le&&P.current.pulsate()},[d,g,Z,le]);function je(K,ga,Fn=h){return xi(On=>(ga&&ga(On),!Fn&&P.current&&P.current[K](On),!0))}const ut=je("start",q),se=je("stop",k),qe=je("stop",y),Q=je("stop",C),ce=je("stop",K=>{Z&&K.preventDefault(),T&&T(K)}),Te=je("start",I),ja=je("stop",A),It=je("stop",S),Nt=je("stop",K=>{X(K),L.current===!1&&we(!1),m&&m(K)},!1),Ut=xi(K=>{B.current||(B.current=K.currentTarget),te(K),L.current===!0&&(we(!0),v&&v(K)),_&&_(K)}),jt=()=>{const K=B.current;return l&&l!=="button"&&!(K.tagName==="A"&&K.href)},Ce=b.useRef(!1),ma=xi(K=>{g&&!Ce.current&&Z&&P.current&&K.key===" "&&(Ce.current=!0,P.current.stop(K,()=>{P.current.start(K)})),K.target===K.currentTarget&&jt()&&K.key===" "&&K.preventDefault(),w&&w(K),K.target===K.currentTarget&&jt()&&K.key==="Enter"&&!u&&(K.preventDefault(),c&&c(K))}),dt=xi(K=>{g&&K.key===" "&&P.current&&Z&&!K.defaultPrevented&&(Ce.current=!1,P.current.stop(K,()=>{P.current.pulsate(K)})),D&&D(K),c&&K.target===K.currentTarget&&jt()&&K.key===" "&&!K.defaultPrevented&&c(K)});let ke=l;ke==="button"&&(M.href||M.to)&&(ke=p);const ea={};ke==="button"?(ea.type=F===void 0?"button":F,ea.disabled=u):(!M.href&&!M.to&&(ea.role="button"),u&&(ea["aria-disabled"]=u));const Fa=Qe(a,Ne,B),ha=x({},i,{centerRipple:s,component:l,disabled:u,disableRipple:d,disableTouchRipple:h,focusRipple:g,tabIndex:j,focusVisible:Z}),ge=rC(ha);return f.jsxs(oC,x({as:ke,className:V(ge.root,o),ownerState:ha,onBlur:Nt,onClick:c,onContextMenu:se,onFocus:Ut,onKeyDown:ma,onKeyUp:dt,onMouseDown:ut,onMouseLeave:ce,onMouseUp:Q,onDragLeave:qe,onTouchEnd:ja,onTouchMove:It,onTouchStart:Te,ref:Fa,tabIndex:u?-1:j,type:F},ea,M,{children:[r,Et?f.jsx(tC,x({ref:N,center:s},O)):null]}))}),av=lC;function uC(e){return fe("MuiDivider",e)}const dC=re("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),Gm=dC,cC=["absolute","children","className","component","flexItem","light","orientation","role","textAlign","variant"],pC=e=>{const{absolute:t,children:a,classes:i,flexItem:n,light:s,orientation:r,textAlign:o,variant:l}=e;return me({root:["root",t&&"absolute",l,s&&"light",r==="vertical"&&"vertical",n&&"flexItem",a&&"withChildren",a&&r==="vertical"&&"withChildrenVertical",o==="right"&&r!=="vertical"&&"textAlignRight",o==="left"&&r!=="vertical"&&"textAlignLeft"],wrapper:["wrapper",r==="vertical"&&"wrapperVertical"]},uC,i)},fC=W("div",{name:"MuiDivider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.absolute&&t.absolute,t[a.variant],a.light&&t.light,a.orientation==="vertical"&&t.vertical,a.flexItem&&t.flexItem,a.children&&t.withChildren,a.children&&a.orientation==="vertical"&&t.withChildrenVertical,a.textAlign==="right"&&a.orientation!=="vertical"&&t.textAlignRight,a.textAlign==="left"&&a.orientation!=="vertical"&&t.textAlignLeft]}})(({theme:e,ownerState:t})=>x({margin:0,flexShrink:0,borderWidth:0,borderStyle:"solid",borderColor:(e.vars||e).palette.divider,borderBottomWidth:"thin"},t.absolute&&{position:"absolute",bottom:0,left:0,width:"100%"},t.light&&{borderColor:e.vars?`rgba(${e.vars.palette.dividerChannel} / 0.08)`:ka(e.palette.divider,.08)},t.variant==="inset"&&{marginLeft:72},t.variant==="middle"&&t.orientation==="horizontal"&&{marginLeft:e.spacing(2),marginRight:e.spacing(2)},t.variant==="middle"&&t.orientation==="vertical"&&{marginTop:e.spacing(1),marginBottom:e.spacing(1)},t.orientation==="vertical"&&{height:"100%",borderBottomWidth:0,borderRightWidth:"thin"},t.flexItem&&{alignSelf:"stretch",height:"auto"}),({ownerState:e})=>x({},e.children&&{display:"flex",whiteSpace:"nowrap",textAlign:"center",border:0,"&::before, &::after":{content:'""',alignSelf:"center"}}),({theme:e,ownerState:t})=>x({},t.children&&t.orientation!=="vertical"&&{"&::before, &::after":{width:"100%",borderTop:`thin solid ${(e.vars||e).palette.divider}`}}),({theme:e,ownerState:t})=>x({},t.children&&t.orientation==="vertical"&&{flexDirection:"column","&::before, &::after":{height:"100%",borderLeft:`thin solid ${(e.vars||e).palette.divider}`}}),({ownerState:e})=>x({},e.textAlign==="right"&&e.orientation!=="vertical"&&{"&::before":{width:"90%"},"&::after":{width:"10%"}},e.textAlign==="left"&&e.orientation!=="vertical"&&{"&::before":{width:"10%"},"&::after":{width:"90%"}})),mC=W("span",{name:"MuiDivider",slot:"Wrapper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.wrapper,a.orientation==="vertical"&&t.wrapperVertical]}})(({theme:e,ownerState:t})=>x({display:"inline-block",paddingLeft:`calc(${e.spacing(1)} * 1.2)`,paddingRight:`calc(${e.spacing(1)} * 1.2)`},t.orientation==="vertical"&&{paddingTop:`calc(${e.spacing(1)} * 1.2)`,paddingBottom:`calc(${e.spacing(1)} * 1.2)`})),iv=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDivider"}),{absolute:n=!1,children:s,className:r,component:o=s?"div":"hr",flexItem:l=!1,light:u=!1,orientation:d="horizontal",role:h=o!=="hr"?"separator":void 0,textAlign:g="center",variant:p="fullWidth"}=i,m=$(i,cC),c=x({},i,{absolute:n,component:o,flexItem:l,light:u,orientation:d,role:h,textAlign:g,variant:p}),k=pC(c);return f.jsx(fC,x({as:o,className:V(k.root,r),role:h,ref:a,ownerState:c},m,{children:s?f.jsx(mC,{className:k.wrapper,ownerState:c,children:s}):null}))});iv.muiSkipListHighlight=!0;const Xm=iv,hC=re("MuiListItemIcon",["root","alignItemsFlexStart"]),Jm=hC;function gC(e){return fe("MuiTypography",e)}re("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const yC=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],_C=e=>{const{align:t,gutterBottom:a,noWrap:i,paragraph:n,variant:s,classes:r}=e,o={root:["root",s,e.align!=="inherit"&&`align${G(t)}`,a&&"gutterBottom",i&&"noWrap",n&&"paragraph"]};return me(o,gC,r)},vC=W("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.variant&&t[a.variant],a.align!=="inherit"&&t[`align${G(a.align)}`],a.noWrap&&t.noWrap,a.gutterBottom&&t.gutterBottom,a.paragraph&&t.paragraph]}})(({theme:e,ownerState:t})=>x({margin:0},t.variant==="inherit"&&{font:"inherit"},t.variant!=="inherit"&&e.typography[t.variant],t.align!=="inherit"&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16})),Qm={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},bC={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},wC=e=>bC[e]||e,TC=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiTypography"}),n=wC(i.color),s=O_(x({},i,{color:n})),{align:r="inherit",className:o,component:l,gutterBottom:u=!1,noWrap:d=!1,paragraph:h=!1,variant:g="body1",variantMapping:p=Qm}=s,m=$(s,yC),c=x({},s,{align:r,color:n,className:o,component:l,gutterBottom:u,noWrap:d,paragraph:h,variant:g,variantMapping:p}),k=l||(h?"p":p[g]||Qm[g])||"span",y=_C(c);return f.jsx(vC,x({as:k,ref:a,ownerState:c,className:V(y.root,o)},m))}),nv=TC,kC=re("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]),Ym=kC;function xC(e){return fe("MuiMenuItem",e)}const DC=re("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),Gn=DC,qC=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex","className"],CC=(e,t)=>{const{ownerState:a}=e;return[t.root,a.dense&&t.dense,a.divider&&t.divider,!a.disableGutters&&t.gutters]},SC=e=>{const{disabled:t,dense:a,divider:i,disableGutters:n,selected:s,classes:r}=e,l=me({root:["root",a&&"dense",t&&"disabled",!n&&"gutters",i&&"divider",s&&"selected"]},xC,r);return x({},r,l)},PC=W(av,{shouldForwardProp:e=>Rt(e)||e==="classes",name:"MuiMenuItem",slot:"Root",overridesResolver:CC})(({theme:e,ownerState:t})=>x({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Gn.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:ka(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Gn.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:ka(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Gn.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:ka(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:ka(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${Gn.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Gn.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`& + .${Gm.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${Gm.inset}`]:{marginLeft:52},[`& .${Ym.root}`]:{marginTop:0,marginBottom:0},[`& .${Ym.inset}`]:{paddingLeft:36},[`& .${Jm.root}`]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&x({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${Jm.root} svg`]:{fontSize:"1.25rem"}}))),AC=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiMenuItem"}),{autoFocus:n=!1,component:s="li",dense:r=!1,divider:o=!1,disableGutters:l=!1,focusVisibleClassName:u,role:d="menuitem",tabIndex:h,className:g}=i,p=$(i,qC),m=b.useContext(Vd),c=b.useMemo(()=>({dense:r||m.dense||!1,disableGutters:l}),[m.dense,r,l]),k=b.useRef(null);Pa(()=>{n&&k.current&&k.current.focus()},[n]);const y=x({},i,{dense:c.dense,divider:o,disableGutters:l}),_=SC(i),v=Qe(k,a);let w;return i.disabled||(w=h!==void 0?h:-1),f.jsx(Vd.Provider,{value:c,children:f.jsx(PC,x({ref:v,role:d,tabIndex:w,component:s,focusVisibleClassName:V(_.focusVisible,u),className:V(_.root,g)},p,{ownerState:y,classes:_}))})}),ku=AC;function Zm(e){return e!=null&&!(Array.isArray(e)&&e.length===0)}function Po(e,t=!1){return e&&(Zm(e.value)&&e.value!==""||t&&Zm(e.defaultValue)&&e.defaultValue!=="")}function RC(e){return e.startAdornment}function EC(e){return fe("MuiFormControl",e)}re("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const IC=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],NC=e=>{const{classes:t,margin:a,fullWidth:i}=e,n={root:["root",a!=="none"&&`margin${G(a)}`,i&&"fullWidth"]};return me(n,EC,t)},jC=W("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>x({},t.root,t[`margin${G(e.margin)}`],e.fullWidth&&t.fullWidth)})(({ownerState:e})=>x({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},e.margin==="normal"&&{marginTop:16,marginBottom:8},e.margin==="dense"&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"})),FC=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiFormControl"}),{children:n,className:s,color:r="primary",component:o="div",disabled:l=!1,error:u=!1,focused:d,fullWidth:h=!1,hiddenLabel:g=!1,margin:p="none",required:m=!1,size:c="medium",variant:k="outlined"}=i,y=$(i,IC),_=x({},i,{color:r,component:o,disabled:l,error:u,fullWidth:h,hiddenLabel:g,margin:p,required:m,size:c,variant:k}),v=NC(_),[w,D]=b.useState(()=>{let O=!1;return n&&b.Children.forEach(n,E=>{if(!zr(E,["Input","Select"]))return;const F=zr(E,["Select"])?E.props.input:E;F&&RC(F.props)&&(O=!0)}),O}),[q,T]=b.useState(()=>{let O=!1;return n&&b.Children.forEach(n,E=>{zr(E,["Input","Select"])&&(Po(E.props,!0)||Po(E.props.inputProps,!0))&&(O=!0)}),O}),[C,A]=b.useState(!1);l&&C&&A(!1);const S=d!==void 0&&!l?d:C;let I;const j=b.useMemo(()=>({adornedStart:w,setAdornedStart:D,color:r,disabled:l,error:u,filled:q,focused:S,fullWidth:h,hiddenLabel:g,size:c,onBlur:()=>{A(!1)},onEmpty:()=>{T(!1)},onFilled:()=>{T(!0)},onFocus:()=>{A(!0)},registerEffect:I,required:m,variant:k}),[w,r,l,u,q,S,h,g,I,m,c,k]);return f.jsx(xp.Provider,{value:j,children:f.jsx(jC,x({as:o,ownerState:_,className:V(v.root,s),ref:a},y,{children:n}))})}),OC=FC;function Ao(e){return typeof e=="string"}function MC(e,t,a){return e===void 0||Ao(e)?t:x({},t,{ownerState:x({},t.ownerState,a)})}function sv(e,t=[]){if(e===void 0)return{};const a={};return Object.keys(e).filter(i=>i.match(/^on[A-Z]/)&&typeof e[i]=="function"&&!t.includes(i)).forEach(i=>{a[i]=e[i]}),a}function LC(e,t,a){return typeof e=="function"?e(t,a):e}function eh(e){if(e===void 0)return{};const t={};return Object.keys(e).filter(a=>!(a.match(/^on[A-Z]/)&&typeof e[a]=="function")).forEach(a=>{t[a]=e[a]}),t}function BC(e){const{getSlotProps:t,additionalProps:a,externalSlotProps:i,externalForwardedProps:n,className:s}=e;if(!t){const p=V(a==null?void 0:a.className,s,n==null?void 0:n.className,i==null?void 0:i.className),m=x({},a==null?void 0:a.style,n==null?void 0:n.style,i==null?void 0:i.style),c=x({},a,n,i);return p.length>0&&(c.className=p),Object.keys(m).length>0&&(c.style=m),{props:c,internalRef:void 0}}const r=sv(x({},n,i)),o=eh(i),l=eh(n),u=t(r),d=V(u==null?void 0:u.className,a==null?void 0:a.className,s,n==null?void 0:n.className,i==null?void 0:i.className),h=x({},u==null?void 0:u.style,a==null?void 0:a.style,n==null?void 0:n.style,i==null?void 0:i.style),g=x({},u,a,l,o);return d.length>0&&(g.className=d),Object.keys(h).length>0&&(g.style=h),{props:g,internalRef:u.ref}}const zC=["elementType","externalSlotProps","ownerState","skipResolvingSlotProps"];function xn(e){var t;const{elementType:a,externalSlotProps:i,ownerState:n,skipResolvingSlotProps:s=!1}=e,r=$(e,zC),o=s?{}:LC(i,n),{props:l,internalRef:u}=BC(x({},r,{externalSlotProps:o})),d=Qe(u,o==null?void 0:o.ref,(t=e.additionalProps)==null?void 0:t.ref);return MC(a,x({},l,{ref:d}),n)}function WC(e){return fe("MuiList",e)}re("MuiList",["root","padding","dense","subheader"]);const $C=["children","className","component","dense","disablePadding","subheader"],UC=e=>{const{classes:t,disablePadding:a,dense:i,subheader:n}=e;return me({root:["root",!a&&"padding",i&&"dense",n&&"subheader"]},WC,t)},KC=W("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,!a.disablePadding&&t.padding,a.dense&&t.dense,a.subheader&&t.subheader]}})(({ownerState:e})=>x({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0})),VC=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiList"}),{children:n,className:s,component:r="ul",dense:o=!1,disablePadding:l=!1,subheader:u}=i,d=$(i,$C),h=b.useMemo(()=>({dense:o}),[o]),g=x({},i,{component:r,dense:o,disablePadding:l}),p=UC(g);return f.jsx(Vd.Provider,{value:h,children:f.jsxs(KC,x({as:r,className:V(p.root,s),ref:a,ownerState:g},d,{children:[u,n]}))})}),HC=VC,GC=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function xu(e,t,a){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:a?null:e.firstChild}function th(e,t,a){return e===t?a?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:a?null:e.lastChild}function rv(e,t){if(t===void 0)return!0;let a=e.innerText;return a===void 0&&(a=e.textContent),a=a.trim().toLowerCase(),a.length===0?!1:t.repeating?a[0]===t.keys[0]:a.indexOf(t.keys.join(""))===0}function Xn(e,t,a,i,n,s){let r=!1,o=n(e,t,t?a:!1);for(;o;){if(o===e.firstChild){if(r)return!1;r=!0}const l=i?!1:o.disabled||o.getAttribute("aria-disabled")==="true";if(!o.hasAttribute("tabindex")||!rv(o,s)||l)o=n(e,o,a);else return o.focus(),!0}return!1}const XC=b.forwardRef(function(t,a){const{actions:i,autoFocus:n=!1,autoFocusItem:s=!1,children:r,className:o,disabledItemsFocusable:l=!1,disableListWrap:u=!1,onKeyDown:d,variant:h="selectedMenu"}=t,g=$(t,GC),p=b.useRef(null),m=b.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Pa(()=>{n&&p.current.focus()},[n]),b.useImperativeHandle(i,()=>({adjustStyleForScrollbar:(v,w)=>{const D=!p.current.style.width;if(v.clientHeight<p.current.clientHeight&&D){const q=`${p_(_t(v))}px`;p.current.style[w.direction==="rtl"?"paddingLeft":"paddingRight"]=q,p.current.style.width=`calc(100% + ${q})`}return p.current}}),[]);const c=v=>{const w=p.current,D=v.key,q=_t(w).activeElement;if(D==="ArrowDown")v.preventDefault(),Xn(w,q,u,l,xu);else if(D==="ArrowUp")v.preventDefault(),Xn(w,q,u,l,th);else if(D==="Home")v.preventDefault(),Xn(w,null,u,l,xu);else if(D==="End")v.preventDefault(),Xn(w,null,u,l,th);else if(D.length===1){const T=m.current,C=D.toLowerCase(),A=performance.now();T.keys.length>0&&(A-T.lastTime>500?(T.keys=[],T.repeating=!0,T.previousKeyMatched=!0):T.repeating&&C!==T.keys[0]&&(T.repeating=!1)),T.lastTime=A,T.keys.push(C);const S=q&&!T.repeating&&rv(q,T);T.previousKeyMatched&&(S||Xn(w,q,!1,l,xu,T))?v.preventDefault():T.previousKeyMatched=!1}d&&d(v)},k=Qe(p,a);let y=-1;b.Children.forEach(r,(v,w)=>{if(!b.isValidElement(v)){y===w&&(y+=1,y>=r.length&&(y=-1));return}v.props.disabled||(h==="selectedMenu"&&v.props.selected||y===-1)&&(y=w),y===w&&(v.props.disabled||v.props.muiSkipListHighlight||v.type.muiSkipListHighlight)&&(y+=1,y>=r.length&&(y=-1))});const _=b.Children.map(r,(v,w)=>{if(w===y){const D={};return s&&(D.autoFocus=!0),v.props.tabIndex===void 0&&h==="selectedMenu"&&(D.tabIndex=0),b.cloneElement(v,D)}return v});return f.jsx(HC,x({role:"menu",ref:k,className:o,onKeyDown:c,tabIndex:n?0:-1},g,{children:_}))}),JC=XC,QC=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function YC(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?e.contentEditable==="true"||(e.nodeName==="AUDIO"||e.nodeName==="VIDEO"||e.nodeName==="DETAILS")&&e.getAttribute("tabindex")===null?0:e.tabIndex:t}function ZC(e){if(e.tagName!=="INPUT"||e.type!=="radio"||!e.name)return!1;const t=i=>e.ownerDocument.querySelector(`input[type="radio"]${i}`);let a=t(`[name="${e.name}"]:checked`);return a||(a=t(`[name="${e.name}"]`)),a!==e}function eS(e){return!(e.disabled||e.tagName==="INPUT"&&e.type==="hidden"||ZC(e))}function tS(e){const t=[],a=[];return Array.from(e.querySelectorAll(QC)).forEach((i,n)=>{const s=YC(i);s===-1||!eS(i)||(s===0?t.push(i):a.push({documentOrder:n,tabIndex:s,node:i}))}),a.sort((i,n)=>i.tabIndex===n.tabIndex?i.documentOrder-n.documentOrder:i.tabIndex-n.tabIndex).map(i=>i.node).concat(t)}function aS(){return!0}function iS(e){const{children:t,disableAutoFocus:a=!1,disableEnforceFocus:i=!1,disableRestoreFocus:n=!1,getTabbable:s=tS,isEnabled:r=aS,open:o}=e,l=b.useRef(!1),u=b.useRef(null),d=b.useRef(null),h=b.useRef(null),g=b.useRef(null),p=b.useRef(!1),m=b.useRef(null),c=Qe(t.ref,m),k=b.useRef(null);b.useEffect(()=>{!o||!m.current||(p.current=!a)},[a,o]),b.useEffect(()=>{if(!o||!m.current)return;const v=_t(m.current);return m.current.contains(v.activeElement)||(m.current.hasAttribute("tabIndex")||m.current.setAttribute("tabIndex","-1"),p.current&&m.current.focus()),()=>{n||(h.current&&h.current.focus&&(l.current=!0,h.current.focus()),h.current=null)}},[o]),b.useEffect(()=>{if(!o||!m.current)return;const v=_t(m.current),w=T=>{k.current=T,!(i||!r()||T.key!=="Tab")&&v.activeElement===m.current&&T.shiftKey&&(l.current=!0,d.current&&d.current.focus())},D=()=>{const T=m.current;if(T===null)return;if(!v.hasFocus()||!r()||l.current){l.current=!1;return}if(T.contains(v.activeElement)||i&&v.activeElement!==u.current&&v.activeElement!==d.current)return;if(v.activeElement!==g.current)g.current=null;else if(g.current!==null)return;if(!p.current)return;let C=[];if((v.activeElement===u.current||v.activeElement===d.current)&&(C=s(m.current)),C.length>0){var A,S;const I=!!((A=k.current)!=null&&A.shiftKey&&((S=k.current)==null?void 0:S.key)==="Tab"),j=C[0],O=C[C.length-1];typeof j!="string"&&typeof O!="string"&&(I?O.focus():j.focus())}else T.focus()};v.addEventListener("focusin",D),v.addEventListener("keydown",w,!0);const q=setInterval(()=>{v.activeElement&&v.activeElement.tagName==="BODY"&&D()},50);return()=>{clearInterval(q),v.removeEventListener("focusin",D),v.removeEventListener("keydown",w,!0)}},[a,i,n,r,o,s]);const y=v=>{h.current===null&&(h.current=v.relatedTarget),p.current=!0,g.current=v.target;const w=t.props.onFocus;w&&w(v)},_=v=>{h.current===null&&(h.current=v.relatedTarget),p.current=!0};return f.jsxs(b.Fragment,{children:[f.jsx("div",{tabIndex:o?0:-1,onFocus:_,ref:u,"data-testid":"sentinelStart"}),b.cloneElement(t,{ref:c,onFocus:y}),f.jsx("div",{tabIndex:o?0:-1,onFocus:_,ref:d,"data-testid":"sentinelEnd"})]})}function nS(e){return typeof e=="function"?e():e}const sS=b.forwardRef(function(t,a){const{children:i,container:n,disablePortal:s=!1}=t,[r,o]=b.useState(null),l=Qe(b.isValidElement(i)?i.ref:null,a);if(Pa(()=>{s||o(nS(n)||document.body)},[n,s]),Pa(()=>{if(r&&!s)return To(a,r),()=>{To(a,null)}},[a,r,s]),s){if(b.isValidElement(i)){const u={ref:l};return b.cloneElement(i,u)}return f.jsx(b.Fragment,{children:i})}return f.jsx(b.Fragment,{children:r&&Go.createPortal(i,r)})});function rS(e){const t=_t(e);return t.body===e?ca(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}function ys(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function ah(e){return parseInt(ca(e).getComputedStyle(e).paddingRight,10)||0}function oS(e){const a=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(e.tagName)!==-1,i=e.tagName==="INPUT"&&e.getAttribute("type")==="hidden";return a||i}function ih(e,t,a,i,n){const s=[t,a,...i];[].forEach.call(e.children,r=>{const o=s.indexOf(r)===-1,l=!oS(r);o&&l&&ys(r,n)})}function Du(e,t){let a=-1;return e.some((i,n)=>t(i)?(a=n,!0):!1),a}function lS(e,t){const a=[],i=e.container;if(!t.disableScrollLock){if(rS(i)){const r=p_(_t(i));a.push({value:i.style.paddingRight,property:"padding-right",el:i}),i.style.paddingRight=`${ah(i)+r}px`;const o=_t(i).querySelectorAll(".mui-fixed");[].forEach.call(o,l=>{a.push({value:l.style.paddingRight,property:"padding-right",el:l}),l.style.paddingRight=`${ah(l)+r}px`})}let s;if(i.parentNode instanceof DocumentFragment)s=_t(i).body;else{const r=i.parentElement,o=ca(i);s=(r==null?void 0:r.nodeName)==="HTML"&&o.getComputedStyle(r).overflowY==="scroll"?r:i}a.push({value:s.style.overflow,property:"overflow",el:s},{value:s.style.overflowX,property:"overflow-x",el:s},{value:s.style.overflowY,property:"overflow-y",el:s}),s.style.overflow="hidden"}return()=>{a.forEach(({value:s,el:r,property:o})=>{s?r.style.setProperty(o,s):r.style.removeProperty(o)})}}function uS(e){const t=[];return[].forEach.call(e.children,a=>{a.getAttribute("aria-hidden")==="true"&&t.push(a)}),t}class dS{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(t,a){let i=this.modals.indexOf(t);if(i!==-1)return i;i=this.modals.length,this.modals.push(t),t.modalRef&&ys(t.modalRef,!1);const n=uS(a);ih(a,t.mount,t.modalRef,n,!0);const s=Du(this.containers,r=>r.container===a);return s!==-1?(this.containers[s].modals.push(t),i):(this.containers.push({modals:[t],container:a,restore:null,hiddenSiblings:n}),i)}mount(t,a){const i=Du(this.containers,s=>s.modals.indexOf(t)!==-1),n=this.containers[i];n.restore||(n.restore=lS(n,a))}remove(t,a=!0){const i=this.modals.indexOf(t);if(i===-1)return i;const n=Du(this.containers,r=>r.modals.indexOf(t)!==-1),s=this.containers[n];if(s.modals.splice(s.modals.indexOf(t),1),this.modals.splice(i,1),s.modals.length===0)s.restore&&s.restore(),t.modalRef&&ys(t.modalRef,a),ih(s.container,t.mount,t.modalRef,s.hiddenSiblings,!1),this.containers.splice(n,1);else{const r=s.modals[s.modals.length-1];r.modalRef&&ys(r.modalRef,!1)}return i}isTopModal(t){return this.modals.length>0&&this.modals[this.modals.length-1]===t}}function cS(e){return typeof e=="function"?e():e}function pS(e){return e?e.props.hasOwnProperty("in"):!1}const fS=new dS;function mS(e){const{container:t,disableEscapeKeyDown:a=!1,disableScrollLock:i=!1,manager:n=fS,closeAfterTransition:s=!1,onTransitionEnter:r,onTransitionExited:o,children:l,onClose:u,open:d,rootRef:h}=e,g=b.useRef({}),p=b.useRef(null),m=b.useRef(null),c=Qe(m,h),[k,y]=b.useState(!d),_=pS(l);let v=!0;(e["aria-hidden"]==="false"||e["aria-hidden"]===!1)&&(v=!1);const w=()=>_t(p.current),D=()=>(g.current.modalRef=m.current,g.current.mount=p.current,g.current),q=()=>{n.mount(D(),{disableScrollLock:i}),m.current&&(m.current.scrollTop=0)},T=xi(()=>{const M=cS(t)||w().body;n.add(D(),M),m.current&&q()}),C=b.useCallback(()=>n.isTopModal(D()),[n]),A=xi(M=>{p.current=M,M&&(d&&C()?q():m.current&&ys(m.current,v))}),S=b.useCallback(()=>{n.remove(D(),v)},[v,n]);b.useEffect(()=>()=>{S()},[S]),b.useEffect(()=>{d?T():(!_||!s)&&S()},[d,S,_,s,T]);const I=M=>B=>{var P;(P=M.onKeyDown)==null||P.call(M,B),!(B.key!=="Escape"||B.which===229||!C())&&(a||(B.stopPropagation(),u&&u(B,"escapeKeyDown")))},j=M=>B=>{var P;(P=M.onClick)==null||P.call(M,B),B.target===B.currentTarget&&u&&u(B,"backdropClick")};return{getRootProps:(M={})=>{const B=sv(e);delete B.onTransitionEnter,delete B.onTransitionExited;const P=x({},B,M);return x({role:"presentation"},P,{onKeyDown:I(P),ref:c})},getBackdropProps:(M={})=>{const B=M;return x({"aria-hidden":!0},B,{onClick:j(B),open:d})},getTransitionProps:()=>{const M=()=>{y(!1),r&&r()},B=()=>{y(!0),o&&o(),s&&S()};return{onEnter:Ed(M,l==null?void 0:l.props.onEnter),onExited:Ed(B,l==null?void 0:l.props.onExited)}},rootRef:c,portalRef:A,isTopModal:C,exited:k,hasTransition:_}}const hS=["onChange","maxRows","minRows","style","value"];function Tr(e){return parseInt(e,10)||0}const gS={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}};function nh(e){return e==null||Object.keys(e).length===0||e.outerHeightStyle===0&&!e.overflow}const yS=b.forwardRef(function(t,a){const{onChange:i,maxRows:n,minRows:s=1,style:r,value:o}=t,l=$(t,hS),{current:u}=b.useRef(o!=null),d=b.useRef(null),h=Qe(a,d),g=b.useRef(null),p=b.useRef(0),[m,c]=b.useState({outerHeightStyle:0}),k=b.useCallback(()=>{const w=d.current,q=ca(w).getComputedStyle(w);if(q.width==="0px")return{outerHeightStyle:0};const T=g.current;T.style.width=q.width,T.value=w.value||t.placeholder||"x",T.value.slice(-1)===`
`&&(T.value+=" ");const C=q.boxSizing,A=Tr(q.paddingBottom)+Tr(q.paddingTop),S=Tr(q.borderBottomWidth)+Tr(q.borderTopWidth),I=T.scrollHeight;T.value="x";const j=T.scrollHeight;let O=I;s&&(O=Math.max(Number(s)*j,O)),n&&(O=Math.min(Number(n)*j,O)),O=Math.max(O,j);const E=O+(C==="border-box"?A+S:0),F=Math.abs(O-I)<=1;return{outerHeightStyle:E,overflow:F}},[n,s,t.placeholder]),y=(w,D)=>{const{outerHeightStyle:q,overflow:T}=D;return p.current<20&&(q>0&&Math.abs((w.outerHeightStyle||0)-q)>1||w.overflow!==T)?(p.current+=1,{overflow:T,outerHeightStyle:q}):w},_=b.useCallback(()=>{const w=k();nh(w)||c(D=>y(D,w))},[k]);Pa(()=>{const w=()=>{const I=k();nh(I)||Go.flushSync(()=>{c(j=>y(j,I))})},D=()=>{p.current=0,w()};let q;const T=ol(D),C=d.current,A=ca(C);A.addEventListener("resize",T);let S;return typeof ResizeObserver<"u"&&(S=new ResizeObserver(D),S.observe(C)),()=>{T.clear(),cancelAnimationFrame(q),A.removeEventListener("resize",T),S&&S.disconnect()}},[k]),Pa(()=>{_()}),b.useEffect(()=>{p.current=0},[o]);const v=w=>{p.current=0,u||_(),i&&i(w)};return f.jsxs(b.Fragment,{children:[f.jsx("textarea",x({value:o,onChange:v,ref:h,rows:s,style:x({height:m.outerHeightStyle,overflow:m.overflow?"hidden":void 0},r)},l)),f.jsx("textarea",{"aria-hidden":!0,className:t.className,readOnly:!0,ref:g,tabIndex:-1,style:x({},gS.shadow,r,{paddingTop:0,paddingBottom:0})})]})}),Sp=e=>e.scrollTop;function Dn(e,t){var a,i;const{timeout:n,easing:s,style:r={}}=e;return{duration:(a=r.transitionDuration)!=null?a:typeof n=="number"?n:n[t.mode]||0,easing:(i=r.transitionTimingFunction)!=null?i:typeof s=="object"?s[t.mode]:s,delay:r.transitionDelay}}const _S=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Jd(e){return`scale(${e}, ${e**2})`}const vS={entering:{opacity:1,transform:Jd(1)},entered:{opacity:1,transform:"none"}},qu=typeof navigator<"u"&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),ov=b.forwardRef(function(t,a){const{addEndListener:i,appear:n=!0,children:s,easing:r,in:o,onEnter:l,onEntered:u,onEntering:d,onExit:h,onExited:g,onExiting:p,style:m,timeout:c="auto",TransitionComponent:k=Dp}=t,y=$(t,_S),_=b.useRef(),v=b.useRef(),w=jn(),D=b.useRef(null),q=Qe(D,s.ref,a),T=F=>M=>{if(F){const B=D.current;M===void 0?F(B):F(B,M)}},C=T(d),A=T((F,M)=>{Sp(F);const{duration:B,delay:P,easing:N}=Dn({style:m,timeout:c,easing:r},{mode:"enter"});let L;c==="auto"?(L=w.transitions.getAutoHeightDuration(F.clientHeight),v.current=L):L=B,F.style.transition=[w.transitions.create("opacity",{duration:L,delay:P}),w.transitions.create("transform",{duration:qu?L:L*.666,delay:P,easing:N})].join(","),l&&l(F,M)}),S=T(u),I=T(p),j=T(F=>{const{duration:M,delay:B,easing:P}=Dn({style:m,timeout:c,easing:r},{mode:"exit"});let N;c==="auto"?(N=w.transitions.getAutoHeightDuration(F.clientHeight),v.current=N):N=M,F.style.transition=[w.transitions.create("opacity",{duration:N,delay:B}),w.transitions.create("transform",{duration:qu?N:N*.666,delay:qu?B:B||N*.333,easing:P})].join(","),F.style.opacity=0,F.style.transform=Jd(.75),h&&h(F)}),O=T(g),E=F=>{c==="auto"&&(_.current=setTimeout(F,v.current||0)),i&&i(D.current,F)};return b.useEffect(()=>()=>{clearTimeout(_.current)},[]),f.jsx(k,x({appear:n,in:o,nodeRef:D,onEnter:A,onEntered:S,onEntering:C,onExit:j,onExited:O,onExiting:I,addEndListener:E,timeout:c==="auto"?null:c},y,{children:(F,M)=>b.cloneElement(s,x({style:x({opacity:0,transform:Jd(.75),visibility:F==="exited"&&!o?"hidden":void 0},vS[F],m,s.props.style),ref:q},M))}))});ov.muiSupportAuto=!0;const bS=ov,wS=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],TS={entering:{opacity:1},entered:{opacity:1}},kS=b.forwardRef(function(t,a){const i=jn(),n={enter:i.transitions.duration.enteringScreen,exit:i.transitions.duration.leavingScreen},{addEndListener:s,appear:r=!0,children:o,easing:l,in:u,onEnter:d,onEntered:h,onEntering:g,onExit:p,onExited:m,onExiting:c,style:k,timeout:y=n,TransitionComponent:_=Dp}=t,v=$(t,wS),w=b.useRef(null),D=Qe(w,o.ref,a),q=E=>F=>{if(E){const M=w.current;F===void 0?E(M):E(M,F)}},T=q(g),C=q((E,F)=>{Sp(E);const M=Dn({style:k,timeout:y,easing:l},{mode:"enter"});E.style.webkitTransition=i.transitions.create("opacity",M),E.style.transition=i.transitions.create("opacity",M),d&&d(E,F)}),A=q(h),S=q(c),I=q(E=>{const F=Dn({style:k,timeout:y,easing:l},{mode:"exit"});E.style.webkitTransition=i.transitions.create("opacity",F),E.style.transition=i.transitions.create("opacity",F),p&&p(E)}),j=q(m),O=E=>{s&&s(w.current,E)};return f.jsx(_,x({appear:r,in:u,nodeRef:w,onEnter:C,onEntered:A,onEntering:T,onExit:I,onExited:j,onExiting:S,addEndListener:O,timeout:y},v,{children:(E,F)=>b.cloneElement(o,x({style:x({opacity:0,visibility:E==="exited"&&!u?"hidden":void 0},TS[E],k,o.props.style),ref:D},F))}))}),lv=kS;function xS(e){return fe("MuiBackdrop",e)}re("MuiBackdrop",["root","invisible"]);const DS=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],qS=e=>{const{classes:t,invisible:a}=e;return me({root:["root",a&&"invisible"]},xS,t)},CS=W("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.invisible&&t.invisible]}})(({ownerState:e})=>x({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"})),SS=b.forwardRef(function(t,a){var i,n,s;const r=he({props:t,name:"MuiBackdrop"}),{children:o,className:l,component:u="div",components:d={},componentsProps:h={},invisible:g=!1,open:p,slotProps:m={},slots:c={},TransitionComponent:k=lv,transitionDuration:y}=r,_=$(r,DS),v=x({},r,{component:u,invisible:g}),w=qS(v),D=(i=m.root)!=null?i:h.root;return f.jsx(k,x({in:p,timeout:y},_,{children:f.jsx(CS,x({"aria-hidden":!0},D,{as:(n=(s=c.root)!=null?s:d.Root)!=null?n:u,className:V(w.root,l,D==null?void 0:D.className),ownerState:x({},v,D==null?void 0:D.ownerState),classes:w,ref:a,children:o}))}))}),uv=SS;function PS(e){return fe("MuiModal",e)}re("MuiModal",["root","hidden","backdrop"]);const AS=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","container","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","onTransitionEnter","onTransitionExited","open","slotProps","slots","theme"],RS=e=>{const{open:t,exited:a,classes:i}=e;return me({root:["root",!t&&a&&"hidden"],backdrop:["backdrop"]},PS,i)},ES=W("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,!a.open&&a.exited&&t.hidden]}})(({theme:e,ownerState:t})=>x({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"})),IS=W(uv,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),NS=b.forwardRef(function(t,a){var i,n,s,r,o,l;const u=he({name:"MuiModal",props:t}),{BackdropComponent:d=IS,BackdropProps:h,className:g,closeAfterTransition:p=!1,children:m,container:c,component:k,components:y={},componentsProps:_={},disableAutoFocus:v=!1,disableEnforceFocus:w=!1,disableEscapeKeyDown:D=!1,disablePortal:q=!1,disableRestoreFocus:T=!1,disableScrollLock:C=!1,hideBackdrop:A=!1,keepMounted:S=!1,onBackdropClick:I,open:j,slotProps:O,slots:E}=u,F=$(u,AS),M=x({},u,{closeAfterTransition:p,disableAutoFocus:v,disableEnforceFocus:w,disableEscapeKeyDown:D,disablePortal:q,disableRestoreFocus:T,disableScrollLock:C,hideBackdrop:A,keepMounted:S}),{getRootProps:B,getBackdropProps:P,getTransitionProps:N,portalRef:L,isTopModal:te,exited:X,hasTransition:Ne}=mS(x({},M,{rootRef:a})),Z=x({},M,{exited:X}),we=RS(Z),le={};if(m.props.tabIndex===void 0&&(le.tabIndex="-1"),Ne){const{onEnter:Q,onExited:ce}=N();le.onEnter=Q,le.onExited=ce}const Ke=(i=(n=E==null?void 0:E.root)!=null?n:y.Root)!=null?i:ES,Et=(s=(r=E==null?void 0:E.backdrop)!=null?r:y.Backdrop)!=null?s:d,je=(o=O==null?void 0:O.root)!=null?o:_.root,ut=(l=O==null?void 0:O.backdrop)!=null?l:_.backdrop,se=xn({elementType:Ke,externalSlotProps:je,externalForwardedProps:F,getSlotProps:B,additionalProps:{ref:a,as:k},ownerState:Z,className:V(g,je==null?void 0:je.className,we==null?void 0:we.root,!Z.open&&Z.exited&&(we==null?void 0:we.hidden))}),qe=xn({elementType:Et,externalSlotProps:ut,additionalProps:h,getSlotProps:Q=>P(x({},Q,{onClick:ce=>{I&&I(ce),Q!=null&&Q.onClick&&Q.onClick(ce)}})),className:V(ut==null?void 0:ut.className,h==null?void 0:h.className,we==null?void 0:we.backdrop),ownerState:Z});return!S&&!j&&(!Ne||X)?null:f.jsx(sS,{ref:L,container:c,disablePortal:q,children:f.jsxs(Ke,x({},se,{children:[!A&&d?f.jsx(Et,x({},qe)):null,f.jsx(iS,{disableEnforceFocus:w,disableAutoFocus:v,disableRestoreFocus:T,isEnabled:te,open:j,children:b.cloneElement(m,le)})]}))})}),Pp=NS;function jS(e){return fe("MuiPaper",e)}re("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const FS=["className","component","elevation","square","variant"],OS=e=>{const{square:t,elevation:a,variant:i,classes:n}=e,s={root:["root",i,!t&&"rounded",i==="elevation"&&`elevation${a}`]};return me(s,jS,n)},MS=W("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,t[a.variant],!a.square&&t.rounded,a.variant==="elevation"&&t[`elevation${a.elevation}`]]}})(({theme:e,ownerState:t})=>{var a;return x({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},t.variant==="outlined"&&{border:`1px solid ${(e.vars||e).palette.divider}`},t.variant==="elevation"&&x({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&e.palette.mode==="dark"&&{backgroundImage:`linear-gradient(${ka("#fff",Wm(t.elevation))}, ${ka("#fff",Wm(t.elevation))})`},e.vars&&{backgroundImage:(a=e.vars.overlays)==null?void 0:a[t.elevation]}))}),LS=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiPaper"}),{className:n,component:s="div",elevation:r=1,square:o=!1,variant:l="elevation"}=i,u=$(i,FS),d=x({},i,{component:s,elevation:r,square:o,variant:l}),h=OS(d);return f.jsx(MS,x({as:s,ownerState:d,className:V(h.root,n),ref:a},u))}),tr=LS;function BS(e){return fe("MuiPopover",e)}re("MuiPopover",["root","paper"]);const zS=["onEntering"],WS=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","slots","slotProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps","disableScrollLock"],$S=["slotProps"];function sh(e,t){let a=0;return typeof t=="number"?a=t:t==="center"?a=e.height/2:t==="bottom"&&(a=e.height),a}function rh(e,t){let a=0;return typeof t=="number"?a=t:t==="center"?a=e.width/2:t==="right"&&(a=e.width),a}function oh(e){return[e.horizontal,e.vertical].map(t=>typeof t=="number"?`${t}px`:t).join(" ")}function Cu(e){return typeof e=="function"?e():e}const US=e=>{const{classes:t}=e;return me({root:["root"],paper:["paper"]},BS,t)},KS=W(Pp,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),dv=W(tr,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),VS=b.forwardRef(function(t,a){var i,n,s;const r=he({props:t,name:"MuiPopover"}),{action:o,anchorEl:l,anchorOrigin:u={vertical:"top",horizontal:"left"},anchorPosition:d,anchorReference:h="anchorEl",children:g,className:p,container:m,elevation:c=8,marginThreshold:k=16,open:y,PaperProps:_={},slots:v,slotProps:w,transformOrigin:D={vertical:"top",horizontal:"left"},TransitionComponent:q=bS,transitionDuration:T="auto",TransitionProps:{onEntering:C}={},disableScrollLock:A=!1}=r,S=$(r.TransitionProps,zS),I=$(r,WS),j=(i=w==null?void 0:w.paper)!=null?i:_,O=b.useRef(),E=Qe(O,j.ref),F=x({},r,{anchorOrigin:u,anchorReference:h,elevation:c,marginThreshold:k,externalPaperSlotProps:j,transformOrigin:D,TransitionComponent:q,transitionDuration:T,TransitionProps:S}),M=US(F),B=b.useCallback(()=>{if(h==="anchorPosition")return d;const Q=Cu(l),Te=(Q&&Q.nodeType===1?Q:_t(O.current).body).getBoundingClientRect();return{top:Te.top+sh(Te,u.vertical),left:Te.left+rh(Te,u.horizontal)}},[l,u.horizontal,u.vertical,d,h]),P=b.useCallback(Q=>({vertical:sh(Q,D.vertical),horizontal:rh(Q,D.horizontal)}),[D.horizontal,D.vertical]),N=b.useCallback(Q=>{const ce={width:Q.offsetWidth,height:Q.offsetHeight},Te=P(ce);if(h==="none")return{top:null,left:null,transformOrigin:oh(Te)};const ja=B();let It=ja.top-Te.vertical,Nt=ja.left-Te.horizontal;const Ut=It+ce.height,jt=Nt+ce.width,Ce=ca(Cu(l)),ma=Ce.innerHeight-k,dt=Ce.innerWidth-k;if(k!==null&&It<k){const ke=It-k;It-=ke,Te.vertical+=ke}else if(k!==null&&Ut>ma){const ke=Ut-ma;It-=ke,Te.vertical+=ke}if(k!==null&&Nt<k){const ke=Nt-k;Nt-=ke,Te.horizontal+=ke}else if(jt>dt){const ke=jt-dt;Nt-=ke,Te.horizontal+=ke}return{top:`${Math.round(It)}px`,left:`${Math.round(Nt)}px`,transformOrigin:oh(Te)}},[l,h,B,P,k]),[L,te]=b.useState(y),X=b.useCallback(()=>{const Q=O.current;if(!Q)return;const ce=N(Q);ce.top!==null&&(Q.style.top=ce.top),ce.left!==null&&(Q.style.left=ce.left),Q.style.transformOrigin=ce.transformOrigin,te(!0)},[N]);b.useEffect(()=>(A&&window.addEventListener("scroll",X),()=>window.removeEventListener("scroll",X)),[l,A,X]);const Ne=(Q,ce)=>{C&&C(Q,ce),X()},Z=()=>{te(!1)};b.useEffect(()=>{y&&X()}),b.useImperativeHandle(o,()=>y?{updatePosition:()=>{X()}}:null,[y,X]),b.useEffect(()=>{if(!y)return;const Q=ol(()=>{X()}),ce=ca(l);return ce.addEventListener("resize",Q),()=>{Q.clear(),ce.removeEventListener("resize",Q)}},[l,y,X]);let we=T;T==="auto"&&!q.muiSupportAuto&&(we=void 0);const le=m||(l?_t(Cu(l)).body:void 0),Ke=(n=v==null?void 0:v.root)!=null?n:KS,Et=(s=v==null?void 0:v.paper)!=null?s:dv,je=xn({elementType:Et,externalSlotProps:x({},j,{style:L?j.style:x({},j.style,{opacity:0})}),additionalProps:{elevation:c,ref:E},ownerState:F,className:V(M.paper,j==null?void 0:j.className)}),ut=xn({elementType:Ke,externalSlotProps:(w==null?void 0:w.root)||{},externalForwardedProps:I,additionalProps:{ref:a,slotProps:{backdrop:{invisible:!0}},container:le,open:y},ownerState:F,className:V(M.root,p)}),{slotProps:se}=ut,qe=$(ut,$S);return f.jsx(Ke,x({},qe,!Ao(Ke)&&{slotProps:se,disableScrollLock:A},{children:f.jsx(q,x({appear:!0,in:y,onEntering:Ne,onExited:Z,timeout:we},S,{children:f.jsx(Et,x({},je,{children:g}))}))}))}),HS=VS;function GS(e){return fe("MuiMenu",e)}re("MuiMenu",["root","paper","list"]);const XS=["onEntering"],JS=["autoFocus","children","className","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant","slots","slotProps"],QS={vertical:"top",horizontal:"right"},YS={vertical:"top",horizontal:"left"},ZS=e=>{const{classes:t}=e;return me({root:["root"],paper:["paper"],list:["list"]},GS,t)},e2=W(HS,{shouldForwardProp:e=>Rt(e)||e==="classes",name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),t2=W(dv,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),a2=W(JC,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),i2=b.forwardRef(function(t,a){var i,n;const s=he({props:t,name:"MuiMenu"}),{autoFocus:r=!0,children:o,className:l,disableAutoFocusItem:u=!1,MenuListProps:d={},onClose:h,open:g,PaperProps:p={},PopoverClasses:m,transitionDuration:c="auto",TransitionProps:{onEntering:k}={},variant:y="selectedMenu",slots:_={},slotProps:v={}}=s,w=$(s.TransitionProps,XS),D=$(s,JS),q=jn(),T=q.direction==="rtl",C=x({},s,{autoFocus:r,disableAutoFocusItem:u,MenuListProps:d,onEntering:k,PaperProps:p,transitionDuration:c,TransitionProps:w,variant:y}),A=ZS(C),S=r&&!u&&g,I=b.useRef(null),j=(N,L)=>{I.current&&I.current.adjustStyleForScrollbar(N,q),k&&k(N,L)},O=N=>{N.key==="Tab"&&(N.preventDefault(),h&&h(N,"tabKeyDown"))};let E=-1;b.Children.map(o,(N,L)=>{b.isValidElement(N)&&(N.props.disabled||(y==="selectedMenu"&&N.props.selected||E===-1)&&(E=L))});const F=(i=_.paper)!=null?i:t2,M=(n=v.paper)!=null?n:p,B=xn({elementType:_.root,externalSlotProps:v.root,ownerState:C,className:[A.root,l]}),P=xn({elementType:F,externalSlotProps:M,ownerState:C,className:A.paper});return f.jsx(e2,x({onClose:h,anchorOrigin:{vertical:"bottom",horizontal:T?"right":"left"},transformOrigin:T?QS:YS,slots:{paper:F,root:_.root},slotProps:{root:B,paper:P},open:g,ref:a,transitionDuration:c,TransitionProps:x({onEntering:j},w),ownerState:C},D,{classes:m,children:f.jsx(a2,x({onKeyDown:O,actions:I,autoFocus:r&&(E===-1||u),autoFocusItem:S,variant:y},d,{className:V(A.list,d.className),children:o}))}))}),n2=i2;function s2(e){return fe("MuiNativeSelect",e)}const r2=re("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),Ap=r2,o2=["className","disabled","error","IconComponent","inputRef","variant"],l2=e=>{const{classes:t,variant:a,disabled:i,multiple:n,open:s,error:r}=e,o={select:["select",a,i&&"disabled",n&&"multiple",r&&"error"],icon:["icon",`icon${G(a)}`,s&&"iconOpen",i&&"disabled"]};return me(o,s2,t)},cv=({ownerState:e,theme:t})=>x({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":x({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:t.palette.mode==="light"?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${Ap.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},e.variant==="filled"&&{"&&&":{paddingRight:32}},e.variant==="outlined"&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),u2=W("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:Rt,overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.select,t[a.variant],a.error&&t.error,{[`&.${Ap.multiple}`]:t.multiple}]}})(cv),pv=({ownerState:e,theme:t})=>x({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,[`&.${Ap.disabled}`]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},e.variant==="filled"&&{right:7},e.variant==="outlined"&&{right:7}),d2=W("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.icon,a.variant&&t[`icon${G(a.variant)}`],a.open&&t.iconOpen]}})(pv),c2=b.forwardRef(function(t,a){const{className:i,disabled:n,error:s,IconComponent:r,inputRef:o,variant:l="standard"}=t,u=$(t,o2),d=x({},t,{disabled:n,variant:l,error:s}),h=l2(d);return f.jsxs(b.Fragment,{children:[f.jsx(u2,x({ownerState:d,className:V(h.select,i),disabled:n,ref:o||a},u)),t.multiple?null:f.jsx(d2,{as:r,ownerState:d,className:h.icon})]})}),p2=c2;function f2(e){return fe("MuiSelect",e)}const m2=re("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),Jn=m2;var lh;const h2=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],g2=W("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[{[`&.${Jn.select}`]:t.select},{[`&.${Jn.select}`]:t[a.variant]},{[`&.${Jn.error}`]:t.error},{[`&.${Jn.multiple}`]:t.multiple}]}})(cv,{[`&.${Jn.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),y2=W("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.icon,a.variant&&t[`icon${G(a.variant)}`],a.open&&t.iconOpen]}})(pv),_2=W("input",{shouldForwardProp:e=>lD(e)&&e!=="classes",name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function uh(e,t){return typeof t=="object"&&t!==null?e===t:String(e)===String(t)}function v2(e){return e==null||typeof e=="string"&&!e.trim()}const b2=e=>{const{classes:t,variant:a,disabled:i,multiple:n,open:s,error:r}=e,o={select:["select",a,i&&"disabled",n&&"multiple",r&&"error"],icon:["icon",`icon${G(a)}`,s&&"iconOpen",i&&"disabled"],nativeInput:["nativeInput"]};return me(o,f2,t)},w2=b.forwardRef(function(t,a){var i;const{"aria-describedby":n,"aria-label":s,autoFocus:r,autoWidth:o,children:l,className:u,defaultOpen:d,defaultValue:h,disabled:g,displayEmpty:p,error:m=!1,IconComponent:c,inputRef:k,labelId:y,MenuProps:_={},multiple:v,name:w,onBlur:D,onChange:q,onClose:T,onFocus:C,onOpen:A,open:S,readOnly:I,renderValue:j,SelectDisplayProps:O={},tabIndex:E,value:F,variant:M="standard"}=t,B=$(t,h2),[P,N]=Id({controlled:F,default:h,name:"Select"}),[L,te]=Id({controlled:S,default:d,name:"Select"}),X=b.useRef(null),Ne=b.useRef(null),[Z,we]=b.useState(null),{current:le}=b.useRef(S!=null),[Ke,Et]=b.useState(),je=Qe(a,k),ut=b.useCallback(U=>{Ne.current=U,U&&we(U)},[]),se=Z==null?void 0:Z.parentNode;b.useImperativeHandle(je,()=>({focus:()=>{Ne.current.focus()},node:X.current,value:P}),[P]),b.useEffect(()=>{d&&L&&Z&&!le&&(Et(o?null:se.clientWidth),Ne.current.focus())},[Z,o]),b.useEffect(()=>{r&&Ne.current.focus()},[r]),b.useEffect(()=>{if(!y)return;const U=_t(Ne.current).getElementById(y);if(U){const _e=()=>{getSelection().isCollapsed&&Ne.current.focus()};return U.addEventListener("click",_e),()=>{U.removeEventListener("click",_e)}}},[y]);const qe=(U,_e)=>{U?A&&A(_e):T&&T(_e),le||(Et(o?null:se.clientWidth),te(U))},Q=U=>{U.button===0&&(U.preventDefault(),Ne.current.focus(),qe(!0,U))},ce=U=>{qe(!1,U)},Te=b.Children.toArray(l),ja=U=>{const _e=Te.find(Ve=>Ve.props.value===U.target.value);_e!==void 0&&(N(_e.props.value),q&&q(U,_e))},It=U=>_e=>{let Ve;if(_e.currentTarget.hasAttribute("tabindex")){if(v){Ve=Array.isArray(P)?P.slice():[];const Mi=P.indexOf(U.props.value);Mi===-1?Ve.push(U.props.value):Ve.splice(Mi,1)}else Ve=U.props.value;if(U.props.onClick&&U.props.onClick(_e),P!==Ve&&(N(Ve),q)){const Mi=_e.nativeEvent||_e,Hp=new Mi.constructor(Mi.type,Mi);Object.defineProperty(Hp,"target",{writable:!0,value:{value:Ve,name:w}}),q(Hp,U)}v||qe(!1,_e)}},Nt=U=>{I||[" ","ArrowUp","ArrowDown","Enter"].indexOf(U.key)!==-1&&(U.preventDefault(),qe(!0,U))},Ut=Z!==null&&L,jt=U=>{!Ut&&D&&(Object.defineProperty(U,"target",{writable:!0,value:{value:P,name:w}}),D(U))};delete B["aria-invalid"];let Ce,ma;const dt=[];let ke=!1;(Po({value:P})||p)&&(j?Ce=j(P):ke=!0);const ea=Te.map(U=>{if(!b.isValidElement(U))return null;let _e;if(v){if(!Array.isArray(P))throw new Error(si(2));_e=P.some(Ve=>uh(Ve,U.props.value)),_e&&ke&&dt.push(U.props.children)}else _e=uh(P,U.props.value),_e&&ke&&(ma=U.props.children);return b.cloneElement(U,{"aria-selected":_e?"true":"false",onClick:It(U),onKeyUp:Ve=>{Ve.key===" "&&Ve.preventDefault(),U.props.onKeyUp&&U.props.onKeyUp(Ve)},role:"option",selected:_e,value:void 0,"data-value":U.props.value})});ke&&(v?dt.length===0?Ce=null:Ce=dt.reduce((U,_e,Ve)=>(U.push(_e),Ve<dt.length-1&&U.push(", "),U),[]):Ce=ma);let Fa=Ke;!o&&le&&Z&&(Fa=se.clientWidth);let ha;typeof E<"u"?ha=E:ha=g?null:0;const ge=O.id||(w?`mui-component-select-${w}`:void 0),K=x({},t,{variant:M,value:P,open:Ut,error:m}),ga=b2(K),Fn=x({},_.PaperProps,(i=_.slotProps)==null?void 0:i.paper),On=np();return f.jsxs(b.Fragment,{children:[f.jsx(g2,x({ref:ut,tabIndex:ha,role:"combobox","aria-controls":On,"aria-disabled":g?"true":void 0,"aria-expanded":Ut?"true":"false","aria-haspopup":"listbox","aria-label":s,"aria-labelledby":[y,ge].filter(Boolean).join(" ")||void 0,"aria-describedby":n,onKeyDown:Nt,onMouseDown:g||I?null:Q,onBlur:jt,onFocus:C},O,{ownerState:K,className:V(O.className,ga.select,u),id:ge,children:v2(Ce)?lh||(lh=f.jsx("span",{className:"notranslate",children:"​"})):Ce})),f.jsx(_2,x({"aria-invalid":m,value:Array.isArray(P)?P.join(","):P,name:w,ref:X,"aria-hidden":!0,onChange:ja,tabIndex:-1,disabled:g,className:ga.nativeInput,autoFocus:r,ownerState:K},B)),f.jsx(y2,{as:c,className:ga.icon,ownerState:K}),f.jsx(n2,x({id:`menu-${w||""}`,anchorEl:se,open:Ut,onClose:ce,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},_,{MenuListProps:x({"aria-labelledby":y,role:"listbox","aria-multiselectable":v?"true":void 0,disableListWrap:!0,id:On},_.MenuListProps),slotProps:x({},_.slotProps,{paper:x({},Fn,{style:x({minWidth:Fa},Fn!=null?Fn.style:null)})}),children:ea}))]})}),T2=w2,k2=Oi(f.jsx("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");function x2(e){return f.jsx(rx,x({},e,{defaultTheme:El,themeId:Qs}))}function D2(e){return fe("MuiInputBase",e)}const q2=re("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),qn=q2,C2=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],Nl=(e,t)=>{const{ownerState:a}=e;return[t.root,a.formControl&&t.formControl,a.startAdornment&&t.adornedStart,a.endAdornment&&t.adornedEnd,a.error&&t.error,a.size==="small"&&t.sizeSmall,a.multiline&&t.multiline,a.color&&t[`color${G(a.color)}`],a.fullWidth&&t.fullWidth,a.hiddenLabel&&t.hiddenLabel]},jl=(e,t)=>{const{ownerState:a}=e;return[t.input,a.size==="small"&&t.inputSizeSmall,a.multiline&&t.inputMultiline,a.type==="search"&&t.inputTypeSearch,a.startAdornment&&t.inputAdornedStart,a.endAdornment&&t.inputAdornedEnd,a.hiddenLabel&&t.inputHiddenLabel]},S2=e=>{const{classes:t,color:a,disabled:i,error:n,endAdornment:s,focused:r,formControl:o,fullWidth:l,hiddenLabel:u,multiline:d,readOnly:h,size:g,startAdornment:p,type:m}=e,c={root:["root",`color${G(a)}`,i&&"disabled",n&&"error",l&&"fullWidth",r&&"focused",o&&"formControl",g&&g!=="medium"&&`size${G(g)}`,d&&"multiline",p&&"adornedStart",s&&"adornedEnd",u&&"hiddenLabel",h&&"readOnly"],input:["input",i&&"disabled",m==="search"&&"inputTypeSearch",d&&"inputMultiline",g==="small"&&"inputSizeSmall",u&&"inputHiddenLabel",p&&"inputAdornedStart",s&&"inputAdornedEnd",h&&"readOnly"]};return me(c,D2,t)},Fl=W("div",{name:"MuiInputBase",slot:"Root",overridesResolver:Nl})(({theme:e,ownerState:t})=>x({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${qn.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&x({padding:"4px 0 5px"},t.size==="small"&&{paddingTop:1}),t.fullWidth&&{width:"100%"})),Ol=W("input",{name:"MuiInputBase",slot:"Input",overridesResolver:jl})(({theme:e,ownerState:t})=>{const a=e.palette.mode==="light",i=x({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:a?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),n={opacity:"0 !important"},s=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:a?.42:.5};return x({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":i,"&::-moz-placeholder":i,"&:-ms-input-placeholder":i,"&::-ms-input-placeholder":i,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${qn.formControl} &`]:{"&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus::-webkit-input-placeholder":s,"&:focus::-moz-placeholder":s,"&:focus:-ms-input-placeholder":s,"&:focus::-ms-input-placeholder":s},[`&.${qn.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},t.size==="small"&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},t.type==="search"&&{MozAppearance:"textfield"})}),P2=f.jsx(x2,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),A2=b.forwardRef(function(t,a){var i;const n=he({props:t,name:"MuiInputBase"}),{"aria-describedby":s,autoComplete:r,autoFocus:o,className:l,components:u={},componentsProps:d={},defaultValue:h,disabled:g,disableInjectingGlobalStyles:p,endAdornment:m,fullWidth:c=!1,id:k,inputComponent:y="input",inputProps:_={},inputRef:v,maxRows:w,minRows:D,multiline:q=!1,name:T,onBlur:C,onChange:A,onClick:S,onFocus:I,onKeyDown:j,onKeyUp:O,placeholder:E,readOnly:F,renderSuffix:M,rows:B,slotProps:P={},slots:N={},startAdornment:L,type:te="text",value:X}=n,Ne=$(n,C2),Z=_.value!=null?_.value:X,{current:we}=b.useRef(Z!=null),le=b.useRef(),Ke=b.useCallback(ge=>{},[]),Et=Qe(le,v,_.ref,Ke),[je,ut]=b.useState(!1),se=er(),qe=Zs({props:n,muiFormControl:se,states:["color","disabled","error","hiddenLabel","size","required","filled"]});qe.focused=se?se.focused:je,b.useEffect(()=>{!se&&g&&je&&(ut(!1),C&&C())},[se,g,je,C]);const Q=se&&se.onFilled,ce=se&&se.onEmpty,Te=b.useCallback(ge=>{Po(ge)?Q&&Q():ce&&ce()},[Q,ce]);Pa(()=>{we&&Te({value:Z})},[Z,Te,we]);const ja=ge=>{if(qe.disabled){ge.stopPropagation();return}I&&I(ge),_.onFocus&&_.onFocus(ge),se&&se.onFocus?se.onFocus(ge):ut(!0)},It=ge=>{C&&C(ge),_.onBlur&&_.onBlur(ge),se&&se.onBlur?se.onBlur(ge):ut(!1)},Nt=(ge,...K)=>{if(!we){const ga=ge.target||le.current;if(ga==null)throw new Error(si(1));Te({value:ga.value})}_.onChange&&_.onChange(ge,...K),A&&A(ge,...K)};b.useEffect(()=>{Te(le.current)},[]);const Ut=ge=>{le.current&&ge.currentTarget===ge.target&&le.current.focus(),S&&S(ge)};let jt=y,Ce=_;q&&jt==="input"&&(B?Ce=x({type:void 0,minRows:B,maxRows:B},Ce):Ce=x({type:void 0,maxRows:w,minRows:D},Ce),jt=yS);const ma=ge=>{Te(ge.animationName==="mui-auto-fill-cancel"?le.current:{value:"x"})};b.useEffect(()=>{se&&se.setAdornedStart(!!L)},[se,L]);const dt=x({},n,{color:qe.color||"primary",disabled:qe.disabled,endAdornment:m,error:qe.error,focused:qe.focused,formControl:se,fullWidth:c,hiddenLabel:qe.hiddenLabel,multiline:q,size:qe.size,startAdornment:L,type:te}),ke=S2(dt),ea=N.root||u.Root||Fl,Fa=P.root||d.root||{},ha=N.input||u.Input||Ol;return Ce=x({},Ce,(i=P.input)!=null?i:d.input),f.jsxs(b.Fragment,{children:[!p&&P2,f.jsxs(ea,x({},Fa,!Ao(ea)&&{ownerState:x({},dt,Fa.ownerState)},{ref:a,onClick:Ut},Ne,{className:V(ke.root,Fa.className,l,F&&"MuiInputBase-readOnly"),children:[L,f.jsx(xp.Provider,{value:null,children:f.jsx(ha,x({ownerState:dt,"aria-invalid":qe.error,"aria-describedby":s,autoComplete:r,autoFocus:o,defaultValue:h,disabled:qe.disabled,id:k,onAnimationStart:ma,name:T,placeholder:E,readOnly:F,required:qe.required,rows:B,value:Z,onKeyDown:j,onKeyUp:O,type:te},Ce,!Ao(ha)&&{as:jt,ownerState:x({},dt,Ce.ownerState)},{ref:Et,className:V(ke.input,Ce.className,F&&"MuiInputBase-readOnly"),onBlur:It,onChange:Nt,onFocus:ja}))}),m,M?M(x({},qe,{startAdornment:L})):null]}))]})}),Rp=A2;function R2(e){return fe("MuiInput",e)}const E2=x({},qn,re("MuiInput",["root","underline","input"])),Qn=E2,I2=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],N2=e=>{const{classes:t,disableUnderline:a}=e,n=me({root:["root",!a&&"underline"],input:["input"]},R2,t);return x({},t,n)},j2=W(Fl,{shouldForwardProp:e=>Rt(e)||e==="classes",name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[...Nl(e,t),!a.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{let i=e.palette.mode==="light"?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(i=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),x({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${(e.vars||e).palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${Qn.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${Qn.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${i}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${Qn.disabled}, .${Qn.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${i}`}},[`&.${Qn.disabled}:before`]:{borderBottomStyle:"dotted"}})}),F2=W(Ol,{name:"MuiInput",slot:"Input",overridesResolver:jl})({}),fv=b.forwardRef(function(t,a){var i,n,s,r;const o=he({props:t,name:"MuiInput"}),{disableUnderline:l,components:u={},componentsProps:d,fullWidth:h=!1,inputComponent:g="input",multiline:p=!1,slotProps:m,slots:c={},type:k="text"}=o,y=$(o,I2),_=N2(o),w={root:{ownerState:{disableUnderline:l}}},D=m??d?yt(m??d,w):w,q=(i=(n=c.root)!=null?n:u.Root)!=null?i:j2,T=(s=(r=c.input)!=null?r:u.Input)!=null?s:F2;return f.jsx(Rp,x({slots:{root:q,input:T},slotProps:D,fullWidth:h,inputComponent:g,multiline:p,ref:a,type:k},y,{classes:_}))});fv.muiName="Input";const O2=fv;function M2(e){return fe("MuiFilledInput",e)}const L2=x({},qn,re("MuiFilledInput",["root","underline","input"])),fi=L2,B2=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],z2=e=>{const{classes:t,disableUnderline:a}=e,n=me({root:["root",!a&&"underline"],input:["input"]},M2,t);return x({},t,n)},W2=W(Fl,{shouldForwardProp:e=>Rt(e)||e==="classes",name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[...Nl(e,t),!a.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{var a;const i=e.palette.mode==="light",n=i?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",s=i?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",r=i?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",o=i?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return x({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:s,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:r,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:s}},[`&.${fi.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:s},[`&.${fi.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:o}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${(a=(e.vars||e).palette[t.color||"primary"])==null?void 0:a.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${fi.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${fi.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${fi.disabled}, .${fi.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${fi.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&x({padding:"25px 12px 8px"},t.size==="small"&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.hiddenLabel&&t.size==="small"&&{paddingTop:8,paddingBottom:9}))}),$2=W(Ol,{name:"MuiFilledInput",slot:"Input",overridesResolver:jl})(({theme:e,ownerState:t})=>x({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:e.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:e.palette.mode==="light"?null:"#fff",caretColor:e.palette.mode==="light"?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},t.size==="small"&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&t.size==="small"&&{paddingTop:8,paddingBottom:9},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0})),mv=b.forwardRef(function(t,a){var i,n,s,r;const o=he({props:t,name:"MuiFilledInput"}),{components:l={},componentsProps:u,fullWidth:d=!1,inputComponent:h="input",multiline:g=!1,slotProps:p,slots:m={},type:c="text"}=o,k=$(o,B2),y=x({},o,{fullWidth:d,inputComponent:h,multiline:g,type:c}),_=z2(o),v={root:{ownerState:y},input:{ownerState:y}},w=p??u?yt(p??u,v):v,D=(i=(n=m.root)!=null?n:l.Root)!=null?i:W2,q=(s=(r=m.input)!=null?r:l.Input)!=null?s:$2;return f.jsx(Rp,x({slots:{root:D,input:q},componentsProps:w,fullWidth:d,inputComponent:h,multiline:g,ref:a,type:c},k,{classes:_}))});mv.muiName="Input";const U2=mv;var dh;const K2=["children","classes","className","label","notched"],V2=W("fieldset",{shouldForwardProp:Rt})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),H2=W("legend",{shouldForwardProp:Rt})(({ownerState:e,theme:t})=>x({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&x({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})));function G2(e){const{className:t,label:a,notched:i}=e,n=$(e,K2),s=a!=null&&a!=="",r=x({},e,{notched:i,withLabel:s});return f.jsx(V2,x({"aria-hidden":!0,className:t,ownerState:r},n,{children:f.jsx(H2,{ownerState:r,children:s?f.jsx("span",{children:a}):dh||(dh=f.jsx("span",{className:"notranslate",children:"​"}))})}))}function X2(e){return fe("MuiOutlinedInput",e)}const J2=x({},qn,re("MuiOutlinedInput",["root","notchedOutline","input"])),Ma=J2,Q2=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],Y2=e=>{const{classes:t}=e,i=me({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},X2,t);return x({},t,i)},Z2=W(Fl,{shouldForwardProp:e=>Rt(e)||e==="classes",name:"MuiOutlinedInput",slot:"Root",overridesResolver:Nl})(({theme:e,ownerState:t})=>{const a=e.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return x({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${Ma.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${Ma.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:a}},[`&.${Ma.focused} .${Ma.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${Ma.error} .${Ma.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${Ma.disabled} .${Ma.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&x({padding:"16.5px 14px"},t.size==="small"&&{padding:"8.5px 14px"}))}),eP=W(G2,{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})(({theme:e})=>{const t=e.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}}),tP=W(Ol,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:jl})(({theme:e,ownerState:t})=>x({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:e.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:e.palette.mode==="light"?null:"#fff",caretColor:e.palette.mode==="light"?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},t.size==="small"&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0})),hv=b.forwardRef(function(t,a){var i,n,s,r,o;const l=he({props:t,name:"MuiOutlinedInput"}),{components:u={},fullWidth:d=!1,inputComponent:h="input",label:g,multiline:p=!1,notched:m,slots:c={},type:k="text"}=l,y=$(l,Q2),_=Y2(l),v=er(),w=Zs({props:l,muiFormControl:v,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),D=x({},l,{color:w.color||"primary",disabled:w.disabled,error:w.error,focused:w.focused,formControl:v,fullWidth:d,hiddenLabel:w.hiddenLabel,multiline:p,size:w.size,type:k}),q=(i=(n=c.root)!=null?n:u.Root)!=null?i:Z2,T=(s=(r=c.input)!=null?r:u.Input)!=null?s:tP;return f.jsx(Rp,x({slots:{root:q,input:T},renderSuffix:C=>f.jsx(eP,{ownerState:D,className:_.notchedOutline,label:g!=null&&g!==""&&w.required?o||(o=f.jsxs(b.Fragment,{children:[g," ","*"]})):g,notched:typeof m<"u"?m:!!(C.startAdornment||C.filled||C.focused)}),fullWidth:d,inputComponent:h,multiline:p,ref:a,type:k},y,{classes:x({},_,{notchedOutline:null})}))});hv.muiName="Input";const aP=hv,iP=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],nP=["root"],sP=e=>{const{classes:t}=e;return t},Ep={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>Rt(e)&&e!=="variant",slot:"Root"},rP=W(O2,Ep)(""),oP=W(aP,Ep)(""),lP=W(U2,Ep)(""),gv=b.forwardRef(function(t,a){const i=he({name:"MuiSelect",props:t}),{autoWidth:n=!1,children:s,classes:r={},className:o,defaultOpen:l=!1,displayEmpty:u=!1,IconComponent:d=k2,id:h,input:g,inputProps:p,label:m,labelId:c,MenuProps:k,multiple:y=!1,native:_=!1,onClose:v,onOpen:w,open:D,renderValue:q,SelectDisplayProps:T,variant:C="outlined"}=i,A=$(i,iP),S=_?p2:T2,I=er(),j=Zs({props:i,muiFormControl:I,states:["variant","error"]}),O=j.variant||C,E=x({},i,{variant:O,classes:r}),F=sP(E),M=$(F,nP),B=g||{standard:f.jsx(rP,{ownerState:E}),outlined:f.jsx(oP,{label:m,ownerState:E}),filled:f.jsx(lP,{ownerState:E})}[O],P=Qe(a,B.ref);return f.jsx(b.Fragment,{children:b.cloneElement(B,x({inputComponent:S,inputProps:x({children:s,error:j.error,IconComponent:d,variant:O,type:void 0,multiple:y},_?{id:h}:{autoWidth:n,defaultOpen:l,displayEmpty:u,labelId:c,MenuProps:k,onClose:v,onOpen:w,open:D,renderValue:q,SelectDisplayProps:x({id:h},T)},p,{classes:p?yt(M,p.classes):M},g?g.props.inputProps:{})},y&&_&&O==="outlined"?{notched:!0}:{},{ref:P,className:V(B.props.className,o,F.root)},!g&&{variant:O},A))})});gv.muiName="Select";const uP=gv,dP=fa.plugins,yv=b.createContext(),_v=()=>b.useContext(yv),cP=({children:e})=>{const[t,a]=b.useState("release"),[i,n]=b.useState(dP);return f.jsx(yv.Provider,{value:{sortOption:t,setSortOption:a,sortedData:i,setSortedData:n},children:e})},Su=fa.plugins;function pP(){const{setSearchQuery:e,setIsSearchSubmitted:t}=Ys(),{sortOption:a,setSortOption:i,setSortedData:n}=_v();b.useEffect(()=>{document.documentElement.style.scrollBehavior="auto",l(a),s()},[a]);function s(){var u=window.scrollY;window.onscroll=function(){var d=window.scrollY;u>d?document.querySelector("header").style.top="0":u>150&&(document.querySelector("header").style.top="-155px"),u=d}}function r(u){const d=Object.entries(u);return d.sort(([,h],[,g])=>g.commits_count-h.commits_count),Object.fromEntries(d)}function o(u){const d=Object.entries(u);return d.sort(([,h],[,g])=>!h.metadata.release_date&&!g.metadata.release_date?0:h.metadata.release_date?g.metadata.release_date?new Date(g.metadata.release_date)-new Date(h.metadata.release_date):-1:1),Object.fromEntries(d)}const l=u=>{i(u),e(""),t(!1);let d={};u==="commits"?d=r(Su):u=="alpha"?d=Su:u=="release"&&(d=o(Su)),n(d)};return f.jsx(bq,{children:f.jsxs(OC,{children:[f.jsx(jq,{children:"Sort"}),f.jsxs(uP,{value:a,label:"Sort",onChange:u=>l(u.target.value),children:[f.jsx(ku,{value:"commits",children:"Commits Count"}),f.jsx(ku,{value:"alpha",children:"Alphabetical"}),f.jsx(ku,{value:"release",children:"Recent Release"})]})]})})}var Ip={},fP=tp;Object.defineProperty(Ip,"__esModule",{value:!0});var vv=Ip.default=void 0,mP=fP(wp()),hP=f,gP=(0,mP.default)((0,hP.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckCircle");vv=Ip.default=gP;function yP(e){return fe("MuiDialog",e)}const _P=re("MuiDialog",["root","scrollPaper","scrollBody","container","paper","paperScrollPaper","paperScrollBody","paperWidthFalse","paperWidthXs","paperWidthSm","paperWidthMd","paperWidthLg","paperWidthXl","paperFullWidth","paperFullScreen"]),Pu=_P,vP=b.createContext({}),bv=vP,bP=["aria-describedby","aria-labelledby","BackdropComponent","BackdropProps","children","className","disableEscapeKeyDown","fullScreen","fullWidth","maxWidth","onBackdropClick","onClose","open","PaperComponent","PaperProps","scroll","TransitionComponent","transitionDuration","TransitionProps"],wP=W(uv,{name:"MuiDialog",slot:"Backdrop",overrides:(e,t)=>t.backdrop})({zIndex:-1}),TP=e=>{const{classes:t,scroll:a,maxWidth:i,fullWidth:n,fullScreen:s}=e,r={root:["root"],container:["container",`scroll${G(a)}`],paper:["paper",`paperScroll${G(a)}`,`paperWidth${G(String(i))}`,n&&"paperFullWidth",s&&"paperFullScreen"]};return me(r,yP,t)},kP=W(Pp,{name:"MuiDialog",slot:"Root",overridesResolver:(e,t)=>t.root})({"@media print":{position:"absolute !important"}}),xP=W("div",{name:"MuiDialog",slot:"Container",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.container,t[`scroll${G(a.scroll)}`]]}})(({ownerState:e})=>x({height:"100%","@media print":{height:"auto"},outline:0},e.scroll==="paper"&&{display:"flex",justifyContent:"center",alignItems:"center"},e.scroll==="body"&&{overflowY:"auto",overflowX:"hidden",textAlign:"center","&:after":{content:'""',display:"inline-block",verticalAlign:"middle",height:"100%",width:"0"}})),DP=W(tr,{name:"MuiDialog",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.paper,t[`scrollPaper${G(a.scroll)}`],t[`paperWidth${G(String(a.maxWidth))}`],a.fullWidth&&t.paperFullWidth,a.fullScreen&&t.paperFullScreen]}})(({theme:e,ownerState:t})=>x({margin:32,position:"relative",overflowY:"auto","@media print":{overflowY:"visible",boxShadow:"none"}},t.scroll==="paper"&&{display:"flex",flexDirection:"column",maxHeight:"calc(100% - 64px)"},t.scroll==="body"&&{display:"inline-block",verticalAlign:"middle",textAlign:"left"},!t.maxWidth&&{maxWidth:"calc(100% - 64px)"},t.maxWidth==="xs"&&{maxWidth:e.breakpoints.unit==="px"?Math.max(e.breakpoints.values.xs,444):`max(${e.breakpoints.values.xs}${e.breakpoints.unit}, 444px)`,[`&.${Pu.paperScrollBody}`]:{[e.breakpoints.down(Math.max(e.breakpoints.values.xs,444)+32*2)]:{maxWidth:"calc(100% - 64px)"}}},t.maxWidth&&t.maxWidth!=="xs"&&{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`,[`&.${Pu.paperScrollBody}`]:{[e.breakpoints.down(e.breakpoints.values[t.maxWidth]+32*2)]:{maxWidth:"calc(100% - 64px)"}}},t.fullWidth&&{width:"calc(100% - 64px)"},t.fullScreen&&{margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"none",borderRadius:0,[`&.${Pu.paperScrollBody}`]:{margin:0,maxWidth:"100%"}})),qP=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDialog"}),n=jn(),s={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{"aria-describedby":r,"aria-labelledby":o,BackdropComponent:l,BackdropProps:u,children:d,className:h,disableEscapeKeyDown:g=!1,fullScreen:p=!1,fullWidth:m=!1,maxWidth:c="sm",onBackdropClick:k,onClose:y,open:_,PaperComponent:v=tr,PaperProps:w={},scroll:D="paper",TransitionComponent:q=lv,transitionDuration:T=s,TransitionProps:C}=i,A=$(i,bP),S=x({},i,{disableEscapeKeyDown:g,fullScreen:p,fullWidth:m,maxWidth:c,scroll:D}),I=TP(S),j=b.useRef(),O=B=>{j.current=B.target===B.currentTarget},E=B=>{j.current&&(j.current=null,k&&k(B),y&&y(B,"backdropClick"))},F=np(o),M=b.useMemo(()=>({titleId:F}),[F]);return f.jsx(kP,x({className:V(I.root,h),closeAfterTransition:!0,components:{Backdrop:wP},componentsProps:{backdrop:x({transitionDuration:T,as:l},u)},disableEscapeKeyDown:g,onClose:y,open:_,ref:a,onClick:E,ownerState:S},A,{children:f.jsx(q,x({appear:!0,in:_,timeout:T,role:"presentation"},C,{children:f.jsx(xP,{className:V(I.container),onMouseDown:O,ownerState:S,children:f.jsx(DP,x({as:v,elevation:24,role:"dialog","aria-describedby":r,"aria-labelledby":F},w,{className:V(I.paper,w.className),ownerState:S,children:f.jsx(bv.Provider,{value:M,children:d})}))})}))}))}),CP=qP;function SP(e){return fe("MuiDialogContent",e)}re("MuiDialogContent",["root","dividers"]);function PP(e){return fe("MuiDialogTitle",e)}const AP=re("MuiDialogTitle",["root"]),RP=AP,EP=["className","dividers"],IP=e=>{const{classes:t,dividers:a}=e;return me({root:["root",a&&"dividers"]},SP,t)},NP=W("div",{name:"MuiDialogContent",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.dividers&&t.dividers]}})(({theme:e,ownerState:t})=>x({flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"20px 24px"},t.dividers?{padding:"16px 24px",borderTop:`1px solid ${(e.vars||e).palette.divider}`,borderBottom:`1px solid ${(e.vars||e).palette.divider}`}:{[`.${RP.root} + &`]:{paddingTop:0}})),jP=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDialogContent"}),{className:n,dividers:s=!1}=i,r=$(i,EP),o=x({},i,{dividers:s}),l=IP(o);return f.jsx(NP,x({className:V(l.root,n),ownerState:o,ref:a},r))}),FP=jP;function OP(e){return fe("MuiDialogContentText",e)}re("MuiDialogContentText",["root"]);const MP=["children","className"],LP=e=>{const{classes:t}=e,i=me({root:["root"]},OP,t);return x({},t,i)},BP=W(nv,{shouldForwardProp:e=>Rt(e)||e==="classes",name:"MuiDialogContentText",slot:"Root",overridesResolver:(e,t)=>t.root})({}),zP=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDialogContentText"}),{className:n}=i,s=$(i,MP),r=LP(s);return f.jsx(BP,x({component:"p",variant:"body1",color:"text.secondary",ref:a,ownerState:s,className:V(r.root,n)},i,{classes:r}))}),WP=zP,$P=["className","id"],UP=e=>{const{classes:t}=e;return me({root:["root"]},PP,t)},KP=W(nv,{name:"MuiDialogTitle",slot:"Root",overridesResolver:(e,t)=>t.root})({padding:"16px 24px",flex:"0 0 auto"}),VP=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDialogTitle"}),{className:n,id:s}=i,r=$(i,$P),o=i,l=UP(o),{titleId:u=s}=b.useContext(bv);return f.jsx(KP,x({component:"h2",className:V(l.root,n),ownerState:o,ref:a,variant:"h6",id:s??u},r))}),HP=VP,wv="data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAACMAAAAhCAYAAABTERJSAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAFhgAABYYBG6Yz4AAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAUbSURBVFiFzZhrbFRVEMd%2Fc%2B5uu6UUbIFC%2FUAUVEQCLbQJBIiBDyiImJiIhmohYNCkqJAQxASLF8tDgYRHBLXRhIcKNtFEhVDgAxBJqgmVh4JEKg3EIn2QYqBlt917xg%2BFss%2ByaDHOtzsz5z%2B%2FuZl7ztmF%2F5HJvxVQN6cPYX8%2FPLnOmsvNAvqfwuib%2FbNIk9cQeQnLcKRL5xLIV%2Fic9eJeunjPYbRs4FjQSpTB3aS1IpRKeeOOewajy%2FKKEO8Q0DuVdKy8IqsbPulxGHUfCBBu%2BwUYGuFuBTK7wQnht6PEbf4tlRomVRjCbXNjQEB0AyrFQOL5ENIJm7dTLZE6DPJCnEtFZVXDLny%2B4Sjv0PmmYu1ZdUek9RiMgoDmJ8V0L7XJqsZ3UW8YsBOwEeHeeFce7jEYXBy0m9m4BbXqSj2%2Bxnkg26MCVrN6DEZcwggtd8pTFx%2Fh3B9B50YLaFOPwXQKUt0tBLegtSomfBlfY13PwijbEnhztGzgJsK5h9W9qeWwBqjvyhB2iBs1Qz0AU974DciRGO8CVN8AJhAeMAdA3KbrKEtvxhsI%2B9emWiJlGBEU680Cfk%2BSsVqXZvcFYGXjF8ABVJ%2BTNfVXehyms1zzn1gmIOxLEB6E31%2FWBe5rnCarmo7elf7dJEeaLh80GasliI5F6Q9cAz1GY1OJVNDxTzQTw7iY%2FHEZRQY7xqJ9RU2LFe%2FYqakdP911ha0XhjjiTVAkDwgatWfCGeYocx8M3glG8g8EXhSrLrHnEFJ5Ymow%2FkhIYv6ttYUW1iFmEqqxdVoUs9FmsDYSqmtmJh3Cl1%2BVtl2s7owDUdocR5bceiyoSivGTT5vzpbzL1uoBpmcAAQgW7ArnKD9ng9rc%2BNgrobSNwpSkkhcRN%2BvmXLjIsDovYHHEfmsYFygPAnIDEQrQPzJYCOaLHLUfIt7Oq0LJn9fxkSgNCb1qEIQ5UKgT%2Fs6gJmVOOroJhQBXVqw118QtWLdyUxEP45sUpSzqP7RDdFYMyB9UReMiF1MzPwoUqHt8hjGFFeP5wZAbZ%2F0%2BcAtAAcji6LeSq%2FMYiAvSsdw3GtrfVSVFUBbIhwRWYR7yOcr%2FBi%2FB1MSJZ16JlgH1AGM3EO2QnmMyrSbTSiACgFBv4yCUapZkt9qwWVL7aeOyHvArJjm8%2Fz9BhdI4XcZgz2%2FvRALosjsk1ODOyMcJn9%2FYI6IrkS5vxMGdUwou2YKfyVqJpn5t9aNs3gbQMbdbkxnGdsr4bTHm2AxWo9yNZK4PXR3uzhAh%2BM0AZejnCrGdy0UvJxl0oMKgWSLR%2B1LH2aE9ViejiFs%2BXn6bTjng3MlIhJ1I1TkuLdg6OcAbD7Xx%2Bc3y9TrWAiSHqVkbZ2v9ilCo6s4AjwZCzFyD9mOL305nV9aonvsQeT2L0gVk4OwOJqXXVRW7naaxswDKVdlYLyMXAnntteYmws2xcVVZzq%2BtHPAooQggmJkc6TLSusOiL4RKgwzzYU1iFQgiUBA1H7E8yPau%2BZl9P7AblVNebtHqTgxLfRqrNvZWjsHZFuqMqKcDWdlFjF7UGvX8Jn24DyEAykJwNcdg0OvJ4p5pQ9tV6SMlP4A0PNh8aYze1ArROyUNTNouy8tNF3Rt0CSXb6bRFl4%2FIfQzNMjaE9WwpYOWQnOdEF%2BTdJNO0iFh7%2BI0kfORzQZb6P2kymS9oTxzBiM9rUqLWr1WE5G6ODhycQd%2FUnNVeMbcH68hYkGycNoUNWc8fxaxfwhDbHpfwM5oeTY7rUX8QAAAABJRU5ErkJggg%3D%3D";const ch=fa.status_dict,GP="/aiida-registry/pr-preview/pr-280/";function XP(){const{sortOption:e,sortedData:t}=_v();return f.jsx(f.Fragment,{children:Object.entries(t).map(([a,i])=>f.jsxs("div",{className:"submenu-entry",children:[f.jsx(Ii,{to:`/${a}`,children:f.jsxs("h2",{style:{display:"inline"},children:[a," "]})}),i.is_installable==="True"&&f.jsx(JP,{}),f.jsxs("p",{className:"currentstate",children:[f.jsx("img",{className:"svg-badge",src:`${GP}${ch[i.development_status][1]}`,title:ch[i.development_status][0]})," ",i.aiida_version&&f.jsx("img",{className:"svg-badge",title:`Compatible with aiida-core ${i.aiida_version}`,src:`https://img.shields.io/badge/AiiDA-${i.aiida_version}-007ec6.svg?logo=${wv}`}),e==="commits"&&f.jsx("img",{className:"svg-badge",style:{padding:"3px"},src:`https://img.shields.io/badge/Yearly%20Commits-${i.commits_count}-007ec6.svg`}),e==="release"&&i.metadata.release_date&&f.jsx("img",{className:"svg-badge",style:{padding:"3px"},src:`https://img.shields.io/badge/Recent%20Release-${i.metadata.release_date.replace(/-/g,"/")}-007ec6.svg`})]}),f.jsx("p",{children:i.metadata.description}),f.jsxs("ul",{className:"plugin-info",children:[f.jsx("li",{children:f.jsx("a",{href:i.code_home,children:"Source Code"})}),i.documentation_url&&f.jsx("li",{children:f.jsx("a",{href:i.documentation_url,children:"Documentation"})}),f.jsx("li",{children:f.jsx(Ii,{to:`/${a}`,children:"Plugin details"})})]}),i.summaryinfo&&f.jsx(f.Fragment,{children:f.jsx("p",{className:"summaryinfo",children:i.summaryinfo.map(n=>f.jsxs("span",{className:"badge",children:[f.jsx("span",{className:`badge-left ${n.colorclass}`,children:n.text}),f.jsx("span",{className:"badge-right",children:n.count})]},n.text))})})]},a))})}function JP(){const[e,t]=b.useState(!1),a=()=>{t(!0)},i=()=>{t(!1)};return f.jsxs(f.Fragment,{children:[f.jsxs("div",{className:"classbox",style:{backgroundColor:"transparent"},children:[f.jsx(vv,{onClick:a,style:{color:"green",cursor:"pointer",marginBottom:"-5"}}),f.jsx("span",{className:"tooltiptext",children:"Plugin successfully installed"})]}),f.jsxs(CP,{open:e,onClose:i,children:[f.jsx(HP,{children:"This plugin can be installed with the latest aiida-core version."}),f.jsx(FP,{children:f.jsxs(WP,{children:["This check mark indicates that this plugin was installed successfully inside the latest",f.jsxs("a",{rel:"noopener noreferrer",target:"_blank",href:"https://hub.docker.com/r/aiidateam/aiida-core-with-services",children:[f.jsx("code",{children:"aiida-core-with-services"})," docker image"]}),". For in-depth compatibility tests see ",f.jsx("a",{rel:"noopener noreferrer",target:"_blank",href:"https://github.com/aiidateam/aiida-registry/tree/master#how-to-fix-registry-warnings-and-errors",children:"how to reproduce it locally"}),"."]})})]})]})}const QP=fa.globalsummary,YP=fa.plugins,ZP=Object.keys(YP).length;function eA(){return f.jsxs(f.Fragment,{children:[f.jsxs("h2",{children:["Registered plugin packages: ",ZP]}),f.jsx("div",{className:"globalsummary-box",children:f.jsx("div",{style:{display:"table"},children:QP.map(e=>f.jsxs("span",{className:"badge",style:{display:"table-row",lineHeight:2},children:[f.jsx("span",{style:{display:"table-cell",float:"none",textAlign:"right"},children:f.jsxs("span",{className:`badge-left ${e.colorclass} tooltip`,style:{float:"none",display:"inline",textAlign:"right",border:"none"},children:[e.name,e.tooltip&&f.jsx("span",{className:"tooltiptext",children:e.tooltip})]})}),f.jsx("span",{style:{display:"table-cell",float:"none",textAlign:"left"},children:f.jsxs("span",{className:"badge-right",style:{float:"none",display:"inline",textAlign:"left",border:"none"},children:[e.total_num," plugin",e.total_num!==1?"s":""," in ",e.num_entries," package",e.num_entries!==1?"s":""]})})]},e.name))})})]})}function tA(){const{isSearchSubmitted:e}=Ys();return f.jsxs("main",{className:"fade-enter",children:[f.jsx(eA,{}),f.jsxs("div",{id:"entrylist",children:[f.jsx("h1",{children:"Package list"}),f.jsxs("div",{className:"bar-container",children:[f.jsx("div",{style:{flex:"1",marginRight:"10px"},children:f.jsx(hq,{})}),f.jsx(pP,{})]}),e===!0?f.jsx(gq,{}):f.jsx(XP,{})]})]})}function vi(){return vi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},vi.apply(this,arguments)}const aA=["children","options"],ph=["allowFullScreen","allowTransparency","autoComplete","autoFocus","autoPlay","cellPadding","cellSpacing","charSet","className","classId","colSpan","contentEditable","contextMenu","crossOrigin","encType","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","hrefLang","inputMode","keyParams","keyType","marginHeight","marginWidth","maxLength","mediaGroup","minLength","noValidate","radioGroup","readOnly","rowSpan","spellCheck","srcDoc","srcLang","srcSet","tabIndex","useMap"].reduce((e,t)=>(e[t.toLowerCase()]=t,e),{for:"htmlFor"}),fh={amp:"&",apos:"'",gt:">",lt:"<",nbsp:" ",quot:"“"},iA=["style","script"],nA=/([-A-Z0-9_:]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|(?:\{((?:\\.|{[^}]*?}|[^}])*)\})))?/gi,sA=/mailto:/i,rA=/\n{2,}$/,Tv=/^( *>[^\n]+(\n[^\n]+)*\n*)+\n{2,}/,oA=/^ *> ?/gm,lA=/^ {2,}\n/,uA=/^(?:( *[-*_])){3,} *(?:\n *)+\n/,kv=/^\s*(`{3,}|~{3,}) *(\S+)?([^\n]*?)?\n([\s\S]+?)\s*\1 *(?:\n *)*\n?/,xv=/^(?: {4}[^\n]+\n*)+(?:\n *)+\n?/,dA=/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,cA=/^(?:\n *)*\n/,pA=/\r\n?/g,fA=/^\[\^([^\]]+)](:.*)\n/,mA=/^\[\^([^\]]+)]/,hA=/\f/g,gA=/^\s*?\[(x|\s)\]/,Dv=/^ *(#{1,6}) *([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,qv=/^ *(#{1,6}) +([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,Cv=/^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/,Qd=/^ *(?!<[a-z][^ >/]* ?\/>)<([a-z][^ >/]*) ?([^>]*)\/{0}>\n?(\s*(?:<\1[^>]*?>[\s\S]*?<\/\1>|(?!<\1)[\s\S])*?)<\/\1>\n*/i,yA=/&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,Sv=/^<!--[\s\S]*?(?:-->)/,_A=/^(data|aria|x)-[a-z_][a-z\d_.-]*$/,Yd=/^ *<([a-z][a-z0-9:]*)(?:\s+((?:<.*?>|[^>])*))?\/?>(?!<\/\1>)(\s*\n)?/i,vA=/^\{.*\}$/,bA=/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,wA=/^<([^ >]+@[^ >]+)>/,TA=/^<([^ >]+:\/[^ >]+)>/,kA=/-([a-z])?/gi,Pv=/^(.*\|?.*)\n *(\|? *[-:]+ *\|[-| :]*)\n((?:.*\|.*\n)*)\n?/,xA=/^\[([^\]]*)\]:\s+<?([^\s>]+)>?\s*("([^"]*)")?/,DA=/^!\[([^\]]*)\] ?\[([^\]]*)\]/,qA=/^\[([^\]]*)\] ?\[([^\]]*)\]/,CA=/(\[|\])/g,SA=/(\n|^[-*]\s|^#|^ {2,}|^-{2,}|^>\s)/,PA=/\t/g,AA=/^ *\| */,RA=/(^ *\||\| *$)/g,EA=/ *$/,IA=/^ *:-+: *$/,NA=/^ *:-+ *$/,jA=/^ *-+: *$/,FA=/^([*_])\1((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1\1(?!\1)/,OA=/^([*_])((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1(?!\1|\w)/,MA=/^==((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/,LA=/^~~((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,BA=/^\\([^0-9A-Za-z\s])/,zA=/^[\s\S]+?(?=[^0-9A-Z\s\u00c0-\uffff&#;.()'"]|\d+\.|\n\n| {2,}\n|\w+:\S|$)/i,WA=/^\n+/,$A=/^([ \t]*)/,UA=/\\([^\\])/g,mh=/ *\n+$/,KA=/(?:^|\n)( *)$/,Np="(?:\\d+\\.)",jp="(?:[*+-])";function Av(e){return"( *)("+(e===1?Np:jp)+") +"}const Rv=Av(1),Ev=Av(2);function Iv(e){return new RegExp("^"+(e===1?Rv:Ev))}const VA=Iv(1),HA=Iv(2);function Nv(e){return new RegExp("^"+(e===1?Rv:Ev)+"[^\\n]*(?:\\n(?!\\1"+(e===1?Np:jp)+" )[^\\n]*)*(\\n|$)","gm")}const jv=Nv(1),Fv=Nv(2);function Ov(e){const t=e===1?Np:jp;return new RegExp("^( *)("+t+") [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1"+t+" (?!"+t+" ))\\n*|\\s*\\n*$)")}const Mv=Ov(1),Lv=Ov(2);function hh(e,t){const a=t===1,i=a?Mv:Lv,n=a?jv:Fv,s=a?VA:HA;return{t(r,o,l){const u=KA.exec(l);return u&&(o.o||!o._&&!o.u)?i.exec(r=u[1]+r):null},i:ee.HIGH,l(r,o,l){const u=a?+r[2]:void 0,d=r[0].replace(rA,`
`).match(n);let h=!1;return{p:d.map(function(g,p){const m=s.exec(g)[0].length,c=new RegExp("^ {1,"+m+"}","gm"),k=g.replace(c,"").replace(s,""),y=p===d.length-1,_=k.indexOf(`

`)!==-1||y&&h;h=_;const v=l._,w=l.o;let D;l.o=!0,_?(l._=!1,D=k.replace(mh,`

`)):(l._=!0,D=k.replace(mh,""));const q=o(D,l);return l._=v,l.o=w,q}),m:a,g:u}},h:(r,o,l)=>e(r.m?"ol":"ul",{key:l.k,start:r.g},r.p.map(function(u,d){return e("li",{key:d},o(u,l))}))}}const GA=/^\[([^\]]*)]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/,XA=/^!\[([^\]]*)]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/,Bv=[Tv,kv,xv,Dv,Cv,qv,Sv,Pv,jv,Mv,Fv,Lv],JA=[...Bv,/^[^\n]+(?:  \n|\n{2,})/,Qd,Yd];function QA(e){return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g,"a").replace(/[çÇ]/g,"c").replace(/[ðÐ]/g,"d").replace(/[ÈÉÊËéèêë]/g,"e").replace(/[ÏïÎîÍíÌì]/g,"i").replace(/[Ññ]/g,"n").replace(/[øØœŒÕõÔôÓóÒò]/g,"o").replace(/[ÜüÛûÚúÙù]/g,"u").replace(/[ŸÿÝý]/g,"y").replace(/[^a-z0-9- ]/gi,"").replace(/ /gi,"-").toLowerCase()}function YA(e){return jA.test(e)?"right":IA.test(e)?"center":NA.test(e)?"left":null}function gh(e,t,a){const i=a.$;a.$=!0;const n=t(e.trim(),a);a.$=i;let s=[[]];return n.forEach(function(r,o){r.type==="tableSeparator"?o!==0&&o!==n.length-1&&s.push([]):(r.type!=="text"||n[o+1]!=null&&n[o+1].type!=="tableSeparator"||(r.v=r.v.replace(EA,"")),s[s.length-1].push(r))}),s}function ZA(e,t,a){a._=!0;const i=gh(e[1],t,a),n=e[2].replace(RA,"").split("|").map(YA),s=function(r,o,l){return r.trim().split(`
`).map(function(u){return gh(u,o,l)})}(e[3],t,a);return a._=!1,{S:n,A:s,L:i,type:"table"}}function yh(e,t){return e.S[t]==null?{}:{textAlign:e.S[t]}}function La(e){return function(t,a){return a._?e.exec(t):null}}function Ba(e){return function(t,a){return a._||a.u?e.exec(t):null}}function ya(e){return function(t,a){return a._||a.u?null:e.exec(t)}}function Yn(e){return function(t){return e.exec(t)}}function eR(e,t,a){if(t._||t.u||a&&!a.endsWith(`
`))return null;let i="";e.split(`
`).every(s=>!Bv.some(r=>r.test(s))&&(i+=s+`
`,s.trim()));const n=i.trimEnd();return n==""?null:[i,n]}function Vi(e){try{if(decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g,"").match(/^\s*(javascript|vbscript|data(?!:image)):/i))return}catch{return null}return e}function _h(e){return e.replace(UA,"$1")}function Vr(e,t,a){const i=a._||!1,n=a.u||!1;a._=!0,a.u=!0;const s=e(t,a);return a._=i,a.u=n,s}function tR(e,t,a){const i=a._||!1,n=a.u||!1;a._=!1,a.u=!0;const s=e(t,a);return a._=i,a.u=n,s}function aR(e,t,a){return a._=!1,e(t,a)}const Au=(e,t,a)=>({v:Vr(t,e[1],a)});function Ru(){return{}}function Eu(){return null}function iR(...e){return e.filter(Boolean).join(" ")}function Iu(e,t,a){let i=e;const n=t.split(".");for(;n.length&&(i=i[n[0]],i!==void 0);)n.shift();return i||a}var ee;function nR(e,t={}){t.overrides=t.overrides||{},t.slugify=t.slugify||QA,t.namedCodesToUnicode=t.namedCodesToUnicode?vi({},fh,t.namedCodesToUnicode):fh;const a=t.createElement||b.createElement;function i(p,m,...c){const k=Iu(t.overrides,`${p}.props`,{});return a(function(y,_){const v=Iu(_,y);return v?typeof v=="function"||typeof v=="object"&&"render"in v?v:Iu(_,`${y}.component`,y):y}(p,t.overrides),vi({},m,k,{className:iR(m==null?void 0:m.className,k.className)||void 0}),...c)}function n(p){let m=!1;t.forceInline?m=!0:t.forceBlock||(m=SA.test(p)===!1);const c=d(u(m?p:`${p.trimEnd().replace(WA,"")}

`,{_:m}));for(;typeof c[c.length-1]=="string"&&!c[c.length-1].trim();)c.pop();if(t.wrapper===null)return c;const k=t.wrapper||(m?"span":"div");let y;if(c.length>1||t.forceWrapper)y=c;else{if(c.length===1)return y=c[0],typeof y=="string"?i("span",{key:"outer"},y):y;y=null}return b.createElement(k,{key:"outer"},y)}function s(p){const m=p.match(nA);return m?m.reduce(function(c,k,y){const _=k.indexOf("=");if(_!==-1){const v=function(T){return T.indexOf("-")!==-1&&T.match(_A)===null&&(T=T.replace(kA,function(C,A){return A.toUpperCase()})),T}(k.slice(0,_)).trim(),w=function(T){const C=T[0];return(C==='"'||C==="'")&&T.length>=2&&T[T.length-1]===C?T.slice(1,-1):T}(k.slice(_+1).trim()),D=ph[v]||v,q=c[D]=function(T,C){return T==="style"?C.split(/;\s?/).reduce(function(A,S){const I=S.slice(0,S.indexOf(":"));return A[I.replace(/(-[a-z])/g,j=>j[1].toUpperCase())]=S.slice(I.length+1).trim(),A},{}):T==="href"?Vi(C):(C.match(vA)&&(C=C.slice(1,C.length-1)),C==="true"||C!=="false"&&C)}(v,w);typeof q=="string"&&(Qd.test(q)||Yd.test(q))&&(c[D]=b.cloneElement(n(q.trim()),{key:y}))}else k!=="style"&&(c[ph[k]||k]=!0);return c},{}):null}const r=[],o={},l={blockQuote:{t:ya(Tv),i:ee.HIGH,l:(p,m,c)=>({v:m(p[0].replace(oA,""),c)}),h:(p,m,c)=>i("blockquote",{key:c.k},m(p.v,c))},breakLine:{t:Yn(lA),i:ee.HIGH,l:Ru,h:(p,m,c)=>i("br",{key:c.k})},breakThematic:{t:ya(uA),i:ee.HIGH,l:Ru,h:(p,m,c)=>i("hr",{key:c.k})},codeBlock:{t:ya(xv),i:ee.MAX,l:p=>({v:p[0].replace(/^ {4}/gm,"").replace(/\n+$/,""),M:void 0}),h:(p,m,c)=>i("pre",{key:c.k},i("code",vi({},p.O,{className:p.M?`lang-${p.M}`:""}),p.v))},codeFenced:{t:ya(kv),i:ee.MAX,l:p=>({O:s(p[3]||""),v:p[4],M:p[2]||void 0,type:"codeBlock"})},codeInline:{t:Ba(dA),i:ee.LOW,l:p=>({v:p[2]}),h:(p,m,c)=>i("code",{key:c.k},p.v)},footnote:{t:ya(fA),i:ee.MAX,l:p=>(r.push({I:p[2],j:p[1]}),{}),h:Eu},footnoteReference:{t:La(mA),i:ee.HIGH,l:p=>({v:p[1],B:`#${t.slugify(p[1])}`}),h:(p,m,c)=>i("a",{key:c.k,href:Vi(p.B)},i("sup",{key:c.k},p.v))},gfmTask:{t:La(gA),i:ee.HIGH,l:p=>({R:p[1].toLowerCase()==="x"}),h:(p,m,c)=>i("input",{checked:p.R,key:c.k,readOnly:!0,type:"checkbox"})},heading:{t:ya(t.enforceAtxHeadings?qv:Dv),i:ee.HIGH,l:(p,m,c)=>({v:Vr(m,p[2],c),T:t.slugify(p[2]),C:p[1].length}),h:(p,m,c)=>i(`h${p.C}`,{id:p.T,key:c.k},m(p.v,c))},headingSetext:{t:ya(Cv),i:ee.MAX,l:(p,m,c)=>({v:Vr(m,p[1],c),C:p[2]==="="?1:2,type:"heading"})},htmlComment:{t:Yn(Sv),i:ee.HIGH,l:()=>({}),h:Eu},image:{t:Ba(XA),i:ee.HIGH,l:p=>({D:p[1],B:_h(p[2]),F:p[3]}),h:(p,m,c)=>i("img",{key:c.k,alt:p.D||void 0,title:p.F||void 0,src:Vi(p.B)})},link:{t:La(GA),i:ee.LOW,l:(p,m,c)=>({v:tR(m,p[1],c),B:_h(p[2]),F:p[3]}),h:(p,m,c)=>i("a",{key:c.k,href:Vi(p.B),title:p.F},m(p.v,c))},linkAngleBraceStyleDetector:{t:La(TA),i:ee.MAX,l:p=>({v:[{v:p[1],type:"text"}],B:p[1],type:"link"})},linkBareUrlDetector:{t:(p,m)=>m.N?null:La(bA)(p,m),i:ee.MAX,l:p=>({v:[{v:p[1],type:"text"}],B:p[1],F:void 0,type:"link"})},linkMailtoDetector:{t:La(wA),i:ee.MAX,l(p){let m=p[1],c=p[1];return sA.test(c)||(c="mailto:"+c),{v:[{v:m.replace("mailto:",""),type:"text"}],B:c,type:"link"}}},orderedList:hh(i,1),unorderedList:hh(i,2),newlineCoalescer:{t:ya(cA),i:ee.LOW,l:Ru,h:()=>`
`},paragraph:{t:eR,i:ee.LOW,l:Au,h:(p,m,c)=>i("p",{key:c.k},m(p.v,c))},ref:{t:La(xA),i:ee.MAX,l:p=>(o[p[1]]={B:p[2],F:p[4]},{}),h:Eu},refImage:{t:Ba(DA),i:ee.MAX,l:p=>({D:p[1]||void 0,P:p[2]}),h:(p,m,c)=>i("img",{key:c.k,alt:p.D,src:Vi(o[p.P].B),title:o[p.P].F})},refLink:{t:La(qA),i:ee.MAX,l:(p,m,c)=>({v:m(p[1],c),Z:m(p[0].replace(CA,"\\$1"),c),P:p[2]}),h:(p,m,c)=>o[p.P]?i("a",{key:c.k,href:Vi(o[p.P].B),title:o[p.P].F},m(p.v,c)):i("span",{key:c.k},m(p.Z,c))},table:{t:ya(Pv),i:ee.HIGH,l:ZA,h:(p,m,c)=>i("table",{key:c.k},i("thead",null,i("tr",null,p.L.map(function(k,y){return i("th",{key:y,style:yh(p,y)},m(k,c))}))),i("tbody",null,p.A.map(function(k,y){return i("tr",{key:y},k.map(function(_,v){return i("td",{key:v,style:yh(p,v)},m(_,c))}))})))},tableSeparator:{t:function(p,m){return m.$?(m._=!0,AA.exec(p)):null},i:ee.HIGH,l:function(){return{type:"tableSeparator"}},h:()=>" | "},text:{t:Yn(zA),i:ee.MIN,l:p=>({v:p[0].replace(yA,(m,c)=>t.namedCodesToUnicode[c]?t.namedCodesToUnicode[c]:m)}),h:p=>p.v},textBolded:{t:Ba(FA),i:ee.MED,l:(p,m,c)=>({v:m(p[2],c)}),h:(p,m,c)=>i("strong",{key:c.k},m(p.v,c))},textEmphasized:{t:Ba(OA),i:ee.LOW,l:(p,m,c)=>({v:m(p[2],c)}),h:(p,m,c)=>i("em",{key:c.k},m(p.v,c))},textEscaped:{t:Ba(BA),i:ee.HIGH,l:p=>({v:p[1],type:"text"})},textMarked:{t:Ba(MA),i:ee.LOW,l:Au,h:(p,m,c)=>i("mark",{key:c.k},m(p.v,c))},textStrikethroughed:{t:Ba(LA),i:ee.LOW,l:Au,h:(p,m,c)=>i("del",{key:c.k},m(p.v,c))}};t.disableParsingRawHTML!==!0&&(l.htmlBlock={t:Yn(Qd),i:ee.HIGH,l(p,m,c){const[,k]=p[3].match($A),y=new RegExp(`^${k}`,"gm"),_=p[3].replace(y,""),v=(w=_,JA.some(C=>C.test(w))?aR:Vr);var w;const D=p[1].toLowerCase(),q=iA.indexOf(D)!==-1;c.N=c.N||D==="a";const T=q?p[3]:v(m,_,c);return c.N=!1,{O:s(p[2]),v:T,G:q,H:q?D:p[1]}},h:(p,m,c)=>i(p.H,vi({key:c.k},p.O),p.G?p.v:m(p.v,c))},l.htmlSelfClosing={t:Yn(Yd),i:ee.HIGH,l:p=>({O:s(p[2]||""),H:p[1]}),h:(p,m,c)=>i(p.H,vi({},p.O,{key:c.k}))});const u=function(p){let m=Object.keys(p);function c(k,y){let _=[],v="";for(;k;){let w=0;for(;w<m.length;){const D=m[w],q=p[D],T=q.t(k,y,v);if(T){const C=T[0];k=k.substring(C.length);const A=q.l(T,c,y);A.type==null&&(A.type=D),_.push(A),v=C;break}w++}}return _}return m.sort(function(k,y){let _=p[k].i,v=p[y].i;return _!==v?_-v:k<y?-1:1}),function(k,y){return c(function(_){return _.replace(pA,`
`).replace(hA,"").replace(PA,"    ")}(k),y)}}(l),d=(h=function(p){return function(m,c,k){return p[m.type].h(m,c,k)}}(l),function p(m,c={}){if(Array.isArray(m)){const k=c.k,y=[];let _=!1;for(let v=0;v<m.length;v++){c.k=v;const w=p(m[v],c),D=typeof w=="string";D&&_?y[y.length-1]+=w:w!==null&&y.push(w),_=D}return c.k=k,y}return h(m,p,c)});var h;const g=n(e);return r.length?i("div",null,g,i("footer",{key:"footer"},r.map(function(p){return i("div",{id:t.slugify(p.j),key:p.j},p.j,d(u(p.I,{_:!0})))}))):g}(function(e){e[e.MAX=0]="MAX",e[e.HIGH=1]="HIGH",e[e.MED=2]="MED",e[e.LOW=3]="LOW",e[e.MIN=4]="MIN"})(ee||(ee={}));const Zd=e=>{let{children:t,options:a}=e,i=function(n,s){if(n==null)return{};var r,o,l={},u=Object.keys(n);for(o=0;o<u.length;o++)s.indexOf(r=u[o])>=0||(l[r]=n[r]);return l}(e,aA);return b.cloneElement(nR(t,a),i)};function sR(e){return fe("MuiAlert",e)}const rR=re("MuiAlert",["root","action","icon","message","filled","filledSuccess","filledInfo","filledWarning","filledError","outlined","outlinedSuccess","outlinedInfo","outlinedWarning","outlinedError","standard","standardSuccess","standardInfo","standardWarning","standardError"]),vh=rR;function oR(e){return fe("MuiIconButton",e)}const lR=re("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),uR=lR,dR=["edge","children","className","color","disabled","disableFocusRipple","size"],cR=e=>{const{classes:t,disabled:a,color:i,edge:n,size:s}=e,r={root:["root",a&&"disabled",i!=="default"&&`color${G(i)}`,n&&`edge${G(n)}`,`size${G(s)}`]};return me(r,oR,t)},pR=W(av,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.color!=="default"&&t[`color${G(a.color)}`],a.edge&&t[`edge${G(a.edge)}`],t[`size${G(a.size)}`]]}})(({theme:e,ownerState:t})=>x({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:ka(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},t.edge==="start"&&{marginLeft:t.size==="small"?-3:-12},t.edge==="end"&&{marginRight:t.size==="small"?-3:-12}),({theme:e,ownerState:t})=>{var a;const i=(a=(e.vars||e).palette)==null?void 0:a[t.color];return x({},t.color==="inherit"&&{color:"inherit"},t.color!=="inherit"&&t.color!=="default"&&x({color:i==null?void 0:i.main},!t.disableRipple&&{"&:hover":x({},i&&{backgroundColor:e.vars?`rgba(${i.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:ka(i.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),t.size==="small"&&{padding:5,fontSize:e.typography.pxToRem(18)},t.size==="large"&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${uR.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})}),fR=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiIconButton"}),{edge:n=!1,children:s,className:r,color:o="default",disabled:l=!1,disableFocusRipple:u=!1,size:d="medium"}=i,h=$(i,dR),g=x({},i,{edge:n,color:o,disabled:l,disableFocusRipple:u,size:d}),p=cR(g);return f.jsx(pR,x({className:V(p.root,r),centerRipple:!0,focusRipple:!u,disabled:l,ref:a,ownerState:g},h,{children:s}))}),mR=fR,hR=Oi(f.jsx("path",{d:"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"}),"SuccessOutlined"),gR=Oi(f.jsx("path",{d:"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"}),"ReportProblemOutlined"),yR=Oi(f.jsx("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"ErrorOutline"),_R=Oi(f.jsx("path",{d:"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"}),"InfoOutlined"),vR=Oi(f.jsx("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close"),bR=["action","children","className","closeText","color","components","componentsProps","icon","iconMapping","onClose","role","severity","slotProps","slots","variant"],wR=e=>{const{variant:t,color:a,severity:i,classes:n}=e,s={root:["root",`${t}${G(a||i)}`,`${t}`],icon:["icon"],message:["message"],action:["action"]};return me(s,sR,n)},TR=W(tr,{name:"MuiAlert",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,t[a.variant],t[`${a.variant}${G(a.color||a.severity)}`]]}})(({theme:e,ownerState:t})=>{const a=e.palette.mode==="light"?Md:Ld,i=e.palette.mode==="light"?Ld:Md,n=t.color||t.severity;return x({},e.typography.body2,{backgroundColor:"transparent",display:"flex",padding:"6px 16px"},n&&t.variant==="standard"&&{color:e.vars?e.vars.palette.Alert[`${n}Color`]:a(e.palette[n].light,.6),backgroundColor:e.vars?e.vars.palette.Alert[`${n}StandardBg`]:i(e.palette[n].light,.9),[`& .${vh.icon}`]:e.vars?{color:e.vars.palette.Alert[`${n}IconColor`]}:{color:e.palette[n].main}},n&&t.variant==="outlined"&&{color:e.vars?e.vars.palette.Alert[`${n}Color`]:a(e.palette[n].light,.6),border:`1px solid ${(e.vars||e).palette[n].light}`,[`& .${vh.icon}`]:e.vars?{color:e.vars.palette.Alert[`${n}IconColor`]}:{color:e.palette[n].main}},n&&t.variant==="filled"&&x({fontWeight:e.typography.fontWeightMedium},e.vars?{color:e.vars.palette.Alert[`${n}FilledColor`],backgroundColor:e.vars.palette.Alert[`${n}FilledBg`]}:{backgroundColor:e.palette.mode==="dark"?e.palette[n].dark:e.palette[n].main,color:e.palette.getContrastText(e.palette[n].main)}))}),kR=W("div",{name:"MuiAlert",slot:"Icon",overridesResolver:(e,t)=>t.icon})({marginRight:12,padding:"7px 0",display:"flex",fontSize:22,opacity:.9}),xR=W("div",{name:"MuiAlert",slot:"Message",overridesResolver:(e,t)=>t.message})({padding:"8px 0",minWidth:0,overflow:"auto"}),bh=W("div",{name:"MuiAlert",slot:"Action",overridesResolver:(e,t)=>t.action})({display:"flex",alignItems:"flex-start",padding:"4px 0 0 16px",marginLeft:"auto",marginRight:-8}),wh={success:f.jsx(hR,{fontSize:"inherit"}),warning:f.jsx(gR,{fontSize:"inherit"}),error:f.jsx(yR,{fontSize:"inherit"}),info:f.jsx(_R,{fontSize:"inherit"})},DR=b.forwardRef(function(t,a){var i,n,s,r,o,l;const u=he({props:t,name:"MuiAlert"}),{action:d,children:h,className:g,closeText:p="Close",color:m,components:c={},componentsProps:k={},icon:y,iconMapping:_=wh,onClose:v,role:w="alert",severity:D="success",slotProps:q={},slots:T={},variant:C="standard"}=u,A=$(u,bR),S=x({},u,{color:m,severity:D,variant:C}),I=wR(S),j=(i=(n=T.closeButton)!=null?n:c.CloseButton)!=null?i:mR,O=(s=(r=T.closeIcon)!=null?r:c.CloseIcon)!=null?s:vR,E=(o=q.closeButton)!=null?o:k.closeButton,F=(l=q.closeIcon)!=null?l:k.closeIcon;return f.jsxs(TR,x({role:w,elevation:0,ownerState:S,className:V(I.root,g),ref:a},A,{children:[y!==!1?f.jsx(kR,{ownerState:S,className:I.icon,children:y||_[D]||wh[D]}):null,f.jsx(xR,{ownerState:S,className:I.message,children:h}),d!=null?f.jsx(bh,{ownerState:S,className:I.action,children:d}):null,d==null&&v?f.jsx(bh,{ownerState:S,className:I.action,children:f.jsx(j,x({size:"small","aria-label":p,title:p,color:"inherit",onClick:v},E,{children:f.jsx(O,x({fontSize:"small"},F))}))}):null]}))}),kr=DR;var Fp={},Op={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.Doctype=e.CDATA=e.Tag=e.Style=e.Script=e.Comment=e.Directive=e.Text=e.Root=e.isTag=e.ElementType=void 0;var t;(function(i){i.Root="root",i.Text="text",i.Directive="directive",i.Comment="comment",i.Script="script",i.Style="style",i.Tag="tag",i.CDATA="cdata",i.Doctype="doctype"})(t=e.ElementType||(e.ElementType={}));function a(i){return i.type===t.Tag||i.type===t.Script||i.type===t.Style}e.isTag=a,e.Root=t.Root,e.Text=t.Text,e.Directive=t.Directive,e.Comment=t.Comment,e.Script=t.Script,e.Style=t.Style,e.Tag=t.Tag,e.CDATA=t.CDATA,e.Doctype=t.Doctype})(Op);var J={},ci=pt&&pt.__extends||function(){var e=function(t,a){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,n){i.__proto__=n}||function(i,n){for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(i[s]=n[s])},e(t,a)};return function(t,a){if(typeof a!="function"&&a!==null)throw new TypeError("Class extends value "+String(a)+" is not a constructor or null");e(t,a);function i(){this.constructor=t}t.prototype=a===null?Object.create(a):(i.prototype=a.prototype,new i)}}(),_s=pt&&pt.__assign||function(){return _s=Object.assign||function(e){for(var t,a=1,i=arguments.length;a<i;a++){t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},_s.apply(this,arguments)};Object.defineProperty(J,"__esModule",{value:!0});J.cloneNode=J.hasChildren=J.isDocument=J.isDirective=J.isComment=J.isText=J.isCDATA=J.isTag=J.Element=J.Document=J.CDATA=J.NodeWithChildren=J.ProcessingInstruction=J.Comment=J.Text=J.DataNode=J.Node=void 0;var vt=Op,Mp=function(){function e(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent},set:function(t){this.parent=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){return this.prev},set:function(t){this.prev=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){return this.next},set:function(t){this.next=t},enumerable:!1,configurable:!0}),e.prototype.cloneNode=function(t){return t===void 0&&(t=!1),Lp(this,t)},e}();J.Node=Mp;var Ml=function(e){ci(t,e);function t(a){var i=e.call(this)||this;return i.data=a,i}return Object.defineProperty(t.prototype,"nodeValue",{get:function(){return this.data},set:function(a){this.data=a},enumerable:!1,configurable:!0}),t}(Mp);J.DataNode=Ml;var zv=function(e){ci(t,e);function t(){var a=e!==null&&e.apply(this,arguments)||this;return a.type=vt.ElementType.Text,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 3},enumerable:!1,configurable:!0}),t}(Ml);J.Text=zv;var Wv=function(e){ci(t,e);function t(){var a=e!==null&&e.apply(this,arguments)||this;return a.type=vt.ElementType.Comment,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 8},enumerable:!1,configurable:!0}),t}(Ml);J.Comment=Wv;var $v=function(e){ci(t,e);function t(a,i){var n=e.call(this,i)||this;return n.name=a,n.type=vt.ElementType.Directive,n}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),t}(Ml);J.ProcessingInstruction=$v;var Ll=function(e){ci(t,e);function t(a){var i=e.call(this)||this;return i.children=a,i}return Object.defineProperty(t.prototype,"firstChild",{get:function(){var a;return(a=this.children[0])!==null&&a!==void 0?a:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return this.children.length>0?this.children[this.children.length-1]:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this.children},set:function(a){this.children=a},enumerable:!1,configurable:!0}),t}(Mp);J.NodeWithChildren=Ll;var Uv=function(e){ci(t,e);function t(){var a=e!==null&&e.apply(this,arguments)||this;return a.type=vt.ElementType.CDATA,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 4},enumerable:!1,configurable:!0}),t}(Ll);J.CDATA=Uv;var Kv=function(e){ci(t,e);function t(){var a=e!==null&&e.apply(this,arguments)||this;return a.type=vt.ElementType.Root,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 9},enumerable:!1,configurable:!0}),t}(Ll);J.Document=Kv;var Vv=function(e){ci(t,e);function t(a,i,n,s){n===void 0&&(n=[]),s===void 0&&(s=a==="script"?vt.ElementType.Script:a==="style"?vt.ElementType.Style:vt.ElementType.Tag);var r=e.call(this,n)||this;return r.name=a,r.attribs=i,r.type=s,r}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tagName",{get:function(){return this.name},set:function(a){this.name=a},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){var a=this;return Object.keys(this.attribs).map(function(i){var n,s;return{name:i,value:a.attribs[i],namespace:(n=a["x-attribsNamespace"])===null||n===void 0?void 0:n[i],prefix:(s=a["x-attribsPrefix"])===null||s===void 0?void 0:s[i]}})},enumerable:!1,configurable:!0}),t}(Ll);J.Element=Vv;function Hv(e){return(0,vt.isTag)(e)}J.isTag=Hv;function Gv(e){return e.type===vt.ElementType.CDATA}J.isCDATA=Gv;function Xv(e){return e.type===vt.ElementType.Text}J.isText=Xv;function Jv(e){return e.type===vt.ElementType.Comment}J.isComment=Jv;function Qv(e){return e.type===vt.ElementType.Directive}J.isDirective=Qv;function Yv(e){return e.type===vt.ElementType.Root}J.isDocument=Yv;function qR(e){return Object.prototype.hasOwnProperty.call(e,"children")}J.hasChildren=qR;function Lp(e,t){t===void 0&&(t=!1);var a;if(Xv(e))a=new zv(e.data);else if(Jv(e))a=new Wv(e.data);else if(Hv(e)){var i=t?Nu(e.children):[],n=new Vv(e.name,_s({},e.attribs),i);i.forEach(function(l){return l.parent=n}),e.namespace!=null&&(n.namespace=e.namespace),e["x-attribsNamespace"]&&(n["x-attribsNamespace"]=_s({},e["x-attribsNamespace"])),e["x-attribsPrefix"]&&(n["x-attribsPrefix"]=_s({},e["x-attribsPrefix"])),a=n}else if(Gv(e)){var i=t?Nu(e.children):[],s=new Uv(i);i.forEach(function(u){return u.parent=s}),a=s}else if(Yv(e)){var i=t?Nu(e.children):[],r=new Kv(i);i.forEach(function(u){return u.parent=r}),e["x-mode"]&&(r["x-mode"]=e["x-mode"]),a=r}else if(Qv(e)){var o=new $v(e.name,e.data);e["x-name"]!=null&&(o["x-name"]=e["x-name"],o["x-publicId"]=e["x-publicId"],o["x-systemId"]=e["x-systemId"]),a=o}else throw new Error("Not implemented yet: ".concat(e.type));return a.startIndex=e.startIndex,a.endIndex=e.endIndex,e.sourceCodeLocation!=null&&(a.sourceCodeLocation=e.sourceCodeLocation),a}J.cloneNode=Lp;function Nu(e){for(var t=e.map(function(i){return Lp(i,!0)}),a=1;a<t.length;a++)t[a].prev=t[a-1],t[a-1].next=t[a];return t}(function(e){var t=pt&&pt.__createBinding||(Object.create?function(o,l,u,d){d===void 0&&(d=u);var h=Object.getOwnPropertyDescriptor(l,u);(!h||("get"in h?!l.__esModule:h.writable||h.configurable))&&(h={enumerable:!0,get:function(){return l[u]}}),Object.defineProperty(o,d,h)}:function(o,l,u,d){d===void 0&&(d=u),o[d]=l[u]}),a=pt&&pt.__exportStar||function(o,l){for(var u in o)u!=="default"&&!Object.prototype.hasOwnProperty.call(l,u)&&t(l,o,u)};Object.defineProperty(e,"__esModule",{value:!0}),e.DomHandler=void 0;var i=Op,n=J;a(J,e);var s={withStartIndices:!1,withEndIndices:!1,xmlMode:!1},r=function(){function o(l,u,d){this.dom=[],this.root=new n.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,typeof u=="function"&&(d=u,u=s),typeof l=="object"&&(u=l,l=void 0),this.callback=l??null,this.options=u??s,this.elementCB=d??null}return o.prototype.onparserinit=function(l){this.parser=l},o.prototype.onreset=function(){this.dom=[],this.root=new n.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null},o.prototype.onend=function(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))},o.prototype.onerror=function(l){this.handleCallback(l)},o.prototype.onclosetag=function(){this.lastNode=null;var l=this.tagStack.pop();this.options.withEndIndices&&(l.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(l)},o.prototype.onopentag=function(l,u){var d=this.options.xmlMode?i.ElementType.Tag:void 0,h=new n.Element(l,u,void 0,d);this.addNode(h),this.tagStack.push(h)},o.prototype.ontext=function(l){var u=this.lastNode;if(u&&u.type===i.ElementType.Text)u.data+=l,this.options.withEndIndices&&(u.endIndex=this.parser.endIndex);else{var d=new n.Text(l);this.addNode(d),this.lastNode=d}},o.prototype.oncomment=function(l){if(this.lastNode&&this.lastNode.type===i.ElementType.Comment){this.lastNode.data+=l;return}var u=new n.Comment(l);this.addNode(u),this.lastNode=u},o.prototype.oncommentend=function(){this.lastNode=null},o.prototype.oncdatastart=function(){var l=new n.Text(""),u=new n.CDATA([l]);this.addNode(u),l.parent=u,this.lastNode=l},o.prototype.oncdataend=function(){this.lastNode=null},o.prototype.onprocessinginstruction=function(l,u){var d=new n.ProcessingInstruction(l,u);this.addNode(d)},o.prototype.handleCallback=function(l){if(typeof this.callback=="function")this.callback(l,this.dom);else if(l)throw l},o.prototype.addNode=function(l){var u=this.tagStack[this.tagStack.length-1],d=u.children[u.children.length-1];this.options.withStartIndices&&(l.startIndex=this.parser.startIndex),this.options.withEndIndices&&(l.endIndex=this.parser.endIndex),u.children.push(l),d&&(l.prev=d,d.next=l),l.parent=u,this.lastNode=null},o}();e.DomHandler=r,e.default=r})(Fp);var Bp={},zp={};Object.defineProperty(zp,"__esModule",{value:!0});var Th="html",kh="head",xr="body",CR=/<([a-zA-Z]+[0-9]?)/,xh=/<head[^]*>/i,Dh=/<body[^]*>/i,Ro=function(e,t){throw new Error("This browser does not support `document.implementation.createHTMLDocument`")},ec=function(e,t){throw new Error("This browser does not support `DOMParser.prototype.parseFromString`")},qh=typeof window=="object"&&window.DOMParser;if(typeof qh=="function"){var SR=new qh,PR="text/html";ec=function(e,t){return t&&(e="<".concat(t,">").concat(e,"</").concat(t,">")),SR.parseFromString(e,PR)},Ro=ec}if(typeof document=="object"&&document.implementation){var Dr=document.implementation.createHTMLDocument();Ro=function(e,t){if(t){var a=Dr.documentElement.querySelector(t);return a&&(a.innerHTML=e),Dr}return Dr.documentElement.innerHTML=e,Dr}}var qr=typeof document=="object"&&document.createElement("template"),tc;qr&&qr.content&&(tc=function(e){return qr.innerHTML=e,qr.content.childNodes});function AR(e){var t,a,i=e.match(CR),n=i&&i[1]?i[1].toLowerCase():"";switch(n){case Th:{var s=ec(e);if(!xh.test(e)){var r=s.querySelector(kh);(t=r==null?void 0:r.parentNode)===null||t===void 0||t.removeChild(r)}if(!Dh.test(e)){var r=s.querySelector(xr);(a=r==null?void 0:r.parentNode)===null||a===void 0||a.removeChild(r)}return s.querySelectorAll(Th)}case kh:case xr:{var o=Ro(e).querySelectorAll(n);return Dh.test(e)&&xh.test(e)?o[0].parentNode.childNodes:o}default:{if(tc)return tc(e);var r=Ro(e,xr).querySelector(xr);return r.childNodes}}}zp.default=AR;var Cn={},Zv={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.CASE_SENSITIVE_TAG_NAMES_MAP=e.CASE_SENSITIVE_TAG_NAMES=void 0,e.CASE_SENSITIVE_TAG_NAMES=["animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","linearGradient","radialGradient","textPath"],e.CASE_SENSITIVE_TAG_NAMES_MAP=e.CASE_SENSITIVE_TAG_NAMES.reduce(function(t,a){return t[a.toLowerCase()]=a,t},{})})(Zv);Object.defineProperty(Cn,"__esModule",{value:!0});Cn.formatDOM=Cn.formatAttributes=void 0;var Cr=Fp,RR=Zv;function ER(e){return RR.CASE_SENSITIVE_TAG_NAMES_MAP[e]}function eb(e){for(var t={},a=0,i=e.length;a<i;a++){var n=e[a];t[n.name]=n.value}return t}Cn.formatAttributes=eb;function IR(e){e=e.toLowerCase();var t=ER(e);return t||e}function tb(e,t,a){t===void 0&&(t=null);for(var i=[],n,s=0,r=e.length;s<r;s++){var o=e[s];switch(o.nodeType){case 1:{var l=IR(o.nodeName);n=new Cr.Element(l,eb(o.attributes)),n.children=tb(l==="template"?o.content.childNodes:o.childNodes,n);break}case 3:n=new Cr.Text(o.nodeValue);break;case 8:n=new Cr.Comment(o.nodeValue);break;default:continue}var u=i[s-1]||null;u&&(u.next=n),n.parent=t,n.prev=u,n.next=null,i.push(n)}return a&&(n=new Cr.ProcessingInstruction(a.substring(0,a.indexOf(" ")).toLowerCase(),a),n.next=i[0]||null,n.parent=t,i.unshift(n),i[1]&&(i[1].prev=i[0])),i}Cn.formatDOM=tb;var NR=pt&&pt.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Bp,"__esModule",{value:!0});var jR=NR(zp),FR=Cn,OR=/<(![a-zA-Z\s]+)>/;function MR(e){if(typeof e!="string")throw new TypeError("First argument must be a string");if(!e)return[];var t=e.match(OR),a=t?t[1]:void 0;return(0,FR.formatDOM)((0,jR.default)(e),null,a)}Bp.default=MR;var Zt={},Bl={},LR=0;Bl.SAME=LR;var BR=1;Bl.CAMELCASE=BR;Bl.possibleStandardNames={accept:0,acceptCharset:1,"accept-charset":"acceptCharset",accessKey:1,action:0,allowFullScreen:1,alt:0,as:0,async:0,autoCapitalize:1,autoComplete:1,autoCorrect:1,autoFocus:1,autoPlay:1,autoSave:1,capture:0,cellPadding:1,cellSpacing:1,challenge:0,charSet:1,checked:0,children:0,cite:0,class:"className",classID:1,className:1,cols:0,colSpan:1,content:0,contentEditable:1,contextMenu:1,controls:0,controlsList:1,coords:0,crossOrigin:1,dangerouslySetInnerHTML:1,data:0,dateTime:1,default:0,defaultChecked:1,defaultValue:1,defer:0,dir:0,disabled:0,disablePictureInPicture:1,disableRemotePlayback:1,download:0,draggable:0,encType:1,enterKeyHint:1,for:"htmlFor",form:0,formMethod:1,formAction:1,formEncType:1,formNoValidate:1,formTarget:1,frameBorder:1,headers:0,height:0,hidden:0,high:0,href:0,hrefLang:1,htmlFor:1,httpEquiv:1,"http-equiv":"httpEquiv",icon:0,id:0,innerHTML:1,inputMode:1,integrity:0,is:0,itemID:1,itemProp:1,itemRef:1,itemScope:1,itemType:1,keyParams:1,keyType:1,kind:0,label:0,lang:0,list:0,loop:0,low:0,manifest:0,marginWidth:1,marginHeight:1,max:0,maxLength:1,media:0,mediaGroup:1,method:0,min:0,minLength:1,multiple:0,muted:0,name:0,noModule:1,nonce:0,noValidate:1,open:0,optimum:0,pattern:0,placeholder:0,playsInline:1,poster:0,preload:0,profile:0,radioGroup:1,readOnly:1,referrerPolicy:1,rel:0,required:0,reversed:0,role:0,rows:0,rowSpan:1,sandbox:0,scope:0,scoped:0,scrolling:0,seamless:0,selected:0,shape:0,size:0,sizes:0,span:0,spellCheck:1,src:0,srcDoc:1,srcLang:1,srcSet:1,start:0,step:0,style:0,summary:0,tabIndex:1,target:0,title:0,type:0,useMap:1,value:0,width:0,wmode:0,wrap:0,about:0,accentHeight:1,"accent-height":"accentHeight",accumulate:0,additive:0,alignmentBaseline:1,"alignment-baseline":"alignmentBaseline",allowReorder:1,alphabetic:0,amplitude:0,arabicForm:1,"arabic-form":"arabicForm",ascent:0,attributeName:1,attributeType:1,autoReverse:1,azimuth:0,baseFrequency:1,baselineShift:1,"baseline-shift":"baselineShift",baseProfile:1,bbox:0,begin:0,bias:0,by:0,calcMode:1,capHeight:1,"cap-height":"capHeight",clip:0,clipPath:1,"clip-path":"clipPath",clipPathUnits:1,clipRule:1,"clip-rule":"clipRule",color:0,colorInterpolation:1,"color-interpolation":"colorInterpolation",colorInterpolationFilters:1,"color-interpolation-filters":"colorInterpolationFilters",colorProfile:1,"color-profile":"colorProfile",colorRendering:1,"color-rendering":"colorRendering",contentScriptType:1,contentStyleType:1,cursor:0,cx:0,cy:0,d:0,datatype:0,decelerate:0,descent:0,diffuseConstant:1,direction:0,display:0,divisor:0,dominantBaseline:1,"dominant-baseline":"dominantBaseline",dur:0,dx:0,dy:0,edgeMode:1,elevation:0,enableBackground:1,"enable-background":"enableBackground",end:0,exponent:0,externalResourcesRequired:1,fill:0,fillOpacity:1,"fill-opacity":"fillOpacity",fillRule:1,"fill-rule":"fillRule",filter:0,filterRes:1,filterUnits:1,floodOpacity:1,"flood-opacity":"floodOpacity",floodColor:1,"flood-color":"floodColor",focusable:0,fontFamily:1,"font-family":"fontFamily",fontSize:1,"font-size":"fontSize",fontSizeAdjust:1,"font-size-adjust":"fontSizeAdjust",fontStretch:1,"font-stretch":"fontStretch",fontStyle:1,"font-style":"fontStyle",fontVariant:1,"font-variant":"fontVariant",fontWeight:1,"font-weight":"fontWeight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:1,"glyph-name":"glyphName",glyphOrientationHorizontal:1,"glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphOrientationVertical:1,"glyph-orientation-vertical":"glyphOrientationVertical",glyphRef:1,gradientTransform:1,gradientUnits:1,hanging:0,horizAdvX:1,"horiz-adv-x":"horizAdvX",horizOriginX:1,"horiz-origin-x":"horizOriginX",ideographic:0,imageRendering:1,"image-rendering":"imageRendering",in2:0,in:0,inlist:0,intercept:0,k1:0,k2:0,k3:0,k4:0,k:0,kernelMatrix:1,kernelUnitLength:1,kerning:0,keyPoints:1,keySplines:1,keyTimes:1,lengthAdjust:1,letterSpacing:1,"letter-spacing":"letterSpacing",lightingColor:1,"lighting-color":"lightingColor",limitingConeAngle:1,local:0,markerEnd:1,"marker-end":"markerEnd",markerHeight:1,markerMid:1,"marker-mid":"markerMid",markerStart:1,"marker-start":"markerStart",markerUnits:1,markerWidth:1,mask:0,maskContentUnits:1,maskUnits:1,mathematical:0,mode:0,numOctaves:1,offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:1,"overline-position":"overlinePosition",overlineThickness:1,"overline-thickness":"overlineThickness",paintOrder:1,"paint-order":"paintOrder",panose1:0,"panose-1":"panose1",pathLength:1,patternContentUnits:1,patternTransform:1,patternUnits:1,pointerEvents:1,"pointer-events":"pointerEvents",points:0,pointsAtX:1,pointsAtY:1,pointsAtZ:1,prefix:0,preserveAlpha:1,preserveAspectRatio:1,primitiveUnits:1,property:0,r:0,radius:0,refX:1,refY:1,renderingIntent:1,"rendering-intent":"renderingIntent",repeatCount:1,repeatDur:1,requiredExtensions:1,requiredFeatures:1,resource:0,restart:0,result:0,results:0,rotate:0,rx:0,ry:0,scale:0,security:0,seed:0,shapeRendering:1,"shape-rendering":"shapeRendering",slope:0,spacing:0,specularConstant:1,specularExponent:1,speed:0,spreadMethod:1,startOffset:1,stdDeviation:1,stemh:0,stemv:0,stitchTiles:1,stopColor:1,"stop-color":"stopColor",stopOpacity:1,"stop-opacity":"stopOpacity",strikethroughPosition:1,"strikethrough-position":"strikethroughPosition",strikethroughThickness:1,"strikethrough-thickness":"strikethroughThickness",string:0,stroke:0,strokeDasharray:1,"stroke-dasharray":"strokeDasharray",strokeDashoffset:1,"stroke-dashoffset":"strokeDashoffset",strokeLinecap:1,"stroke-linecap":"strokeLinecap",strokeLinejoin:1,"stroke-linejoin":"strokeLinejoin",strokeMiterlimit:1,"stroke-miterlimit":"strokeMiterlimit",strokeWidth:1,"stroke-width":"strokeWidth",strokeOpacity:1,"stroke-opacity":"strokeOpacity",suppressContentEditableWarning:1,suppressHydrationWarning:1,surfaceScale:1,systemLanguage:1,tableValues:1,targetX:1,targetY:1,textAnchor:1,"text-anchor":"textAnchor",textDecoration:1,"text-decoration":"textDecoration",textLength:1,textRendering:1,"text-rendering":"textRendering",to:0,transform:0,typeof:0,u1:0,u2:0,underlinePosition:1,"underline-position":"underlinePosition",underlineThickness:1,"underline-thickness":"underlineThickness",unicode:0,unicodeBidi:1,"unicode-bidi":"unicodeBidi",unicodeRange:1,"unicode-range":"unicodeRange",unitsPerEm:1,"units-per-em":"unitsPerEm",unselectable:0,vAlphabetic:1,"v-alphabetic":"vAlphabetic",values:0,vectorEffect:1,"vector-effect":"vectorEffect",version:0,vertAdvY:1,"vert-adv-y":"vertAdvY",vertOriginX:1,"vert-origin-x":"vertOriginX",vertOriginY:1,"vert-origin-y":"vertOriginY",vHanging:1,"v-hanging":"vHanging",vIdeographic:1,"v-ideographic":"vIdeographic",viewBox:1,viewTarget:1,visibility:0,vMathematical:1,"v-mathematical":"vMathematical",vocab:0,widths:0,wordSpacing:1,"word-spacing":"wordSpacing",writingMode:1,"writing-mode":"writingMode",x1:0,x2:0,x:0,xChannelSelector:1,xHeight:1,"x-height":"xHeight",xlinkActuate:1,"xlink:actuate":"xlinkActuate",xlinkArcrole:1,"xlink:arcrole":"xlinkArcrole",xlinkHref:1,"xlink:href":"xlinkHref",xlinkRole:1,"xlink:role":"xlinkRole",xlinkShow:1,"xlink:show":"xlinkShow",xlinkTitle:1,"xlink:title":"xlinkTitle",xlinkType:1,"xlink:type":"xlinkType",xmlBase:1,"xml:base":"xmlBase",xmlLang:1,"xml:lang":"xmlLang",xmlns:0,"xml:space":"xmlSpace",xmlnsXlink:1,"xmlns:xlink":"xmlnsXlink",xmlSpace:1,y1:0,y2:0,y:0,yChannelSelector:1,z:0,zoomAndPan:1};const ab=0,pi=1,zl=2,Wl=3,Wp=4,ib=5,nb=6;function zR(e){return Ye.hasOwnProperty(e)?Ye[e]:null}function lt(e,t,a,i,n,s,r){this.acceptsBooleans=t===zl||t===Wl||t===Wp,this.attributeName=i,this.attributeNamespace=n,this.mustUseProperty=a,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=r}const Ye={},WR=["children","dangerouslySetInnerHTML","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","suppressHydrationWarning","style"];WR.forEach(e=>{Ye[e]=new lt(e,ab,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(([e,t])=>{Ye[e]=new lt(e,pi,!1,t,null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(e=>{Ye[e]=new lt(e,zl,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(e=>{Ye[e]=new lt(e,zl,!1,e,null,!1,!1)});["allowFullScreen","async","autoFocus","autoPlay","controls","default","defer","disabled","disablePictureInPicture","disableRemotePlayback","formNoValidate","hidden","loop","noModule","noValidate","open","playsInline","readOnly","required","reversed","scoped","seamless","itemScope"].forEach(e=>{Ye[e]=new lt(e,Wl,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(e=>{Ye[e]=new lt(e,Wl,!0,e,null,!1,!1)});["capture","download"].forEach(e=>{Ye[e]=new lt(e,Wp,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(e=>{Ye[e]=new lt(e,nb,!1,e,null,!1,!1)});["rowSpan","start"].forEach(e=>{Ye[e]=new lt(e,ib,!1,e.toLowerCase(),null,!1,!1)});const $p=/[\-\:]([a-z])/g,Up=e=>e[1].toUpperCase();["accent-height","alignment-baseline","arabic-form","baseline-shift","cap-height","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-name","glyph-orientation-horizontal","glyph-orientation-vertical","horiz-adv-x","horiz-origin-x","image-rendering","letter-spacing","lighting-color","marker-end","marker-mid","marker-start","overline-position","overline-thickness","paint-order","panose-1","pointer-events","rendering-intent","shape-rendering","stop-color","stop-opacity","strikethrough-position","strikethrough-thickness","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","underline-position","underline-thickness","unicode-bidi","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","vector-effect","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","writing-mode","xmlns:xlink","x-height"].forEach(e=>{const t=e.replace($p,Up);Ye[t]=new lt(t,pi,!1,e,null,!1,!1)});["xlink:actuate","xlink:arcrole","xlink:role","xlink:show","xlink:title","xlink:type"].forEach(e=>{const t=e.replace($p,Up);Ye[t]=new lt(t,pi,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(e=>{const t=e.replace($p,Up);Ye[t]=new lt(t,pi,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(e=>{Ye[e]=new lt(e,pi,!1,e.toLowerCase(),null,!1,!1)});const $R="xlinkHref";Ye[$R]=new lt("xlinkHref",pi,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(e=>{Ye[e]=new lt(e,pi,!1,e.toLowerCase(),null,!0,!0)});const{CAMELCASE:UR,SAME:KR,possibleStandardNames:Ch}=Bl,VR=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",HR=VR+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",GR=RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+HR+"]*$")),XR=Object.keys(Ch).reduce((e,t)=>{const a=Ch[t];return a===KR?e[t]=t:a===UR?e[t.toLowerCase()]=t:e[t]=a,e},{});Zt.BOOLEAN=Wl;Zt.BOOLEANISH_STRING=zl;Zt.NUMERIC=ib;Zt.OVERLOADED_BOOLEAN=Wp;Zt.POSITIVE_NUMERIC=nb;Zt.RESERVED=ab;Zt.STRING=pi;Zt.getPropertyInfo=zR;Zt.isCustomAttribute=GR;Zt.possibleStandardNames=XR;var Kp={},Vp={},Sh=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,JR=/\n/g,QR=/^\s*/,YR=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,ZR=/^:\s*/,eE=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,tE=/^[;\s]*/,aE=/^\s+|\s+$/g,iE=`
`,Ph="/",Ah="*",bi="",nE="comment",sE="declaration",rE=function(e,t){if(typeof e!="string")throw new TypeError("First argument must be a string");if(!e)return[];t=t||{};var a=1,i=1;function n(m){var c=m.match(JR);c&&(a+=c.length);var k=m.lastIndexOf(iE);i=~k?m.length-k:i+m.length}function s(){var m={line:a,column:i};return function(c){return c.position=new r(m),u(),c}}function r(m){this.start=m,this.end={line:a,column:i},this.source=t.source}r.prototype.content=e;function o(m){var c=new Error(t.source+":"+a+":"+i+": "+m);if(c.reason=m,c.filename=t.source,c.line=a,c.column=i,c.source=e,!t.silent)throw c}function l(m){var c=m.exec(e);if(c){var k=c[0];return n(k),e=e.slice(k.length),c}}function u(){l(QR)}function d(m){var c;for(m=m||[];c=h();)c!==!1&&m.push(c);return m}function h(){var m=s();if(!(Ph!=e.charAt(0)||Ah!=e.charAt(1))){for(var c=2;bi!=e.charAt(c)&&(Ah!=e.charAt(c)||Ph!=e.charAt(c+1));)++c;if(c+=2,bi===e.charAt(c-1))return o("End of comment missing");var k=e.slice(2,c-2);return i+=2,n(k),e=e.slice(c),i+=2,m({type:nE,comment:k})}}function g(){var m=s(),c=l(YR);if(c){if(h(),!l(ZR))return o("property missing ':'");var k=l(eE),y=m({type:sE,property:Rh(c[0].replace(Sh,bi)),value:k?Rh(k[0].replace(Sh,bi)):bi});return l(tE),y}}function p(){var m=[];d(m);for(var c;c=g();)c!==!1&&(m.push(c),d(m));return m}return u(),p()};function Rh(e){return e?e.replace(aE,bi):bi}var oE=pt&&pt.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Vp,"__esModule",{value:!0});var lE=oE(rE);function uE(e,t){var a=null;if(!e||typeof e!="string")return a;var i=(0,lE.default)(e),n=typeof t=="function";return i.forEach(function(s){if(s.type==="declaration"){var r=s.property,o=s.value;n?t(r,o,s):o&&(a=a||{},a[r]=o)}}),a}Vp.default=uE;var $l={};Object.defineProperty($l,"__esModule",{value:!0});$l.camelCase=void 0;var dE=/^--[a-zA-Z0-9-]+$/,cE=/-([a-z])/g,pE=/^[^-]+$/,fE=/^-(webkit|moz|ms|o|khtml)-/,mE=/^-(ms)-/,hE=function(e){return!e||pE.test(e)||dE.test(e)},gE=function(e,t){return t.toUpperCase()},Eh=function(e,t){return"".concat(t,"-")},yE=function(e,t){return t===void 0&&(t={}),hE(e)?e:(e=e.toLowerCase(),t.reactCompat?e=e.replace(mE,Eh):e=e.replace(fE,Eh),e.replace(cE,gE))};$l.camelCase=yE;var _E=pt&&pt.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Kp,"__esModule",{value:!0});var vE=_E(Vp),bE=$l;function wE(e,t){var a={};return!e||typeof e!="string"||(0,vE.default)(e,function(i,n){i&&n&&(a[(0,bE.camelCase)(i,t)]=n)}),a}Kp.default=wE;var TE=b,kE=Kp.default,xE=new Set(["annotation-xml","color-profile","font-face","font-face-src","font-face-uri","font-face-format","font-face-name","missing-glyph"]);function DE(e,t){return e.indexOf("-")===-1?t&&typeof t.is=="string":!xE.has(e)}var qE={reactCompat:!0};function CE(e,t){if(e!=null)try{t.style=kE(e,qE)}catch{t.style={}}}var SE=TE.version.split(".")[0]>=16,sb=new Set(["tr","tbody","thead","tfoot","colgroup","table","head","html","frameset"]);function PE(e){return!sb.has(e.name)}function AE(e){return e}var rb={PRESERVE_CUSTOM_ATTRIBUTES:SE,ELEMENTS_WITH_NO_TEXT_CHILDREN:sb,isCustomComponent:DE,setStyleProp:CE,canTextBeChildOfNode:PE,returnFirstArg:AE},ns=Zt,Ih=rb,RE=["checked","value"],EE=["input","select","textarea"],IE={reset:!0,submit:!0},ob=function(t,a){t=t||{};var i,n,s,r,o,l={},u=t.type&&IE[t.type];for(i in t){if(s=t[i],ns.isCustomAttribute(i)){l[i]=s;continue}if(n=i.toLowerCase(),r=Nh(n),r){switch(o=ns.getPropertyInfo(r),RE.indexOf(r)!==-1&&EE.indexOf(a)!==-1&&!u&&(r=Nh("default"+n)),l[r]=s,o&&o.type){case ns.BOOLEAN:l[r]=!0;break;case ns.OVERLOADED_BOOLEAN:s===""&&(l[r]=!0);break}continue}Ih.PRESERVE_CUSTOM_ATTRIBUTES&&(l[i]=s)}return Ih.setStyleProp(t.style,l),l};function Nh(e){return ns.possibleStandardNames[e]}var NE=b,jE=ob,zs=rb,FE=zs.setStyleProp,OE=zs.canTextBeChildOfNode;function lb(e,t){t=t||{};for(var a=t.library||NE,i=a.cloneElement,n=a.createElement,s=a.isValidElement,r=[],o,l,u=typeof t.replace=="function",d=t.transform||zs.returnFirstArg,h,g,p,m=t.trim,c=0,k=e.length;c<k;c++){if(o=e[c],u&&(h=t.replace(o),s(h))){k>1&&(h=i(h,{key:h.key||c})),r.push(d(h,o,c));continue}if(o.type==="text"){if(l=!o.data.trim().length,l&&o.parent&&!OE(o.parent)||m&&l)continue;r.push(d(o.data,o,c));continue}switch(g=o.attribs,ME(o)?FE(g.style,g):g&&(g=jE(g,o.name)),p=null,o.type){case"script":case"style":o.children[0]&&(g.dangerouslySetInnerHTML={__html:o.children[0].data});break;case"tag":o.name==="textarea"&&o.children[0]?g.defaultValue=o.children[0].data:o.children&&o.children.length&&(p=lb(o.children,t));break;default:continue}k>1&&(g.key=c),r.push(d(n(o.name,g,p),o,c))}return r.length===1?r[0]:r}function ME(e){return zs.PRESERVE_CUSTOM_ATTRIBUTES&&e.type==="tag"&&zs.isCustomComponent(e.name,e.attribs)}var LE=lb,Ul=Fp,on=Bp.default,BE=ob,ub=LE;on=typeof on.default=="function"?on.default:on;var zE={lowerCaseAttributeNames:!1};function pa(e,t){if(typeof e!="string")throw new TypeError("First argument must be a string");return e===""?[]:(t=t||{},ub(on(e,t.htmlparser2||zE),t))}pa.domToReact=ub;pa.htmlToDOM=on;pa.attributesToProps=BE;pa.Comment=Ul.Comment;pa.Element=Ul.Element;pa.ProcessingInstruction=Ul.ProcessingInstruction;pa.Text=Ul.Text;var WE=pa;pa.default=pa;const Ea=ac(WE);Ea.domToReact;Ea.htmlToDOM;Ea.attributesToProps;Ea.Comment;Ea.Element;Ea.ProcessingInstruction;Ea.Text;const jh=fa.entrypointtypes,$E=fa.plugins,Fh=fa.status_dict,UE="/aiida-registry/pr-preview/pr-280/";function KE({pluginKey:e}){const t=$E[e];return b.useEffect(()=>{window.scrollTo(0,0),document.documentElement.style.scrollBehavior="smooth",(()=>{const i=window.location.hash;if(i){let n=window.location.href;window.location.href=n+" ",window.location.href=n;const s=document.getElementById(i);s&&s.scrollIntoView()}})()},[]),f.jsx(f.Fragment,{children:f.jsxs("div",{id:"details",className:"fade-enter",children:[f.jsxs("h1",{className:"plugin-header",children:['AiiDA plugin package "',f.jsx("a",{href:t.code_home,children:t.name}),'"']}),f.jsx(Ii,{to:"/",children:f.jsx("p",{style:{display:"inline"},children:"< back to the registry index"})}),f.jsx("h2",{id:"general.information",children:"General information"}),f.jsxs("div",{children:[f.jsxs("p",{children:[f.jsx("strong",{children:"Current state: "}),f.jsx("img",{className:"svg-badge",src:`${UE}${Fh[t.development_status][1]}`,title:Fh[t.development_status][0]})]}),t.metadata.description&&f.jsxs("p",{children:[f.jsx("strong",{children:"Short description"}),": ",t.metadata.description]}),t.pip_url&&f.jsxs("p",{children:[f.jsx("strong",{children:"How to install"}),": ",f.jsx("code",{children:t.pip_install_cmd})]}),f.jsxs("p",{children:[f.jsx("strong",{children:"Source code"}),": ",f.jsx("a",{href:t.code_home,target:"_blank",children:"Go to the source code repository"})]}),t.documentation_url?f.jsxs("p",{children:[f.jsx("strong",{children:"Documentation"}),": ",f.jsx("a",{href:t.documentation_url,target:"_blank",children:"Go to plugin documentation"})]}):f.jsxs("p",{children:[f.jsx("strong",{children:"Documentation"}),": No documentation provided by the package author"]})]}),f.jsx("h3",{children:"Registry checks"}),t.warnings.length!==0||t.errors.length!==0?f.jsxs(f.Fragment,{children:[t.warnings&&f.jsx(f.Fragment,{children:t.warnings.map(a=>f.jsx(kr,{severity:"warning",children:Ea(`${a}`)}))}),t.errors&&f.jsx(f.Fragment,{children:t.errors.map(a=>f.jsx(kr,{severity:"error",children:Ea(`${a}`)}))}),f.jsxs(kr,{severity:"info",children:["Click the warning/error code will redirect to ",f.jsx("a",{href:"https://github.com/aiidateam/aiida-registry#how-to-fix-registry-warnings-and-errors",children:"troubleshooting section"})," for the fix of the issue."]})]}):f.jsx(kr,{severity:"success",children:"All checks passed!"}),f.jsx("h2",{id:"detailed.information",children:"Detailed information"}),Object.keys(t.metadata).length!==0?f.jsxs(f.Fragment,{children:[t.metadata.author&&f.jsxs("p",{children:[f.jsx("strong",{children:"Author(s)"}),": ",t.metadata.author]}),t.metadata.author_email&&f.jsxs("p",{children:[f.jsx("strong",{children:"Contact"}),":",t.metadata.author_email.split(",").map(a=>f.jsxs("span",{children:[f.jsx("a",{href:`mailto:${a.trim()}`,children:a.trim()}),", "]},a))]}),f.jsxs("p",{children:[f.jsx("strong",{children:"How to use from python"}),":"," ",f.jsxs("code",{children:["import ",t.package_name]})]}),f.jsxs("p",{children:[f.jsx("strong",{children:"Most recent version"}),": ",t.metadata.version]}),t.aiida_version&&f.jsxs("p",{children:[f.jsx("strong",{children:"Compatibility: "}),f.jsx("img",{className:"svg-badge",src:`https://img.shields.io/badge/AiiDA-${t.aiida_version}-007ec6.svg?logo=${wv}`})]}),t.summaryinfo.length!==0&&f.jsxs(f.Fragment,{children:[f.jsx("h3",{id:"plugins",children:"Plugins provided by the package"}),t.summaryinfo.map(a=>f.jsxs("span",{className:"badge",children:[f.jsx("span",{className:`badge-left ${a.colorclass}`,children:a.text}),f.jsx("span",{className:"badge-right",children:a.count})]},a.text))]}),t.entry_points?Object.entries(t.entry_points).map(([a,i])=>f.jsx(f.Fragment,{children:f.jsxs("div",{children:[f.jsx("h2",{style:{color:"black"},id:a,children:a in jh?f.jsxs(f.Fragment,{children:[jh[a]," ",f.jsxs("span",{className:"entrypointraw",children:["(",a,")"]})]}):a}),f.jsx("ul",{children:Object.entries(i).map(([n,s])=>f.jsxs("li",{children:[f.jsx("h2",{style:{color:"black"},id:`${a}.${n}`,children:n}),typeof s=="string"?f.jsxs("div",{className:"classbox",children:["class",f.jsxs("span",{className:"tooltiptext",children:[" ",s]})]}):f.jsx(VE,{entryPoints:s})]},n))})]},a)})):f.jsx("p",{children:"No entry points defined for this plugin."})]}):f.jsx("div",{id:"description",children:f.jsxs("p",{children:["Detailed information for this package could not be obtained. Ask the plugin author to add a ",f.jsx("code",{children:"setup.json"})," file to the plugin source code."]})})]})})}const VE=({entryPoints:e})=>f.jsxs("div",{style:{overflow:"auto"},children:[f.jsx("table",{children:f.jsx("tbody",{children:f.jsxs("tr",{children:[f.jsx("th",{children:"Class"}),f.jsx("td",{children:f.jsx("code",{children:e.class})})]})})}),f.jsxs("table",{children:[f.jsx("tr",{children:f.jsx("th",{children:"Description"})}),e.description.map(t=>f.jsx("tr",{className:"ep_description",children:f.jsx(Zd,{children:t.trim()})}))]}),f.jsxs("table",{children:[f.jsxs("tr",{children:[f.jsx("th",{children:"Inputs"}),f.jsx("th",{children:"Required"}),f.jsx("th",{children:"Valid Types"}),f.jsx("th",{children:"Description"})]}),f.jsx(Oh,{spec:e.spec.inputs}),f.jsxs("tr",{children:[f.jsx("th",{children:"Outputs"}),f.jsx("th",{children:"Required"}),f.jsx("th",{children:"Valid Types"}),f.jsx("th",{children:"Description"})]}),f.jsx(Oh,{spec:e.spec.outputs})]}),f.jsxs("table",{children:[f.jsx("tr",{children:f.jsx("th",{children:"Exit Codes"})}),f.jsxs("tr",{children:[f.jsx("th",{children:"Status"}),f.jsx("th",{children:"Message"})]}),e.spec.exit_codes.map(t=>f.jsxs("tr",{className:"ep_description",children:[f.jsx("td",{children:t.status}),f.jsx(Zd,{children:t.message})]}))]})]}),Oh=({spec:e})=>f.jsx(f.Fragment,{children:e.map(t=>f.jsxs("tr",{className:"ep_description",children:[f.jsx("td",{children:t.name}),f.jsx("td",{children:t.required.toString()}),f.jsx("td",{children:t.valid_types}),f.jsx(Zd,{children:t.info})]}))});const HE=["addEndListener","appear","children","container","direction","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function GE(e,t,a){const i=t.getBoundingClientRect(),n=a&&a.getBoundingClientRect(),s=ca(t);let r;if(t.fakeTransform)r=t.fakeTransform;else{const u=s.getComputedStyle(t);r=u.getPropertyValue("-webkit-transform")||u.getPropertyValue("transform")}let o=0,l=0;if(r&&r!=="none"&&typeof r=="string"){const u=r.split("(")[1].split(")")[0].split(",");o=parseInt(u[4],10),l=parseInt(u[5],10)}return e==="left"?n?`translateX(${n.right+o-i.left}px)`:`translateX(${s.innerWidth+o-i.left}px)`:e==="right"?n?`translateX(-${i.right-n.left-o}px)`:`translateX(-${i.left+i.width-o}px)`:e==="up"?n?`translateY(${n.bottom+l-i.top}px)`:`translateY(${s.innerHeight+l-i.top}px)`:n?`translateY(-${i.top-n.top+i.height-l}px)`:`translateY(-${i.top+i.height-l}px)`}function XE(e){return typeof e=="function"?e():e}function Sr(e,t,a){const i=XE(a),n=GE(e,t,i);n&&(t.style.webkitTransform=n,t.style.transform=n)}const JE=b.forwardRef(function(t,a){const i=jn(),n={enter:i.transitions.easing.easeOut,exit:i.transitions.easing.sharp},s={enter:i.transitions.duration.enteringScreen,exit:i.transitions.duration.leavingScreen},{addEndListener:r,appear:o=!0,children:l,container:u,direction:d="down",easing:h=n,in:g,onEnter:p,onEntered:m,onEntering:c,onExit:k,onExited:y,onExiting:_,style:v,timeout:w=s,TransitionComponent:D=Dp}=t,q=$(t,HE),T=b.useRef(null),C=Qe(l.ref,T,a),A=P=>N=>{P&&(N===void 0?P(T.current):P(T.current,N))},S=A((P,N)=>{Sr(d,P,u),Sp(P),p&&p(P,N)}),I=A((P,N)=>{const L=Dn({timeout:w,style:v,easing:h},{mode:"enter"});P.style.webkitTransition=i.transitions.create("-webkit-transform",x({},L)),P.style.transition=i.transitions.create("transform",x({},L)),P.style.webkitTransform="none",P.style.transform="none",c&&c(P,N)}),j=A(m),O=A(_),E=A(P=>{const N=Dn({timeout:w,style:v,easing:h},{mode:"exit"});P.style.webkitTransition=i.transitions.create("-webkit-transform",N),P.style.transition=i.transitions.create("transform",N),Sr(d,P,u),k&&k(P)}),F=A(P=>{P.style.webkitTransition="",P.style.transition="",y&&y(P)}),M=P=>{r&&r(T.current,P)},B=b.useCallback(()=>{T.current&&Sr(d,T.current,u)},[d,u]);return b.useEffect(()=>{if(g||d==="down"||d==="right")return;const P=ol(()=>{T.current&&Sr(d,T.current,u)}),N=ca(T.current);return N.addEventListener("resize",P),()=>{P.clear(),N.removeEventListener("resize",P)}},[d,g,u]),b.useEffect(()=>{g||B()},[g,B]),f.jsx(D,x({nodeRef:T,onEnter:S,onEntered:j,onEntering:I,onExit:E,onExited:F,onExiting:O,addEndListener:M,appear:o,in:g,timeout:w},q,{children:(P,N)=>b.cloneElement(l,x({ref:C,style:x({visibility:P==="exited"&&!g?"hidden":void 0},v,l.props.style)},N))}))}),QE=JE;function YE(e){return fe("MuiDrawer",e)}re("MuiDrawer",["root","docked","paper","paperAnchorLeft","paperAnchorRight","paperAnchorTop","paperAnchorBottom","paperAnchorDockedLeft","paperAnchorDockedRight","paperAnchorDockedTop","paperAnchorDockedBottom","modal"]);const ZE=["BackdropProps"],e3=["anchor","BackdropProps","children","className","elevation","hideBackdrop","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"],db=(e,t)=>{const{ownerState:a}=e;return[t.root,(a.variant==="permanent"||a.variant==="persistent")&&t.docked,t.modal]},t3=e=>{const{classes:t,anchor:a,variant:i}=e,n={root:["root"],docked:[(i==="permanent"||i==="persistent")&&"docked"],modal:["modal"],paper:["paper",`paperAnchor${G(a)}`,i!=="temporary"&&`paperAnchorDocked${G(a)}`]};return me(n,YE,t)},a3=W(Pp,{name:"MuiDrawer",slot:"Root",overridesResolver:db})(({theme:e})=>({zIndex:(e.vars||e).zIndex.drawer})),Mh=W("div",{shouldForwardProp:Rt,name:"MuiDrawer",slot:"Docked",skipVariantsResolver:!1,overridesResolver:db})({flex:"0 0 auto"}),i3=W(tr,{name:"MuiDrawer",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.paper,t[`paperAnchor${G(a.anchor)}`],a.variant!=="temporary"&&t[`paperAnchorDocked${G(a.anchor)}`]]}})(({theme:e,ownerState:t})=>x({overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:(e.vars||e).zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},t.anchor==="left"&&{left:0},t.anchor==="top"&&{top:0,left:0,right:0,height:"auto",maxHeight:"100%"},t.anchor==="right"&&{right:0},t.anchor==="bottom"&&{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},t.anchor==="left"&&t.variant!=="temporary"&&{borderRight:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="top"&&t.variant!=="temporary"&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="right"&&t.variant!=="temporary"&&{borderLeft:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="bottom"&&t.variant!=="temporary"&&{borderTop:`1px solid ${(e.vars||e).palette.divider}`})),cb={left:"right",right:"left",top:"down",bottom:"up"};function n3(e){return["left","right"].indexOf(e)!==-1}function s3(e,t){return e.direction==="rtl"&&n3(t)?cb[t]:t}const r3=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDrawer"}),n=jn(),s={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{anchor:r="left",BackdropProps:o,children:l,className:u,elevation:d=16,hideBackdrop:h=!1,ModalProps:{BackdropProps:g}={},onClose:p,open:m=!1,PaperProps:c={},SlideProps:k,TransitionComponent:y=QE,transitionDuration:_=s,variant:v="temporary"}=i,w=$(i.ModalProps,ZE),D=$(i,e3),q=b.useRef(!1);b.useEffect(()=>{q.current=!0},[]);const T=s3(n,r),A=x({},i,{anchor:r,elevation:d,open:m,variant:v},D),S=t3(A),I=f.jsx(i3,x({elevation:v==="temporary"?d:0,square:!0},c,{className:V(S.paper,c.className),ownerState:A,children:l}));if(v==="permanent")return f.jsx(Mh,x({className:V(S.root,S.docked,u),ownerState:A,ref:a},D,{children:I}));const j=f.jsx(y,x({in:m,direction:cb[T],timeout:_,appear:q.current},k,{children:I}));return v==="persistent"?f.jsx(Mh,x({className:V(S.root,S.docked,u),ownerState:A,ref:a},D,{children:j})):f.jsx(a3,x({BackdropProps:x({},o,g,{transitionDuration:_}),className:V(S.root,S.modal,u),open:m,ownerState:A,onClose:p,hideBackdrop:h,ref:a},D,w,{children:j}))}),o3=r3,l3=fa.plugins;function u3({pluginKey:e}){const t=l3[e];function a(){function n(){document.querySelector("header").style.top="-155px",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="0"}setTimeout(n,800)}const i=f.jsxs("div",{style:{paddingLeft:"10px"},children:[f.jsx("h1",{children:"Plugin content"}),f.jsx(Xm,{}),f.jsx("p",{children:f.jsx("a",{style:{color:"black"},href:"#general.information",onClick:a,children:"General Information"})}),f.jsx("p",{children:f.jsx("a",{style:{color:"black"},href:"#detailed.information",onClick:a,children:"Detailed Information"})}),f.jsx("p",{children:f.jsx("a",{style:{color:"black"},href:"#plugins",onClick:a,children:"Plugins provided by the package"})}),t.entry_points&&Object.entries(t.entry_points).map(([n,s])=>f.jsx(f.Fragment,{children:f.jsx("ul",{children:f.jsxs("li",{children:[f.jsx("a",{style:{color:"black"},href:`#${n}`,onClick:a,children:n}),Object.entries(s).map(([r,o])=>f.jsx("ul",{children:f.jsx("li",{children:f.jsx("a",{style:{color:"black"},href:`#${n}.${r}`,onClick:a,children:r})})},r))]})})})),f.jsx(Xm,{})]});return f.jsx(o3,{variant:"permanent",id:"sidebar",anchor:"right",sx:{display:{xs:"none",sm:"block"}},open:!0,children:i})}function d3(){return f.jsxs(f.Fragment,{children:[f.jsx(c3,{}),f.jsx("div",{style:{marginTop:"155px"},children:f.jsx(cP,{children:f.jsx(cq,{children:f.jsxs(C1,{children:[f.jsx(Pd,{path:"/",element:f.jsx(tA,{})}),f.jsx(Pd,{path:"/:key",element:f.jsx(f3,{})})]})})})}),f.jsx(p3,{})]})}function c3(){return f.jsx("header",{children:f.jsxs("div",{style:{paddingLeft:"20px"},children:[f.jsx("h1",{children:f.jsx("a",{href:"http://aiidateam.github.io/aiida-registry",children:f.jsx("img",{src:O1,height:"70px"})})}),f.jsx("p",{style:{fontSize:"90%"},children:f.jsx("a",{href:"http://github.com/aiidateam/aiida-registry",style:{color:"#999"},children:"[View on GitHub/register your package]"})})]})})}function p3(){return f.jsxs("footer",{className:"footer",children:[f.jsx("hr",{}),"The official ",f.jsx("a",{href:"http://aiidateam.github.io/aiida-registry",children:"registry"})," of ",f.jsx("a",{href:"http://www.aiida.net",children:"AiiDA"})," plugins.",f.jsx("br",{}),"This work is supported by the ",f.jsx("a",{href:"http://nccr-marvel.ch",target:"_blank",children:"MARVEL National Centre for Competence in Research"})," funded by the ",f.jsx("a",{href:"http://www.snf.ch/en",target:"_blank",children:"Swiss National Science Foundation"}),", as well as by the ",f.jsx("a",{href:"http://www.max-centre.eu",target:"_blank",children:"MaX European Centre of Excellence"})," funded by the Horizon 2020 EINFRA-5 program, Grant No. 676598.",f.jsx("br",{}),f.jsx("br",{}),f.jsxs("div",{style:{textAlign:"center"},children:[f.jsx("img",{src:M1,height:"70px"}),"    ",f.jsx("img",{src:L1,height:"70px"})]})]})}function f3(){const{key:e}=f1();b.useEffect(()=>(document.querySelector("footer").style.width="calc(100% - 380px)",()=>{document.querySelector("footer").style.width="calc(100% - 64px)"}),[]);function t(){var a=window.scrollY;window.onscroll=function(){var i=window.scrollY;a>i?(document.querySelector("header").style.top="0",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="155px"):a>150&&(document.querySelector("header").style.top="-155px",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="0"),a=i}}return t(),f.jsx(f.Fragment,{children:f.jsxs("div",{id:"detailsContainer",children:[f.jsx(KE,{pluginKey:e}),f.jsx(u3,{pluginKey:e})]})})}const m3="/aiida-registry/pr-preview/pr-280/";ju.createRoot(document.getElementById("root")).render(f.jsx(Xt.StrictMode,{children:f.jsx(I1,{basename:m3,children:f.jsx(d3,{})})}));
