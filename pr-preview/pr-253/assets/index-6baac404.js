function Iy(e,t){for(var a=0;a<t.length;a++){const i=t[a];if(typeof i!="string"&&!Array.isArray(i)){for(const s in i)if(s!=="default"&&!(s in e)){const r=Object.getOwnPropertyDescriptor(i,s);r&&Object.defineProperty(e,s,r.get?r:{enumerable:!0,get:()=>i[s]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const n of r.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function a(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(s){if(s.ep)return;s.ep=!0;const r=a(s);fetch(s.href,r)}})();function Vf(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Ry(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var a=function i(){return this instanceof i?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};a.prototype=t.prototype}else a={};return Object.defineProperty(a,"__esModule",{value:!0}),Object.keys(e).forEach(function(i){var s=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(a,i,s.get?s:{enumerable:!0,get:function(){return e[i]}})}),a}var Kf={exports:{}},Vn={},Gf={exports:{}},Q={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var mr=Symbol.for("react.element"),jy=Symbol.for("react.portal"),Ey=Symbol.for("react.fragment"),Fy=Symbol.for("react.strict_mode"),Ny=Symbol.for("react.profiler"),Ly=Symbol.for("react.provider"),Oy=Symbol.for("react.context"),My=Symbol.for("react.forward_ref"),By=Symbol.for("react.suspense"),zy=Symbol.for("react.memo"),$y=Symbol.for("react.lazy"),xc=Symbol.iterator;function Wy(e){return e===null||typeof e!="object"?null:(e=xc&&e[xc]||e["@@iterator"],typeof e=="function"?e:null)}var Xf={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Qf=Object.assign,Jf={};function rs(e,t,a){this.props=e,this.context=t,this.refs=Jf,this.updater=a||Xf}rs.prototype.isReactComponent={};rs.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};rs.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Yf(){}Yf.prototype=rs.prototype;function Ju(e,t,a){this.props=e,this.context=t,this.refs=Jf,this.updater=a||Xf}var Yu=Ju.prototype=new Yf;Yu.constructor=Ju;Qf(Yu,rs.prototype);Yu.isPureReactComponent=!0;var Dc=Array.isArray,Zf=Object.prototype.hasOwnProperty,Zu={current:null},em={key:!0,ref:!0,__self:!0,__source:!0};function tm(e,t,a){var i,s={},r=null,n=null;if(t!=null)for(i in t.ref!==void 0&&(n=t.ref),t.key!==void 0&&(r=""+t.key),t)Zf.call(t,i)&&!em.hasOwnProperty(i)&&(s[i]=t[i]);var o=arguments.length-2;if(o===1)s.children=a;else if(1<o){for(var l=Array(o),u=0;u<o;u++)l[u]=arguments[u+2];s.children=l}if(e&&e.defaultProps)for(i in o=e.defaultProps,o)s[i]===void 0&&(s[i]=o[i]);return{$$typeof:mr,type:e,key:r,ref:n,props:s,_owner:Zu.current}}function Uy(e,t){return{$$typeof:mr,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function ed(e){return typeof e=="object"&&e!==null&&e.$$typeof===mr}function Hy(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(a){return t[a]})}var kc=/\/+/g;function Zo(e,t){return typeof e=="object"&&e!==null&&e.key!=null?Hy(""+e.key):t.toString(36)}function Gr(e,t,a,i,s){var r=typeof e;(r==="undefined"||r==="boolean")&&(e=null);var n=!1;if(e===null)n=!0;else switch(r){case"string":case"number":n=!0;break;case"object":switch(e.$$typeof){case mr:case jy:n=!0}}if(n)return n=e,s=s(n),e=i===""?"."+Zo(n,0):i,Dc(s)?(a="",e!=null&&(a=e.replace(kc,"$&/")+"/"),Gr(s,t,a,"",function(u){return u})):s!=null&&(ed(s)&&(s=Uy(s,a+(!s.key||n&&n.key===s.key?"":(""+s.key).replace(kc,"$&/")+"/")+e)),t.push(s)),1;if(n=0,i=i===""?".":i+":",Dc(e))for(var o=0;o<e.length;o++){r=e[o];var l=i+Zo(r,o);n+=Gr(r,t,a,l,s)}else if(l=Wy(e),typeof l=="function")for(e=l.call(e),o=0;!(r=e.next()).done;)r=r.value,l=i+Zo(r,o++),n+=Gr(r,t,a,l,s);else if(r==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return n}function Cr(e,t,a){if(e==null)return e;var i=[],s=0;return Gr(e,i,"","",function(r){return t.call(a,r,s++)}),i}function Vy(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(a){(e._status===0||e._status===-1)&&(e._status=1,e._result=a)},function(a){(e._status===0||e._status===-1)&&(e._status=2,e._result=a)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var rt={current:null},Xr={transition:null},Ky={ReactCurrentDispatcher:rt,ReactCurrentBatchConfig:Xr,ReactCurrentOwner:Zu};Q.Children={map:Cr,forEach:function(e,t,a){Cr(e,function(){t.apply(this,arguments)},a)},count:function(e){var t=0;return Cr(e,function(){t++}),t},toArray:function(e){return Cr(e,function(t){return t})||[]},only:function(e){if(!ed(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};Q.Component=rs;Q.Fragment=Ey;Q.Profiler=Ny;Q.PureComponent=Ju;Q.StrictMode=Fy;Q.Suspense=By;Q.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ky;Q.cloneElement=function(e,t,a){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=Qf({},e.props),s=e.key,r=e.ref,n=e._owner;if(t!=null){if(t.ref!==void 0&&(r=t.ref,n=Zu.current),t.key!==void 0&&(s=""+t.key),e.type&&e.type.defaultProps)var o=e.type.defaultProps;for(l in t)Zf.call(t,l)&&!em.hasOwnProperty(l)&&(i[l]=t[l]===void 0&&o!==void 0?o[l]:t[l])}var l=arguments.length-2;if(l===1)i.children=a;else if(1<l){o=Array(l);for(var u=0;u<l;u++)o[u]=arguments[u+2];i.children=o}return{$$typeof:mr,type:e.type,key:s,ref:r,props:i,_owner:n}};Q.createContext=function(e){return e={$$typeof:Oy,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:Ly,_context:e},e.Consumer=e};Q.createElement=tm;Q.createFactory=function(e){var t=tm.bind(null,e);return t.type=e,t};Q.createRef=function(){return{current:null}};Q.forwardRef=function(e){return{$$typeof:My,render:e}};Q.isValidElement=ed;Q.lazy=function(e){return{$$typeof:$y,_payload:{_status:-1,_result:e},_init:Vy}};Q.memo=function(e,t){return{$$typeof:zy,type:e,compare:t===void 0?null:t}};Q.startTransition=function(e){var t=Xr.transition;Xr.transition={};try{e()}finally{Xr.transition=t}};Q.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};Q.useCallback=function(e,t){return rt.current.useCallback(e,t)};Q.useContext=function(e){return rt.current.useContext(e)};Q.useDebugValue=function(){};Q.useDeferredValue=function(e){return rt.current.useDeferredValue(e)};Q.useEffect=function(e,t){return rt.current.useEffect(e,t)};Q.useId=function(){return rt.current.useId()};Q.useImperativeHandle=function(e,t,a){return rt.current.useImperativeHandle(e,t,a)};Q.useInsertionEffect=function(e,t){return rt.current.useInsertionEffect(e,t)};Q.useLayoutEffect=function(e,t){return rt.current.useLayoutEffect(e,t)};Q.useMemo=function(e,t){return rt.current.useMemo(e,t)};Q.useReducer=function(e,t,a){return rt.current.useReducer(e,t,a)};Q.useRef=function(e){return rt.current.useRef(e)};Q.useState=function(e){return rt.current.useState(e)};Q.useSyncExternalStore=function(e,t,a){return rt.current.useSyncExternalStore(e,t,a)};Q.useTransition=function(){return rt.current.useTransition()};Q.version="18.2.0";Gf.exports=Q;var b=Gf.exports;const zt=Vf(b),fn=Iy({__proto__:null,default:zt},[b]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Gy=b,Xy=Symbol.for("react.element"),Qy=Symbol.for("react.fragment"),Jy=Object.prototype.hasOwnProperty,Yy=Gy.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Zy={key:!0,ref:!0,__self:!0,__source:!0};function am(e,t,a){var i,s={},r=null,n=null;a!==void 0&&(r=""+a),t.key!==void 0&&(r=""+t.key),t.ref!==void 0&&(n=t.ref);for(i in t)Jy.call(t,i)&&!Zy.hasOwnProperty(i)&&(s[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps,t)s[i]===void 0&&(s[i]=t[i]);return{$$typeof:Xy,type:e,key:r,ref:n,props:s,_owner:Yy.current}}Vn.Fragment=Qy;Vn.jsx=am;Vn.jsxs=am;Kf.exports=Vn;var v=Kf.exports,Ol={},im={exports:{}},Tt={},sm={exports:{}},rm={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(S,R){var N=S.length;S.push(R);e:for(;0<N;){var K=N-1>>>1,G=S[K];if(0<s(G,R))S[K]=R,S[N]=G,N=K;else break e}}function a(S){return S.length===0?null:S[0]}function i(S){if(S.length===0)return null;var R=S[0],N=S.pop();if(N!==R){S[0]=N;e:for(var K=0,G=S.length,ge=G>>>1;K<ge;){var se=2*(K+1)-1,oe=S[se],Z=se+1,Ue=S[Z];if(0>s(oe,N))Z<G&&0>s(Ue,oe)?(S[K]=Ue,S[Z]=N,K=Z):(S[K]=oe,S[se]=N,K=se);else if(Z<G&&0>s(Ue,N))S[K]=Ue,S[Z]=N,K=Z;else break e}}return R}function s(S,R){var N=S.sortIndex-R.sortIndex;return N!==0?N:S.id-R.id}if(typeof performance=="object"&&typeof performance.now=="function"){var r=performance;e.unstable_now=function(){return r.now()}}else{var n=Date,o=n.now();e.unstable_now=function(){return n.now()-o}}var l=[],u=[],f=1,y=null,_=3,d=!1,h=!1,c=!1,x=typeof setTimeout=="function"?setTimeout:null,m=typeof clearTimeout=="function"?clearTimeout:null,p=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function g(S){for(var R=a(u);R!==null;){if(R.callback===null)i(u);else if(R.startTime<=S)i(u),R.sortIndex=R.expirationTime,t(l,R);else break;R=a(u)}}function w(S){if(c=!1,g(S),!h)if(a(l)!==null)h=!0,z(q);else{var R=a(u);R!==null&&M(w,R.startTime-S)}}function q(S,R){h=!1,c&&(c=!1,m(C),C=-1),d=!0;var N=_;try{for(g(R),y=a(l);y!==null&&(!(y.expirationTime>R)||S&&!F());){var K=y.callback;if(typeof K=="function"){y.callback=null,_=y.priorityLevel;var G=K(y.expirationTime<=R);R=e.unstable_now(),typeof G=="function"?y.callback=G:y===a(l)&&i(l),g(R)}else i(l);y=a(l)}if(y!==null)var ge=!0;else{var se=a(u);se!==null&&M(w,se.startTime-R),ge=!1}return ge}finally{y=null,_=N,d=!1}}var k=!1,T=null,C=-1,I=5,P=-1;function F(){return!(e.unstable_now()-P<I)}function B(){if(T!==null){var S=e.unstable_now();P=S;var R=!0;try{R=T(!0,S)}finally{R?O():(k=!1,T=null)}}else k=!1}var O;if(typeof p=="function")O=function(){p(B)};else if(typeof MessageChannel<"u"){var j=new MessageChannel,E=j.port2;j.port1.onmessage=B,O=function(){E.postMessage(null)}}else O=function(){x(B,0)};function z(S){T=S,k||(k=!0,O())}function M(S,R){C=x(function(){S(e.unstable_now())},R)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(S){S.callback=null},e.unstable_continueExecution=function(){h||d||(h=!0,z(q))},e.unstable_forceFrameRate=function(S){0>S||125<S?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):I=0<S?Math.floor(1e3/S):5},e.unstable_getCurrentPriorityLevel=function(){return _},e.unstable_getFirstCallbackNode=function(){return a(l)},e.unstable_next=function(S){switch(_){case 1:case 2:case 3:var R=3;break;default:R=_}var N=_;_=R;try{return S()}finally{_=N}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(S,R){switch(S){case 1:case 2:case 3:case 4:case 5:break;default:S=3}var N=_;_=S;try{return R()}finally{_=N}},e.unstable_scheduleCallback=function(S,R,N){var K=e.unstable_now();switch(typeof N=="object"&&N!==null?(N=N.delay,N=typeof N=="number"&&0<N?K+N:K):N=K,S){case 1:var G=-1;break;case 2:G=250;break;case 5:G=1073741823;break;case 4:G=1e4;break;default:G=5e3}return G=N+G,S={id:f++,callback:R,priorityLevel:S,startTime:N,expirationTime:G,sortIndex:-1},N>K?(S.sortIndex=N,t(u,S),a(l)===null&&S===a(u)&&(c?(m(C),C=-1):c=!0,M(w,N-K))):(S.sortIndex=G,t(l,S),h||d||(h=!0,z(q))),S},e.unstable_shouldYield=F,e.unstable_wrapCallback=function(S){var R=_;return function(){var N=_;_=R;try{return S.apply(this,arguments)}finally{_=N}}}})(rm);sm.exports=rm;var e_=sm.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var nm=b,wt=e_;function A(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,a=1;a<arguments.length;a++)t+="&args[]="+encodeURIComponent(arguments[a]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var om=new Set,Hs={};function gi(e,t){Gi(e,t),Gi(e+"Capture",t)}function Gi(e,t){for(Hs[e]=t,e=0;e<t.length;e++)om.add(t[e])}var ca=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),Ml=Object.prototype.hasOwnProperty,t_=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Cc={},Sc={};function a_(e){return Ml.call(Sc,e)?!0:Ml.call(Cc,e)?!1:t_.test(e)?Sc[e]=!0:(Cc[e]=!0,!1)}function i_(e,t,a,i){if(a!==null&&a.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return i?!1:a!==null?!a.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function s_(e,t,a,i){if(t===null||typeof t>"u"||i_(e,t,a,i))return!0;if(i)return!1;if(a!==null)switch(a.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function nt(e,t,a,i,s,r,n){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=i,this.attributeNamespace=s,this.mustUseProperty=a,this.propertyName=e,this.type=t,this.sanitizeURL=r,this.removeEmptyString=n}var Xe={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Xe[e]=new nt(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Xe[t]=new nt(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){Xe[e]=new nt(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Xe[e]=new nt(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Xe[e]=new nt(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){Xe[e]=new nt(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){Xe[e]=new nt(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){Xe[e]=new nt(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){Xe[e]=new nt(e,5,!1,e.toLowerCase(),null,!1,!1)});var td=/[\-:]([a-z])/g;function ad(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(td,ad);Xe[t]=new nt(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(td,ad);Xe[t]=new nt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(td,ad);Xe[t]=new nt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){Xe[e]=new nt(e,1,!1,e.toLowerCase(),null,!1,!1)});Xe.xlinkHref=new nt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){Xe[e]=new nt(e,1,!1,e.toLowerCase(),null,!0,!0)});function id(e,t,a,i){var s=Xe.hasOwnProperty(t)?Xe[t]:null;(s!==null?s.type!==0:i||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(s_(t,a,s,i)&&(a=null),i||s===null?a_(t)&&(a===null?e.removeAttribute(t):e.setAttribute(t,""+a)):s.mustUseProperty?e[s.propertyName]=a===null?s.type===3?!1:"":a:(t=s.attributeName,i=s.attributeNamespace,a===null?e.removeAttribute(t):(s=s.type,a=s===3||s===4&&a===!0?"":""+a,i?e.setAttributeNS(i,t,a):e.setAttribute(t,a))))}var ga=nm.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Sr=Symbol.for("react.element"),Si=Symbol.for("react.portal"),Pi=Symbol.for("react.fragment"),sd=Symbol.for("react.strict_mode"),Bl=Symbol.for("react.profiler"),lm=Symbol.for("react.provider"),um=Symbol.for("react.context"),rd=Symbol.for("react.forward_ref"),zl=Symbol.for("react.suspense"),$l=Symbol.for("react.suspense_list"),nd=Symbol.for("react.memo"),xa=Symbol.for("react.lazy"),dm=Symbol.for("react.offscreen"),Pc=Symbol.iterator;function cs(e){return e===null||typeof e!="object"?null:(e=Pc&&e[Pc]||e["@@iterator"],typeof e=="function"?e:null)}var xe=Object.assign,el;function Cs(e){if(el===void 0)try{throw Error()}catch(a){var t=a.stack.trim().match(/\n( *(at )?)/);el=t&&t[1]||""}return`
`+el+e}var tl=!1;function al(e,t){if(!e||tl)return"";tl=!0;var a=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(u){var i=u}Reflect.construct(e,[],t)}else{try{t.call()}catch(u){i=u}e.call(t.prototype)}else{try{throw Error()}catch(u){i=u}e()}}catch(u){if(u&&i&&typeof u.stack=="string"){for(var s=u.stack.split(`
`),r=i.stack.split(`
`),n=s.length-1,o=r.length-1;1<=n&&0<=o&&s[n]!==r[o];)o--;for(;1<=n&&0<=o;n--,o--)if(s[n]!==r[o]){if(n!==1||o!==1)do if(n--,o--,0>o||s[n]!==r[o]){var l=`
`+s[n].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=n&&0<=o);break}}}finally{tl=!1,Error.prepareStackTrace=a}return(e=e?e.displayName||e.name:"")?Cs(e):""}function r_(e){switch(e.tag){case 5:return Cs(e.type);case 16:return Cs("Lazy");case 13:return Cs("Suspense");case 19:return Cs("SuspenseList");case 0:case 2:case 15:return e=al(e.type,!1),e;case 11:return e=al(e.type.render,!1),e;case 1:return e=al(e.type,!0),e;default:return""}}function Wl(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Pi:return"Fragment";case Si:return"Portal";case Bl:return"Profiler";case sd:return"StrictMode";case zl:return"Suspense";case $l:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case um:return(e.displayName||"Context")+".Consumer";case lm:return(e._context.displayName||"Context")+".Provider";case rd:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case nd:return t=e.displayName||null,t!==null?t:Wl(e.type)||"Memo";case xa:t=e._payload,e=e._init;try{return Wl(e(t))}catch{}}return null}function n_(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Wl(t);case 8:return t===sd?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function Ba(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function cm(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function o_(e){var t=cm(e)?"checked":"value",a=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&typeof a<"u"&&typeof a.get=="function"&&typeof a.set=="function"){var s=a.get,r=a.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return s.call(this)},set:function(n){i=""+n,r.call(this,n)}}),Object.defineProperty(e,t,{enumerable:a.enumerable}),{getValue:function(){return i},setValue:function(n){i=""+n},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Pr(e){e._valueTracker||(e._valueTracker=o_(e))}function pm(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var a=t.getValue(),i="";return e&&(i=cm(e)?e.checked?"true":"false":e.value),e=i,e!==a?(t.setValue(e),!0):!1}function mn(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Ul(e,t){var a=t.checked;return xe({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:a??e._wrapperState.initialChecked})}function Ac(e,t){var a=t.defaultValue==null?"":t.defaultValue,i=t.checked!=null?t.checked:t.defaultChecked;a=Ba(t.value!=null?t.value:a),e._wrapperState={initialChecked:i,initialValue:a,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function fm(e,t){t=t.checked,t!=null&&id(e,"checked",t,!1)}function Hl(e,t){fm(e,t);var a=Ba(t.value),i=t.type;if(a!=null)i==="number"?(a===0&&e.value===""||e.value!=a)&&(e.value=""+a):e.value!==""+a&&(e.value=""+a);else if(i==="submit"||i==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?Vl(e,t.type,a):t.hasOwnProperty("defaultValue")&&Vl(e,t.type,Ba(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Ic(e,t,a){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!(i!=="submit"&&i!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,a||t===e.value||(e.value=t),e.defaultValue=t}a=e.name,a!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,a!==""&&(e.name=a)}function Vl(e,t,a){(t!=="number"||mn(e.ownerDocument)!==e)&&(a==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+a&&(e.defaultValue=""+a))}var Ss=Array.isArray;function Bi(e,t,a,i){if(e=e.options,t){t={};for(var s=0;s<a.length;s++)t["$"+a[s]]=!0;for(a=0;a<e.length;a++)s=t.hasOwnProperty("$"+e[a].value),e[a].selected!==s&&(e[a].selected=s),s&&i&&(e[a].defaultSelected=!0)}else{for(a=""+Ba(a),t=null,s=0;s<e.length;s++){if(e[s].value===a){e[s].selected=!0,i&&(e[s].defaultSelected=!0);return}t!==null||e[s].disabled||(t=e[s])}t!==null&&(t.selected=!0)}}function Kl(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(A(91));return xe({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Rc(e,t){var a=t.value;if(a==null){if(a=t.children,t=t.defaultValue,a!=null){if(t!=null)throw Error(A(92));if(Ss(a)){if(1<a.length)throw Error(A(93));a=a[0]}t=a}t==null&&(t=""),a=t}e._wrapperState={initialValue:Ba(a)}}function mm(e,t){var a=Ba(t.value),i=Ba(t.defaultValue);a!=null&&(a=""+a,a!==e.value&&(e.value=a),t.defaultValue==null&&e.defaultValue!==a&&(e.defaultValue=a)),i!=null&&(e.defaultValue=""+i)}function jc(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function hm(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Gl(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?hm(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Ar,gm=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,a,i,s){MSApp.execUnsafeLocalFunction(function(){return e(t,a,i,s)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Ar=Ar||document.createElement("div"),Ar.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ar.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Vs(e,t){if(t){var a=e.firstChild;if(a&&a===e.lastChild&&a.nodeType===3){a.nodeValue=t;return}}e.textContent=t}var Rs={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},l_=["Webkit","ms","Moz","O"];Object.keys(Rs).forEach(function(e){l_.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Rs[t]=Rs[e]})});function ym(e,t,a){return t==null||typeof t=="boolean"||t===""?"":a||typeof t!="number"||t===0||Rs.hasOwnProperty(e)&&Rs[e]?(""+t).trim():t+"px"}function _m(e,t){e=e.style;for(var a in t)if(t.hasOwnProperty(a)){var i=a.indexOf("--")===0,s=ym(a,t[a],i);a==="float"&&(a="cssFloat"),i?e.setProperty(a,s):e[a]=s}}var u_=xe({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Xl(e,t){if(t){if(u_[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(A(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(A(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(A(61))}if(t.style!=null&&typeof t.style!="object")throw Error(A(62))}}function Ql(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Jl=null;function od(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Yl=null,zi=null,$i=null;function Ec(e){if(e=yr(e)){if(typeof Yl!="function")throw Error(A(280));var t=e.stateNode;t&&(t=Jn(t),Yl(e.stateNode,e.type,t))}}function vm(e){zi?$i?$i.push(e):$i=[e]:zi=e}function bm(){if(zi){var e=zi,t=$i;if($i=zi=null,Ec(e),t)for(e=0;e<t.length;e++)Ec(t[e])}}function wm(e,t){return e(t)}function Tm(){}var il=!1;function qm(e,t,a){if(il)return e(t,a);il=!0;try{return wm(e,t,a)}finally{il=!1,(zi!==null||$i!==null)&&(Tm(),bm())}}function Ks(e,t){var a=e.stateNode;if(a===null)return null;var i=Jn(a);if(i===null)return null;a=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(e=e.type,i=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!i;break e;default:e=!1}if(e)return null;if(a&&typeof a!="function")throw Error(A(231,t,typeof a));return a}var Zl=!1;if(ca)try{var ps={};Object.defineProperty(ps,"passive",{get:function(){Zl=!0}}),window.addEventListener("test",ps,ps),window.removeEventListener("test",ps,ps)}catch{Zl=!1}function d_(e,t,a,i,s,r,n,o,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(a,u)}catch(f){this.onError(f)}}var js=!1,hn=null,gn=!1,eu=null,c_={onError:function(e){js=!0,hn=e}};function p_(e,t,a,i,s,r,n,o,l){js=!1,hn=null,d_.apply(c_,arguments)}function f_(e,t,a,i,s,r,n,o,l){if(p_.apply(this,arguments),js){if(js){var u=hn;js=!1,hn=null}else throw Error(A(198));gn||(gn=!0,eu=u)}}function yi(e){var t=e,a=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(a=t.return),e=t.return;while(e)}return t.tag===3?a:null}function xm(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Fc(e){if(yi(e)!==e)throw Error(A(188))}function m_(e){var t=e.alternate;if(!t){if(t=yi(e),t===null)throw Error(A(188));return t!==e?null:e}for(var a=e,i=t;;){var s=a.return;if(s===null)break;var r=s.alternate;if(r===null){if(i=s.return,i!==null){a=i;continue}break}if(s.child===r.child){for(r=s.child;r;){if(r===a)return Fc(s),e;if(r===i)return Fc(s),t;r=r.sibling}throw Error(A(188))}if(a.return!==i.return)a=s,i=r;else{for(var n=!1,o=s.child;o;){if(o===a){n=!0,a=s,i=r;break}if(o===i){n=!0,i=s,a=r;break}o=o.sibling}if(!n){for(o=r.child;o;){if(o===a){n=!0,a=r,i=s;break}if(o===i){n=!0,i=r,a=s;break}o=o.sibling}if(!n)throw Error(A(189))}}if(a.alternate!==i)throw Error(A(190))}if(a.tag!==3)throw Error(A(188));return a.stateNode.current===a?e:t}function Dm(e){return e=m_(e),e!==null?km(e):null}function km(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=km(e);if(t!==null)return t;e=e.sibling}return null}var Cm=wt.unstable_scheduleCallback,Nc=wt.unstable_cancelCallback,h_=wt.unstable_shouldYield,g_=wt.unstable_requestPaint,Pe=wt.unstable_now,y_=wt.unstable_getCurrentPriorityLevel,ld=wt.unstable_ImmediatePriority,Sm=wt.unstable_UserBlockingPriority,yn=wt.unstable_NormalPriority,__=wt.unstable_LowPriority,Pm=wt.unstable_IdlePriority,Kn=null,Jt=null;function v_(e){if(Jt&&typeof Jt.onCommitFiberRoot=="function")try{Jt.onCommitFiberRoot(Kn,e,void 0,(e.current.flags&128)===128)}catch{}}var $t=Math.clz32?Math.clz32:T_,b_=Math.log,w_=Math.LN2;function T_(e){return e>>>=0,e===0?32:31-(b_(e)/w_|0)|0}var Ir=64,Rr=4194304;function Ps(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function _n(e,t){var a=e.pendingLanes;if(a===0)return 0;var i=0,s=e.suspendedLanes,r=e.pingedLanes,n=a&268435455;if(n!==0){var o=n&~s;o!==0?i=Ps(o):(r&=n,r!==0&&(i=Ps(r)))}else n=a&~s,n!==0?i=Ps(n):r!==0&&(i=Ps(r));if(i===0)return 0;if(t!==0&&t!==i&&!(t&s)&&(s=i&-i,r=t&-t,s>=r||s===16&&(r&4194240)!==0))return t;if(i&4&&(i|=a&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=i;0<t;)a=31-$t(t),s=1<<a,i|=e[a],t&=~s;return i}function q_(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function x_(e,t){for(var a=e.suspendedLanes,i=e.pingedLanes,s=e.expirationTimes,r=e.pendingLanes;0<r;){var n=31-$t(r),o=1<<n,l=s[n];l===-1?(!(o&a)||o&i)&&(s[n]=q_(o,t)):l<=t&&(e.expiredLanes|=o),r&=~o}}function tu(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Am(){var e=Ir;return Ir<<=1,!(Ir&4194240)&&(Ir=64),e}function sl(e){for(var t=[],a=0;31>a;a++)t.push(e);return t}function hr(e,t,a){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-$t(t),e[t]=a}function D_(e,t){var a=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var i=e.eventTimes;for(e=e.expirationTimes;0<a;){var s=31-$t(a),r=1<<s;t[s]=0,i[s]=-1,e[s]=-1,a&=~r}}function ud(e,t){var a=e.entangledLanes|=t;for(e=e.entanglements;a;){var i=31-$t(a),s=1<<i;s&t|e[i]&t&&(e[i]|=t),a&=~s}}var re=0;function Im(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var Rm,dd,jm,Em,Fm,au=!1,jr=[],Ia=null,Ra=null,ja=null,Gs=new Map,Xs=new Map,ka=[],k_="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lc(e,t){switch(e){case"focusin":case"focusout":Ia=null;break;case"dragenter":case"dragleave":Ra=null;break;case"mouseover":case"mouseout":ja=null;break;case"pointerover":case"pointerout":Gs.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Xs.delete(t.pointerId)}}function fs(e,t,a,i,s,r){return e===null||e.nativeEvent!==r?(e={blockedOn:t,domEventName:a,eventSystemFlags:i,nativeEvent:r,targetContainers:[s]},t!==null&&(t=yr(t),t!==null&&dd(t)),e):(e.eventSystemFlags|=i,t=e.targetContainers,s!==null&&t.indexOf(s)===-1&&t.push(s),e)}function C_(e,t,a,i,s){switch(t){case"focusin":return Ia=fs(Ia,e,t,a,i,s),!0;case"dragenter":return Ra=fs(Ra,e,t,a,i,s),!0;case"mouseover":return ja=fs(ja,e,t,a,i,s),!0;case"pointerover":var r=s.pointerId;return Gs.set(r,fs(Gs.get(r)||null,e,t,a,i,s)),!0;case"gotpointercapture":return r=s.pointerId,Xs.set(r,fs(Xs.get(r)||null,e,t,a,i,s)),!0}return!1}function Nm(e){var t=ai(e.target);if(t!==null){var a=yi(t);if(a!==null){if(t=a.tag,t===13){if(t=xm(a),t!==null){e.blockedOn=t,Fm(e.priority,function(){jm(a)});return}}else if(t===3&&a.stateNode.current.memoizedState.isDehydrated){e.blockedOn=a.tag===3?a.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Qr(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var a=iu(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(a===null){a=e.nativeEvent;var i=new a.constructor(a.type,a);Jl=i,a.target.dispatchEvent(i),Jl=null}else return t=yr(a),t!==null&&dd(t),e.blockedOn=a,!1;t.shift()}return!0}function Oc(e,t,a){Qr(e)&&a.delete(t)}function S_(){au=!1,Ia!==null&&Qr(Ia)&&(Ia=null),Ra!==null&&Qr(Ra)&&(Ra=null),ja!==null&&Qr(ja)&&(ja=null),Gs.forEach(Oc),Xs.forEach(Oc)}function ms(e,t){e.blockedOn===t&&(e.blockedOn=null,au||(au=!0,wt.unstable_scheduleCallback(wt.unstable_NormalPriority,S_)))}function Qs(e){function t(s){return ms(s,e)}if(0<jr.length){ms(jr[0],e);for(var a=1;a<jr.length;a++){var i=jr[a];i.blockedOn===e&&(i.blockedOn=null)}}for(Ia!==null&&ms(Ia,e),Ra!==null&&ms(Ra,e),ja!==null&&ms(ja,e),Gs.forEach(t),Xs.forEach(t),a=0;a<ka.length;a++)i=ka[a],i.blockedOn===e&&(i.blockedOn=null);for(;0<ka.length&&(a=ka[0],a.blockedOn===null);)Nm(a),a.blockedOn===null&&ka.shift()}var Wi=ga.ReactCurrentBatchConfig,vn=!0;function P_(e,t,a,i){var s=re,r=Wi.transition;Wi.transition=null;try{re=1,cd(e,t,a,i)}finally{re=s,Wi.transition=r}}function A_(e,t,a,i){var s=re,r=Wi.transition;Wi.transition=null;try{re=4,cd(e,t,a,i)}finally{re=s,Wi.transition=r}}function cd(e,t,a,i){if(vn){var s=iu(e,t,a,i);if(s===null)ml(e,t,i,bn,a),Lc(e,i);else if(C_(s,e,t,a,i))i.stopPropagation();else if(Lc(e,i),t&4&&-1<k_.indexOf(e)){for(;s!==null;){var r=yr(s);if(r!==null&&Rm(r),r=iu(e,t,a,i),r===null&&ml(e,t,i,bn,a),r===s)break;s=r}s!==null&&i.stopPropagation()}else ml(e,t,i,null,a)}}var bn=null;function iu(e,t,a,i){if(bn=null,e=od(i),e=ai(e),e!==null)if(t=yi(e),t===null)e=null;else if(a=t.tag,a===13){if(e=xm(t),e!==null)return e;e=null}else if(a===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return bn=e,null}function Lm(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(y_()){case ld:return 1;case Sm:return 4;case yn:case __:return 16;case Pm:return 536870912;default:return 16}default:return 16}}var Sa=null,pd=null,Jr=null;function Om(){if(Jr)return Jr;var e,t=pd,a=t.length,i,s="value"in Sa?Sa.value:Sa.textContent,r=s.length;for(e=0;e<a&&t[e]===s[e];e++);var n=a-e;for(i=1;i<=n&&t[a-i]===s[r-i];i++);return Jr=s.slice(e,1<i?1-i:void 0)}function Yr(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Er(){return!0}function Mc(){return!1}function qt(e){function t(a,i,s,r,n){this._reactName=a,this._targetInst=s,this.type=i,this.nativeEvent=r,this.target=n,this.currentTarget=null;for(var o in e)e.hasOwnProperty(o)&&(a=e[o],this[o]=a?a(r):r[o]);return this.isDefaultPrevented=(r.defaultPrevented!=null?r.defaultPrevented:r.returnValue===!1)?Er:Mc,this.isPropagationStopped=Mc,this}return xe(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():typeof a.returnValue!="unknown"&&(a.returnValue=!1),this.isDefaultPrevented=Er)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():typeof a.cancelBubble!="unknown"&&(a.cancelBubble=!0),this.isPropagationStopped=Er)},persist:function(){},isPersistent:Er}),t}var ns={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fd=qt(ns),gr=xe({},ns,{view:0,detail:0}),I_=qt(gr),rl,nl,hs,Gn=xe({},gr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:md,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==hs&&(hs&&e.type==="mousemove"?(rl=e.screenX-hs.screenX,nl=e.screenY-hs.screenY):nl=rl=0,hs=e),rl)},movementY:function(e){return"movementY"in e?e.movementY:nl}}),Bc=qt(Gn),R_=xe({},Gn,{dataTransfer:0}),j_=qt(R_),E_=xe({},gr,{relatedTarget:0}),ol=qt(E_),F_=xe({},ns,{animationName:0,elapsedTime:0,pseudoElement:0}),N_=qt(F_),L_=xe({},ns,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),O_=qt(L_),M_=xe({},ns,{data:0}),zc=qt(M_),B_={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},z_={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},$_={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function W_(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=$_[e])?!!t[e]:!1}function md(){return W_}var U_=xe({},gr,{key:function(e){if(e.key){var t=B_[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Yr(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?z_[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:md,charCode:function(e){return e.type==="keypress"?Yr(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Yr(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),H_=qt(U_),V_=xe({},Gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),$c=qt(V_),K_=xe({},gr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:md}),G_=qt(K_),X_=xe({},ns,{propertyName:0,elapsedTime:0,pseudoElement:0}),Q_=qt(X_),J_=xe({},Gn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Y_=qt(J_),Z_=[9,13,27,32],hd=ca&&"CompositionEvent"in window,Es=null;ca&&"documentMode"in document&&(Es=document.documentMode);var ev=ca&&"TextEvent"in window&&!Es,Mm=ca&&(!hd||Es&&8<Es&&11>=Es),Wc=String.fromCharCode(32),Uc=!1;function Bm(e,t){switch(e){case"keyup":return Z_.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zm(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Ai=!1;function tv(e,t){switch(e){case"compositionend":return zm(t);case"keypress":return t.which!==32?null:(Uc=!0,Wc);case"textInput":return e=t.data,e===Wc&&Uc?null:e;default:return null}}function av(e,t){if(Ai)return e==="compositionend"||!hd&&Bm(e,t)?(e=Om(),Jr=pd=Sa=null,Ai=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mm&&t.locale!=="ko"?null:t.data;default:return null}}var iv={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hc(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!iv[e.type]:t==="textarea"}function $m(e,t,a,i){vm(i),t=wn(t,"onChange"),0<t.length&&(a=new fd("onChange","change",null,a,i),e.push({event:a,listeners:t}))}var Fs=null,Js=null;function sv(e){Zm(e,0)}function Xn(e){var t=ji(e);if(pm(t))return e}function rv(e,t){if(e==="change")return t}var Wm=!1;if(ca){var ll;if(ca){var ul="oninput"in document;if(!ul){var Vc=document.createElement("div");Vc.setAttribute("oninput","return;"),ul=typeof Vc.oninput=="function"}ll=ul}else ll=!1;Wm=ll&&(!document.documentMode||9<document.documentMode)}function Kc(){Fs&&(Fs.detachEvent("onpropertychange",Um),Js=Fs=null)}function Um(e){if(e.propertyName==="value"&&Xn(Js)){var t=[];$m(t,Js,e,od(e)),qm(sv,t)}}function nv(e,t,a){e==="focusin"?(Kc(),Fs=t,Js=a,Fs.attachEvent("onpropertychange",Um)):e==="focusout"&&Kc()}function ov(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Xn(Js)}function lv(e,t){if(e==="click")return Xn(t)}function uv(e,t){if(e==="input"||e==="change")return Xn(t)}function dv(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Ut=typeof Object.is=="function"?Object.is:dv;function Ys(e,t){if(Ut(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(i=0;i<a.length;i++){var s=a[i];if(!Ml.call(t,s)||!Ut(e[s],t[s]))return!1}return!0}function Gc(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xc(e,t){var a=Gc(e);e=0;for(var i;a;){if(a.nodeType===3){if(i=e+a.textContent.length,e<=t&&i>=t)return{node:a,offset:t-e};e=i}e:{for(;a;){if(a.nextSibling){a=a.nextSibling;break e}a=a.parentNode}a=void 0}a=Gc(a)}}function Hm(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Hm(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Vm(){for(var e=window,t=mn();t instanceof e.HTMLIFrameElement;){try{var a=typeof t.contentWindow.location.href=="string"}catch{a=!1}if(a)e=t.contentWindow;else break;t=mn(e.document)}return t}function gd(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function cv(e){var t=Vm(),a=e.focusedElem,i=e.selectionRange;if(t!==a&&a&&a.ownerDocument&&Hm(a.ownerDocument.documentElement,a)){if(i!==null&&gd(a)){if(t=i.start,e=i.end,e===void 0&&(e=t),"selectionStart"in a)a.selectionStart=t,a.selectionEnd=Math.min(e,a.value.length);else if(e=(t=a.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var s=a.textContent.length,r=Math.min(i.start,s);i=i.end===void 0?r:Math.min(i.end,s),!e.extend&&r>i&&(s=i,i=r,r=s),s=Xc(a,r);var n=Xc(a,i);s&&n&&(e.rangeCount!==1||e.anchorNode!==s.node||e.anchorOffset!==s.offset||e.focusNode!==n.node||e.focusOffset!==n.offset)&&(t=t.createRange(),t.setStart(s.node,s.offset),e.removeAllRanges(),r>i?(e.addRange(t),e.extend(n.node,n.offset)):(t.setEnd(n.node,n.offset),e.addRange(t)))}}for(t=[],e=a;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof a.focus=="function"&&a.focus(),a=0;a<t.length;a++)e=t[a],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var pv=ca&&"documentMode"in document&&11>=document.documentMode,Ii=null,su=null,Ns=null,ru=!1;function Qc(e,t,a){var i=a.window===a?a.document:a.nodeType===9?a:a.ownerDocument;ru||Ii==null||Ii!==mn(i)||(i=Ii,"selectionStart"in i&&gd(i)?i={start:i.selectionStart,end:i.selectionEnd}:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection(),i={anchorNode:i.anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset}),Ns&&Ys(Ns,i)||(Ns=i,i=wn(su,"onSelect"),0<i.length&&(t=new fd("onSelect","select",null,t,a),e.push({event:t,listeners:i}),t.target=Ii)))}function Fr(e,t){var a={};return a[e.toLowerCase()]=t.toLowerCase(),a["Webkit"+e]="webkit"+t,a["Moz"+e]="moz"+t,a}var Ri={animationend:Fr("Animation","AnimationEnd"),animationiteration:Fr("Animation","AnimationIteration"),animationstart:Fr("Animation","AnimationStart"),transitionend:Fr("Transition","TransitionEnd")},dl={},Km={};ca&&(Km=document.createElement("div").style,"AnimationEvent"in window||(delete Ri.animationend.animation,delete Ri.animationiteration.animation,delete Ri.animationstart.animation),"TransitionEvent"in window||delete Ri.transitionend.transition);function Qn(e){if(dl[e])return dl[e];if(!Ri[e])return e;var t=Ri[e],a;for(a in t)if(t.hasOwnProperty(a)&&a in Km)return dl[e]=t[a];return e}var Gm=Qn("animationend"),Xm=Qn("animationiteration"),Qm=Qn("animationstart"),Jm=Qn("transitionend"),Ym=new Map,Jc="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ua(e,t){Ym.set(e,t),gi(t,[e])}for(var cl=0;cl<Jc.length;cl++){var pl=Jc[cl],fv=pl.toLowerCase(),mv=pl[0].toUpperCase()+pl.slice(1);Ua(fv,"on"+mv)}Ua(Gm,"onAnimationEnd");Ua(Xm,"onAnimationIteration");Ua(Qm,"onAnimationStart");Ua("dblclick","onDoubleClick");Ua("focusin","onFocus");Ua("focusout","onBlur");Ua(Jm,"onTransitionEnd");Gi("onMouseEnter",["mouseout","mouseover"]);Gi("onMouseLeave",["mouseout","mouseover"]);Gi("onPointerEnter",["pointerout","pointerover"]);Gi("onPointerLeave",["pointerout","pointerover"]);gi("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));gi("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));gi("onBeforeInput",["compositionend","keypress","textInput","paste"]);gi("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));gi("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));gi("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var As="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),hv=new Set("cancel close invalid load scroll toggle".split(" ").concat(As));function Yc(e,t,a){var i=e.type||"unknown-event";e.currentTarget=a,f_(i,t,void 0,e),e.currentTarget=null}function Zm(e,t){t=(t&4)!==0;for(var a=0;a<e.length;a++){var i=e[a],s=i.event;i=i.listeners;e:{var r=void 0;if(t)for(var n=i.length-1;0<=n;n--){var o=i[n],l=o.instance,u=o.currentTarget;if(o=o.listener,l!==r&&s.isPropagationStopped())break e;Yc(s,o,u),r=l}else for(n=0;n<i.length;n++){if(o=i[n],l=o.instance,u=o.currentTarget,o=o.listener,l!==r&&s.isPropagationStopped())break e;Yc(s,o,u),r=l}}}if(gn)throw e=eu,gn=!1,eu=null,e}function me(e,t){var a=t[du];a===void 0&&(a=t[du]=new Set);var i=e+"__bubble";a.has(i)||(eh(t,e,2,!1),a.add(i))}function fl(e,t,a){var i=0;t&&(i|=4),eh(a,e,i,t)}var Nr="_reactListening"+Math.random().toString(36).slice(2);function Zs(e){if(!e[Nr]){e[Nr]=!0,om.forEach(function(a){a!=="selectionchange"&&(hv.has(a)||fl(a,!1,e),fl(a,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Nr]||(t[Nr]=!0,fl("selectionchange",!1,t))}}function eh(e,t,a,i){switch(Lm(t)){case 1:var s=P_;break;case 4:s=A_;break;default:s=cd}a=s.bind(null,t,a,e),s=void 0,!Zl||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(s=!0),i?s!==void 0?e.addEventListener(t,a,{capture:!0,passive:s}):e.addEventListener(t,a,!0):s!==void 0?e.addEventListener(t,a,{passive:s}):e.addEventListener(t,a,!1)}function ml(e,t,a,i,s){var r=i;if(!(t&1)&&!(t&2)&&i!==null)e:for(;;){if(i===null)return;var n=i.tag;if(n===3||n===4){var o=i.stateNode.containerInfo;if(o===s||o.nodeType===8&&o.parentNode===s)break;if(n===4)for(n=i.return;n!==null;){var l=n.tag;if((l===3||l===4)&&(l=n.stateNode.containerInfo,l===s||l.nodeType===8&&l.parentNode===s))return;n=n.return}for(;o!==null;){if(n=ai(o),n===null)return;if(l=n.tag,l===5||l===6){i=r=n;continue e}o=o.parentNode}}i=i.return}qm(function(){var u=r,f=od(a),y=[];e:{var _=Ym.get(e);if(_!==void 0){var d=fd,h=e;switch(e){case"keypress":if(Yr(a)===0)break e;case"keydown":case"keyup":d=H_;break;case"focusin":h="focus",d=ol;break;case"focusout":h="blur",d=ol;break;case"beforeblur":case"afterblur":d=ol;break;case"click":if(a.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":d=Bc;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":d=j_;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":d=G_;break;case Gm:case Xm:case Qm:d=N_;break;case Jm:d=Q_;break;case"scroll":d=I_;break;case"wheel":d=Y_;break;case"copy":case"cut":case"paste":d=O_;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":d=$c}var c=(t&4)!==0,x=!c&&e==="scroll",m=c?_!==null?_+"Capture":null:_;c=[];for(var p=u,g;p!==null;){g=p;var w=g.stateNode;if(g.tag===5&&w!==null&&(g=w,m!==null&&(w=Ks(p,m),w!=null&&c.push(er(p,w,g)))),x)break;p=p.return}0<c.length&&(_=new d(_,h,null,a,f),y.push({event:_,listeners:c}))}}if(!(t&7)){e:{if(_=e==="mouseover"||e==="pointerover",d=e==="mouseout"||e==="pointerout",_&&a!==Jl&&(h=a.relatedTarget||a.fromElement)&&(ai(h)||h[pa]))break e;if((d||_)&&(_=f.window===f?f:(_=f.ownerDocument)?_.defaultView||_.parentWindow:window,d?(h=a.relatedTarget||a.toElement,d=u,h=h?ai(h):null,h!==null&&(x=yi(h),h!==x||h.tag!==5&&h.tag!==6)&&(h=null)):(d=null,h=u),d!==h)){if(c=Bc,w="onMouseLeave",m="onMouseEnter",p="mouse",(e==="pointerout"||e==="pointerover")&&(c=$c,w="onPointerLeave",m="onPointerEnter",p="pointer"),x=d==null?_:ji(d),g=h==null?_:ji(h),_=new c(w,p+"leave",d,a,f),_.target=x,_.relatedTarget=g,w=null,ai(f)===u&&(c=new c(m,p+"enter",h,a,f),c.target=g,c.relatedTarget=x,w=c),x=w,d&&h)t:{for(c=d,m=h,p=0,g=c;g;g=vi(g))p++;for(g=0,w=m;w;w=vi(w))g++;for(;0<p-g;)c=vi(c),p--;for(;0<g-p;)m=vi(m),g--;for(;p--;){if(c===m||m!==null&&c===m.alternate)break t;c=vi(c),m=vi(m)}c=null}else c=null;d!==null&&Zc(y,_,d,c,!1),h!==null&&x!==null&&Zc(y,x,h,c,!0)}}e:{if(_=u?ji(u):window,d=_.nodeName&&_.nodeName.toLowerCase(),d==="select"||d==="input"&&_.type==="file")var q=rv;else if(Hc(_))if(Wm)q=uv;else{q=ov;var k=nv}else(d=_.nodeName)&&d.toLowerCase()==="input"&&(_.type==="checkbox"||_.type==="radio")&&(q=lv);if(q&&(q=q(e,u))){$m(y,q,a,f);break e}k&&k(e,_,u),e==="focusout"&&(k=_._wrapperState)&&k.controlled&&_.type==="number"&&Vl(_,"number",_.value)}switch(k=u?ji(u):window,e){case"focusin":(Hc(k)||k.contentEditable==="true")&&(Ii=k,su=u,Ns=null);break;case"focusout":Ns=su=Ii=null;break;case"mousedown":ru=!0;break;case"contextmenu":case"mouseup":case"dragend":ru=!1,Qc(y,a,f);break;case"selectionchange":if(pv)break;case"keydown":case"keyup":Qc(y,a,f)}var T;if(hd)e:{switch(e){case"compositionstart":var C="onCompositionStart";break e;case"compositionend":C="onCompositionEnd";break e;case"compositionupdate":C="onCompositionUpdate";break e}C=void 0}else Ai?Bm(e,a)&&(C="onCompositionEnd"):e==="keydown"&&a.keyCode===229&&(C="onCompositionStart");C&&(Mm&&a.locale!=="ko"&&(Ai||C!=="onCompositionStart"?C==="onCompositionEnd"&&Ai&&(T=Om()):(Sa=f,pd="value"in Sa?Sa.value:Sa.textContent,Ai=!0)),k=wn(u,C),0<k.length&&(C=new zc(C,e,null,a,f),y.push({event:C,listeners:k}),T?C.data=T:(T=zm(a),T!==null&&(C.data=T)))),(T=ev?tv(e,a):av(e,a))&&(u=wn(u,"onBeforeInput"),0<u.length&&(f=new zc("onBeforeInput","beforeinput",null,a,f),y.push({event:f,listeners:u}),f.data=T))}Zm(y,t)})}function er(e,t,a){return{instance:e,listener:t,currentTarget:a}}function wn(e,t){for(var a=t+"Capture",i=[];e!==null;){var s=e,r=s.stateNode;s.tag===5&&r!==null&&(s=r,r=Ks(e,a),r!=null&&i.unshift(er(e,r,s)),r=Ks(e,t),r!=null&&i.push(er(e,r,s))),e=e.return}return i}function vi(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function Zc(e,t,a,i,s){for(var r=t._reactName,n=[];a!==null&&a!==i;){var o=a,l=o.alternate,u=o.stateNode;if(l!==null&&l===i)break;o.tag===5&&u!==null&&(o=u,s?(l=Ks(a,r),l!=null&&n.unshift(er(a,l,o))):s||(l=Ks(a,r),l!=null&&n.push(er(a,l,o)))),a=a.return}n.length!==0&&e.push({event:t,listeners:n})}var gv=/\r\n?/g,yv=/\u0000|\uFFFD/g;function ep(e){return(typeof e=="string"?e:""+e).replace(gv,`
`).replace(yv,"")}function Lr(e,t,a){if(t=ep(t),ep(e)!==t&&a)throw Error(A(425))}function Tn(){}var nu=null,ou=null;function lu(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var uu=typeof setTimeout=="function"?setTimeout:void 0,_v=typeof clearTimeout=="function"?clearTimeout:void 0,tp=typeof Promise=="function"?Promise:void 0,vv=typeof queueMicrotask=="function"?queueMicrotask:typeof tp<"u"?function(e){return tp.resolve(null).then(e).catch(bv)}:uu;function bv(e){setTimeout(function(){throw e})}function hl(e,t){var a=t,i=0;do{var s=a.nextSibling;if(e.removeChild(a),s&&s.nodeType===8)if(a=s.data,a==="/$"){if(i===0){e.removeChild(s),Qs(t);return}i--}else a!=="$"&&a!=="$?"&&a!=="$!"||i++;a=s}while(a);Qs(t)}function Ea(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function ap(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var a=e.data;if(a==="$"||a==="$!"||a==="$?"){if(t===0)return e;t--}else a==="/$"&&t++}e=e.previousSibling}return null}var os=Math.random().toString(36).slice(2),Xt="__reactFiber$"+os,tr="__reactProps$"+os,pa="__reactContainer$"+os,du="__reactEvents$"+os,wv="__reactListeners$"+os,Tv="__reactHandles$"+os;function ai(e){var t=e[Xt];if(t)return t;for(var a=e.parentNode;a;){if(t=a[pa]||a[Xt]){if(a=t.alternate,t.child!==null||a!==null&&a.child!==null)for(e=ap(e);e!==null;){if(a=e[Xt])return a;e=ap(e)}return t}e=a,a=e.parentNode}return null}function yr(e){return e=e[Xt]||e[pa],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function ji(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(A(33))}function Jn(e){return e[tr]||null}var cu=[],Ei=-1;function Ha(e){return{current:e}}function he(e){0>Ei||(e.current=cu[Ei],cu[Ei]=null,Ei--)}function fe(e,t){Ei++,cu[Ei]=e.current,e.current=t}var za={},at=Ha(za),ct=Ha(!1),di=za;function Xi(e,t){var a=e.type.contextTypes;if(!a)return za;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var s={},r;for(r in a)s[r]=t[r];return i&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=s),s}function pt(e){return e=e.childContextTypes,e!=null}function qn(){he(ct),he(at)}function ip(e,t,a){if(at.current!==za)throw Error(A(168));fe(at,t),fe(ct,a)}function th(e,t,a){var i=e.stateNode;if(t=t.childContextTypes,typeof i.getChildContext!="function")return a;i=i.getChildContext();for(var s in i)if(!(s in t))throw Error(A(108,n_(e)||"Unknown",s));return xe({},a,i)}function xn(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||za,di=at.current,fe(at,e),fe(ct,ct.current),!0}function sp(e,t,a){var i=e.stateNode;if(!i)throw Error(A(169));a?(e=th(e,t,di),i.__reactInternalMemoizedMergedChildContext=e,he(ct),he(at),fe(at,e)):he(ct),fe(ct,a)}var oa=null,Yn=!1,gl=!1;function ah(e){oa===null?oa=[e]:oa.push(e)}function qv(e){Yn=!0,ah(e)}function Va(){if(!gl&&oa!==null){gl=!0;var e=0,t=re;try{var a=oa;for(re=1;e<a.length;e++){var i=a[e];do i=i(!0);while(i!==null)}oa=null,Yn=!1}catch(s){throw oa!==null&&(oa=oa.slice(e+1)),Cm(ld,Va),s}finally{re=t,gl=!1}}return null}var Fi=[],Ni=0,Dn=null,kn=0,kt=[],Ct=0,ci=null,la=1,ua="";function Qa(e,t){Fi[Ni++]=kn,Fi[Ni++]=Dn,Dn=e,kn=t}function ih(e,t,a){kt[Ct++]=la,kt[Ct++]=ua,kt[Ct++]=ci,ci=e;var i=la;e=ua;var s=32-$t(i)-1;i&=~(1<<s),a+=1;var r=32-$t(t)+s;if(30<r){var n=s-s%5;r=(i&(1<<n)-1).toString(32),i>>=n,s-=n,la=1<<32-$t(t)+s|a<<s|i,ua=r+e}else la=1<<r|a<<s|i,ua=e}function yd(e){e.return!==null&&(Qa(e,1),ih(e,1,0))}function _d(e){for(;e===Dn;)Dn=Fi[--Ni],Fi[Ni]=null,kn=Fi[--Ni],Fi[Ni]=null;for(;e===ci;)ci=kt[--Ct],kt[Ct]=null,ua=kt[--Ct],kt[Ct]=null,la=kt[--Ct],kt[Ct]=null}var vt=null,_t=null,ve=!1,Bt=null;function sh(e,t){var a=St(5,null,null,0);a.elementType="DELETED",a.stateNode=t,a.return=e,t=e.deletions,t===null?(e.deletions=[a],e.flags|=16):t.push(a)}function rp(e,t){switch(e.tag){case 5:var a=e.type;return t=t.nodeType!==1||a.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,vt=e,_t=Ea(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,vt=e,_t=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(a=ci!==null?{id:la,overflow:ua}:null,e.memoizedState={dehydrated:t,treeContext:a,retryLane:1073741824},a=St(18,null,null,0),a.stateNode=t,a.return=e,e.child=a,vt=e,_t=null,!0):!1;default:return!1}}function pu(e){return(e.mode&1)!==0&&(e.flags&128)===0}function fu(e){if(ve){var t=_t;if(t){var a=t;if(!rp(e,t)){if(pu(e))throw Error(A(418));t=Ea(a.nextSibling);var i=vt;t&&rp(e,t)?sh(i,a):(e.flags=e.flags&-4097|2,ve=!1,vt=e)}}else{if(pu(e))throw Error(A(418));e.flags=e.flags&-4097|2,ve=!1,vt=e}}}function np(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;vt=e}function Or(e){if(e!==vt)return!1;if(!ve)return np(e),ve=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!lu(e.type,e.memoizedProps)),t&&(t=_t)){if(pu(e))throw rh(),Error(A(418));for(;t;)sh(e,t),t=Ea(t.nextSibling)}if(np(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(A(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var a=e.data;if(a==="/$"){if(t===0){_t=Ea(e.nextSibling);break e}t--}else a!=="$"&&a!=="$!"&&a!=="$?"||t++}e=e.nextSibling}_t=null}}else _t=vt?Ea(e.stateNode.nextSibling):null;return!0}function rh(){for(var e=_t;e;)e=Ea(e.nextSibling)}function Qi(){_t=vt=null,ve=!1}function vd(e){Bt===null?Bt=[e]:Bt.push(e)}var xv=ga.ReactCurrentBatchConfig;function Ot(e,t){if(e&&e.defaultProps){t=xe({},t),e=e.defaultProps;for(var a in e)t[a]===void 0&&(t[a]=e[a]);return t}return t}var Cn=Ha(null),Sn=null,Li=null,bd=null;function wd(){bd=Li=Sn=null}function Td(e){var t=Cn.current;he(Cn),e._currentValue=t}function mu(e,t,a){for(;e!==null;){var i=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,i!==null&&(i.childLanes|=t)):i!==null&&(i.childLanes&t)!==t&&(i.childLanes|=t),e===a)break;e=e.return}}function Ui(e,t){Sn=e,bd=Li=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(dt=!0),e.firstContext=null)}function It(e){var t=e._currentValue;if(bd!==e)if(e={context:e,memoizedValue:t,next:null},Li===null){if(Sn===null)throw Error(A(308));Li=e,Sn.dependencies={lanes:0,firstContext:e}}else Li=Li.next=e;return t}var ii=null;function qd(e){ii===null?ii=[e]:ii.push(e)}function nh(e,t,a,i){var s=t.interleaved;return s===null?(a.next=a,qd(t)):(a.next=s.next,s.next=a),t.interleaved=a,fa(e,i)}function fa(e,t){e.lanes|=t;var a=e.alternate;for(a!==null&&(a.lanes|=t),a=e,e=e.return;e!==null;)e.childLanes|=t,a=e.alternate,a!==null&&(a.childLanes|=t),a=e,e=e.return;return a.tag===3?a.stateNode:null}var Da=!1;function xd(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function oh(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function da(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fa(e,t,a){var i=e.updateQueue;if(i===null)return null;if(i=i.shared,Y&2){var s=i.pending;return s===null?t.next=t:(t.next=s.next,s.next=t),i.pending=t,fa(e,a)}return s=i.interleaved,s===null?(t.next=t,qd(i)):(t.next=s.next,s.next=t),i.interleaved=t,fa(e,a)}function Zr(e,t,a){if(t=t.updateQueue,t!==null&&(t=t.shared,(a&4194240)!==0)){var i=t.lanes;i&=e.pendingLanes,a|=i,t.lanes=a,ud(e,a)}}function op(e,t){var a=e.updateQueue,i=e.alternate;if(i!==null&&(i=i.updateQueue,a===i)){var s=null,r=null;if(a=a.firstBaseUpdate,a!==null){do{var n={eventTime:a.eventTime,lane:a.lane,tag:a.tag,payload:a.payload,callback:a.callback,next:null};r===null?s=r=n:r=r.next=n,a=a.next}while(a!==null);r===null?s=r=t:r=r.next=t}else s=r=t;a={baseState:i.baseState,firstBaseUpdate:s,lastBaseUpdate:r,shared:i.shared,effects:i.effects},e.updateQueue=a;return}e=a.lastBaseUpdate,e===null?a.firstBaseUpdate=t:e.next=t,a.lastBaseUpdate=t}function Pn(e,t,a,i){var s=e.updateQueue;Da=!1;var r=s.firstBaseUpdate,n=s.lastBaseUpdate,o=s.shared.pending;if(o!==null){s.shared.pending=null;var l=o,u=l.next;l.next=null,n===null?r=u:n.next=u,n=l;var f=e.alternate;f!==null&&(f=f.updateQueue,o=f.lastBaseUpdate,o!==n&&(o===null?f.firstBaseUpdate=u:o.next=u,f.lastBaseUpdate=l))}if(r!==null){var y=s.baseState;n=0,f=u=l=null,o=r;do{var _=o.lane,d=o.eventTime;if((i&_)===_){f!==null&&(f=f.next={eventTime:d,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,c=o;switch(_=t,d=a,c.tag){case 1:if(h=c.payload,typeof h=="function"){y=h.call(d,y,_);break e}y=h;break e;case 3:h.flags=h.flags&-65537|128;case 0:if(h=c.payload,_=typeof h=="function"?h.call(d,y,_):h,_==null)break e;y=xe({},y,_);break e;case 2:Da=!0}}o.callback!==null&&o.lane!==0&&(e.flags|=64,_=s.effects,_===null?s.effects=[o]:_.push(o))}else d={eventTime:d,lane:_,tag:o.tag,payload:o.payload,callback:o.callback,next:null},f===null?(u=f=d,l=y):f=f.next=d,n|=_;if(o=o.next,o===null){if(o=s.shared.pending,o===null)break;_=o,o=_.next,_.next=null,s.lastBaseUpdate=_,s.shared.pending=null}}while(1);if(f===null&&(l=y),s.baseState=l,s.firstBaseUpdate=u,s.lastBaseUpdate=f,t=s.shared.interleaved,t!==null){s=t;do n|=s.lane,s=s.next;while(s!==t)}else r===null&&(s.shared.lanes=0);fi|=n,e.lanes=n,e.memoizedState=y}}function lp(e,t,a){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var i=e[t],s=i.callback;if(s!==null){if(i.callback=null,i=a,typeof s!="function")throw Error(A(191,s));s.call(i)}}}var lh=new nm.Component().refs;function hu(e,t,a,i){t=e.memoizedState,a=a(i,t),a=a==null?t:xe({},t,a),e.memoizedState=a,e.lanes===0&&(e.updateQueue.baseState=a)}var Zn={isMounted:function(e){return(e=e._reactInternals)?yi(e)===e:!1},enqueueSetState:function(e,t,a){e=e._reactInternals;var i=st(),s=La(e),r=da(i,s);r.payload=t,a!=null&&(r.callback=a),t=Fa(e,r,s),t!==null&&(Wt(t,e,s,i),Zr(t,e,s))},enqueueReplaceState:function(e,t,a){e=e._reactInternals;var i=st(),s=La(e),r=da(i,s);r.tag=1,r.payload=t,a!=null&&(r.callback=a),t=Fa(e,r,s),t!==null&&(Wt(t,e,s,i),Zr(t,e,s))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var a=st(),i=La(e),s=da(a,i);s.tag=2,t!=null&&(s.callback=t),t=Fa(e,s,i),t!==null&&(Wt(t,e,i,a),Zr(t,e,i))}};function up(e,t,a,i,s,r,n){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(i,r,n):t.prototype&&t.prototype.isPureReactComponent?!Ys(a,i)||!Ys(s,r):!0}function uh(e,t,a){var i=!1,s=za,r=t.contextType;return typeof r=="object"&&r!==null?r=It(r):(s=pt(t)?di:at.current,i=t.contextTypes,r=(i=i!=null)?Xi(e,s):za),t=new t(a,r),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Zn,e.stateNode=t,t._reactInternals=e,i&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=s,e.__reactInternalMemoizedMaskedChildContext=r),t}function dp(e,t,a,i){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(a,i),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(a,i),t.state!==e&&Zn.enqueueReplaceState(t,t.state,null)}function gu(e,t,a,i){var s=e.stateNode;s.props=a,s.state=e.memoizedState,s.refs=lh,xd(e);var r=t.contextType;typeof r=="object"&&r!==null?s.context=It(r):(r=pt(t)?di:at.current,s.context=Xi(e,r)),s.state=e.memoizedState,r=t.getDerivedStateFromProps,typeof r=="function"&&(hu(e,t,r,a),s.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof s.getSnapshotBeforeUpdate=="function"||typeof s.UNSAFE_componentWillMount!="function"&&typeof s.componentWillMount!="function"||(t=s.state,typeof s.componentWillMount=="function"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount=="function"&&s.UNSAFE_componentWillMount(),t!==s.state&&Zn.enqueueReplaceState(s,s.state,null),Pn(e,a,s,i),s.state=e.memoizedState),typeof s.componentDidMount=="function"&&(e.flags|=4194308)}function gs(e,t,a){if(e=a.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(a._owner){if(a=a._owner,a){if(a.tag!==1)throw Error(A(309));var i=a.stateNode}if(!i)throw Error(A(147,e));var s=i,r=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===r?t.ref:(t=function(n){var o=s.refs;o===lh&&(o=s.refs={}),n===null?delete o[r]:o[r]=n},t._stringRef=r,t)}if(typeof e!="string")throw Error(A(284));if(!a._owner)throw Error(A(290,e))}return e}function Mr(e,t){throw e=Object.prototype.toString.call(t),Error(A(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function cp(e){var t=e._init;return t(e._payload)}function dh(e){function t(m,p){if(e){var g=m.deletions;g===null?(m.deletions=[p],m.flags|=16):g.push(p)}}function a(m,p){if(!e)return null;for(;p!==null;)t(m,p),p=p.sibling;return null}function i(m,p){for(m=new Map;p!==null;)p.key!==null?m.set(p.key,p):m.set(p.index,p),p=p.sibling;return m}function s(m,p){return m=Oa(m,p),m.index=0,m.sibling=null,m}function r(m,p,g){return m.index=g,e?(g=m.alternate,g!==null?(g=g.index,g<p?(m.flags|=2,p):g):(m.flags|=2,p)):(m.flags|=1048576,p)}function n(m){return e&&m.alternate===null&&(m.flags|=2),m}function o(m,p,g,w){return p===null||p.tag!==6?(p=ql(g,m.mode,w),p.return=m,p):(p=s(p,g),p.return=m,p)}function l(m,p,g,w){var q=g.type;return q===Pi?f(m,p,g.props.children,w,g.key):p!==null&&(p.elementType===q||typeof q=="object"&&q!==null&&q.$$typeof===xa&&cp(q)===p.type)?(w=s(p,g.props),w.ref=gs(m,p,g),w.return=m,w):(w=nn(g.type,g.key,g.props,null,m.mode,w),w.ref=gs(m,p,g),w.return=m,w)}function u(m,p,g,w){return p===null||p.tag!==4||p.stateNode.containerInfo!==g.containerInfo||p.stateNode.implementation!==g.implementation?(p=xl(g,m.mode,w),p.return=m,p):(p=s(p,g.children||[]),p.return=m,p)}function f(m,p,g,w,q){return p===null||p.tag!==7?(p=ui(g,m.mode,w,q),p.return=m,p):(p=s(p,g),p.return=m,p)}function y(m,p,g){if(typeof p=="string"&&p!==""||typeof p=="number")return p=ql(""+p,m.mode,g),p.return=m,p;if(typeof p=="object"&&p!==null){switch(p.$$typeof){case Sr:return g=nn(p.type,p.key,p.props,null,m.mode,g),g.ref=gs(m,null,p),g.return=m,g;case Si:return p=xl(p,m.mode,g),p.return=m,p;case xa:var w=p._init;return y(m,w(p._payload),g)}if(Ss(p)||cs(p))return p=ui(p,m.mode,g,null),p.return=m,p;Mr(m,p)}return null}function _(m,p,g,w){var q=p!==null?p.key:null;if(typeof g=="string"&&g!==""||typeof g=="number")return q!==null?null:o(m,p,""+g,w);if(typeof g=="object"&&g!==null){switch(g.$$typeof){case Sr:return g.key===q?l(m,p,g,w):null;case Si:return g.key===q?u(m,p,g,w):null;case xa:return q=g._init,_(m,p,q(g._payload),w)}if(Ss(g)||cs(g))return q!==null?null:f(m,p,g,w,null);Mr(m,g)}return null}function d(m,p,g,w,q){if(typeof w=="string"&&w!==""||typeof w=="number")return m=m.get(g)||null,o(p,m,""+w,q);if(typeof w=="object"&&w!==null){switch(w.$$typeof){case Sr:return m=m.get(w.key===null?g:w.key)||null,l(p,m,w,q);case Si:return m=m.get(w.key===null?g:w.key)||null,u(p,m,w,q);case xa:var k=w._init;return d(m,p,g,k(w._payload),q)}if(Ss(w)||cs(w))return m=m.get(g)||null,f(p,m,w,q,null);Mr(p,w)}return null}function h(m,p,g,w){for(var q=null,k=null,T=p,C=p=0,I=null;T!==null&&C<g.length;C++){T.index>C?(I=T,T=null):I=T.sibling;var P=_(m,T,g[C],w);if(P===null){T===null&&(T=I);break}e&&T&&P.alternate===null&&t(m,T),p=r(P,p,C),k===null?q=P:k.sibling=P,k=P,T=I}if(C===g.length)return a(m,T),ve&&Qa(m,C),q;if(T===null){for(;C<g.length;C++)T=y(m,g[C],w),T!==null&&(p=r(T,p,C),k===null?q=T:k.sibling=T,k=T);return ve&&Qa(m,C),q}for(T=i(m,T);C<g.length;C++)I=d(T,m,C,g[C],w),I!==null&&(e&&I.alternate!==null&&T.delete(I.key===null?C:I.key),p=r(I,p,C),k===null?q=I:k.sibling=I,k=I);return e&&T.forEach(function(F){return t(m,F)}),ve&&Qa(m,C),q}function c(m,p,g,w){var q=cs(g);if(typeof q!="function")throw Error(A(150));if(g=q.call(g),g==null)throw Error(A(151));for(var k=q=null,T=p,C=p=0,I=null,P=g.next();T!==null&&!P.done;C++,P=g.next()){T.index>C?(I=T,T=null):I=T.sibling;var F=_(m,T,P.value,w);if(F===null){T===null&&(T=I);break}e&&T&&F.alternate===null&&t(m,T),p=r(F,p,C),k===null?q=F:k.sibling=F,k=F,T=I}if(P.done)return a(m,T),ve&&Qa(m,C),q;if(T===null){for(;!P.done;C++,P=g.next())P=y(m,P.value,w),P!==null&&(p=r(P,p,C),k===null?q=P:k.sibling=P,k=P);return ve&&Qa(m,C),q}for(T=i(m,T);!P.done;C++,P=g.next())P=d(T,m,C,P.value,w),P!==null&&(e&&P.alternate!==null&&T.delete(P.key===null?C:P.key),p=r(P,p,C),k===null?q=P:k.sibling=P,k=P);return e&&T.forEach(function(B){return t(m,B)}),ve&&Qa(m,C),q}function x(m,p,g,w){if(typeof g=="object"&&g!==null&&g.type===Pi&&g.key===null&&(g=g.props.children),typeof g=="object"&&g!==null){switch(g.$$typeof){case Sr:e:{for(var q=g.key,k=p;k!==null;){if(k.key===q){if(q=g.type,q===Pi){if(k.tag===7){a(m,k.sibling),p=s(k,g.props.children),p.return=m,m=p;break e}}else if(k.elementType===q||typeof q=="object"&&q!==null&&q.$$typeof===xa&&cp(q)===k.type){a(m,k.sibling),p=s(k,g.props),p.ref=gs(m,k,g),p.return=m,m=p;break e}a(m,k);break}else t(m,k);k=k.sibling}g.type===Pi?(p=ui(g.props.children,m.mode,w,g.key),p.return=m,m=p):(w=nn(g.type,g.key,g.props,null,m.mode,w),w.ref=gs(m,p,g),w.return=m,m=w)}return n(m);case Si:e:{for(k=g.key;p!==null;){if(p.key===k)if(p.tag===4&&p.stateNode.containerInfo===g.containerInfo&&p.stateNode.implementation===g.implementation){a(m,p.sibling),p=s(p,g.children||[]),p.return=m,m=p;break e}else{a(m,p);break}else t(m,p);p=p.sibling}p=xl(g,m.mode,w),p.return=m,m=p}return n(m);case xa:return k=g._init,x(m,p,k(g._payload),w)}if(Ss(g))return h(m,p,g,w);if(cs(g))return c(m,p,g,w);Mr(m,g)}return typeof g=="string"&&g!==""||typeof g=="number"?(g=""+g,p!==null&&p.tag===6?(a(m,p.sibling),p=s(p,g),p.return=m,m=p):(a(m,p),p=ql(g,m.mode,w),p.return=m,m=p),n(m)):a(m,p)}return x}var Ji=dh(!0),ch=dh(!1),_r={},Yt=Ha(_r),ar=Ha(_r),ir=Ha(_r);function si(e){if(e===_r)throw Error(A(174));return e}function Dd(e,t){switch(fe(ir,t),fe(ar,e),fe(Yt,_r),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Gl(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=Gl(t,e)}he(Yt),fe(Yt,t)}function Yi(){he(Yt),he(ar),he(ir)}function ph(e){si(ir.current);var t=si(Yt.current),a=Gl(t,e.type);t!==a&&(fe(ar,e),fe(Yt,a))}function kd(e){ar.current===e&&(he(Yt),he(ar))}var we=Ha(0);function An(e){for(var t=e;t!==null;){if(t.tag===13){var a=t.memoizedState;if(a!==null&&(a=a.dehydrated,a===null||a.data==="$?"||a.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var yl=[];function Cd(){for(var e=0;e<yl.length;e++)yl[e]._workInProgressVersionPrimary=null;yl.length=0}var en=ga.ReactCurrentDispatcher,_l=ga.ReactCurrentBatchConfig,pi=0,Te=null,Me=null,ze=null,In=!1,Ls=!1,sr=0,Dv=0;function Ye(){throw Error(A(321))}function Sd(e,t){if(t===null)return!1;for(var a=0;a<t.length&&a<e.length;a++)if(!Ut(e[a],t[a]))return!1;return!0}function Pd(e,t,a,i,s,r){if(pi=r,Te=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,en.current=e===null||e.memoizedState===null?Pv:Av,e=a(i,s),Ls){r=0;do{if(Ls=!1,sr=0,25<=r)throw Error(A(301));r+=1,ze=Me=null,t.updateQueue=null,en.current=Iv,e=a(i,s)}while(Ls)}if(en.current=Rn,t=Me!==null&&Me.next!==null,pi=0,ze=Me=Te=null,In=!1,t)throw Error(A(300));return e}function Ad(){var e=sr!==0;return sr=0,e}function Vt(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ze===null?Te.memoizedState=ze=e:ze=ze.next=e,ze}function Rt(){if(Me===null){var e=Te.alternate;e=e!==null?e.memoizedState:null}else e=Me.next;var t=ze===null?Te.memoizedState:ze.next;if(t!==null)ze=t,Me=e;else{if(e===null)throw Error(A(310));Me=e,e={memoizedState:Me.memoizedState,baseState:Me.baseState,baseQueue:Me.baseQueue,queue:Me.queue,next:null},ze===null?Te.memoizedState=ze=e:ze=ze.next=e}return ze}function rr(e,t){return typeof t=="function"?t(e):t}function vl(e){var t=Rt(),a=t.queue;if(a===null)throw Error(A(311));a.lastRenderedReducer=e;var i=Me,s=i.baseQueue,r=a.pending;if(r!==null){if(s!==null){var n=s.next;s.next=r.next,r.next=n}i.baseQueue=s=r,a.pending=null}if(s!==null){r=s.next,i=i.baseState;var o=n=null,l=null,u=r;do{var f=u.lane;if((pi&f)===f)l!==null&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),i=u.hasEagerState?u.eagerState:e(i,u.action);else{var y={lane:f,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};l===null?(o=l=y,n=i):l=l.next=y,Te.lanes|=f,fi|=f}u=u.next}while(u!==null&&u!==r);l===null?n=i:l.next=o,Ut(i,t.memoizedState)||(dt=!0),t.memoizedState=i,t.baseState=n,t.baseQueue=l,a.lastRenderedState=i}if(e=a.interleaved,e!==null){s=e;do r=s.lane,Te.lanes|=r,fi|=r,s=s.next;while(s!==e)}else s===null&&(a.lanes=0);return[t.memoizedState,a.dispatch]}function bl(e){var t=Rt(),a=t.queue;if(a===null)throw Error(A(311));a.lastRenderedReducer=e;var i=a.dispatch,s=a.pending,r=t.memoizedState;if(s!==null){a.pending=null;var n=s=s.next;do r=e(r,n.action),n=n.next;while(n!==s);Ut(r,t.memoizedState)||(dt=!0),t.memoizedState=r,t.baseQueue===null&&(t.baseState=r),a.lastRenderedState=r}return[r,i]}function fh(){}function mh(e,t){var a=Te,i=Rt(),s=t(),r=!Ut(i.memoizedState,s);if(r&&(i.memoizedState=s,dt=!0),i=i.queue,Id(yh.bind(null,a,i,e),[e]),i.getSnapshot!==t||r||ze!==null&&ze.memoizedState.tag&1){if(a.flags|=2048,nr(9,gh.bind(null,a,i,s,t),void 0,null),$e===null)throw Error(A(349));pi&30||hh(a,t,s)}return s}function hh(e,t,a){e.flags|=16384,e={getSnapshot:t,value:a},t=Te.updateQueue,t===null?(t={lastEffect:null,stores:null},Te.updateQueue=t,t.stores=[e]):(a=t.stores,a===null?t.stores=[e]:a.push(e))}function gh(e,t,a,i){t.value=a,t.getSnapshot=i,_h(t)&&vh(e)}function yh(e,t,a){return a(function(){_h(t)&&vh(e)})}function _h(e){var t=e.getSnapshot;e=e.value;try{var a=t();return!Ut(e,a)}catch{return!0}}function vh(e){var t=fa(e,1);t!==null&&Wt(t,e,1,-1)}function pp(e){var t=Vt();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:rr,lastRenderedState:e},t.queue=e,e=e.dispatch=Sv.bind(null,Te,e),[t.memoizedState,e]}function nr(e,t,a,i){return e={tag:e,create:t,destroy:a,deps:i,next:null},t=Te.updateQueue,t===null?(t={lastEffect:null,stores:null},Te.updateQueue=t,t.lastEffect=e.next=e):(a=t.lastEffect,a===null?t.lastEffect=e.next=e:(i=a.next,a.next=e,e.next=i,t.lastEffect=e)),e}function bh(){return Rt().memoizedState}function tn(e,t,a,i){var s=Vt();Te.flags|=e,s.memoizedState=nr(1|t,a,void 0,i===void 0?null:i)}function eo(e,t,a,i){var s=Rt();i=i===void 0?null:i;var r=void 0;if(Me!==null){var n=Me.memoizedState;if(r=n.destroy,i!==null&&Sd(i,n.deps)){s.memoizedState=nr(t,a,r,i);return}}Te.flags|=e,s.memoizedState=nr(1|t,a,r,i)}function fp(e,t){return tn(8390656,8,e,t)}function Id(e,t){return eo(2048,8,e,t)}function wh(e,t){return eo(4,2,e,t)}function Th(e,t){return eo(4,4,e,t)}function qh(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function xh(e,t,a){return a=a!=null?a.concat([e]):null,eo(4,4,qh.bind(null,t,e),a)}function Rd(){}function Dh(e,t){var a=Rt();t=t===void 0?null:t;var i=a.memoizedState;return i!==null&&t!==null&&Sd(t,i[1])?i[0]:(a.memoizedState=[e,t],e)}function kh(e,t){var a=Rt();t=t===void 0?null:t;var i=a.memoizedState;return i!==null&&t!==null&&Sd(t,i[1])?i[0]:(e=e(),a.memoizedState=[e,t],e)}function Ch(e,t,a){return pi&21?(Ut(a,t)||(a=Am(),Te.lanes|=a,fi|=a,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,dt=!0),e.memoizedState=a)}function kv(e,t){var a=re;re=a!==0&&4>a?a:4,e(!0);var i=_l.transition;_l.transition={};try{e(!1),t()}finally{re=a,_l.transition=i}}function Sh(){return Rt().memoizedState}function Cv(e,t,a){var i=La(e);if(a={lane:i,action:a,hasEagerState:!1,eagerState:null,next:null},Ph(e))Ah(t,a);else if(a=nh(e,t,a,i),a!==null){var s=st();Wt(a,e,i,s),Ih(a,t,i)}}function Sv(e,t,a){var i=La(e),s={lane:i,action:a,hasEagerState:!1,eagerState:null,next:null};if(Ph(e))Ah(t,s);else{var r=e.alternate;if(e.lanes===0&&(r===null||r.lanes===0)&&(r=t.lastRenderedReducer,r!==null))try{var n=t.lastRenderedState,o=r(n,a);if(s.hasEagerState=!0,s.eagerState=o,Ut(o,n)){var l=t.interleaved;l===null?(s.next=s,qd(t)):(s.next=l.next,l.next=s),t.interleaved=s;return}}catch{}finally{}a=nh(e,t,s,i),a!==null&&(s=st(),Wt(a,e,i,s),Ih(a,t,i))}}function Ph(e){var t=e.alternate;return e===Te||t!==null&&t===Te}function Ah(e,t){Ls=In=!0;var a=e.pending;a===null?t.next=t:(t.next=a.next,a.next=t),e.pending=t}function Ih(e,t,a){if(a&4194240){var i=t.lanes;i&=e.pendingLanes,a|=i,t.lanes=a,ud(e,a)}}var Rn={readContext:It,useCallback:Ye,useContext:Ye,useEffect:Ye,useImperativeHandle:Ye,useInsertionEffect:Ye,useLayoutEffect:Ye,useMemo:Ye,useReducer:Ye,useRef:Ye,useState:Ye,useDebugValue:Ye,useDeferredValue:Ye,useTransition:Ye,useMutableSource:Ye,useSyncExternalStore:Ye,useId:Ye,unstable_isNewReconciler:!1},Pv={readContext:It,useCallback:function(e,t){return Vt().memoizedState=[e,t===void 0?null:t],e},useContext:It,useEffect:fp,useImperativeHandle:function(e,t,a){return a=a!=null?a.concat([e]):null,tn(4194308,4,qh.bind(null,t,e),a)},useLayoutEffect:function(e,t){return tn(4194308,4,e,t)},useInsertionEffect:function(e,t){return tn(4,2,e,t)},useMemo:function(e,t){var a=Vt();return t=t===void 0?null:t,e=e(),a.memoizedState=[e,t],e},useReducer:function(e,t,a){var i=Vt();return t=a!==void 0?a(t):t,i.memoizedState=i.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},i.queue=e,e=e.dispatch=Cv.bind(null,Te,e),[i.memoizedState,e]},useRef:function(e){var t=Vt();return e={current:e},t.memoizedState=e},useState:pp,useDebugValue:Rd,useDeferredValue:function(e){return Vt().memoizedState=e},useTransition:function(){var e=pp(!1),t=e[0];return e=kv.bind(null,e[1]),Vt().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,a){var i=Te,s=Vt();if(ve){if(a===void 0)throw Error(A(407));a=a()}else{if(a=t(),$e===null)throw Error(A(349));pi&30||hh(i,t,a)}s.memoizedState=a;var r={value:a,getSnapshot:t};return s.queue=r,fp(yh.bind(null,i,r,e),[e]),i.flags|=2048,nr(9,gh.bind(null,i,r,a,t),void 0,null),a},useId:function(){var e=Vt(),t=$e.identifierPrefix;if(ve){var a=ua,i=la;a=(i&~(1<<32-$t(i)-1)).toString(32)+a,t=":"+t+"R"+a,a=sr++,0<a&&(t+="H"+a.toString(32)),t+=":"}else a=Dv++,t=":"+t+"r"+a.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Av={readContext:It,useCallback:Dh,useContext:It,useEffect:Id,useImperativeHandle:xh,useInsertionEffect:wh,useLayoutEffect:Th,useMemo:kh,useReducer:vl,useRef:bh,useState:function(){return vl(rr)},useDebugValue:Rd,useDeferredValue:function(e){var t=Rt();return Ch(t,Me.memoizedState,e)},useTransition:function(){var e=vl(rr)[0],t=Rt().memoizedState;return[e,t]},useMutableSource:fh,useSyncExternalStore:mh,useId:Sh,unstable_isNewReconciler:!1},Iv={readContext:It,useCallback:Dh,useContext:It,useEffect:Id,useImperativeHandle:xh,useInsertionEffect:wh,useLayoutEffect:Th,useMemo:kh,useReducer:bl,useRef:bh,useState:function(){return bl(rr)},useDebugValue:Rd,useDeferredValue:function(e){var t=Rt();return Me===null?t.memoizedState=e:Ch(t,Me.memoizedState,e)},useTransition:function(){var e=bl(rr)[0],t=Rt().memoizedState;return[e,t]},useMutableSource:fh,useSyncExternalStore:mh,useId:Sh,unstable_isNewReconciler:!1};function Zi(e,t){try{var a="",i=t;do a+=r_(i),i=i.return;while(i);var s=a}catch(r){s=`
Error generating stack: `+r.message+`
`+r.stack}return{value:e,source:t,stack:s,digest:null}}function wl(e,t,a){return{value:e,source:null,stack:a??null,digest:t??null}}function yu(e,t){try{console.error(t.value)}catch(a){setTimeout(function(){throw a})}}var Rv=typeof WeakMap=="function"?WeakMap:Map;function Rh(e,t,a){a=da(-1,a),a.tag=3,a.payload={element:null};var i=t.value;return a.callback=function(){En||(En=!0,Cu=i),yu(e,t)},a}function jh(e,t,a){a=da(-1,a),a.tag=3;var i=e.type.getDerivedStateFromError;if(typeof i=="function"){var s=t.value;a.payload=function(){return i(s)},a.callback=function(){yu(e,t)}}var r=e.stateNode;return r!==null&&typeof r.componentDidCatch=="function"&&(a.callback=function(){yu(e,t),typeof i!="function"&&(Na===null?Na=new Set([this]):Na.add(this));var n=t.stack;this.componentDidCatch(t.value,{componentStack:n!==null?n:""})}),a}function mp(e,t,a){var i=e.pingCache;if(i===null){i=e.pingCache=new Rv;var s=new Set;i.set(t,s)}else s=i.get(t),s===void 0&&(s=new Set,i.set(t,s));s.has(a)||(s.add(a),e=Vv.bind(null,e,t,a),t.then(e,e))}function hp(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function gp(e,t,a,i,s){return e.mode&1?(e.flags|=65536,e.lanes=s,e):(e===t?e.flags|=65536:(e.flags|=128,a.flags|=131072,a.flags&=-52805,a.tag===1&&(a.alternate===null?a.tag=17:(t=da(-1,1),t.tag=2,Fa(a,t,1))),a.lanes|=1),e)}var jv=ga.ReactCurrentOwner,dt=!1;function it(e,t,a,i){t.child=e===null?ch(t,null,a,i):Ji(t,e.child,a,i)}function yp(e,t,a,i,s){a=a.render;var r=t.ref;return Ui(t,s),i=Pd(e,t,a,i,r,s),a=Ad(),e!==null&&!dt?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~s,ma(e,t,s)):(ve&&a&&yd(t),t.flags|=1,it(e,t,i,s),t.child)}function _p(e,t,a,i,s){if(e===null){var r=a.type;return typeof r=="function"&&!Bd(r)&&r.defaultProps===void 0&&a.compare===null&&a.defaultProps===void 0?(t.tag=15,t.type=r,Eh(e,t,r,i,s)):(e=nn(a.type,null,i,t,t.mode,s),e.ref=t.ref,e.return=t,t.child=e)}if(r=e.child,!(e.lanes&s)){var n=r.memoizedProps;if(a=a.compare,a=a!==null?a:Ys,a(n,i)&&e.ref===t.ref)return ma(e,t,s)}return t.flags|=1,e=Oa(r,i),e.ref=t.ref,e.return=t,t.child=e}function Eh(e,t,a,i,s){if(e!==null){var r=e.memoizedProps;if(Ys(r,i)&&e.ref===t.ref)if(dt=!1,t.pendingProps=i=r,(e.lanes&s)!==0)e.flags&131072&&(dt=!0);else return t.lanes=e.lanes,ma(e,t,s)}return _u(e,t,a,i,s)}function Fh(e,t,a){var i=t.pendingProps,s=i.children,r=e!==null?e.memoizedState:null;if(i.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},fe(Mi,gt),gt|=a;else{if(!(a&1073741824))return e=r!==null?r.baseLanes|a:a,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,fe(Mi,gt),gt|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},i=r!==null?r.baseLanes:a,fe(Mi,gt),gt|=i}else r!==null?(i=r.baseLanes|a,t.memoizedState=null):i=a,fe(Mi,gt),gt|=i;return it(e,t,s,a),t.child}function Nh(e,t){var a=t.ref;(e===null&&a!==null||e!==null&&e.ref!==a)&&(t.flags|=512,t.flags|=2097152)}function _u(e,t,a,i,s){var r=pt(a)?di:at.current;return r=Xi(t,r),Ui(t,s),a=Pd(e,t,a,i,r,s),i=Ad(),e!==null&&!dt?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~s,ma(e,t,s)):(ve&&i&&yd(t),t.flags|=1,it(e,t,a,s),t.child)}function vp(e,t,a,i,s){if(pt(a)){var r=!0;xn(t)}else r=!1;if(Ui(t,s),t.stateNode===null)an(e,t),uh(t,a,i),gu(t,a,i,s),i=!0;else if(e===null){var n=t.stateNode,o=t.memoizedProps;n.props=o;var l=n.context,u=a.contextType;typeof u=="object"&&u!==null?u=It(u):(u=pt(a)?di:at.current,u=Xi(t,u));var f=a.getDerivedStateFromProps,y=typeof f=="function"||typeof n.getSnapshotBeforeUpdate=="function";y||typeof n.UNSAFE_componentWillReceiveProps!="function"&&typeof n.componentWillReceiveProps!="function"||(o!==i||l!==u)&&dp(t,n,i,u),Da=!1;var _=t.memoizedState;n.state=_,Pn(t,i,n,s),l=t.memoizedState,o!==i||_!==l||ct.current||Da?(typeof f=="function"&&(hu(t,a,f,i),l=t.memoizedState),(o=Da||up(t,a,o,i,_,l,u))?(y||typeof n.UNSAFE_componentWillMount!="function"&&typeof n.componentWillMount!="function"||(typeof n.componentWillMount=="function"&&n.componentWillMount(),typeof n.UNSAFE_componentWillMount=="function"&&n.UNSAFE_componentWillMount()),typeof n.componentDidMount=="function"&&(t.flags|=4194308)):(typeof n.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=i,t.memoizedState=l),n.props=i,n.state=l,n.context=u,i=o):(typeof n.componentDidMount=="function"&&(t.flags|=4194308),i=!1)}else{n=t.stateNode,oh(e,t),o=t.memoizedProps,u=t.type===t.elementType?o:Ot(t.type,o),n.props=u,y=t.pendingProps,_=n.context,l=a.contextType,typeof l=="object"&&l!==null?l=It(l):(l=pt(a)?di:at.current,l=Xi(t,l));var d=a.getDerivedStateFromProps;(f=typeof d=="function"||typeof n.getSnapshotBeforeUpdate=="function")||typeof n.UNSAFE_componentWillReceiveProps!="function"&&typeof n.componentWillReceiveProps!="function"||(o!==y||_!==l)&&dp(t,n,i,l),Da=!1,_=t.memoizedState,n.state=_,Pn(t,i,n,s);var h=t.memoizedState;o!==y||_!==h||ct.current||Da?(typeof d=="function"&&(hu(t,a,d,i),h=t.memoizedState),(u=Da||up(t,a,u,i,_,h,l)||!1)?(f||typeof n.UNSAFE_componentWillUpdate!="function"&&typeof n.componentWillUpdate!="function"||(typeof n.componentWillUpdate=="function"&&n.componentWillUpdate(i,h,l),typeof n.UNSAFE_componentWillUpdate=="function"&&n.UNSAFE_componentWillUpdate(i,h,l)),typeof n.componentDidUpdate=="function"&&(t.flags|=4),typeof n.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof n.componentDidUpdate!="function"||o===e.memoizedProps&&_===e.memoizedState||(t.flags|=4),typeof n.getSnapshotBeforeUpdate!="function"||o===e.memoizedProps&&_===e.memoizedState||(t.flags|=1024),t.memoizedProps=i,t.memoizedState=h),n.props=i,n.state=h,n.context=l,i=u):(typeof n.componentDidUpdate!="function"||o===e.memoizedProps&&_===e.memoizedState||(t.flags|=4),typeof n.getSnapshotBeforeUpdate!="function"||o===e.memoizedProps&&_===e.memoizedState||(t.flags|=1024),i=!1)}return vu(e,t,a,i,r,s)}function vu(e,t,a,i,s,r){Nh(e,t);var n=(t.flags&128)!==0;if(!i&&!n)return s&&sp(t,a,!1),ma(e,t,r);i=t.stateNode,jv.current=t;var o=n&&typeof a.getDerivedStateFromError!="function"?null:i.render();return t.flags|=1,e!==null&&n?(t.child=Ji(t,e.child,null,r),t.child=Ji(t,null,o,r)):it(e,t,o,r),t.memoizedState=i.state,s&&sp(t,a,!0),t.child}function Lh(e){var t=e.stateNode;t.pendingContext?ip(e,t.pendingContext,t.pendingContext!==t.context):t.context&&ip(e,t.context,!1),Dd(e,t.containerInfo)}function bp(e,t,a,i,s){return Qi(),vd(s),t.flags|=256,it(e,t,a,i),t.child}var bu={dehydrated:null,treeContext:null,retryLane:0};function wu(e){return{baseLanes:e,cachePool:null,transitions:null}}function Oh(e,t,a){var i=t.pendingProps,s=we.current,r=!1,n=(t.flags&128)!==0,o;if((o=n)||(o=e!==null&&e.memoizedState===null?!1:(s&2)!==0),o?(r=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(s|=1),fe(we,s&1),e===null)return fu(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(n=i.children,e=i.fallback,r?(i=t.mode,r=t.child,n={mode:"hidden",children:n},!(i&1)&&r!==null?(r.childLanes=0,r.pendingProps=n):r=io(n,i,0,null),e=ui(e,i,a,null),r.return=t,e.return=t,r.sibling=e,t.child=r,t.child.memoizedState=wu(a),t.memoizedState=bu,e):jd(t,n));if(s=e.memoizedState,s!==null&&(o=s.dehydrated,o!==null))return Ev(e,t,n,i,o,s,a);if(r){r=i.fallback,n=t.mode,s=e.child,o=s.sibling;var l={mode:"hidden",children:i.children};return!(n&1)&&t.child!==s?(i=t.child,i.childLanes=0,i.pendingProps=l,t.deletions=null):(i=Oa(s,l),i.subtreeFlags=s.subtreeFlags&14680064),o!==null?r=Oa(o,r):(r=ui(r,n,a,null),r.flags|=2),r.return=t,i.return=t,i.sibling=r,t.child=i,i=r,r=t.child,n=e.child.memoizedState,n=n===null?wu(a):{baseLanes:n.baseLanes|a,cachePool:null,transitions:n.transitions},r.memoizedState=n,r.childLanes=e.childLanes&~a,t.memoizedState=bu,i}return r=e.child,e=r.sibling,i=Oa(r,{mode:"visible",children:i.children}),!(t.mode&1)&&(i.lanes=a),i.return=t,i.sibling=null,e!==null&&(a=t.deletions,a===null?(t.deletions=[e],t.flags|=16):a.push(e)),t.child=i,t.memoizedState=null,i}function jd(e,t){return t=io({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Br(e,t,a,i){return i!==null&&vd(i),Ji(t,e.child,null,a),e=jd(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function Ev(e,t,a,i,s,r,n){if(a)return t.flags&256?(t.flags&=-257,i=wl(Error(A(422))),Br(e,t,n,i)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(r=i.fallback,s=t.mode,i=io({mode:"visible",children:i.children},s,0,null),r=ui(r,s,n,null),r.flags|=2,i.return=t,r.return=t,i.sibling=r,t.child=i,t.mode&1&&Ji(t,e.child,null,n),t.child.memoizedState=wu(n),t.memoizedState=bu,r);if(!(t.mode&1))return Br(e,t,n,null);if(s.data==="$!"){if(i=s.nextSibling&&s.nextSibling.dataset,i)var o=i.dgst;return i=o,r=Error(A(419)),i=wl(r,i,void 0),Br(e,t,n,i)}if(o=(n&e.childLanes)!==0,dt||o){if(i=$e,i!==null){switch(n&-n){case 4:s=2;break;case 16:s=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:s=32;break;case 536870912:s=268435456;break;default:s=0}s=s&(i.suspendedLanes|n)?0:s,s!==0&&s!==r.retryLane&&(r.retryLane=s,fa(e,s),Wt(i,e,s,-1))}return Md(),i=wl(Error(A(421))),Br(e,t,n,i)}return s.data==="$?"?(t.flags|=128,t.child=e.child,t=Kv.bind(null,e),s._reactRetry=t,null):(e=r.treeContext,_t=Ea(s.nextSibling),vt=t,ve=!0,Bt=null,e!==null&&(kt[Ct++]=la,kt[Ct++]=ua,kt[Ct++]=ci,la=e.id,ua=e.overflow,ci=t),t=jd(t,i.children),t.flags|=4096,t)}function wp(e,t,a){e.lanes|=t;var i=e.alternate;i!==null&&(i.lanes|=t),mu(e.return,t,a)}function Tl(e,t,a,i,s){var r=e.memoizedState;r===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:a,tailMode:s}:(r.isBackwards=t,r.rendering=null,r.renderingStartTime=0,r.last=i,r.tail=a,r.tailMode=s)}function Mh(e,t,a){var i=t.pendingProps,s=i.revealOrder,r=i.tail;if(it(e,t,i.children,a),i=we.current,i&2)i=i&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&wp(e,a,t);else if(e.tag===19)wp(e,a,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(fe(we,i),!(t.mode&1))t.memoizedState=null;else switch(s){case"forwards":for(a=t.child,s=null;a!==null;)e=a.alternate,e!==null&&An(e)===null&&(s=a),a=a.sibling;a=s,a===null?(s=t.child,t.child=null):(s=a.sibling,a.sibling=null),Tl(t,!1,s,a,r);break;case"backwards":for(a=null,s=t.child,t.child=null;s!==null;){if(e=s.alternate,e!==null&&An(e)===null){t.child=s;break}e=s.sibling,s.sibling=a,a=s,s=e}Tl(t,!0,a,null,r);break;case"together":Tl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function an(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function ma(e,t,a){if(e!==null&&(t.dependencies=e.dependencies),fi|=t.lanes,!(a&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(A(153));if(t.child!==null){for(e=t.child,a=Oa(e,e.pendingProps),t.child=a,a.return=t;e.sibling!==null;)e=e.sibling,a=a.sibling=Oa(e,e.pendingProps),a.return=t;a.sibling=null}return t.child}function Fv(e,t,a){switch(t.tag){case 3:Lh(t),Qi();break;case 5:ph(t);break;case 1:pt(t.type)&&xn(t);break;case 4:Dd(t,t.stateNode.containerInfo);break;case 10:var i=t.type._context,s=t.memoizedProps.value;fe(Cn,i._currentValue),i._currentValue=s;break;case 13:if(i=t.memoizedState,i!==null)return i.dehydrated!==null?(fe(we,we.current&1),t.flags|=128,null):a&t.child.childLanes?Oh(e,t,a):(fe(we,we.current&1),e=ma(e,t,a),e!==null?e.sibling:null);fe(we,we.current&1);break;case 19:if(i=(a&t.childLanes)!==0,e.flags&128){if(i)return Mh(e,t,a);t.flags|=128}if(s=t.memoizedState,s!==null&&(s.rendering=null,s.tail=null,s.lastEffect=null),fe(we,we.current),i)break;return null;case 22:case 23:return t.lanes=0,Fh(e,t,a)}return ma(e,t,a)}var Bh,Tu,zh,$h;Bh=function(e,t){for(var a=t.child;a!==null;){if(a.tag===5||a.tag===6)e.appendChild(a.stateNode);else if(a.tag!==4&&a.child!==null){a.child.return=a,a=a.child;continue}if(a===t)break;for(;a.sibling===null;){if(a.return===null||a.return===t)return;a=a.return}a.sibling.return=a.return,a=a.sibling}};Tu=function(){};zh=function(e,t,a,i){var s=e.memoizedProps;if(s!==i){e=t.stateNode,si(Yt.current);var r=null;switch(a){case"input":s=Ul(e,s),i=Ul(e,i),r=[];break;case"select":s=xe({},s,{value:void 0}),i=xe({},i,{value:void 0}),r=[];break;case"textarea":s=Kl(e,s),i=Kl(e,i),r=[];break;default:typeof s.onClick!="function"&&typeof i.onClick=="function"&&(e.onclick=Tn)}Xl(a,i);var n;a=null;for(u in s)if(!i.hasOwnProperty(u)&&s.hasOwnProperty(u)&&s[u]!=null)if(u==="style"){var o=s[u];for(n in o)o.hasOwnProperty(n)&&(a||(a={}),a[n]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(Hs.hasOwnProperty(u)?r||(r=[]):(r=r||[]).push(u,null));for(u in i){var l=i[u];if(o=s!=null?s[u]:void 0,i.hasOwnProperty(u)&&l!==o&&(l!=null||o!=null))if(u==="style")if(o){for(n in o)!o.hasOwnProperty(n)||l&&l.hasOwnProperty(n)||(a||(a={}),a[n]="");for(n in l)l.hasOwnProperty(n)&&o[n]!==l[n]&&(a||(a={}),a[n]=l[n])}else a||(r||(r=[]),r.push(u,a)),a=l;else u==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,o=o?o.__html:void 0,l!=null&&o!==l&&(r=r||[]).push(u,l)):u==="children"?typeof l!="string"&&typeof l!="number"||(r=r||[]).push(u,""+l):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(Hs.hasOwnProperty(u)?(l!=null&&u==="onScroll"&&me("scroll",e),r||o===l||(r=[])):(r=r||[]).push(u,l))}a&&(r=r||[]).push("style",a);var u=r;(t.updateQueue=u)&&(t.flags|=4)}};$h=function(e,t,a,i){a!==i&&(t.flags|=4)};function ys(e,t){if(!ve)switch(e.tailMode){case"hidden":t=e.tail;for(var a=null;t!==null;)t.alternate!==null&&(a=t),t=t.sibling;a===null?e.tail=null:a.sibling=null;break;case"collapsed":a=e.tail;for(var i=null;a!==null;)a.alternate!==null&&(i=a),a=a.sibling;i===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:i.sibling=null}}function Ze(e){var t=e.alternate!==null&&e.alternate.child===e.child,a=0,i=0;if(t)for(var s=e.child;s!==null;)a|=s.lanes|s.childLanes,i|=s.subtreeFlags&14680064,i|=s.flags&14680064,s.return=e,s=s.sibling;else for(s=e.child;s!==null;)a|=s.lanes|s.childLanes,i|=s.subtreeFlags,i|=s.flags,s.return=e,s=s.sibling;return e.subtreeFlags|=i,e.childLanes=a,t}function Nv(e,t,a){var i=t.pendingProps;switch(_d(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Ze(t),null;case 1:return pt(t.type)&&qn(),Ze(t),null;case 3:return i=t.stateNode,Yi(),he(ct),he(at),Cd(),i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(e===null||e.child===null)&&(Or(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Bt!==null&&(Au(Bt),Bt=null))),Tu(e,t),Ze(t),null;case 5:kd(t);var s=si(ir.current);if(a=t.type,e!==null&&t.stateNode!=null)zh(e,t,a,i,s),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!i){if(t.stateNode===null)throw Error(A(166));return Ze(t),null}if(e=si(Yt.current),Or(t)){i=t.stateNode,a=t.type;var r=t.memoizedProps;switch(i[Xt]=t,i[tr]=r,e=(t.mode&1)!==0,a){case"dialog":me("cancel",i),me("close",i);break;case"iframe":case"object":case"embed":me("load",i);break;case"video":case"audio":for(s=0;s<As.length;s++)me(As[s],i);break;case"source":me("error",i);break;case"img":case"image":case"link":me("error",i),me("load",i);break;case"details":me("toggle",i);break;case"input":Ac(i,r),me("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!r.multiple},me("invalid",i);break;case"textarea":Rc(i,r),me("invalid",i)}Xl(a,r),s=null;for(var n in r)if(r.hasOwnProperty(n)){var o=r[n];n==="children"?typeof o=="string"?i.textContent!==o&&(r.suppressHydrationWarning!==!0&&Lr(i.textContent,o,e),s=["children",o]):typeof o=="number"&&i.textContent!==""+o&&(r.suppressHydrationWarning!==!0&&Lr(i.textContent,o,e),s=["children",""+o]):Hs.hasOwnProperty(n)&&o!=null&&n==="onScroll"&&me("scroll",i)}switch(a){case"input":Pr(i),Ic(i,r,!0);break;case"textarea":Pr(i),jc(i);break;case"select":case"option":break;default:typeof r.onClick=="function"&&(i.onclick=Tn)}i=s,t.updateQueue=i,i!==null&&(t.flags|=4)}else{n=s.nodeType===9?s:s.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=hm(a)),e==="http://www.w3.org/1999/xhtml"?a==="script"?(e=n.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof i.is=="string"?e=n.createElement(a,{is:i.is}):(e=n.createElement(a),a==="select"&&(n=e,i.multiple?n.multiple=!0:i.size&&(n.size=i.size))):e=n.createElementNS(e,a),e[Xt]=t,e[tr]=i,Bh(e,t,!1,!1),t.stateNode=e;e:{switch(n=Ql(a,i),a){case"dialog":me("cancel",e),me("close",e),s=i;break;case"iframe":case"object":case"embed":me("load",e),s=i;break;case"video":case"audio":for(s=0;s<As.length;s++)me(As[s],e);s=i;break;case"source":me("error",e),s=i;break;case"img":case"image":case"link":me("error",e),me("load",e),s=i;break;case"details":me("toggle",e),s=i;break;case"input":Ac(e,i),s=Ul(e,i),me("invalid",e);break;case"option":s=i;break;case"select":e._wrapperState={wasMultiple:!!i.multiple},s=xe({},i,{value:void 0}),me("invalid",e);break;case"textarea":Rc(e,i),s=Kl(e,i),me("invalid",e);break;default:s=i}Xl(a,s),o=s;for(r in o)if(o.hasOwnProperty(r)){var l=o[r];r==="style"?_m(e,l):r==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&gm(e,l)):r==="children"?typeof l=="string"?(a!=="textarea"||l!=="")&&Vs(e,l):typeof l=="number"&&Vs(e,""+l):r!=="suppressContentEditableWarning"&&r!=="suppressHydrationWarning"&&r!=="autoFocus"&&(Hs.hasOwnProperty(r)?l!=null&&r==="onScroll"&&me("scroll",e):l!=null&&id(e,r,l,n))}switch(a){case"input":Pr(e),Ic(e,i,!1);break;case"textarea":Pr(e),jc(e);break;case"option":i.value!=null&&e.setAttribute("value",""+Ba(i.value));break;case"select":e.multiple=!!i.multiple,r=i.value,r!=null?Bi(e,!!i.multiple,r,!1):i.defaultValue!=null&&Bi(e,!!i.multiple,i.defaultValue,!0);break;default:typeof s.onClick=="function"&&(e.onclick=Tn)}switch(a){case"button":case"input":case"select":case"textarea":i=!!i.autoFocus;break e;case"img":i=!0;break e;default:i=!1}}i&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return Ze(t),null;case 6:if(e&&t.stateNode!=null)$h(e,t,e.memoizedProps,i);else{if(typeof i!="string"&&t.stateNode===null)throw Error(A(166));if(a=si(ir.current),si(Yt.current),Or(t)){if(i=t.stateNode,a=t.memoizedProps,i[Xt]=t,(r=i.nodeValue!==a)&&(e=vt,e!==null))switch(e.tag){case 3:Lr(i.nodeValue,a,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Lr(i.nodeValue,a,(e.mode&1)!==0)}r&&(t.flags|=4)}else i=(a.nodeType===9?a:a.ownerDocument).createTextNode(i),i[Xt]=t,t.stateNode=i}return Ze(t),null;case 13:if(he(we),i=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(ve&&_t!==null&&t.mode&1&&!(t.flags&128))rh(),Qi(),t.flags|=98560,r=!1;else if(r=Or(t),i!==null&&i.dehydrated!==null){if(e===null){if(!r)throw Error(A(318));if(r=t.memoizedState,r=r!==null?r.dehydrated:null,!r)throw Error(A(317));r[Xt]=t}else Qi(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;Ze(t),r=!1}else Bt!==null&&(Au(Bt),Bt=null),r=!0;if(!r)return t.flags&65536?t:null}return t.flags&128?(t.lanes=a,t):(i=i!==null,i!==(e!==null&&e.memoizedState!==null)&&i&&(t.child.flags|=8192,t.mode&1&&(e===null||we.current&1?Be===0&&(Be=3):Md())),t.updateQueue!==null&&(t.flags|=4),Ze(t),null);case 4:return Yi(),Tu(e,t),e===null&&Zs(t.stateNode.containerInfo),Ze(t),null;case 10:return Td(t.type._context),Ze(t),null;case 17:return pt(t.type)&&qn(),Ze(t),null;case 19:if(he(we),r=t.memoizedState,r===null)return Ze(t),null;if(i=(t.flags&128)!==0,n=r.rendering,n===null)if(i)ys(r,!1);else{if(Be!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(n=An(e),n!==null){for(t.flags|=128,ys(r,!1),i=n.updateQueue,i!==null&&(t.updateQueue=i,t.flags|=4),t.subtreeFlags=0,i=a,a=t.child;a!==null;)r=a,e=i,r.flags&=14680066,n=r.alternate,n===null?(r.childLanes=0,r.lanes=e,r.child=null,r.subtreeFlags=0,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null,r.stateNode=null):(r.childLanes=n.childLanes,r.lanes=n.lanes,r.child=n.child,r.subtreeFlags=0,r.deletions=null,r.memoizedProps=n.memoizedProps,r.memoizedState=n.memoizedState,r.updateQueue=n.updateQueue,r.type=n.type,e=n.dependencies,r.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),a=a.sibling;return fe(we,we.current&1|2),t.child}e=e.sibling}r.tail!==null&&Pe()>es&&(t.flags|=128,i=!0,ys(r,!1),t.lanes=4194304)}else{if(!i)if(e=An(n),e!==null){if(t.flags|=128,i=!0,a=e.updateQueue,a!==null&&(t.updateQueue=a,t.flags|=4),ys(r,!0),r.tail===null&&r.tailMode==="hidden"&&!n.alternate&&!ve)return Ze(t),null}else 2*Pe()-r.renderingStartTime>es&&a!==1073741824&&(t.flags|=128,i=!0,ys(r,!1),t.lanes=4194304);r.isBackwards?(n.sibling=t.child,t.child=n):(a=r.last,a!==null?a.sibling=n:t.child=n,r.last=n)}return r.tail!==null?(t=r.tail,r.rendering=t,r.tail=t.sibling,r.renderingStartTime=Pe(),t.sibling=null,a=we.current,fe(we,i?a&1|2:a&1),t):(Ze(t),null);case 22:case 23:return Od(),i=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==i&&(t.flags|=8192),i&&t.mode&1?gt&1073741824&&(Ze(t),t.subtreeFlags&6&&(t.flags|=8192)):Ze(t),null;case 24:return null;case 25:return null}throw Error(A(156,t.tag))}function Lv(e,t){switch(_d(t),t.tag){case 1:return pt(t.type)&&qn(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Yi(),he(ct),he(at),Cd(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return kd(t),null;case 13:if(he(we),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(A(340));Qi()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return he(we),null;case 4:return Yi(),null;case 10:return Td(t.type._context),null;case 22:case 23:return Od(),null;case 24:return null;default:return null}}var zr=!1,tt=!1,Ov=typeof WeakSet=="function"?WeakSet:Set,L=null;function Oi(e,t){var a=e.ref;if(a!==null)if(typeof a=="function")try{a(null)}catch(i){Se(e,t,i)}else a.current=null}function qu(e,t,a){try{a()}catch(i){Se(e,t,i)}}var Tp=!1;function Mv(e,t){if(nu=vn,e=Vm(),gd(e)){if("selectionStart"in e)var a={start:e.selectionStart,end:e.selectionEnd};else e:{a=(a=e.ownerDocument)&&a.defaultView||window;var i=a.getSelection&&a.getSelection();if(i&&i.rangeCount!==0){a=i.anchorNode;var s=i.anchorOffset,r=i.focusNode;i=i.focusOffset;try{a.nodeType,r.nodeType}catch{a=null;break e}var n=0,o=-1,l=-1,u=0,f=0,y=e,_=null;t:for(;;){for(var d;y!==a||s!==0&&y.nodeType!==3||(o=n+s),y!==r||i!==0&&y.nodeType!==3||(l=n+i),y.nodeType===3&&(n+=y.nodeValue.length),(d=y.firstChild)!==null;)_=y,y=d;for(;;){if(y===e)break t;if(_===a&&++u===s&&(o=n),_===r&&++f===i&&(l=n),(d=y.nextSibling)!==null)break;y=_,_=y.parentNode}y=d}a=o===-1||l===-1?null:{start:o,end:l}}else a=null}a=a||{start:0,end:0}}else a=null;for(ou={focusedElem:e,selectionRange:a},vn=!1,L=t;L!==null;)if(t=L,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,L=e;else for(;L!==null;){t=L;try{var h=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(h!==null){var c=h.memoizedProps,x=h.memoizedState,m=t.stateNode,p=m.getSnapshotBeforeUpdate(t.elementType===t.type?c:Ot(t.type,c),x);m.__reactInternalSnapshotBeforeUpdate=p}break;case 3:var g=t.stateNode.containerInfo;g.nodeType===1?g.textContent="":g.nodeType===9&&g.documentElement&&g.removeChild(g.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(A(163))}}catch(w){Se(t,t.return,w)}if(e=t.sibling,e!==null){e.return=t.return,L=e;break}L=t.return}return h=Tp,Tp=!1,h}function Os(e,t,a){var i=t.updateQueue;if(i=i!==null?i.lastEffect:null,i!==null){var s=i=i.next;do{if((s.tag&e)===e){var r=s.destroy;s.destroy=void 0,r!==void 0&&qu(t,a,r)}s=s.next}while(s!==i)}}function to(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var a=t=t.next;do{if((a.tag&e)===e){var i=a.create;a.destroy=i()}a=a.next}while(a!==t)}}function xu(e){var t=e.ref;if(t!==null){var a=e.stateNode;switch(e.tag){case 5:e=a;break;default:e=a}typeof t=="function"?t(e):t.current=e}}function Wh(e){var t=e.alternate;t!==null&&(e.alternate=null,Wh(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[Xt],delete t[tr],delete t[du],delete t[wv],delete t[Tv])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Uh(e){return e.tag===5||e.tag===3||e.tag===4}function qp(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Uh(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Du(e,t,a){var i=e.tag;if(i===5||i===6)e=e.stateNode,t?a.nodeType===8?a.parentNode.insertBefore(e,t):a.insertBefore(e,t):(a.nodeType===8?(t=a.parentNode,t.insertBefore(e,a)):(t=a,t.appendChild(e)),a=a._reactRootContainer,a!=null||t.onclick!==null||(t.onclick=Tn));else if(i!==4&&(e=e.child,e!==null))for(Du(e,t,a),e=e.sibling;e!==null;)Du(e,t,a),e=e.sibling}function ku(e,t,a){var i=e.tag;if(i===5||i===6)e=e.stateNode,t?a.insertBefore(e,t):a.appendChild(e);else if(i!==4&&(e=e.child,e!==null))for(ku(e,t,a),e=e.sibling;e!==null;)ku(e,t,a),e=e.sibling}var Ve=null,Mt=!1;function ba(e,t,a){for(a=a.child;a!==null;)Hh(e,t,a),a=a.sibling}function Hh(e,t,a){if(Jt&&typeof Jt.onCommitFiberUnmount=="function")try{Jt.onCommitFiberUnmount(Kn,a)}catch{}switch(a.tag){case 5:tt||Oi(a,t);case 6:var i=Ve,s=Mt;Ve=null,ba(e,t,a),Ve=i,Mt=s,Ve!==null&&(Mt?(e=Ve,a=a.stateNode,e.nodeType===8?e.parentNode.removeChild(a):e.removeChild(a)):Ve.removeChild(a.stateNode));break;case 18:Ve!==null&&(Mt?(e=Ve,a=a.stateNode,e.nodeType===8?hl(e.parentNode,a):e.nodeType===1&&hl(e,a),Qs(e)):hl(Ve,a.stateNode));break;case 4:i=Ve,s=Mt,Ve=a.stateNode.containerInfo,Mt=!0,ba(e,t,a),Ve=i,Mt=s;break;case 0:case 11:case 14:case 15:if(!tt&&(i=a.updateQueue,i!==null&&(i=i.lastEffect,i!==null))){s=i=i.next;do{var r=s,n=r.destroy;r=r.tag,n!==void 0&&(r&2||r&4)&&qu(a,t,n),s=s.next}while(s!==i)}ba(e,t,a);break;case 1:if(!tt&&(Oi(a,t),i=a.stateNode,typeof i.componentWillUnmount=="function"))try{i.props=a.memoizedProps,i.state=a.memoizedState,i.componentWillUnmount()}catch(o){Se(a,t,o)}ba(e,t,a);break;case 21:ba(e,t,a);break;case 22:a.mode&1?(tt=(i=tt)||a.memoizedState!==null,ba(e,t,a),tt=i):ba(e,t,a);break;default:ba(e,t,a)}}function xp(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var a=e.stateNode;a===null&&(a=e.stateNode=new Ov),t.forEach(function(i){var s=Gv.bind(null,e,i);a.has(i)||(a.add(i),i.then(s,s))})}}function Lt(e,t){var a=t.deletions;if(a!==null)for(var i=0;i<a.length;i++){var s=a[i];try{var r=e,n=t,o=n;e:for(;o!==null;){switch(o.tag){case 5:Ve=o.stateNode,Mt=!1;break e;case 3:Ve=o.stateNode.containerInfo,Mt=!0;break e;case 4:Ve=o.stateNode.containerInfo,Mt=!0;break e}o=o.return}if(Ve===null)throw Error(A(160));Hh(r,n,s),Ve=null,Mt=!1;var l=s.alternate;l!==null&&(l.return=null),s.return=null}catch(u){Se(s,t,u)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)Vh(t,e),t=t.sibling}function Vh(e,t){var a=e.alternate,i=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Lt(t,e),Ht(e),i&4){try{Os(3,e,e.return),to(3,e)}catch(c){Se(e,e.return,c)}try{Os(5,e,e.return)}catch(c){Se(e,e.return,c)}}break;case 1:Lt(t,e),Ht(e),i&512&&a!==null&&Oi(a,a.return);break;case 5:if(Lt(t,e),Ht(e),i&512&&a!==null&&Oi(a,a.return),e.flags&32){var s=e.stateNode;try{Vs(s,"")}catch(c){Se(e,e.return,c)}}if(i&4&&(s=e.stateNode,s!=null)){var r=e.memoizedProps,n=a!==null?a.memoizedProps:r,o=e.type,l=e.updateQueue;if(e.updateQueue=null,l!==null)try{o==="input"&&r.type==="radio"&&r.name!=null&&fm(s,r),Ql(o,n);var u=Ql(o,r);for(n=0;n<l.length;n+=2){var f=l[n],y=l[n+1];f==="style"?_m(s,y):f==="dangerouslySetInnerHTML"?gm(s,y):f==="children"?Vs(s,y):id(s,f,y,u)}switch(o){case"input":Hl(s,r);break;case"textarea":mm(s,r);break;case"select":var _=s._wrapperState.wasMultiple;s._wrapperState.wasMultiple=!!r.multiple;var d=r.value;d!=null?Bi(s,!!r.multiple,d,!1):_!==!!r.multiple&&(r.defaultValue!=null?Bi(s,!!r.multiple,r.defaultValue,!0):Bi(s,!!r.multiple,r.multiple?[]:"",!1))}s[tr]=r}catch(c){Se(e,e.return,c)}}break;case 6:if(Lt(t,e),Ht(e),i&4){if(e.stateNode===null)throw Error(A(162));s=e.stateNode,r=e.memoizedProps;try{s.nodeValue=r}catch(c){Se(e,e.return,c)}}break;case 3:if(Lt(t,e),Ht(e),i&4&&a!==null&&a.memoizedState.isDehydrated)try{Qs(t.containerInfo)}catch(c){Se(e,e.return,c)}break;case 4:Lt(t,e),Ht(e);break;case 13:Lt(t,e),Ht(e),s=e.child,s.flags&8192&&(r=s.memoizedState!==null,s.stateNode.isHidden=r,!r||s.alternate!==null&&s.alternate.memoizedState!==null||(Nd=Pe())),i&4&&xp(e);break;case 22:if(f=a!==null&&a.memoizedState!==null,e.mode&1?(tt=(u=tt)||f,Lt(t,e),tt=u):Lt(t,e),Ht(e),i&8192){if(u=e.memoizedState!==null,(e.stateNode.isHidden=u)&&!f&&e.mode&1)for(L=e,f=e.child;f!==null;){for(y=L=f;L!==null;){switch(_=L,d=_.child,_.tag){case 0:case 11:case 14:case 15:Os(4,_,_.return);break;case 1:Oi(_,_.return);var h=_.stateNode;if(typeof h.componentWillUnmount=="function"){i=_,a=_.return;try{t=i,h.props=t.memoizedProps,h.state=t.memoizedState,h.componentWillUnmount()}catch(c){Se(i,a,c)}}break;case 5:Oi(_,_.return);break;case 22:if(_.memoizedState!==null){kp(y);continue}}d!==null?(d.return=_,L=d):kp(y)}f=f.sibling}e:for(f=null,y=e;;){if(y.tag===5){if(f===null){f=y;try{s=y.stateNode,u?(r=s.style,typeof r.setProperty=="function"?r.setProperty("display","none","important"):r.display="none"):(o=y.stateNode,l=y.memoizedProps.style,n=l!=null&&l.hasOwnProperty("display")?l.display:null,o.style.display=ym("display",n))}catch(c){Se(e,e.return,c)}}}else if(y.tag===6){if(f===null)try{y.stateNode.nodeValue=u?"":y.memoizedProps}catch(c){Se(e,e.return,c)}}else if((y.tag!==22&&y.tag!==23||y.memoizedState===null||y===e)&&y.child!==null){y.child.return=y,y=y.child;continue}if(y===e)break e;for(;y.sibling===null;){if(y.return===null||y.return===e)break e;f===y&&(f=null),y=y.return}f===y&&(f=null),y.sibling.return=y.return,y=y.sibling}}break;case 19:Lt(t,e),Ht(e),i&4&&xp(e);break;case 21:break;default:Lt(t,e),Ht(e)}}function Ht(e){var t=e.flags;if(t&2){try{e:{for(var a=e.return;a!==null;){if(Uh(a)){var i=a;break e}a=a.return}throw Error(A(160))}switch(i.tag){case 5:var s=i.stateNode;i.flags&32&&(Vs(s,""),i.flags&=-33);var r=qp(e);ku(e,r,s);break;case 3:case 4:var n=i.stateNode.containerInfo,o=qp(e);Du(e,o,n);break;default:throw Error(A(161))}}catch(l){Se(e,e.return,l)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function Bv(e,t,a){L=e,Kh(e)}function Kh(e,t,a){for(var i=(e.mode&1)!==0;L!==null;){var s=L,r=s.child;if(s.tag===22&&i){var n=s.memoizedState!==null||zr;if(!n){var o=s.alternate,l=o!==null&&o.memoizedState!==null||tt;o=zr;var u=tt;if(zr=n,(tt=l)&&!u)for(L=s;L!==null;)n=L,l=n.child,n.tag===22&&n.memoizedState!==null?Cp(s):l!==null?(l.return=n,L=l):Cp(s);for(;r!==null;)L=r,Kh(r),r=r.sibling;L=s,zr=o,tt=u}Dp(e)}else s.subtreeFlags&8772&&r!==null?(r.return=s,L=r):Dp(e)}}function Dp(e){for(;L!==null;){var t=L;if(t.flags&8772){var a=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:tt||to(5,t);break;case 1:var i=t.stateNode;if(t.flags&4&&!tt)if(a===null)i.componentDidMount();else{var s=t.elementType===t.type?a.memoizedProps:Ot(t.type,a.memoizedProps);i.componentDidUpdate(s,a.memoizedState,i.__reactInternalSnapshotBeforeUpdate)}var r=t.updateQueue;r!==null&&lp(t,r,i);break;case 3:var n=t.updateQueue;if(n!==null){if(a=null,t.child!==null)switch(t.child.tag){case 5:a=t.child.stateNode;break;case 1:a=t.child.stateNode}lp(t,n,a)}break;case 5:var o=t.stateNode;if(a===null&&t.flags&4){a=o;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&a.focus();break;case"img":l.src&&(a.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var u=t.alternate;if(u!==null){var f=u.memoizedState;if(f!==null){var y=f.dehydrated;y!==null&&Qs(y)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(A(163))}tt||t.flags&512&&xu(t)}catch(_){Se(t,t.return,_)}}if(t===e){L=null;break}if(a=t.sibling,a!==null){a.return=t.return,L=a;break}L=t.return}}function kp(e){for(;L!==null;){var t=L;if(t===e){L=null;break}var a=t.sibling;if(a!==null){a.return=t.return,L=a;break}L=t.return}}function Cp(e){for(;L!==null;){var t=L;try{switch(t.tag){case 0:case 11:case 15:var a=t.return;try{to(4,t)}catch(l){Se(t,a,l)}break;case 1:var i=t.stateNode;if(typeof i.componentDidMount=="function"){var s=t.return;try{i.componentDidMount()}catch(l){Se(t,s,l)}}var r=t.return;try{xu(t)}catch(l){Se(t,r,l)}break;case 5:var n=t.return;try{xu(t)}catch(l){Se(t,n,l)}}}catch(l){Se(t,t.return,l)}if(t===e){L=null;break}var o=t.sibling;if(o!==null){o.return=t.return,L=o;break}L=t.return}}var zv=Math.ceil,jn=ga.ReactCurrentDispatcher,Ed=ga.ReactCurrentOwner,Pt=ga.ReactCurrentBatchConfig,Y=0,$e=null,Ee=null,Ge=0,gt=0,Mi=Ha(0),Be=0,or=null,fi=0,ao=0,Fd=0,Ms=null,ut=null,Nd=0,es=1/0,na=null,En=!1,Cu=null,Na=null,$r=!1,Pa=null,Fn=0,Bs=0,Su=null,sn=-1,rn=0;function st(){return Y&6?Pe():sn!==-1?sn:sn=Pe()}function La(e){return e.mode&1?Y&2&&Ge!==0?Ge&-Ge:xv.transition!==null?(rn===0&&(rn=Am()),rn):(e=re,e!==0||(e=window.event,e=e===void 0?16:Lm(e.type)),e):1}function Wt(e,t,a,i){if(50<Bs)throw Bs=0,Su=null,Error(A(185));hr(e,a,i),(!(Y&2)||e!==$e)&&(e===$e&&(!(Y&2)&&(ao|=a),Be===4&&Ca(e,Ge)),ft(e,i),a===1&&Y===0&&!(t.mode&1)&&(es=Pe()+500,Yn&&Va()))}function ft(e,t){var a=e.callbackNode;x_(e,t);var i=_n(e,e===$e?Ge:0);if(i===0)a!==null&&Nc(a),e.callbackNode=null,e.callbackPriority=0;else if(t=i&-i,e.callbackPriority!==t){if(a!=null&&Nc(a),t===1)e.tag===0?qv(Sp.bind(null,e)):ah(Sp.bind(null,e)),vv(function(){!(Y&6)&&Va()}),a=null;else{switch(Im(i)){case 1:a=ld;break;case 4:a=Sm;break;case 16:a=yn;break;case 536870912:a=Pm;break;default:a=yn}a=tg(a,Gh.bind(null,e))}e.callbackPriority=t,e.callbackNode=a}}function Gh(e,t){if(sn=-1,rn=0,Y&6)throw Error(A(327));var a=e.callbackNode;if(Hi()&&e.callbackNode!==a)return null;var i=_n(e,e===$e?Ge:0);if(i===0)return null;if(i&30||i&e.expiredLanes||t)t=Nn(e,i);else{t=i;var s=Y;Y|=2;var r=Qh();($e!==e||Ge!==t)&&(na=null,es=Pe()+500,li(e,t));do try{Uv();break}catch(o){Xh(e,o)}while(1);wd(),jn.current=r,Y=s,Ee!==null?t=0:($e=null,Ge=0,t=Be)}if(t!==0){if(t===2&&(s=tu(e),s!==0&&(i=s,t=Pu(e,s))),t===1)throw a=or,li(e,0),Ca(e,i),ft(e,Pe()),a;if(t===6)Ca(e,i);else{if(s=e.current.alternate,!(i&30)&&!$v(s)&&(t=Nn(e,i),t===2&&(r=tu(e),r!==0&&(i=r,t=Pu(e,r))),t===1))throw a=or,li(e,0),Ca(e,i),ft(e,Pe()),a;switch(e.finishedWork=s,e.finishedLanes=i,t){case 0:case 1:throw Error(A(345));case 2:Ja(e,ut,na);break;case 3:if(Ca(e,i),(i&130023424)===i&&(t=Nd+500-Pe(),10<t)){if(_n(e,0)!==0)break;if(s=e.suspendedLanes,(s&i)!==i){st(),e.pingedLanes|=e.suspendedLanes&s;break}e.timeoutHandle=uu(Ja.bind(null,e,ut,na),t);break}Ja(e,ut,na);break;case 4:if(Ca(e,i),(i&4194240)===i)break;for(t=e.eventTimes,s=-1;0<i;){var n=31-$t(i);r=1<<n,n=t[n],n>s&&(s=n),i&=~r}if(i=s,i=Pe()-i,i=(120>i?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*zv(i/1960))-i,10<i){e.timeoutHandle=uu(Ja.bind(null,e,ut,na),i);break}Ja(e,ut,na);break;case 5:Ja(e,ut,na);break;default:throw Error(A(329))}}}return ft(e,Pe()),e.callbackNode===a?Gh.bind(null,e):null}function Pu(e,t){var a=Ms;return e.current.memoizedState.isDehydrated&&(li(e,t).flags|=256),e=Nn(e,t),e!==2&&(t=ut,ut=a,t!==null&&Au(t)),e}function Au(e){ut===null?ut=e:ut.push.apply(ut,e)}function $v(e){for(var t=e;;){if(t.flags&16384){var a=t.updateQueue;if(a!==null&&(a=a.stores,a!==null))for(var i=0;i<a.length;i++){var s=a[i],r=s.getSnapshot;s=s.value;try{if(!Ut(r(),s))return!1}catch{return!1}}}if(a=t.child,t.subtreeFlags&16384&&a!==null)a.return=t,t=a;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Ca(e,t){for(t&=~Fd,t&=~ao,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var a=31-$t(t),i=1<<a;e[a]=-1,t&=~i}}function Sp(e){if(Y&6)throw Error(A(327));Hi();var t=_n(e,0);if(!(t&1))return ft(e,Pe()),null;var a=Nn(e,t);if(e.tag!==0&&a===2){var i=tu(e);i!==0&&(t=i,a=Pu(e,i))}if(a===1)throw a=or,li(e,0),Ca(e,t),ft(e,Pe()),a;if(a===6)throw Error(A(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ja(e,ut,na),ft(e,Pe()),null}function Ld(e,t){var a=Y;Y|=1;try{return e(t)}finally{Y=a,Y===0&&(es=Pe()+500,Yn&&Va())}}function mi(e){Pa!==null&&Pa.tag===0&&!(Y&6)&&Hi();var t=Y;Y|=1;var a=Pt.transition,i=re;try{if(Pt.transition=null,re=1,e)return e()}finally{re=i,Pt.transition=a,Y=t,!(Y&6)&&Va()}}function Od(){gt=Mi.current,he(Mi)}function li(e,t){e.finishedWork=null,e.finishedLanes=0;var a=e.timeoutHandle;if(a!==-1&&(e.timeoutHandle=-1,_v(a)),Ee!==null)for(a=Ee.return;a!==null;){var i=a;switch(_d(i),i.tag){case 1:i=i.type.childContextTypes,i!=null&&qn();break;case 3:Yi(),he(ct),he(at),Cd();break;case 5:kd(i);break;case 4:Yi();break;case 13:he(we);break;case 19:he(we);break;case 10:Td(i.type._context);break;case 22:case 23:Od()}a=a.return}if($e=e,Ee=e=Oa(e.current,null),Ge=gt=t,Be=0,or=null,Fd=ao=fi=0,ut=Ms=null,ii!==null){for(t=0;t<ii.length;t++)if(a=ii[t],i=a.interleaved,i!==null){a.interleaved=null;var s=i.next,r=a.pending;if(r!==null){var n=r.next;r.next=s,i.next=n}a.pending=i}ii=null}return e}function Xh(e,t){do{var a=Ee;try{if(wd(),en.current=Rn,In){for(var i=Te.memoizedState;i!==null;){var s=i.queue;s!==null&&(s.pending=null),i=i.next}In=!1}if(pi=0,ze=Me=Te=null,Ls=!1,sr=0,Ed.current=null,a===null||a.return===null){Be=1,or=t,Ee=null;break}e:{var r=e,n=a.return,o=a,l=t;if(t=Ge,o.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var u=l,f=o,y=f.tag;if(!(f.mode&1)&&(y===0||y===11||y===15)){var _=f.alternate;_?(f.updateQueue=_.updateQueue,f.memoizedState=_.memoizedState,f.lanes=_.lanes):(f.updateQueue=null,f.memoizedState=null)}var d=hp(n);if(d!==null){d.flags&=-257,gp(d,n,o,r,t),d.mode&1&&mp(r,u,t),t=d,l=u;var h=t.updateQueue;if(h===null){var c=new Set;c.add(l),t.updateQueue=c}else h.add(l);break e}else{if(!(t&1)){mp(r,u,t),Md();break e}l=Error(A(426))}}else if(ve&&o.mode&1){var x=hp(n);if(x!==null){!(x.flags&65536)&&(x.flags|=256),gp(x,n,o,r,t),vd(Zi(l,o));break e}}r=l=Zi(l,o),Be!==4&&(Be=2),Ms===null?Ms=[r]:Ms.push(r),r=n;do{switch(r.tag){case 3:r.flags|=65536,t&=-t,r.lanes|=t;var m=Rh(r,l,t);op(r,m);break e;case 1:o=l;var p=r.type,g=r.stateNode;if(!(r.flags&128)&&(typeof p.getDerivedStateFromError=="function"||g!==null&&typeof g.componentDidCatch=="function"&&(Na===null||!Na.has(g)))){r.flags|=65536,t&=-t,r.lanes|=t;var w=jh(r,o,t);op(r,w);break e}}r=r.return}while(r!==null)}Yh(a)}catch(q){t=q,Ee===a&&a!==null&&(Ee=a=a.return);continue}break}while(1)}function Qh(){var e=jn.current;return jn.current=Rn,e===null?Rn:e}function Md(){(Be===0||Be===3||Be===2)&&(Be=4),$e===null||!(fi&268435455)&&!(ao&268435455)||Ca($e,Ge)}function Nn(e,t){var a=Y;Y|=2;var i=Qh();($e!==e||Ge!==t)&&(na=null,li(e,t));do try{Wv();break}catch(s){Xh(e,s)}while(1);if(wd(),Y=a,jn.current=i,Ee!==null)throw Error(A(261));return $e=null,Ge=0,Be}function Wv(){for(;Ee!==null;)Jh(Ee)}function Uv(){for(;Ee!==null&&!h_();)Jh(Ee)}function Jh(e){var t=eg(e.alternate,e,gt);e.memoizedProps=e.pendingProps,t===null?Yh(e):Ee=t,Ed.current=null}function Yh(e){var t=e;do{var a=t.alternate;if(e=t.return,t.flags&32768){if(a=Lv(a,t),a!==null){a.flags&=32767,Ee=a;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{Be=6,Ee=null;return}}else if(a=Nv(a,t,gt),a!==null){Ee=a;return}if(t=t.sibling,t!==null){Ee=t;return}Ee=t=e}while(t!==null);Be===0&&(Be=5)}function Ja(e,t,a){var i=re,s=Pt.transition;try{Pt.transition=null,re=1,Hv(e,t,a,i)}finally{Pt.transition=s,re=i}return null}function Hv(e,t,a,i){do Hi();while(Pa!==null);if(Y&6)throw Error(A(327));a=e.finishedWork;var s=e.finishedLanes;if(a===null)return null;if(e.finishedWork=null,e.finishedLanes=0,a===e.current)throw Error(A(177));e.callbackNode=null,e.callbackPriority=0;var r=a.lanes|a.childLanes;if(D_(e,r),e===$e&&(Ee=$e=null,Ge=0),!(a.subtreeFlags&2064)&&!(a.flags&2064)||$r||($r=!0,tg(yn,function(){return Hi(),null})),r=(a.flags&15990)!==0,a.subtreeFlags&15990||r){r=Pt.transition,Pt.transition=null;var n=re;re=1;var o=Y;Y|=4,Ed.current=null,Mv(e,a),Vh(a,e),cv(ou),vn=!!nu,ou=nu=null,e.current=a,Bv(a),g_(),Y=o,re=n,Pt.transition=r}else e.current=a;if($r&&($r=!1,Pa=e,Fn=s),r=e.pendingLanes,r===0&&(Na=null),v_(a.stateNode),ft(e,Pe()),t!==null)for(i=e.onRecoverableError,a=0;a<t.length;a++)s=t[a],i(s.value,{componentStack:s.stack,digest:s.digest});if(En)throw En=!1,e=Cu,Cu=null,e;return Fn&1&&e.tag!==0&&Hi(),r=e.pendingLanes,r&1?e===Su?Bs++:(Bs=0,Su=e):Bs=0,Va(),null}function Hi(){if(Pa!==null){var e=Im(Fn),t=Pt.transition,a=re;try{if(Pt.transition=null,re=16>e?16:e,Pa===null)var i=!1;else{if(e=Pa,Pa=null,Fn=0,Y&6)throw Error(A(331));var s=Y;for(Y|=4,L=e.current;L!==null;){var r=L,n=r.child;if(L.flags&16){var o=r.deletions;if(o!==null){for(var l=0;l<o.length;l++){var u=o[l];for(L=u;L!==null;){var f=L;switch(f.tag){case 0:case 11:case 15:Os(8,f,r)}var y=f.child;if(y!==null)y.return=f,L=y;else for(;L!==null;){f=L;var _=f.sibling,d=f.return;if(Wh(f),f===u){L=null;break}if(_!==null){_.return=d,L=_;break}L=d}}}var h=r.alternate;if(h!==null){var c=h.child;if(c!==null){h.child=null;do{var x=c.sibling;c.sibling=null,c=x}while(c!==null)}}L=r}}if(r.subtreeFlags&2064&&n!==null)n.return=r,L=n;else e:for(;L!==null;){if(r=L,r.flags&2048)switch(r.tag){case 0:case 11:case 15:Os(9,r,r.return)}var m=r.sibling;if(m!==null){m.return=r.return,L=m;break e}L=r.return}}var p=e.current;for(L=p;L!==null;){n=L;var g=n.child;if(n.subtreeFlags&2064&&g!==null)g.return=n,L=g;else e:for(n=p;L!==null;){if(o=L,o.flags&2048)try{switch(o.tag){case 0:case 11:case 15:to(9,o)}}catch(q){Se(o,o.return,q)}if(o===n){L=null;break e}var w=o.sibling;if(w!==null){w.return=o.return,L=w;break e}L=o.return}}if(Y=s,Va(),Jt&&typeof Jt.onPostCommitFiberRoot=="function")try{Jt.onPostCommitFiberRoot(Kn,e)}catch{}i=!0}return i}finally{re=a,Pt.transition=t}}return!1}function Pp(e,t,a){t=Zi(a,t),t=Rh(e,t,1),e=Fa(e,t,1),t=st(),e!==null&&(hr(e,1,t),ft(e,t))}function Se(e,t,a){if(e.tag===3)Pp(e,e,a);else for(;t!==null;){if(t.tag===3){Pp(t,e,a);break}else if(t.tag===1){var i=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof i.componentDidCatch=="function"&&(Na===null||!Na.has(i))){e=Zi(a,e),e=jh(t,e,1),t=Fa(t,e,1),e=st(),t!==null&&(hr(t,1,e),ft(t,e));break}}t=t.return}}function Vv(e,t,a){var i=e.pingCache;i!==null&&i.delete(t),t=st(),e.pingedLanes|=e.suspendedLanes&a,$e===e&&(Ge&a)===a&&(Be===4||Be===3&&(Ge&130023424)===Ge&&500>Pe()-Nd?li(e,0):Fd|=a),ft(e,t)}function Zh(e,t){t===0&&(e.mode&1?(t=Rr,Rr<<=1,!(Rr&130023424)&&(Rr=4194304)):t=1);var a=st();e=fa(e,t),e!==null&&(hr(e,t,a),ft(e,a))}function Kv(e){var t=e.memoizedState,a=0;t!==null&&(a=t.retryLane),Zh(e,a)}function Gv(e,t){var a=0;switch(e.tag){case 13:var i=e.stateNode,s=e.memoizedState;s!==null&&(a=s.retryLane);break;case 19:i=e.stateNode;break;default:throw Error(A(314))}i!==null&&i.delete(t),Zh(e,a)}var eg;eg=function(e,t,a){if(e!==null)if(e.memoizedProps!==t.pendingProps||ct.current)dt=!0;else{if(!(e.lanes&a)&&!(t.flags&128))return dt=!1,Fv(e,t,a);dt=!!(e.flags&131072)}else dt=!1,ve&&t.flags&1048576&&ih(t,kn,t.index);switch(t.lanes=0,t.tag){case 2:var i=t.type;an(e,t),e=t.pendingProps;var s=Xi(t,at.current);Ui(t,a),s=Pd(null,t,i,e,s,a);var r=Ad();return t.flags|=1,typeof s=="object"&&s!==null&&typeof s.render=="function"&&s.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,pt(i)?(r=!0,xn(t)):r=!1,t.memoizedState=s.state!==null&&s.state!==void 0?s.state:null,xd(t),s.updater=Zn,t.stateNode=s,s._reactInternals=t,gu(t,i,e,a),t=vu(null,t,i,!0,r,a)):(t.tag=0,ve&&r&&yd(t),it(null,t,s,a),t=t.child),t;case 16:i=t.elementType;e:{switch(an(e,t),e=t.pendingProps,s=i._init,i=s(i._payload),t.type=i,s=t.tag=Qv(i),e=Ot(i,e),s){case 0:t=_u(null,t,i,e,a);break e;case 1:t=vp(null,t,i,e,a);break e;case 11:t=yp(null,t,i,e,a);break e;case 14:t=_p(null,t,i,Ot(i.type,e),a);break e}throw Error(A(306,i,""))}return t;case 0:return i=t.type,s=t.pendingProps,s=t.elementType===i?s:Ot(i,s),_u(e,t,i,s,a);case 1:return i=t.type,s=t.pendingProps,s=t.elementType===i?s:Ot(i,s),vp(e,t,i,s,a);case 3:e:{if(Lh(t),e===null)throw Error(A(387));i=t.pendingProps,r=t.memoizedState,s=r.element,oh(e,t),Pn(t,i,null,a);var n=t.memoizedState;if(i=n.element,r.isDehydrated)if(r={element:i,isDehydrated:!1,cache:n.cache,pendingSuspenseBoundaries:n.pendingSuspenseBoundaries,transitions:n.transitions},t.updateQueue.baseState=r,t.memoizedState=r,t.flags&256){s=Zi(Error(A(423)),t),t=bp(e,t,i,a,s);break e}else if(i!==s){s=Zi(Error(A(424)),t),t=bp(e,t,i,a,s);break e}else for(_t=Ea(t.stateNode.containerInfo.firstChild),vt=t,ve=!0,Bt=null,a=ch(t,null,i,a),t.child=a;a;)a.flags=a.flags&-3|4096,a=a.sibling;else{if(Qi(),i===s){t=ma(e,t,a);break e}it(e,t,i,a)}t=t.child}return t;case 5:return ph(t),e===null&&fu(t),i=t.type,s=t.pendingProps,r=e!==null?e.memoizedProps:null,n=s.children,lu(i,s)?n=null:r!==null&&lu(i,r)&&(t.flags|=32),Nh(e,t),it(e,t,n,a),t.child;case 6:return e===null&&fu(t),null;case 13:return Oh(e,t,a);case 4:return Dd(t,t.stateNode.containerInfo),i=t.pendingProps,e===null?t.child=Ji(t,null,i,a):it(e,t,i,a),t.child;case 11:return i=t.type,s=t.pendingProps,s=t.elementType===i?s:Ot(i,s),yp(e,t,i,s,a);case 7:return it(e,t,t.pendingProps,a),t.child;case 8:return it(e,t,t.pendingProps.children,a),t.child;case 12:return it(e,t,t.pendingProps.children,a),t.child;case 10:e:{if(i=t.type._context,s=t.pendingProps,r=t.memoizedProps,n=s.value,fe(Cn,i._currentValue),i._currentValue=n,r!==null)if(Ut(r.value,n)){if(r.children===s.children&&!ct.current){t=ma(e,t,a);break e}}else for(r=t.child,r!==null&&(r.return=t);r!==null;){var o=r.dependencies;if(o!==null){n=r.child;for(var l=o.firstContext;l!==null;){if(l.context===i){if(r.tag===1){l=da(-1,a&-a),l.tag=2;var u=r.updateQueue;if(u!==null){u=u.shared;var f=u.pending;f===null?l.next=l:(l.next=f.next,f.next=l),u.pending=l}}r.lanes|=a,l=r.alternate,l!==null&&(l.lanes|=a),mu(r.return,a,t),o.lanes|=a;break}l=l.next}}else if(r.tag===10)n=r.type===t.type?null:r.child;else if(r.tag===18){if(n=r.return,n===null)throw Error(A(341));n.lanes|=a,o=n.alternate,o!==null&&(o.lanes|=a),mu(n,a,t),n=r.sibling}else n=r.child;if(n!==null)n.return=r;else for(n=r;n!==null;){if(n===t){n=null;break}if(r=n.sibling,r!==null){r.return=n.return,n=r;break}n=n.return}r=n}it(e,t,s.children,a),t=t.child}return t;case 9:return s=t.type,i=t.pendingProps.children,Ui(t,a),s=It(s),i=i(s),t.flags|=1,it(e,t,i,a),t.child;case 14:return i=t.type,s=Ot(i,t.pendingProps),s=Ot(i.type,s),_p(e,t,i,s,a);case 15:return Eh(e,t,t.type,t.pendingProps,a);case 17:return i=t.type,s=t.pendingProps,s=t.elementType===i?s:Ot(i,s),an(e,t),t.tag=1,pt(i)?(e=!0,xn(t)):e=!1,Ui(t,a),uh(t,i,s),gu(t,i,s,a),vu(null,t,i,!0,e,a);case 19:return Mh(e,t,a);case 22:return Fh(e,t,a)}throw Error(A(156,t.tag))};function tg(e,t){return Cm(e,t)}function Xv(e,t,a,i){this.tag=e,this.key=a,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function St(e,t,a,i){return new Xv(e,t,a,i)}function Bd(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Qv(e){if(typeof e=="function")return Bd(e)?1:0;if(e!=null){if(e=e.$$typeof,e===rd)return 11;if(e===nd)return 14}return 2}function Oa(e,t){var a=e.alternate;return a===null?(a=St(e.tag,t,e.key,e.mode),a.elementType=e.elementType,a.type=e.type,a.stateNode=e.stateNode,a.alternate=e,e.alternate=a):(a.pendingProps=t,a.type=e.type,a.flags=0,a.subtreeFlags=0,a.deletions=null),a.flags=e.flags&14680064,a.childLanes=e.childLanes,a.lanes=e.lanes,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,t=e.dependencies,a.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},a.sibling=e.sibling,a.index=e.index,a.ref=e.ref,a}function nn(e,t,a,i,s,r){var n=2;if(i=e,typeof e=="function")Bd(e)&&(n=1);else if(typeof e=="string")n=5;else e:switch(e){case Pi:return ui(a.children,s,r,t);case sd:n=8,s|=8;break;case Bl:return e=St(12,a,t,s|2),e.elementType=Bl,e.lanes=r,e;case zl:return e=St(13,a,t,s),e.elementType=zl,e.lanes=r,e;case $l:return e=St(19,a,t,s),e.elementType=$l,e.lanes=r,e;case dm:return io(a,s,r,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case lm:n=10;break e;case um:n=9;break e;case rd:n=11;break e;case nd:n=14;break e;case xa:n=16,i=null;break e}throw Error(A(130,e==null?e:typeof e,""))}return t=St(n,a,t,s),t.elementType=e,t.type=i,t.lanes=r,t}function ui(e,t,a,i){return e=St(7,e,i,t),e.lanes=a,e}function io(e,t,a,i){return e=St(22,e,i,t),e.elementType=dm,e.lanes=a,e.stateNode={isHidden:!1},e}function ql(e,t,a){return e=St(6,e,null,t),e.lanes=a,e}function xl(e,t,a){return t=St(4,e.children!==null?e.children:[],e.key,t),t.lanes=a,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Jv(e,t,a,i,s){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=sl(0),this.expirationTimes=sl(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=sl(0),this.identifierPrefix=i,this.onRecoverableError=s,this.mutableSourceEagerHydrationData=null}function zd(e,t,a,i,s,r,n,o,l){return e=new Jv(e,t,a,o,l),t===1?(t=1,r===!0&&(t|=8)):t=0,r=St(3,null,null,t),e.current=r,r.stateNode=e,r.memoizedState={element:i,isDehydrated:a,cache:null,transitions:null,pendingSuspenseBoundaries:null},xd(r),e}function Yv(e,t,a){var i=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Si,key:i==null?null:""+i,children:e,containerInfo:t,implementation:a}}function ag(e){if(!e)return za;e=e._reactInternals;e:{if(yi(e)!==e||e.tag!==1)throw Error(A(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(pt(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(A(171))}if(e.tag===1){var a=e.type;if(pt(a))return th(e,a,t)}return t}function ig(e,t,a,i,s,r,n,o,l){return e=zd(a,i,!0,e,s,r,n,o,l),e.context=ag(null),a=e.current,i=st(),s=La(a),r=da(i,s),r.callback=t??null,Fa(a,r,s),e.current.lanes=s,hr(e,s,i),ft(e,i),e}function so(e,t,a,i){var s=t.current,r=st(),n=La(s);return a=ag(a),t.context===null?t.context=a:t.pendingContext=a,t=da(r,n),t.payload={element:e},i=i===void 0?null:i,i!==null&&(t.callback=i),e=Fa(s,t,n),e!==null&&(Wt(e,s,n,r),Zr(e,s,n)),n}function Ln(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Ap(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var a=e.retryLane;e.retryLane=a!==0&&a<t?a:t}}function $d(e,t){Ap(e,t),(e=e.alternate)&&Ap(e,t)}function Zv(){return null}var sg=typeof reportError=="function"?reportError:function(e){console.error(e)};function Wd(e){this._internalRoot=e}ro.prototype.render=Wd.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(A(409));so(e,t,null,null)};ro.prototype.unmount=Wd.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;mi(function(){so(null,e,null,null)}),t[pa]=null}};function ro(e){this._internalRoot=e}ro.prototype.unstable_scheduleHydration=function(e){if(e){var t=Em();e={blockedOn:null,target:e,priority:t};for(var a=0;a<ka.length&&t!==0&&t<ka[a].priority;a++);ka.splice(a,0,e),a===0&&Nm(e)}};function Ud(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function no(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function Ip(){}function eb(e,t,a,i,s){if(s){if(typeof i=="function"){var r=i;i=function(){var u=Ln(n);r.call(u)}}var n=ig(t,i,e,0,null,!1,!1,"",Ip);return e._reactRootContainer=n,e[pa]=n.current,Zs(e.nodeType===8?e.parentNode:e),mi(),n}for(;s=e.lastChild;)e.removeChild(s);if(typeof i=="function"){var o=i;i=function(){var u=Ln(l);o.call(u)}}var l=zd(e,0,!1,null,null,!1,!1,"",Ip);return e._reactRootContainer=l,e[pa]=l.current,Zs(e.nodeType===8?e.parentNode:e),mi(function(){so(t,l,a,i)}),l}function oo(e,t,a,i,s){var r=a._reactRootContainer;if(r){var n=r;if(typeof s=="function"){var o=s;s=function(){var l=Ln(n);o.call(l)}}so(t,n,e,s)}else n=eb(a,t,e,s,i);return Ln(n)}Rm=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var a=Ps(t.pendingLanes);a!==0&&(ud(t,a|1),ft(t,Pe()),!(Y&6)&&(es=Pe()+500,Va()))}break;case 13:mi(function(){var i=fa(e,1);if(i!==null){var s=st();Wt(i,e,1,s)}}),$d(e,1)}};dd=function(e){if(e.tag===13){var t=fa(e,134217728);if(t!==null){var a=st();Wt(t,e,134217728,a)}$d(e,134217728)}};jm=function(e){if(e.tag===13){var t=La(e),a=fa(e,t);if(a!==null){var i=st();Wt(a,e,t,i)}$d(e,t)}};Em=function(){return re};Fm=function(e,t){var a=re;try{return re=e,t()}finally{re=a}};Yl=function(e,t,a){switch(t){case"input":if(Hl(e,a),t=a.name,a.type==="radio"&&t!=null){for(a=e;a.parentNode;)a=a.parentNode;for(a=a.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<a.length;t++){var i=a[t];if(i!==e&&i.form===e.form){var s=Jn(i);if(!s)throw Error(A(90));pm(i),Hl(i,s)}}}break;case"textarea":mm(e,a);break;case"select":t=a.value,t!=null&&Bi(e,!!a.multiple,t,!1)}};wm=Ld;Tm=mi;var tb={usingClientEntryPoint:!1,Events:[yr,ji,Jn,vm,bm,Ld]},_s={findFiberByHostInstance:ai,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},ab={bundleType:_s.bundleType,version:_s.version,rendererPackageName:_s.rendererPackageName,rendererConfig:_s.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ga.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Dm(e),e===null?null:e.stateNode},findFiberByHostInstance:_s.findFiberByHostInstance||Zv,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Wr=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Wr.isDisabled&&Wr.supportsFiber)try{Kn=Wr.inject(ab),Jt=Wr}catch{}}Tt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tb;Tt.createPortal=function(e,t){var a=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Ud(t))throw Error(A(200));return Yv(e,t,null,a)};Tt.createRoot=function(e,t){if(!Ud(e))throw Error(A(299));var a=!1,i="",s=sg;return t!=null&&(t.unstable_strictMode===!0&&(a=!0),t.identifierPrefix!==void 0&&(i=t.identifierPrefix),t.onRecoverableError!==void 0&&(s=t.onRecoverableError)),t=zd(e,1,!1,null,null,a,!1,i,s),e[pa]=t.current,Zs(e.nodeType===8?e.parentNode:e),new Wd(t)};Tt.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(A(188)):(e=Object.keys(e).join(","),Error(A(268,e)));return e=Dm(t),e=e===null?null:e.stateNode,e};Tt.flushSync=function(e){return mi(e)};Tt.hydrate=function(e,t,a){if(!no(t))throw Error(A(200));return oo(null,e,t,!0,a)};Tt.hydrateRoot=function(e,t,a){if(!Ud(e))throw Error(A(405));var i=a!=null&&a.hydratedSources||null,s=!1,r="",n=sg;if(a!=null&&(a.unstable_strictMode===!0&&(s=!0),a.identifierPrefix!==void 0&&(r=a.identifierPrefix),a.onRecoverableError!==void 0&&(n=a.onRecoverableError)),t=ig(t,null,e,1,a??null,s,!1,r,n),e[pa]=t.current,Zs(e),i)for(e=0;e<i.length;e++)a=i[e],s=a._getVersion,s=s(a._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[a,s]:t.mutableSourceEagerHydrationData.push(a,s);return new ro(t)};Tt.render=function(e,t,a){if(!no(t))throw Error(A(200));return oo(null,e,t,!1,a)};Tt.unmountComponentAtNode=function(e){if(!no(e))throw Error(A(40));return e._reactRootContainer?(mi(function(){oo(null,null,e,!1,function(){e._reactRootContainer=null,e[pa]=null})}),!0):!1};Tt.unstable_batchedUpdates=Ld;Tt.unstable_renderSubtreeIntoContainer=function(e,t,a,i){if(!no(a))throw Error(A(200));if(e==null||e._reactInternals===void 0)throw Error(A(38));return oo(e,t,a,!1,i)};Tt.version="18.2.0-next-9e3b772b8-20220608";function rg(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(rg)}catch(e){console.error(e)}}rg(),im.exports=Tt;var lo=im.exports;const Ur=Vf(lo);var Rp=lo;Ol.createRoot=Rp.createRoot,Ol.hydrateRoot=Rp.hydrateRoot;/**
 * @remix-run/router v1.8.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function lr(){return lr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},lr.apply(this,arguments)}var Aa;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(Aa||(Aa={}));const jp="popstate";function ib(e){e===void 0&&(e={});function t(i,s){let{pathname:r,search:n,hash:o}=i.location;return Iu("",{pathname:r,search:n,hash:o},s.state&&s.state.usr||null,s.state&&s.state.key||"default")}function a(i,s){return typeof s=="string"?s:On(s)}return rb(t,a,null,e)}function Fe(e,t){if(e===!1||e===null||typeof e>"u")throw new Error(t)}function Hd(e,t){if(!e){typeof console<"u"&&console.warn(t);try{throw new Error(t)}catch{}}}function sb(){return Math.random().toString(36).substr(2,8)}function Ep(e,t){return{usr:e.state,key:e.key,idx:t}}function Iu(e,t,a,i){return a===void 0&&(a=null),lr({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof t=="string"?ls(t):t,{state:a,key:t&&t.key||i||sb()})}function On(e){let{pathname:t="/",search:a="",hash:i=""}=e;return a&&a!=="?"&&(t+=a.charAt(0)==="?"?a:"?"+a),i&&i!=="#"&&(t+=i.charAt(0)==="#"?i:"#"+i),t}function ls(e){let t={};if(e){let a=e.indexOf("#");a>=0&&(t.hash=e.substr(a),e=e.substr(0,a));let i=e.indexOf("?");i>=0&&(t.search=e.substr(i),e=e.substr(0,i)),e&&(t.pathname=e)}return t}function rb(e,t,a,i){i===void 0&&(i={});let{window:s=document.defaultView,v5Compat:r=!1}=i,n=s.history,o=Aa.Pop,l=null,u=f();u==null&&(u=0,n.replaceState(lr({},n.state,{idx:u}),""));function f(){return(n.state||{idx:null}).idx}function y(){o=Aa.Pop;let x=f(),m=x==null?null:x-u;u=x,l&&l({action:o,location:c.location,delta:m})}function _(x,m){o=Aa.Push;let p=Iu(c.location,x,m);a&&a(p,x),u=f()+1;let g=Ep(p,u),w=c.createHref(p);try{n.pushState(g,"",w)}catch(q){if(q instanceof DOMException&&q.name==="DataCloneError")throw q;s.location.assign(w)}r&&l&&l({action:o,location:c.location,delta:1})}function d(x,m){o=Aa.Replace;let p=Iu(c.location,x,m);a&&a(p,x),u=f();let g=Ep(p,u),w=c.createHref(p);n.replaceState(g,"",w),r&&l&&l({action:o,location:c.location,delta:0})}function h(x){let m=s.location.origin!=="null"?s.location.origin:s.location.href,p=typeof x=="string"?x:On(x);return Fe(m,"No window.location.(origin|href) available to create URL for href: "+p),new URL(p,m)}let c={get action(){return o},get location(){return e(s,n)},listen(x){if(l)throw new Error("A history only accepts one active listener");return s.addEventListener(jp,y),l=x,()=>{s.removeEventListener(jp,y),l=null}},createHref(x){return t(s,x)},createURL:h,encodeLocation(x){let m=h(x);return{pathname:m.pathname,search:m.search,hash:m.hash}},push:_,replace:d,go(x){return n.go(x)}};return c}var Fp;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(Fp||(Fp={}));function nb(e,t,a){a===void 0&&(a="/");let i=typeof t=="string"?ls(t):t,s=Vd(i.pathname||"/",a);if(s==null)return null;let r=ng(e);ob(r);let n=null;for(let o=0;n==null&&o<r.length;++o)n=gb(r[o],vb(s));return n}function ng(e,t,a,i){t===void 0&&(t=[]),a===void 0&&(a=[]),i===void 0&&(i="");let s=(r,n,o)=>{let l={relativePath:o===void 0?r.path||"":o,caseSensitive:r.caseSensitive===!0,childrenIndex:n,route:r};l.relativePath.startsWith("/")&&(Fe(l.relativePath.startsWith(i),'Absolute route path "'+l.relativePath+'" nested under path '+('"'+i+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),l.relativePath=l.relativePath.slice(i.length));let u=Ma([i,l.relativePath]),f=a.concat(l);r.children&&r.children.length>0&&(Fe(r.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+u+'".')),ng(r.children,t,f,u)),!(r.path==null&&!r.index)&&t.push({path:u,score:mb(u,r.index),routesMeta:f})};return e.forEach((r,n)=>{var o;if(r.path===""||!((o=r.path)!=null&&o.includes("?")))s(r,n);else for(let l of og(r.path))s(r,n,l)}),t}function og(e){let t=e.split("/");if(t.length===0)return[];let[a,...i]=t,s=a.endsWith("?"),r=a.replace(/\?$/,"");if(i.length===0)return s?[r,""]:[r];let n=og(i.join("/")),o=[];return o.push(...n.map(l=>l===""?r:[r,l].join("/"))),s&&o.push(...n),o.map(l=>e.startsWith("/")&&l===""?"/":l)}function ob(e){e.sort((t,a)=>t.score!==a.score?a.score-t.score:hb(t.routesMeta.map(i=>i.childrenIndex),a.routesMeta.map(i=>i.childrenIndex)))}const lb=/^:\w+$/,ub=3,db=2,cb=1,pb=10,fb=-2,Np=e=>e==="*";function mb(e,t){let a=e.split("/"),i=a.length;return a.some(Np)&&(i+=fb),t&&(i+=db),a.filter(s=>!Np(s)).reduce((s,r)=>s+(lb.test(r)?ub:r===""?cb:pb),i)}function hb(e,t){return e.length===t.length&&e.slice(0,-1).every((i,s)=>i===t[s])?e[e.length-1]-t[t.length-1]:0}function gb(e,t){let{routesMeta:a}=e,i={},s="/",r=[];for(let n=0;n<a.length;++n){let o=a[n],l=n===a.length-1,u=s==="/"?t:t.slice(s.length)||"/",f=yb({path:o.relativePath,caseSensitive:o.caseSensitive,end:l},u);if(!f)return null;Object.assign(i,f.params);let y=o.route;r.push({params:i,pathname:Ma([s,f.pathname]),pathnameBase:qb(Ma([s,f.pathnameBase])),route:y}),f.pathnameBase!=="/"&&(s=Ma([s,f.pathnameBase]))}return r}function yb(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[a,i]=_b(e.path,e.caseSensitive,e.end),s=t.match(a);if(!s)return null;let r=s[0],n=r.replace(/(.)\/+$/,"$1"),o=s.slice(1);return{params:i.reduce((u,f,y)=>{if(f==="*"){let _=o[y]||"";n=r.slice(0,r.length-_.length).replace(/(.)\/+$/,"$1")}return u[f]=bb(o[y]||"",f),u},{}),pathname:r,pathnameBase:n,pattern:e}}function _b(e,t,a){t===void 0&&(t=!1),a===void 0&&(a=!0),Hd(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let i=[],s="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,(n,o)=>(i.push(o),"/([^\\/]+)"));return e.endsWith("*")?(i.push("*"),s+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):a?s+="\\/*$":e!==""&&e!=="/"&&(s+="(?:(?=\\/|$))"),[new RegExp(s,t?void 0:"i"),i]}function vb(e){try{return decodeURI(e)}catch(t){return Hd(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+t+").")),e}}function bb(e,t){try{return decodeURIComponent(e)}catch(a){return Hd(!1,'The value for the URL param "'+t+'" will not be decoded because'+(' the string "'+e+'" is a malformed URL segment. This is probably')+(" due to a bad percent encoding ("+a+").")),e}}function Vd(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let a=t.endsWith("/")?t.length-1:t.length,i=e.charAt(a);return i&&i!=="/"?null:e.slice(a)||"/"}function wb(e,t){t===void 0&&(t="/");let{pathname:a,search:i="",hash:s=""}=typeof e=="string"?ls(e):e;return{pathname:a?a.startsWith("/")?a:Tb(a,t):t,search:xb(i),hash:Db(s)}}function Tb(e,t){let a=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(s=>{s===".."?a.length>1&&a.pop():s!=="."&&a.push(s)}),a.length>1?a.join("/"):"/"}function Dl(e,t,a,i){return"Cannot include a '"+e+"' character in a manually specified "+("`to."+t+"` field ["+JSON.stringify(i)+"].  Please separate it out to the ")+("`to."+a+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function lg(e){return e.filter((t,a)=>a===0||t.route.path&&t.route.path.length>0)}function ug(e,t,a,i){i===void 0&&(i=!1);let s;typeof e=="string"?s=ls(e):(s=lr({},e),Fe(!s.pathname||!s.pathname.includes("?"),Dl("?","pathname","search",s)),Fe(!s.pathname||!s.pathname.includes("#"),Dl("#","pathname","hash",s)),Fe(!s.search||!s.search.includes("#"),Dl("#","search","hash",s)));let r=e===""||s.pathname==="",n=r?"/":s.pathname,o;if(i||n==null)o=a;else{let y=t.length-1;if(n.startsWith("..")){let _=n.split("/");for(;_[0]==="..";)_.shift(),y-=1;s.pathname=_.join("/")}o=y>=0?t[y]:"/"}let l=wb(s,o),u=n&&n!=="/"&&n.endsWith("/"),f=(r||n===".")&&a.endsWith("/");return!l.pathname.endsWith("/")&&(u||f)&&(l.pathname+="/"),l}const Ma=e=>e.join("/").replace(/\/\/+/g,"/"),qb=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),xb=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,Db=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;function kb(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const dg=["post","put","patch","delete"];new Set(dg);const Cb=["get",...dg];new Set(Cb);/**
 * React Router v6.15.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Mn(){return Mn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},Mn.apply(this,arguments)}const Kd=b.createContext(null),Sb=b.createContext(null),us=b.createContext(null),uo=b.createContext(null),Ka=b.createContext({outlet:null,matches:[],isDataRoute:!1}),cg=b.createContext(null);function Pb(e,t){let{relative:a}=t===void 0?{}:t;vr()||Fe(!1);let{basename:i,navigator:s}=b.useContext(us),{hash:r,pathname:n,search:o}=fg(e,{relative:a}),l=n;return i!=="/"&&(l=n==="/"?i:Ma([i,n])),s.createHref({pathname:l,search:o,hash:r})}function vr(){return b.useContext(uo)!=null}function co(){return vr()||Fe(!1),b.useContext(uo).location}function pg(e){b.useContext(us).static||b.useLayoutEffect(e)}function Ab(){let{isDataRoute:e}=b.useContext(Ka);return e?Ub():Ib()}function Ib(){vr()||Fe(!1);let e=b.useContext(Kd),{basename:t,navigator:a}=b.useContext(us),{matches:i}=b.useContext(Ka),{pathname:s}=co(),r=JSON.stringify(lg(i).map(l=>l.pathnameBase)),n=b.useRef(!1);return pg(()=>{n.current=!0}),b.useCallback(function(l,u){if(u===void 0&&(u={}),!n.current)return;if(typeof l=="number"){a.go(l);return}let f=ug(l,JSON.parse(r),s,u.relative==="path");e==null&&t!=="/"&&(f.pathname=f.pathname==="/"?t:Ma([t,f.pathname])),(u.replace?a.replace:a.push)(f,u.state,u)},[t,a,r,s,e])}function Rb(){let{matches:e}=b.useContext(Ka),t=e[e.length-1];return t?t.params:{}}function fg(e,t){let{relative:a}=t===void 0?{}:t,{matches:i}=b.useContext(Ka),{pathname:s}=co(),r=JSON.stringify(lg(i).map(n=>n.pathnameBase));return b.useMemo(()=>ug(e,JSON.parse(r),s,a==="path"),[e,r,s,a])}function jb(e,t){return Eb(e,t)}function Eb(e,t,a){vr()||Fe(!1);let{navigator:i}=b.useContext(us),{matches:s}=b.useContext(Ka),r=s[s.length-1],n=r?r.params:{};r&&r.pathname;let o=r?r.pathnameBase:"/";r&&r.route;let l=co(),u;if(t){var f;let c=typeof t=="string"?ls(t):t;o==="/"||(f=c.pathname)!=null&&f.startsWith(o)||Fe(!1),u=c}else u=l;let y=u.pathname||"/",_=o==="/"?y:y.slice(o.length)||"/",d=nb(e,{pathname:_}),h=Mb(d&&d.map(c=>Object.assign({},c,{params:Object.assign({},n,c.params),pathname:Ma([o,i.encodeLocation?i.encodeLocation(c.pathname).pathname:c.pathname]),pathnameBase:c.pathnameBase==="/"?o:Ma([o,i.encodeLocation?i.encodeLocation(c.pathnameBase).pathname:c.pathnameBase])})),s,a);return t&&h?b.createElement(uo.Provider,{value:{location:Mn({pathname:"/",search:"",hash:"",state:null,key:"default"},u),navigationType:Aa.Pop}},h):h}function Fb(){let e=Wb(),t=kb(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),a=e instanceof Error?e.stack:null,s={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"},r=null;return b.createElement(b.Fragment,null,b.createElement("h2",null,"Unexpected Application Error!"),b.createElement("h3",{style:{fontStyle:"italic"}},t),a?b.createElement("pre",{style:s},a):null,r)}const Nb=b.createElement(Fb,null);class Lb extends b.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,a){return a.location!==t.location||a.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error||a.error,location:a.location,revalidation:t.revalidation||a.revalidation}}componentDidCatch(t,a){console.error("React Router caught the following error during render",t,a)}render(){return this.state.error?b.createElement(Ka.Provider,{value:this.props.routeContext},b.createElement(cg.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Ob(e){let{routeContext:t,match:a,children:i}=e,s=b.useContext(Kd);return s&&s.static&&s.staticContext&&(a.route.errorElement||a.route.ErrorBoundary)&&(s.staticContext._deepestRenderedBoundaryId=a.route.id),b.createElement(Ka.Provider,{value:t},i)}function Mb(e,t,a){var i;if(t===void 0&&(t=[]),a===void 0&&(a=null),e==null){var s;if((s=a)!=null&&s.errors)e=a.matches;else return null}let r=e,n=(i=a)==null?void 0:i.errors;if(n!=null){let o=r.findIndex(l=>l.route.id&&(n==null?void 0:n[l.route.id]));o>=0||Fe(!1),r=r.slice(0,Math.min(r.length,o+1))}return r.reduceRight((o,l,u)=>{let f=l.route.id?n==null?void 0:n[l.route.id]:null,y=null;a&&(y=l.route.errorElement||Nb);let _=t.concat(r.slice(0,u+1)),d=()=>{let h;return f?h=y:l.route.Component?h=b.createElement(l.route.Component,null):l.route.element?h=l.route.element:h=o,b.createElement(Ob,{match:l,routeContext:{outlet:o,matches:_,isDataRoute:a!=null},children:h})};return a&&(l.route.ErrorBoundary||l.route.errorElement||u===0)?b.createElement(Lb,{location:a.location,revalidation:a.revalidation,component:y,error:f,children:d(),routeContext:{outlet:null,matches:_,isDataRoute:!0}}):d()},null)}var mg=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(mg||{}),Bn=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(Bn||{});function Bb(e){let t=b.useContext(Kd);return t||Fe(!1),t}function zb(e){let t=b.useContext(Sb);return t||Fe(!1),t}function $b(e){let t=b.useContext(Ka);return t||Fe(!1),t}function hg(e){let t=$b(),a=t.matches[t.matches.length-1];return a.route.id||Fe(!1),a.route.id}function Wb(){var e;let t=b.useContext(cg),a=zb(Bn.UseRouteError),i=hg(Bn.UseRouteError);return t||((e=a.errors)==null?void 0:e[i])}function Ub(){let{router:e}=Bb(mg.UseNavigateStable),t=hg(Bn.UseNavigateStable),a=b.useRef(!1);return pg(()=>{a.current=!0}),b.useCallback(function(s,r){r===void 0&&(r={}),a.current&&(typeof s=="number"?e.navigate(s):e.navigate(s,Mn({fromRouteId:t},r)))},[e,t])}function Ru(e){Fe(!1)}function Hb(e){let{basename:t="/",children:a=null,location:i,navigationType:s=Aa.Pop,navigator:r,static:n=!1}=e;vr()&&Fe(!1);let o=t.replace(/^\/*/,"/"),l=b.useMemo(()=>({basename:o,navigator:r,static:n}),[o,r,n]);typeof i=="string"&&(i=ls(i));let{pathname:u="/",search:f="",hash:y="",state:_=null,key:d="default"}=i,h=b.useMemo(()=>{let c=Vd(u,o);return c==null?null:{location:{pathname:c,search:f,hash:y,state:_,key:d},navigationType:s}},[o,u,f,y,_,d,s]);return h==null?null:b.createElement(us.Provider,{value:l},b.createElement(uo.Provider,{children:a,value:h}))}function Vb(e){let{children:t,location:a}=e;return jb(ju(t),a)}new Promise(()=>{});function ju(e,t){t===void 0&&(t=[]);let a=[];return b.Children.forEach(e,(i,s)=>{if(!b.isValidElement(i))return;let r=[...t,s];if(i.type===b.Fragment){a.push.apply(a,ju(i.props.children,r));return}i.type!==Ru&&Fe(!1),!i.props.index||!i.props.children||Fe(!1);let n={id:i.props.id||r.join("-"),caseSensitive:i.props.caseSensitive,element:i.props.element,Component:i.props.Component,index:i.props.index,path:i.props.path,loader:i.props.loader,action:i.props.action,errorElement:i.props.errorElement,ErrorBoundary:i.props.ErrorBoundary,hasErrorBoundary:i.props.ErrorBoundary!=null||i.props.errorElement!=null,shouldRevalidate:i.props.shouldRevalidate,handle:i.props.handle,lazy:i.props.lazy};i.props.children&&(n.children=ju(i.props.children,r)),a.push(n)}),a}/**
 * React Router DOM v6.15.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Eu(){return Eu=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},Eu.apply(this,arguments)}function Kb(e,t){if(e==null)return{};var a={},i=Object.keys(e),s,r;for(r=0;r<i.length;r++)s=i[r],!(t.indexOf(s)>=0)&&(a[s]=e[s]);return a}function Gb(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function Xb(e,t){return e.button===0&&(!t||t==="_self")&&!Gb(e)}const Qb=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"],Jb="startTransition",Lp=fn[Jb];function Yb(e){let{basename:t,children:a,future:i,window:s}=e,r=b.useRef();r.current==null&&(r.current=ib({window:s,v5Compat:!0}));let n=r.current,[o,l]=b.useState({action:n.action,location:n.location}),{v7_startTransition:u}=i||{},f=b.useCallback(y=>{u&&Lp?Lp(()=>l(y)):l(y)},[l,u]);return b.useLayoutEffect(()=>n.listen(f),[n,f]),b.createElement(Hb,{basename:t,children:a,location:o.location,navigationType:o.action,navigator:n})}const Zb=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",ew=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Fu=b.forwardRef(function(t,a){let{onClick:i,relative:s,reloadDocument:r,replace:n,state:o,target:l,to:u,preventScrollReset:f}=t,y=Kb(t,Qb),{basename:_}=b.useContext(us),d,h=!1;if(typeof u=="string"&&ew.test(u)&&(d=u,Zb))try{let p=new URL(window.location.href),g=u.startsWith("//")?new URL(p.protocol+u):new URL(u),w=Vd(g.pathname,_);g.origin===p.origin&&w!=null?u=w+g.search+g.hash:h=!0}catch{}let c=Pb(u,{relative:s}),x=tw(u,{replace:n,state:o,target:l,preventScrollReset:f,relative:s});function m(p){i&&i(p),p.defaultPrevented||x(p)}return b.createElement("a",Eu({},y,{href:d||c,onClick:h||r?i:m,ref:a,target:l}))});var Op;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher"})(Op||(Op={}));var Mp;(function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(Mp||(Mp={}));function tw(e,t){let{target:a,replace:i,state:s,preventScrollReset:r,relative:n}=t===void 0?{}:t,o=Ab(),l=co(),u=fg(e,{relative:n});return b.useCallback(f=>{if(Xb(f,a)){f.preventDefault();let y=i!==void 0?i:On(l)===On(u);o(e,{replace:y,state:s,preventScrollReset:r,relative:n})}},[l,o,u,i,s,a,e,r,n])}const aw="/aiida-registry/pr-preview/pr-253/assets/logo-white-text-16948862.svg",iw="/aiida-registry/pr-preview/pr-253/assets/MARVEL-32e738c9.png",sw="/aiida-registry/pr-preview/pr-253/assets/MaX-099f261c.png";const rw={"aiida-QECpWorkChain":{code_home:"https://github.com/rikigigi/aiida-QECpWorkChain",development_status:"beta",entry_point_prefix:"qecpworkchain",pip_url:"git+https://github.com/rikigigi/aiida-QECpWorkChain",name:"aiida-QECpWorkChain",package_name:"aiida_QECpWorkChain",hosted_on:"github.com",metadata:{author:"Riccardo Bertossa",author_email:"rbertoss@sissa.it",version:"0.2.0a0",description:"Car-Parrinello Work Chain with Quantum Espresso. This workchain does a full CP simulation, from the choice of the electronic mass and the timestep, to the choice of the best parallelization options, and then it does the NPT equilibration and a final NVE simulation at the prescribed P and T. Automates as much as possible.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: GNU General Public License v3 (GPLv3)","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.workflows":{"qecpworkchain.cp":{description:["No description available"],spec:{inputs:[{name:"cp_code",required:!0,valid_types:"Code",info:""},{name:"cp_resources_cg_list",required:!0,valid_types:"List",info:"Same as cp_resources_cp_list but when doing a CG. The CG uses a different amount of resource and can use no band or task group parallelization."},{name:"cp_resources_cp_list",required:!0,valid_types:"List",info:`List of dictionary like the following:
{
 'resources' : {
   'num_machines' : 2,
   'num_mpiprocs_per_machine' : 48,
 },
 'wallclock' : 3600,
 'queue' : 'queue_name',
 'account': 'account_name',
}
c,porturrently only the first element of the list is used.
'wallclock' is the maximum time that can be requested to the scheduler. This code can decide to ask for less.
`},{name:"ecutwfc",required:!0,valid_types:"Float",info:"wavefunction cutoff (Ry), like in the QE input"},{name:"pseudo_family",required:!0,valid_types:"Str",info:"pseudopotential family to use, as in usual aiida operations"},{name:"pw_code",required:!0,valid_types:"Code",info:"input pw code (used to calculate force ratio)"},{name:"pw_resources_list",required:!0,valid_types:"List",info:"Same as cp_resources_cp_list but for pw.x code."},{name:"structure",required:!0,valid_types:"StructureData, TrajectoryData",info:"Input structure. If a trajectory is given, the workchain will use its last step to start the CG. If velocities are present, they will be used to initialize the simulation. Note that if you use a trajectory, usually kind information (like mass) are not included, so default values will be used. If you want to include kind information or override those provided with the input structure, use the input structure_kinds"},{name:"thermobarostat_points",required:!0,valid_types:"List",info:'List of dicts, each with the format [ { "temperature_K": 1000, "pressure_KBar": 10 , "equilibration_time_ps": 5.0, "thermostat_time_ps": 5.0} ]. The simulation will loop over this list of dictionaries, in the same order, equilibrating for the specified time at the given P,T point. Every point is repeated if the average T and P are not within the specified ranges'},{name:"additional_parameters_cp",required:!1,valid_types:"Dict",info:"parameters that will be included in the settings input of the QE CP plugin. These settings will be added on top of the default one. Same format as plugin input"},{name:"adjust_ionic_mass",required:!1,valid_types:"Bool",info:"Multiply the mass of the ions by the corresponding force ration between the cp forces and pw forces -- that is less than 1. Note that averages of static properties do not depend on the ionic masses."},{name:"benchmark_emass_dt_walltime_s",required:!1,valid_types:"Float",info:"same as benchmark_parallel_walltime_s but for dermining the best electronic mass and timestep."},{name:"benchmark_parallel_walltime_s",required:!1,valid_types:"Float",info:"time requested to the scheduler during the test for finding the best parallelization parameters."},{name:"cmdline_cp",required:!1,valid_types:"List, NoneType",info:"additional command line parameters of the cp verlet caclulations only (for example parallelization options)"},{name:"default_nose_frequency",required:!1,valid_types:"Float",info:"default nose frequency when a frequency cannot be estimated from the vibrational spectrum"},{name:"dt",required:!1,valid_types:"Float, NoneType",info:"timestep in atomic units, if not automatically chosen."},{name:"dt_start_stop_step",required:!1,valid_types:"List",info:"list of timesteps to try. Timesteps are changed to better integrate the equation of motion. When a new electronic mass is selected by this workchain timesteps are automatically adjusted."},{name:"emass",required:!1,valid_types:"Float, NoneType",info:"electronic mass, atomic mass units, if not automatically chosen"},{name:"emass_list",required:!1,valid_types:"List",info:"list of electronic masses to try. The emass is selected in order to satisfy the requested CP/DFT force ratio."},{name:"initial_atomic_velocities_A_ps",required:!1,valid_types:"ArrayData, NoneType",info:"optional input initial velocities in angstrom over picoseconds"},{name:"max_slope_const",required:!1,valid_types:"Float",info:"max slope in K/ps of the constant of motion linear fit."},{name:"max_slope_ekinc",required:!1,valid_types:"Float",info:"max slope in K/ps of the ekinc linear fit. If not satisfied try to change emass"},{name:"max_slope_min_emass",required:!1,valid_types:"Float",info:"minimum possible value of electronic mass that can be set by the max_slope correction routine. Will not go lower than that."},{name:"max_slope_min_ps",required:!1,valid_types:"Float",info:"minimum required lenght in ps of the last trajectory to do the linear fit on ekinc and const of motion"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_traj_steps_vdos",required:!1,valid_types:"Int",info:"minimum number of steps to consider the calculated vibrational spectrum maximum valid, to set the thermostat frequency"},{name:"minimum_nose_frequency",required:!1,valid_types:"Float",info:"minimum nose frequency: if the frequency estimated from the vibrational spectrum is lower than this value, this value is used"},{name:"nstep_initial_cg",required:!1,valid_types:"Int",info:"At the beginning of the simulation the CP algorithm is not used. This is the number of steps to do using Born-Oppenheimer molecular dynamics algorithm with a conjugate gradient minimization of the electronic ground state."},{name:"nstep_parallel_test",required:!1,valid_types:"Int",info:"the benchmark simulations will be that long, if performed"},{name:"number_of_pw_per_trajectory",required:!1,valid_types:"Int",info:"Number of pw submitted for every trajectory during calculation of force ratio."},{name:"nve_required_picoseconds",required:!1,valid_types:"Float",info:"The equilibrated NVE simulation will last at least this number of picoseconds. How much picoseconds do you want?"},{name:"pressure_tolerance",required:!1,valid_types:"Float",info:"Pressure tolerance in kBar used to say if the npt is equilibrated. If not setted, use the standard deviation of the P time series"},{name:"skip_emass_dt_test",required:!1,valid_types:"Bool",info:""},{name:"skip_parallel_test",required:!1,valid_types:"Bool",info:"do not run run benchmarks to discover a good internal Quantum Espresso parallelization scheme for the current system"},{name:"skip_thermobarostat",required:!1,valid_types:"Bool",info:""},{name:"structure_kinds",required:!1,valid_types:"List, NoneType",info:'These kinds will be used to override or set the masses of the various atomic types. Note that the workflow, if skip_emass_dt_test is True, will calculate the ratio between cp forces and pw forces and adjust the provided masses automatically according to this ratio. So if you provide this input, make sure to set skip_emass_dt_test to True and set also the inputs emass and dt, or "bad things can happen"'},{name:"target_force_ratio",required:!1,valid_types:"Float",info:"The forces calculated by the Car-Parrinello method are affected by two types of error: one is due to the oscillations of the electrons around the DFT energy minimum, and the second is due to the finite mass of the electronic fluid that produces a _sistematic_ error in the forces, as if the electrons add mass to the ionic core. This second kind of error is can be controlled by this parameter, that tries to adjust the electronic mass to obtain the desidered ratio between CP forces and true DFT forces. Then you may want to modify the ionic mass to correct the leading factor of this error."},{name:"temperature_tolerance",required:!1,valid_types:"Float",info:"Temperature tolerance in K used to say if the npt is equilibrated. If not setted, use the standard deviation of the T time series"},{name:"tempw_initial_random",required:!1,valid_types:"Float, NoneType",info:"If provided, sets the initial temperature when randomly initializing the starting velocities."}],outputs:[{name:"cmdline_cp",required:!0,valid_types:"",info:""},{name:"dt",required:!0,valid_types:"",info:""},{name:"emass",required:!0,valid_types:"",info:""},{name:"full_traj",required:!0,valid_types:"",info:""},{name:"kinds",required:!0,valid_types:"",info:""},{name:"nve_prod_traj",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The initial cg steps failed. I cannot start to work."},{status:402,message:"Nose-Hoover thermostat failed."},{status:403,message:"Final cg after Nose-Hoover failed."},{status:404,message:"Error in the NVE simulation"},{status:405,message:"The simulations are calculating very expensive random numbers. There is something wrong (cutoff? metal? boo?)"},{status:406,message:"Wrong input parameters"},{status:407,message:"Parallel test was not succesful, maybe there is something more wrong."},{status:408,message:"Multiple errors in the simulation that cannot fix."},{status:409,message:"This is a bug in the workchain."}]},class:"aiida_QECpWorkChain.workflow:CpWorkChain"}}},commits_count:5,summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/rikigigi/aiida-QECpWorkChain",is_installable:"True"},"aiida-abinit":{code_home:"https://github.com/sponce24/aiida-abinit",entry_point_prefix:"abinit",pip_url:"aiida-abinit",plugin_info:"https://raw.github.com/sponce24/aiida-abinit/master/setup.json",name:"aiida-abinit",package_name:"aiida_abinit",hosted_on:"github.com",metadata:{description:"The AiiDA plugin for ABINIT.",author_email:"Samuel Ponce <samuel.pon@gmail.com>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"0.4.0"},aiida_version:">=1.6.3,<1.7.0",entry_points:{"aiida.calculations":{abinit:{description:["AiiDA calculation plugin wrapping the abinit executable."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The k-point mesh or path"},{name:"parameters",required:!0,valid_types:"Dict",info:"The ABINIT input parameters."},{name:"pseudos",required:!0,valid_types:"Psp8Data, JthXmlData",info:"The pseudopotentials."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData",info:"A remote folder used for restarts."},{name:"settings",required:!1,valid_types:"Dict",info:"Various special settings."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Various output quantities."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Final electronic bands if present."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Final structure of the calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:"Trajectory of various output quantities over the calculation if present."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"Calculation did not produce all expected output files."},{status:101,message:"Calculation did not produce the expected `[prefix]o_GSR.nc` output file."},{status:102,message:"Calculation did not produce the expected `[prefix]o_HIST.nc` output file."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the `stdout` output file."},{status:301,message:"The `stdout` output file could not be read."},{status:302,message:"The `stdout` output file could not be parsed."},{status:303,message:"The `abipy` `EventsParser` reports that the runw as not completed."},{status:304,message:"The output file contains one or more error messages."},{status:305,message:"The output file contains one or more warning messages."},{status:312,message:"The output structure could not be parsed."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:500,message:"The SCF minimization cycle did not converge."},{status:501,message:"The ionic minimization cycle did not converge."}]},class:"aiida_abinit.calculations:AbinitCalculation"}},"aiida.parsers":{abinit:"aiida_abinit.parsers:AbinitParser"},"aiida.workflows":{"abinit.base":{description:["Base Abinit Workchain to perform a DFT calculation. Validates parameters and restart."],spec:{inputs:[{name:"abinit",required:!0,valid_types:"",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"An explicit k-points mesh or list. Either this or `kpoints_distance` must be provided."},{name:"kpoints_distance",required:!1,valid_types:"Float",info:"The minimum desired distance in 1/Å between k-points in reciprocal space. The explicit k-point mesh will be generated automatically by a calculation function based on the input structure."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Various output quantities."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Final electronic bands if present."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Final structure of the calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:"Trajectory of various output quantities over the calculation if present."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"`pseudos` could not be used to get the necessary pseudos."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified."},{status:203,message:"Neither the `options` nor `automatic_parallelization` input was specified."},{status:204,message:"The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_abinit.workflows.base:AbinitBaseWorkChain"}}},commits_count:12,development_status:"beta",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-abinit",is_installable:"True"},"aiida-aenet":{code_home:"https://gitlab.com/lattice737/aiida-aenet",development_status:"planning",entry_point_prefix:"aenet",pip_url:"https://gitlab.com/lattice737/aiida-aenet",name:"aiida-aenet",package_name:"aiida_aenet",hosted_on:"gitlab.com",metadata:{author:"Nicholas Martinez",author_email:"nicholasmartinez@my.unt.edu",version:"0.1.0",description:"AiiDA plugin to construct machine-learning potentials using aenet",classifiers:["Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Development Status :: 0 - Alpha"]},aiida_version:"~=1.2",entry_points:{"aiida.data":{"aenet.algorithm":"aiida_aenet.data.algorithm:AenetAlgorithm","aenet.potential":"aiida_aenet.data.potentials:AenetPotential"},"aiida.calculations":{"aenet.cur":"aiida_aenet.calculations.cur:CurCalculation","aenet.generate":"aiida_aenet.calculations.generate:AenetGenerateCalculation","aenet.predict":"aiida_aenet.calculations.predict:AenetPredictCalculation","aenet.simulate":"aiida_aenet.calculations.simulate:AenetLammpsMdCalculation","aenet.train":"aiida_aenet.calculations.train:AenetTrainCalculation","aenet.transform":"aiida_aenet.calculations.transform:TransformCalculation"},"aiida.parsers":{"aenet.generate":"aiida_aenet.parsers.generate:AenetGenerateParser","aenet.predict":"aiida_aenet.parsers.predict:AenetPredictParser","aenet.simulate":"aiida_aenet.parsers.simulate:AenetLammpsMdParser","aenet.train":"aiida_aenet.parsers.train:AenetTrainParser"},"aiida.workflows":{"aenet.build_reference":"aiida_aenet.workflows.build_reference:BuildReferenceWorkChain","aenet.compare_simulations":"aiida_aenet.workflows.compare_simulations:CompareSimulationsWorkChain","aenet.make_potential":"aiida_aenet.workflows.make_potential:MakePotentialWorkChain","aenet.make_structures":"aiida_aenet.workflows.make_structures:MakeStructuresWorkChain"},"aenet.potentials":{"lammps.ann":"aiida_aenet.data.potentials.lammps:ANN"}},commits_count:1,summaryinfo:[{colorclass:"blue",text:"Calculations",count:6},{colorclass:"brown",text:"Parsers",count:4},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:4},{colorclass:"orange",text:"Other (Aenet potentials)",count:1}],pip_install_cmd:"pip install https://gitlab.com/lattice737/aiida-aenet"},"aiida-alloy":{code_home:"https://github.com/DanielMarchand/aiida-alloy",development_status:"beta",entry_point_prefix:"alloy",pip_url:"git+https://github.com/DanielMarchand/aiida-alloy",name:"aiida-alloy",package_name:"aiida_alloy",hosted_on:"github.com",metadata:{author:"The AiiDA developers group",author_email:"",version:"0.1.0a0",description:"Aiida Workflows for Elastic Constants using Quantum Espresso",classifiers:["Programming Language :: Python"]},aiida_version:">=1.0.0a0",entry_points:{"aiida.workflows":{elastic:"aiida_alloy.workflows.ElasticWorkChain:ElasticWorkChain"}},commits_count:1,summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/DanielMarchand/aiida-alloy",is_installable:"False"},"aiida-ase":{code_home:"https://github.com/aiidateam/aiida-ase",documentation_url:"https://aiida-ase.readthedocs.io/",entry_point_prefix:"ase",pip_url:"aiida-ase",plugin_info:"https://raw.github.com/aiidateam/aiida-ase/master/setup.json",name:"aiida-ase",package_name:"aiida_ase",hosted_on:"github.com",metadata:{description:"The official AiiDA plugin for ASE.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"2.0.0"},aiida_version:">=1.6,<2.0",entry_points:{"aiida.calculations":{"ase.ase":{description:["`CalcJob` implementation that can be used to wrap around the ASE calculators."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the namelists."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The k-points to use for the calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"settings",required:!1,valid_types:"Dict",info:"Optional settings that control the plugin."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"array",required:!1,valid_types:"ArrayData",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:""},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:300,message:"One of the expected output files was missing."},{status:301,message:"The log file from the DFT code was not written out."},{status:302,message:"Relaxation did not complete."},{status:303,message:"SCF Failed."},{status:305,message:"Cannot identify what went wrong."},{status:306,message:"gpaw could not find the PAW potentials."},{status:307,message:"Attribute Error found in the stderr file."},{status:308,message:"Fermi level is infinite."},{status:400,message:"The calculation ran out of walltime."}]},class:"aiida_ase.calculations.ase:AseCalculation"}},"aiida.parsers":{"ase.ase":"aiida_ase.parsers.ase:AseParser","ase.gpaw":"aiida_ase.parsers.gpaw:GpawParser"},"aiida.workflows":{"ase.gpaw.base":{description:["Workchain to run a GPAW calculation with automated error handling and restarts."],spec:{inputs:[{name:"gpaw",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"k-points to use for the calculation."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"array",required:!1,valid_types:"ArrayData",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:""},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_ase.workflows.base:GpawBaseWorkChain"}}},commits_count:8,development_status:"beta",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-ase",is_installable:"True"},"aiida-autocas":{entry_point_prefix:"autocas",code_home:"https://github.com/microsoft/aiida-autocas",version_file:"https://raw.githubusercontent.com/microsoft/aiida-autocas/main/aiida_autocas/__init__.py",pip_url:"git+https://github.com/microsoft/aiida-autocas",name:"aiida-autocas",package_name:"aiida_autocas",hosted_on:"github.com",metadata:{version:"0.1.0",description:"AiiDA AutoCAS Plugin",classifiers:[]},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{autocas:"aiida_autocas.calculations:AutoCASCalculation"},"aiida.parsers":{autocas:"aiida_autocas.parsers:AutoCASParser"}},commits_count:11,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/microsoft/aiida-autocas"},"aiida-bands-inspect":{code_home:"https://github.com/greschd/aiida-bands-inspect",documentation_url:"https://aiida-bands-inspect.readthedocs.io",entry_point_prefix:"bands_inspect",pip_url:"aiida-bands-inspect",name:"aiida-bands-inspect",package_name:"aiida_bands_inspect",hosted_on:"github.com",metadata:{description:"AiiDA Plugin for running bands_inspect",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-bands-inspect.readthedocs.io",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.4.0"},aiida_version:null,entry_points:{"aiida.calculations":{"bands_inspect.align":{description:["Calculation class for the ``bands-inspect align`` command.","","    Arguments","    ---------","    bands1 : aiida.orm.data.array.bands.BandsData","        First band structure to compare.","    bands2 : aiida.orm.data.array.bands.BandsData","        Second band structure to compare."],spec:{inputs:[{name:"bands1",required:!0,valid_types:"BandsData",info:"First bandstructure which is to be aligned"},{name:"bands2",required:!0,valid_types:"BandsData",info:"Second bandstructure which is to be aligned"},{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"bands1_shifted",required:!0,valid_types:"BandsData",info:""},{name:"bands2_shifted",required:!0,valid_types:"BandsData",info:""},{name:"difference",required:!0,valid_types:"Float",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"shift",required:!0,valid_types:"Float",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"At least one of the expected output files is missing from the retrieved folder."},{status:220,message:"The text output file content is not in the expected format."}]},class:"aiida_bands_inspect.calculations.align:AlignCalculation"},"bands_inspect.difference":{description:["Calculation class for the ``bands-inspect difference`` command.","","    Arguments","    ---------","    bands1 : aiida.orm.nodes.data.array.bands.BandsData","        First band structure to compare.","    bands2 : aiida.orm.nodes.data.array.bands.BandsData","        Second band structure to compare."],spec:{inputs:[{name:"bands1",required:!0,valid_types:"BandsData",info:"First bandstructure which is to be compared"},{name:"bands2",required:!0,valid_types:"BandsData",info:"Second bandstructure which is to be compared"},{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"difference",required:!0,valid_types:"Float",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder does not contain the difference output file."}]},class:"aiida_bands_inspect.calculations.difference:DifferenceCalculation"},"bands_inspect.plot":{description:["Calculation class for the ``bands_inspect plot`` command.","","    Arguments","    ---------","    bands1 : aiida.orm.nodes.data.array.bands.BandsData","        First band structure to plot.","    bands2 : aiida.orm.nodes.data.array.bands.BandsData","        Second band structure to plot."],spec:{inputs:[{name:"bands1",required:!0,valid_types:"BandsData",info:"First bandstructure which is to be plotted"},{name:"bands2",required:!0,valid_types:"BandsData",info:"Second bandstructure which is to be plotted"},{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"plot",required:!0,valid_types:"SinglefileData",info:"The created band-structure comparison plot."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder does not contain the plot output file."}]},class:"aiida_bands_inspect.calculations.plot:PlotCalculation"}},"aiida.parsers":{"bands_inspect.bands":"aiida_bands_inspect.parsers.bands:BandsParser","bands_inspect.difference":"aiida_bands_inspect.parsers.difference:DifferenceParser","bands_inspect.align":"aiida_bands_inspect.parsers.align:AlignParser","bands_inspect.plot":"aiida_bands_inspect.parsers.plot:PlotParser"}},commits_count:0,development_status:"beta",summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:4}],pip_install_cmd:"pip install aiida-bands-inspect",is_installable:"True"},"aiida-bigdft":{code_home:"https://github.com/BigDFT-group/aiida-bigdft-plugin",development_status:"beta",entry_point_prefix:"bigdft",pip_url:"aiida-bigdft",plugin_info:"https://raw.github.com/BigDFT-group/aiida-bigdft-plugin/master/setup.json",name:"aiida-bigdft",package_name:"aiida_bigdft",hosted_on:"github.com",metadata:{description:"Aiida plugin for BigDFT code",author:"The BigDFT Team",author_email:"bigdft-developers@lists.launchpad.net",license:"MIT",home_page:"https://github.com/BigDFT-group/aiida-bigdft-plugin",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.6"},aiida_version:">=1.1.1,<2.0.0",entry_points:{"aiida.calculations":{bigdft:{description:["AiiDA calculation plugin wrapping the BigDFT python interface."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"BigDFTParameters",info:"Command line parameters for BigDFT"},{name:"structure",required:!0,valid_types:"StructureData",info:"StructureData struct"},{name:"extra_retrieved_files",required:!1,valid_types:"List",info:""},{name:"kpoints",required:!1,valid_types:"Dict",info:"kpoint mesh or kpoint path"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"pseudos",required:!1,valid_types:"List",info:""},{name:"structurefile",required:!1,valid_types:"Str",info:"xyz file"}],outputs:[{name:"bigdft_logfile",required:!0,valid_types:"BigDFTLogfile",info:"BigDFT log file as a dict"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:100,message:"Calculation did not produce all expected output files."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."}]},class:"aiida_bigdft.calculations.bigdft:BigDFTCalculation"},"bigdft.postscript":{description:["AiiDA calculation to add post treatments to a computation workcahin.","    post treatment scripts are to be registered as codes in aiida.","    They are python scripts accepting one argument : a remotefolder where data is stored","    Output files are not specified and can be added to the extra_retrieved_files list"],spec:{inputs:[{name:"bigdft_data_folder",required:!0,valid_types:"RemoteData",info:"Folder to the BigDFT data folder"},{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"retrieved_files",required:!1,valid_types:"List",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"Script execution failed"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."}]},class:"aiida_bigdft.calculations.postscript:ScriptCalculation"}},"aiida.cmdline.data":{bigdft:"aiida_bigdft.cli:data_cli"},"aiida.data":{bigdft:"aiida_bigdft.data:BigDFTParameters",bigdft_logfile:"aiida_bigdft.data:BigDFTLogfile"},"aiida.parsers":{bigdft:"aiida_bigdft.parsers:BigDFTParser"},"aiida.workflows":{bigdft:{description:["No description available"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"BigDFTParameters",info:"Command line parameters for BigDFT"},{name:"structure",required:!0,valid_types:"StructureData",info:"StructureData struct"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"extra_retrieved_files",required:!1,valid_types:"List",info:""},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"kpoints",required:!1,valid_types:"Dict",info:"kpoint mesh or kpoint path"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"pseudos",required:!1,valid_types:"List",info:""},{name:"run_opts",required:!1,valid_types:"Dict",info:"metadata"},{name:"show_warnings",required:!1,valid_types:"Bool",info:"turn the warnings on/off."},{name:"structurefile",required:!1,valid_types:"Str",info:"xyz file"}],outputs:[{name:"bigdft_logfile",required:!0,valid_types:"BigDFTLogfile",info:"BigDFT log file as a dict"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"BigDFT input error"},{status:200,message:"BigDFT runtime error"},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_bigdft.workflows.base:BigDFTBaseWorkChain"},"bigdft.relax":{description:["Structure relaxation workchain."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"relax",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"StructureData struct"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"extra_retrieved_files",required:!1,valid_types:"List",info:""},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"kpoints",required:!1,valid_types:"Dict",info:"kpoint mesh or kpoint path"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parameters",required:!1,valid_types:"BigDFTParameters",info:"param dictionary"},{name:"pseudos",required:!1,valid_types:"List",info:""},{name:"run_opts",required:!1,valid_types:"Dict",info:"metadata"},{name:"show_warnings",required:!1,valid_types:"Bool",info:"turn the warnings on/off."},{name:"structurefile",required:!1,valid_types:"Str",info:"xyz file"}],outputs:[{name:"bigdft_logfile",required:!0,valid_types:"BigDFTLogfile",info:"BigDFT log file as a dict"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"forces",required:!1,valid_types:"ArrayData",info:""},{name:"relaxed_structure",required:!1,valid_types:"StructureData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"total_energy",required:!1,valid_types:"Float",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"Subprocess failed for relaxation"}]},class:"aiida_bigdft.workflows.relax:BigDFTRelaxWorkChain"}}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:2},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-bigdft",is_installable:"True"},"aiida-castep":{code_home:"https://gitlab.com/bz1/aiida-castep",development_status:"stable",documentation_url:"https://aiida-castep.readthedocs.io/",entry_point_prefix:"castep",pip_url:"aiida-castep",plugin_info:"https://gitlab.com/bz1/aiida-castep/raw/master/setup.json",name:"aiida-castep",package_name:"aiida_castep",hosted_on:"gitlab.com",metadata:{description:"AiiDA plugin for CASTEP",author:"Bonan Zhu",author_email:"zhubonan@outlook.com",license:"MIT License",home_page:"https://github.com/zhubonan/aiida-castep",classifiers:["Framework :: AiiDA","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.1"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"castep.castep":{description:["Class representing a generic CASTEP calculation -","    This class should work for all types of calculations."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"A node that defines the input parameters"},{name:"pseudos",required:!0,valid_types:"",info:"Use nodes for the pseudopotentails of one ofthe element in the structure. You should pass aa dictionary specifying the pseudpotential node foreach kind such as {O: <PsudoNode>}"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: bandstructure"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"elnes_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: elnes"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Use a node defining the kpoints for the calculation"},{name:"magres_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: magres"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optics_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: optics"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"phonon_fine_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"phonon_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"A node for additional settings"},{name:"spectral_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: spectral"},{name:"supercell_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Parsed results in a dictionary format."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation terminated gracefully, end found"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"SCF Cycles failed to reach convergence"},{status:103,message:"Stopped execuation due to detection of 'stop ' keyword in param file."},{status:104,message:"CASTEP generate error files. Check them for details"},{status:105,message:"Cannot find the end of calculation"},{status:106,message:"No output .castep files found"},{status:107,message:"Calculation self-terminated due to time limit"},{status:108,message:"No retrieve folder is found"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"UNKOWN ERROR"},{status:501,message:"At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."}]},class:"aiida_castep.calculations.castep:CastepCalculation"},"castep.ts":{description:["CASTEP calculation for transition state search. Use an extra input product structure."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"A node that defines the input parameters"},{name:"product_structure",required:!0,valid_types:"StructureData",info:"Product structure for transition state search."},{name:"pseudos",required:!0,valid_types:"",info:"Use nodes for the pseudopotentails of one ofthe element in the structure. You should pass aa dictionary specifying the pseudpotential node foreach kind such as {O: <PsudoNode>}"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: bandstructure"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"elnes_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: elnes"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Use a node defining the kpoints for the calculation"},{name:"magres_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: magres"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optics_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: optics"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"phonon_fine_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"phonon_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"A node for additional settings"},{name:"spectral_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: spectral"},{name:"supercell_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Parsed results in a dictionary format."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation terminated gracefully, end found"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"SCF Cycles failed to reach convergence"},{status:103,message:"Stopped execuation due to detection of 'stop ' keyword in param file."},{status:104,message:"CASTEP generate error files. Check them for details"},{status:105,message:"Cannot find the end of calculation"},{status:106,message:"No output .castep files found"},{status:107,message:"Calculation self-terminated due to time limit"},{status:108,message:"No retrieve folder is found"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"UNKOWN ERROR"},{status:501,message:"At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."}]},class:"aiida_castep.calculations.castep:CastepTSCalculation"}},"aiida.cmdline.data":{"castep-helper":"aiida_castep.cmdline.helper_cmd:helper_cmd","castep-pseudos":"aiida_castep.cmdline.otfg_cmd:pseudos_cmd"},"aiida.data":{"castep.otfgdata":"aiida_castep.data.otfg:OTFGData","castep.uspdata":"aiida_castep.data.usp:UspData"},"aiida.groups":{"castep.otfg":"aiida_castep.data.otfg:OTFGGroup"},"aiida.parsers":{"castep.castep":"aiida_castep.parsers.castep:CastepParser"},"aiida.tests":{"castep.calculation":"aiida_castep.tests.dbtests.dbtestcalculation"},"aiida.tools.calculations":{"castep.castep":"aiida_castep.calculations.tools:CastepCalcTools"},"aiida.workflows":{"castep.altrelax":{description:["A relaxation workflow that alternates between fixed cell and unfixed cell","    This is meidate the problem in CASTEP where if the cell is partially constraints","    the convergence would be very slow.","","    To overcome this problem, the structure should be relaxed with cell constraints","    then restart with fixed cell and repeat.","","    Following fields can be used in ``relax_options``","","    :var_cell_iter_max: Maximum iterations in variable cell relaxation, default to 10","","    :fix_cell_iter_max: Maximum iterations in fixed cell relaxation, default to 20"],spec:{inputs:[{name:"base",required:!0,valid_types:"Data",info:""},{name:"calc",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for relaxation."},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations at the end of the workchain. The default is not performing any cleaning."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax_options",required:!1,valid_types:"Dict, NoneType",info:"Options for relaxation."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed structure."},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"Subprocess lauched has failed in the relax stage"},{status:102,message:"Geometry optimisation is not converged but the maximum iteration is exceeded."},{status:201,message:"NO cell_constraints find in the input"}]},class:"aiida_castep.workflows.relax:CastepAlterRelaxWorkChain"},"castep.bands":{description:["Workchain for running bands calculation.","","    This workchain does the following:","","    1. Relax the structure if requested (eg. inputs passed to the relax namespace).","    2. Optionally: Do a SCF singlepoint calculation","    3. Do combined SCF + non-SCF calculation for bands and dos.","","    Inputs must be passed for the SCF calculation (dispatched to bands and DOS),","    others are optional.","","    Input for bands and dos calculations are optional. However, if they are needed, the full list of inputs must","    be passed. For the `parameters` node, one may choose to only specify those fields that need to be updated."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:"Inputs for SCF workchain, mandatory. Used as template for bands/dos if not supplied separately"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bands",required:!1,valid_types:"Data",info:"Inputs for bands calculation, if needed"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints for the bands"},{name:"bands_kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"Spacing for band distances, used by seekpath"},{name:"clean_children_workdir",required:!1,valid_types:"Str, NoneType",info:"What part of the called children to clean"},{name:"dos",required:!1,valid_types:"Data",info:"Inputs for DOS calculation, if needed"},{name:"dos_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Kpoints for running DOS calculations"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"only_dos",required:!1,valid_types:"",info:"Flag for running only DOS calculations"},{name:"options",required:!1,valid_types:"",info:"Options for this workchain. Supported keywords: dos_smearing, dos_npoints."},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for Relaxation workchain, if needed"},{name:"run_separate_scf",required:!1,valid_types:"",info:"Flag for running a separate SCF calculation, default to False"}],outputs:[{name:"band_structure",required:!0,valid_types:"",info:"Computed band structure with labels"},{name:"dos_bands",required:!1,valid_types:"",info:"Bands from the DOS calculation"},{name:"primitive_structure",required:!1,valid_types:"",info:"Primitive structure used for band structure calculations"},{name:"seekpath_parameters",required:!1,valid_types:"",info:"Parameters used by seekpath"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:501,message:"Relaxation workchain failed"},{status:502,message:"SCF workchain failed"},{status:503,message:"Band structure workchain failed"},{status:504,message:"DOS workchain failed"}]},class:"aiida_castep.workflows.bands:CastepBandsWorkChain"},"castep.base":{description:["A basic workchain for generic CASTEP calculations.","    We try to handle erros such as walltime exceeded or SCF not converged"],spec:{inputs:[{name:"calc",required:!0,valid_types:"Data",info:""},{name:"calc_options",required:!1,valid_types:"Dict, NoneType",info:"Options to be passed to calculations's metadata.options"},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations or not, the default is not clean."},{name:"continuation_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"ensure_gamma_centering",required:!1,valid_types:"Bool, NoneType",info:"Ensure the kpoint grid is gamma centred."},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Kpoint spacing"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of restarts"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Options specific to the workchain.Avaliable options: queue_wallclock_limit, use_castep_bin"},{name:"pseudos_family",required:!1,valid_types:"Str, NoneType",info:"Pseudopotential family to be used"},{name:"reuse_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The maximum number of iterations has been exceeded"},{status:201,message:"The maximum length of the wallclocks has been exceeded"},{status:301,message:"CASTEP generated error files and is not recoverable"},{status:302,message:"Cannot reach SCF convergence despite restart efforts"},{status:400,message:"The stop flag has been put in the .param file to request termination of the calculation."},{status:900,message:"Input validate is failed"},{status:901,message:"Completed one iteration but found not calculation returned"},{status:1e3,message:"Error is not known"}]},class:"aiida_castep.workflows.base:CastepBaseWorkChain"},"castep.relax":{description:["WorkChain to relax structures.","    Restart the relaxation calculation until the structure is fully relaxed.","    Each CASTEP relaxation may finish without error with not fully relaxed structure","    if the number of iteration is exceeded (*geom_max_iter*).","    This workchain try to restart such calculations (wrapped in CastepBaseWorkChain)","    until the structure is fully relaxed","","    ``relax_options`` is a Dict of the options avaliable fields are:","","    - restart_mode: mode of restart, choose from ``reuse`` (default), ``structure``,","      ``continuation``.","    - bypass: Bypass relaxation control - e.g. no checking of the convergence.","      Can be used for doing singlepoint calculation."],spec:{inputs:[{name:"base",required:!0,valid_types:"Data",info:""},{name:"calc",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for relaxation."},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations at the end of the workchain. The default is not performing any cleaning."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax_options",required:!1,valid_types:"Dict, NoneType",info:"Options for relaxation."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed structure."},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"Subprocess lauched has failed in the relax stage"},{status:102,message:"Geometry optimisation is not converged but the maximum iteration is exceeded."}]},class:"aiida_castep.workflows.relax:CastepRelaxWorkChain"}},console_scripts:{"castep.mock":"aiida_castep.cmdline.mock_castep:mock_castep"}},commits_count:10,summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:4},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Groups, Tests, ...)",count:5}],pip_install_cmd:"pip install aiida-castep",is_installable:"True"},"aiida-catmap":{code_home:"https://github.com/sudarshanv01/aiida-catmap",entry_point_prefix:"catmap",name:"aiida-catmap",package_name:"aiida_catmap",hosted_on:"github.com",metadata:{author:"Sudarshan Vijay",author_email:"vijays@fysik.dtu.dk",version:"0.2.0a0",description:"AiiDA package that interfaces with Kinetic modelling code CatMAP",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.1.0,<2.0.0",entry_points:{"aiida.calculations":{catmap:"aiida_catmap.calculations.catmap:CatMAPCalculation"},"aiida.parsers":{catmap:"aiida_catmap.parsers.catmap:CatMAPParser"}},commits_count:0,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"See source code repository."},"aiida-catmat":{code_home:"https://github.com/pzarabadip/aiida-catmat",entry_point_prefix:"catmat",development_status:"beta",documentation_url:"https://aiida-catmat.readthedocs.io/",pip_url:"aiida-catmat",name:"aiida-catmat",package_name:"aiida_catmat",hosted_on:"github.com",metadata:{description:"Collection of AiiDA WorkChains Developed in Morgan Group",author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",license:"MIT License",home_page:"https://github.com/pzarabadip/aiida-catmat",classifiers:["Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"1.0.0b0"},aiida_version:null,entry_points:{"aiida.parsers":{vasp_base_parser:"aiida_catmat.parsers:VaspBaseParser"},"aiida.workflows":{"vasp.base":"aiida_catmat.workchains:VaspBaseWorkChain","catmat.vasp_multistage":"aiida_catmat.workchains:VaspMultiStageWorkChain","catmat.vasp_converge":"aiida_catmat.workchains:VaspConvergeWorkChain","catmat.vasp_catmat":"aiida_catmat.workchains:VaspCatMatWorkChain","catmat.vasp_multistage_ddec":"aiida_catmat.workchains:VaspMultiStageDdecWorkChain"}},commits_count:0,summaryinfo:[{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:5}],pip_install_cmd:"pip install --pre aiida-catmat",is_installable:"False"},"aiida-ce":{code_home:"https://github.com/unkcpz/aiida-ce",development_status:"beta",entry_point_prefix:"ce",pip_url:"git+https://github.com/unkcpz/aiida-ce",name:"aiida-ce",package_name:"aiida_ce",hosted_on:"github.com",metadata:{author:"unkcpz",author_email:"morty.yu@yahoo.com",version:"0.1.0a0",description:"AiiDA plugin for running cluster expansion using icet.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.0.0,<2.0.0",entry_points:{"aiida.data":{ce:"aiida_ce.data:DiffParameters","ce.structures":"aiida_ce.data.structure_set:StructureSet","ce.cluster":"aiida_ce.data.cluster:ClusterSpaceData"},"aiida.calculations":{"ce.genenum":"aiida_ce.calculations.genenum:EnumCalculation","ce.gensqs":"aiida_ce.calculations.gensqs:SqsCalculation","ce.train":"aiida_ce.calculations.train:TrainCalculation"},"aiida.parsers":{"ce.genenum":"aiida_ce.parsers.genenum:EnumParser","ce.gensqs":"aiida_ce.parsers.gensqs:SqsParser","ce.train":"aiida_ce.parsers.train:TrainParser"},"aiida.cmdline.data":{ce:"aiida_ce.cli:data_cli"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"red",text:"Data",count:3},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/unkcpz/aiida-ce",is_installable:"True"},"aiida-champ":{code_home:"https://github.com/TREX-CoE/aiida-champ",development_status:"beta",documentation_url:"http://aiida-champ.readthedocs.io/",entry_point_prefix:"champ",pip_url:"aiida-champ",name:"aiida-champ",package_name:"aiida_champ",hosted_on:"github.com",metadata:{description:"AiiDA plugin that wraps the vmc executable of CHAMP code for computing the total energy and much more stuff.",author:"Ravindra Shinde",author_email:"r.l.shinde@utwente.nl",license:"MIT",home_page:"https://github.com/neelravi/aiida-champ",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"1.2.6"},aiida_version:null,entry_points:{"aiida.data":{CHAMP:"aiida_champ.data:CHAMPParameters"},"aiida.calculations":{CHAMP:{description:["AiiDA calculation plugin wrapping the CHAMP's vmc executable.","","    aiida-champ can be used to manage the workflow of a vmc/dmc calculation of the CHAMP code.","","    Author :: Ravindra Shinde","    Email  :: r.l.shinde@utwente.nl"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"determinants",required:!0,valid_types:"SinglefileData",info:"Input determinants file"},{name:"filemain",required:!0,valid_types:"SinglefileData",info:"Input File"},{name:"molecule",required:!0,valid_types:"SinglefileData",info:"Molecule structure File"},{name:"ecp1",required:!1,valid_types:"SinglefileData",info:"Input ECP file for atom type 1"},{name:"ecp2",required:!1,valid_types:"SinglefileData",info:"Input ECP file for atom type 2"},{name:"jastrow",required:!1,valid_types:"SinglefileData",info:"Input jastrow file"},{name:"jastrowder",required:!1,valid_types:"SinglefileData",info:"Input jastrowder file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"numericalbasis1",required:!1,valid_types:"SinglefileData",info:"Input numerical basis file atom 1"},{name:"numericalbasis2",required:!1,valid_types:"SinglefileData",info:"Input numerical basis file atom 2"},{name:"numericalbasisinfo",required:!1,valid_types:"SinglefileData",info:"Input numerical basis information file"},{name:"orbitals",required:!1,valid_types:"SinglefileData",info:"Input orbitals file"},{name:"symmetry",required:!1,valid_types:"SinglefileData",info:"Input symmetry file"},{name:"trexio",required:!1,valid_types:"SinglefileData",info:"Input trexio hdf5 file"}],outputs:[{name:"Output",required:!0,valid_types:"SinglefileData",info:"Output file of the VMC/DMC calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"Energy",required:!1,valid_types:"Float",info:"Output total energy of the VMC/DMC calculation"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_champ.calculations:CHAMPCalculation"}},"aiida.parsers":{CHAMP:"aiida_champ.parsers:CHAMPParser"},"aiida.cmdline.data":{CHAMP:"aiida_champ.cli:data_cli"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-champ",is_installable:"True"},"aiida-codtools":{code_home:"https://github.com/aiidateam/aiida-codtools",documentation_url:"https://aiida-codtools.readthedocs.io/",entry_point_prefix:"codtools",pip_url:"aiida-codtools",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-codtools/master/setup.json",name:"aiida-codtools",package_name:"aiida_codtools",hosted_on:"github.com",metadata:{description:"The Official AiiDA plugin for the cod-tools package.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"3.1.0"},aiida_version:">=2.1,<3.0",entry_points:{"aiida.calculations":{"codtools.cif_base":{description:["Generic `CalcJob` implementation that can easily be extended to work with any of the `cod-tools` scripts."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_base:CifBaseCalculation"},"codtools.cif_cell_contents":{description:["CalcJob plugin for the `cif_cell_contents` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"formulae",required:!0,valid_types:"Dict",info:"A dictionary of formulae present in the CIF."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cell_contents:CifCellContentsCalculation"},"codtools.cif_cod_check":{description:["CalcJob plugin for the `cif_cod_check` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"messages",required:!0,valid_types:"Dict",info:"Warning and error messages returned by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cod_check:CifCodCheckCalculation"},"codtools.cif_cod_deposit":{description:["CalcJob plugin for the `cif_cod_deposit` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:300,message:"The deposition failed for unknown reasons."},{status:310,message:"The deposition failed because the input was invalid."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."},{status:410,message:"The deposition failed because one or more CIFs already exist in the COD."},{status:420,message:"The structure is unchanged and so deposition is unnecessary."}]},class:"aiida_codtools.calculations.cif_cod_deposit:CifCodDepositCalculation"},"codtools.cif_cod_numbers":{description:["CalcJob plugin for the `cif_cod_numbers` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"numbers",required:!0,valid_types:"Dict",info:"Mapping of COD IDs found with their formula and count."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cod_numbers:CifCodNumbersCalculation"},"codtools.cif_filter":{description:["CalcJob plugin for the `cif_filter` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_filter:CifFilterCalculation"},"codtools.cif_select":{description:["CalcJob plugin for the `cif_select` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_select:CifSelectCalculation"},"codtools.cif_split_primitive":{description:["CalcJob plugin for the `cif_split_primitive` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cifs",required:!0,valid_types:"CifData",info:"The CIFs produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_split_primitive:CifSplitPrimitiveCalculation"},"codtools.primitive_structure_from_cif":{description:["Attempt to parse the given `CifData` and create a `StructureData` from it.","","    First the raw CIF file is parsed with the given `parse_engine`. The resulting `StructureData` is then passed through","    SeeKpath to try and get the primitive cell. If that is successful, important structural parameters as determined by","    SeeKpath will be set as extras on the structure node which is then returned as output.","","    :param cif: the `CifData` node","    :param parse_engine: the parsing engine, supported libraries 'ase' and 'pymatgen'","    :param symprec: a `Float` node with symmetry precision for determining primitive cell in SeeKpath","    :param site_tolerance: a `Float` node with the fractional coordinate distance tolerance for finding overlapping","        sites. This will only be used if the parse_engine is pymatgen","    :return: the primitive `StructureData` as determined by SeeKpath"],spec:{inputs:[{name:"cif",required:!0,valid_types:"Data",info:"the `CifData` node"},{name:"parse_engine",required:!0,valid_types:"Data",info:"the parsing engine, supported libraries 'ase' and 'pymatgen'"},{name:"site_tolerance",required:!0,valid_types:"Data",info:"a `Float` node with the fractional coordinate distance tolerance for finding overlapping\nsites. This will only be used if the parse_engine is pymatgen"},{name:"symprec",required:!0,valid_types:"Data",info:"a `Float` node with symmetry precision for determining primitive cell in SeeKpath"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_codtools.calculations.functions.primitive_structure_from_cif:primitive_structure_from_cif"}},"aiida.parsers":{"codtools.cif_base":"aiida_codtools.parsers.cif_base:CifBaseParser","codtools.cif_cell_contents":"aiida_codtools.parsers.cif_cell_contents:CifCellContentsParser","codtools.cif_cod_check":"aiida_codtools.parsers.cif_cod_check:CifCodCheckParser","codtools.cif_cod_deposit":"aiida_codtools.parsers.cif_cod_deposit:CifCodDepositParser","codtools.cif_cod_numbers":"aiida_codtools.parsers.cif_cod_numbers:CifCodNumbersParser","codtools.cif_split_primitive":"aiida_codtools.parsers.cif_split_primitive:CifSplitPrimitiveParser"},"aiida.workflows":{"codtools.cif_clean":{description:["WorkChain to clean a `CifData` node using the `cif_filter` and `cif_select` scripts of `cod-tools`.","","    It will first run `cif_filter` to correct syntax errors, followed by `cif_select` which will canonicalize the tags.","    If a group is passed for the `group_structure` input, the atomic structure library defined by the `engine` input","    will be used to parse the final cleaned `CifData` to construct a `StructureData` object, which will then be passed","    to the `SeeKpath` library to analyze it and return the primitive structure"],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CifData node that is to be cleaned."},{name:"cif_filter",required:!0,valid_types:"Data",info:""},{name:"cif_select",required:!0,valid_types:"Data",info:""},{name:"group_cif",required:!1,valid_types:"Group, NoneType",info:"An optional Group to which the final cleaned CifData node will be added."},{name:"group_structure",required:!1,valid_types:"Group, NoneType",info:"An optional Group to which the final reduced StructureData node will be added."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parse_engine",required:!1,valid_types:"Str",info:"The atomic structure engine to parse the cif and create the structure."},{name:"site_tolerance",required:!1,valid_types:"Float",info:"The fractional coordinate distance tolerance for finding overlapping sites (pymatgen only)."},{name:"symprec",required:!1,valid_types:"Float",info:"The symmetry precision used by SeeKpath for crystal symmetry refinement."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The cleaned CifData node."},{name:"structure",required:!1,valid_types:"StructureData",info:"The primitive cell structure created with SeeKpath from the cleaned CifData."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The CifFilterCalculation step failed."},{status:402,message:"The CifSelectCalculation step failed."},{status:410,message:"The cleaned CifData contains sites with unknown species."},{status:411,message:"The cleaned CifData defines no atomic sites."},{status:412,message:"The cleaned CifData defines sites with attached hydrogens with incomplete positional data."},{status:413,message:"The cleaned CifData defines sites with invalid atomic occupancies."},{status:414,message:"Failed to parse a StructureData from the cleaned CifData."},{status:420,message:"SeeKpath failed to determine the primitive structure."},{status:421,message:"SeeKpath detected inconsistent symmetry operations."}]},class:"aiida_codtools.workflows.cif_clean:CifCleanWorkChain"}},console_scripts:{"aiida-codtools":"aiida_codtools.cli:cmd_root"}},commits_count:4,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:9},{colorclass:"brown",text:"Parsers",count:6},{colorclass:"green",text:"Workflows",count:1},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-codtools",is_installable:"True"},"aiida-core":{code_home:"https://github.com/aiidateam/aiida-core",development_status:"stable",documentation_url:"https://aiida-core.readthedocs.io/",entry_point_prefix:"",package_name:"aiida",pip_url:"aiida-core",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-core/master/setup.json",name:"aiida-core",hosted_on:"github.com",metadata:{description:"AiiDA is a workflow manager for computational science with a strong focus on provenance, performance and extensibility.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"2.4.0"},aiida_version:"==2.4.0",entry_points:{"aiida.calculations":{"core.arithmetic.add":{description:["`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."],spec:{inputs:[{name:"x",required:!0,valid_types:"Int, Float",info:"The left operand."},{name:"y",required:!0,valid_types:"Int, Float",info:"The right operand."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"sum",required:!0,valid_types:"Int, Float",info:"The sum of the left and right operand."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:310,message:"The output file could not be read."},{status:320,message:"The output file contains invalid output."},{status:410,message:"The sum of the operands is a negative number."}]},class:"aiida.calculations.arithmetic.add:ArithmeticAddCalculation"},"core.templatereplacer":{description:["Simple stub of a plugin that can be used to replace some text in a given template.","    Can be used for many different codes, or as a starting point to develop a new plugin.","","    This simple plugin takes two node inputs, both of type Dict, with the labels","    'parameters' and 'template'","","    You can also add other SinglefileData nodes as input, that will be copied according to","    what is written in 'template' (see below).","","    * parameters: a set of parameters that will be used for substitution.","","    * template: can contain the following parameters:","","        * input_file_template: a string with substitutions to be managed with the format()","          function of python, i.e. if you want to substitute a variable called 'varname', you write","          {varname} in the text. See http://www.python.org/dev/peps/pep-3101/ for more","          details. The replaced file will be the input file.","","        * input_file_name: a string with the file name for the input. If it is not provided, no","          file will be created.","","        * output_file_name: a string with the file name for the output. If it is not provided, no","          redirection will be done and the output will go in the scheduler output file.","","        * cmdline_params: a list of strings, to be passed as command line parameters.","          Each one is substituted with the same rule of input_file_template. Optional","","        * input_through_stdin: if True, the input file name is passed via stdin. Default is False if missing.","","        * files_to_copy: if defined, a list of tuple pairs, with format ('link_name', 'dest_rel_path');","            for each tuple, an input link to this calculation is looked for, with link labeled 'link_label',","            and with file type 'Singlefile', and the content is copied to a remote file named 'dest_rel_path'","            Errors are raised in the input links are non-existent, or of the wrong type, or if there are","            unused input files.","","        * retrieve_temporary_files: a list of relative filepaths, that if defined, will be retrieved and","            temporarily stored in an unstored FolderData node that will be available during the","            Parser.parser_with_retrieved call under the key specified by the Parser.retrieved_temporary_folder key"],spec:{inputs:[{name:"template",required:!0,valid_types:"Dict",info:"A template for the input file."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"files",required:!1,valid_types:"RemoteData, SinglefileData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters used to replace placeholders in the template."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The temporary retrieved folder data node could not be accessed."},{status:305,message:"The `template` input node did not specify the key `output_file_name`."},{status:310,message:"The output file could not be read from the retrieved folder."},{status:311,message:"A temporary retrieved file could not be read from the temporary retrieved folder."},{status:320,message:"The output file contains invalid output."}]},class:"aiida.calculations.templatereplacer:TemplatereplacerCalculation"},"core.transfer":{description:["Utility to copy files from different FolderData and RemoteData nodes into a single place.","","    The final destination for these files can be either the local repository (by creating a","    new FolderData node to store them) or in the remote computer (by leaving the files in a","    new remote folder saved in a RemoteData node).","","    Only files from the local computer and from remote folders in the same external computer","    can be moved at the same time with a single instance of this CalcJob.","","    The user needs to provide three inputs:","","        * ``instructions``: a dict node specifying which files to copy from which nodes.","        * ``source_nodes``: a dict of nodes, each with a unique identifier label as its key.","        * ``metadata.computer``: the computer that contains the remote files and will contain","          the final RemoteData node.","","    The ``instructions`` dict must have the ``retrieve_files`` flag. The CalcJob will create a","    new folder in the remote machine (``RemoteData``) and put all the files there and will either:","","        (1) leave them there (``retrieve_files = False``) or ...","        (2) retrieve all the files and store them locally in a ``FolderData``  (``retrieve_files = True``)","","    The `instructions` dict must also contain at least one list with specifications of which files","    to copy and from where. All these lists take tuples of 3 that have the following format:","","    .. code-block:: python","","        ( source_node_key, path_to_file_in_source, path_to_file_in_target)","","    where the ``source_node_key`` has to be the respective one used when providing the node in the","    ``source_nodes`` input nodes dictionary.","","","    The two main lists to include are ``local_files`` (for files to be taken from FolderData nodes)","    and ``remote_files`` (for files to be taken from RemoteData nodes). Alternatively, files inside","    of RemoteData nodes can instead be put in the ``symlink_files`` list: the only difference is that","    files from the first list will be fully copied in the target RemoteData folder, whereas for the","    files in second list only a symlink to the original file will be created there. This will only","    affect the content of the final RemoteData target folder, but in both cases the full file will","    be copied back in the local target FolderData (if ``retrieve_files = True``)."],spec:{inputs:[{name:"instructions",required:!0,valid_types:"Dict",info:"A dictionary containing the `retrieve_files` flag and at least one of the file lists:`local_files`, `remote_files` and/or `symlink_files`."},{name:"source_nodes",required:!0,valid_types:"FolderData, RemoteData",info:"All the nodes that contain files referenced in the instructions."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida.calculations.transfer:TransferCalculation"}},"aiida.calculations.importers":{"core.arithmetic.add":"aiida.calculations.importers.arithmetic.add:ArithmeticAddCalculationImporter"},"aiida.calculations.monitors":{"core.always_kill":"aiida.calculations.monitors.base:always_kill"},"aiida.cmdline.computer.configure":{"core.local":"aiida.transports.plugins.local:CONFIGURE_LOCAL_CMD","core.ssh":"aiida.transports.plugins.ssh:CONFIGURE_SSH_CMD"},"aiida.cmdline.data":{"core.array":"aiida.cmdline.commands.cmd_data.cmd_array:array","core.bands":"aiida.cmdline.commands.cmd_data.cmd_bands:bands","core.cif":"aiida.cmdline.commands.cmd_data.cmd_cif:cif","core.dict":"aiida.cmdline.commands.cmd_data.cmd_dict:dictionary","core.remote":"aiida.cmdline.commands.cmd_data.cmd_remote:remote","core.singlefile":"aiida.cmdline.commands.cmd_data.cmd_singlefile:singlefile","core.structure":"aiida.cmdline.commands.cmd_data.cmd_structure:structure","core.trajectory":"aiida.cmdline.commands.cmd_data.cmd_trajectory:trajectory","core.upf":"aiida.cmdline.commands.cmd_data.cmd_upf:upf"},"aiida.cmdline.data.structure.import":{},"aiida.data":{"core.array":"aiida.orm.nodes.data.array.array:ArrayData","core.array.bands":"aiida.orm.nodes.data.array.bands:BandsData","core.array.kpoints":"aiida.orm.nodes.data.array.kpoints:KpointsData","core.array.projection":"aiida.orm.nodes.data.array.projection:ProjectionData","core.array.trajectory":"aiida.orm.nodes.data.array.trajectory:TrajectoryData","core.array.xy":"aiida.orm.nodes.data.array.xy:XyData","core.base":"aiida.orm.nodes.data:BaseType","core.bool":"aiida.orm.nodes.data.bool:Bool","core.cif":"aiida.orm.nodes.data.cif:CifData","core.code":"aiida.orm.nodes.data.code.legacy:Code","core.code.containerized":"aiida.orm.nodes.data.code.containerized:ContainerizedCode","core.code.installed":"aiida.orm.nodes.data.code.installed:InstalledCode","core.code.portable":"aiida.orm.nodes.data.code.portable:PortableCode","core.dict":"aiida.orm.nodes.data.dict:Dict","core.enum":"aiida.orm.nodes.data.enum:EnumData","core.float":"aiida.orm.nodes.data.float:Float","core.folder":"aiida.orm.nodes.data.folder:FolderData","core.int":"aiida.orm.nodes.data.int:Int","core.jsonable":"aiida.orm.nodes.data.jsonable:JsonableData","core.list":"aiida.orm.nodes.data.list:List","core.numeric":"aiida.orm.nodes.data.numeric:NumericType","core.orbital":"aiida.orm.nodes.data.orbital:OrbitalData","core.remote":"aiida.orm.nodes.data.remote.base:RemoteData","core.remote.stash":"aiida.orm.nodes.data.remote.stash.base:RemoteStashData","core.remote.stash.folder":"aiida.orm.nodes.data.remote.stash.folder:RemoteStashFolderData","core.singlefile":"aiida.orm.nodes.data.singlefile:SinglefileData","core.str":"aiida.orm.nodes.data.str:Str","core.structure":"aiida.orm.nodes.data.structure:StructureData","core.upf":"aiida.orm.nodes.data.upf:UpfData"},"aiida.groups":{core:"aiida.orm.groups:Group","core.auto":"aiida.orm.groups:AutoGroup","core.import":"aiida.orm.groups:ImportGroup","core.upf":"aiida.orm.groups:UpfFamily"},"aiida.node":{data:"aiida.orm.nodes.data.data:Data",process:"aiida.orm.nodes.process.process:ProcessNode","process.calculation":"aiida.orm.nodes.process.calculation.calculation:CalculationNode","process.calculation.calcfunction":"aiida.orm.nodes.process.calculation.calcfunction:CalcFunctionNode","process.calculation.calcjob":"aiida.orm.nodes.process.calculation.calcjob:CalcJobNode","process.workflow":"aiida.orm.nodes.process.workflow.workflow:WorkflowNode","process.workflow.workchain":"aiida.orm.nodes.process.workflow.workchain:WorkChainNode","process.workflow.workfunction":"aiida.orm.nodes.process.workflow.workfunction:WorkFunctionNode"},"aiida.parsers":{"core.arithmetic.add":"aiida.parsers.plugins.arithmetic.add:ArithmeticAddParser","core.templatereplacer":"aiida.parsers.plugins.templatereplacer.parser:TemplatereplacerParser"},"aiida.schedulers":{"core.direct":"aiida.schedulers.plugins.direct:DirectScheduler","core.lsf":"aiida.schedulers.plugins.lsf:LsfScheduler","core.pbspro":"aiida.schedulers.plugins.pbspro:PbsproScheduler","core.sge":"aiida.schedulers.plugins.sge:SgeScheduler","core.slurm":"aiida.schedulers.plugins.slurm:SlurmScheduler","core.torque":"aiida.schedulers.plugins.torque:TorqueScheduler"},"aiida.storage":{"core.psql_dos":"aiida.storage.psql_dos.backend:PsqlDosBackend","core.sqlite_temp":"aiida.storage.sqlite_temp.backend:SqliteTempBackend","core.sqlite_zip":"aiida.storage.sqlite_zip.backend:SqliteZipBackend"},"aiida.tools.calculations":{},"aiida.tools.data.orbitals":{"core.orbital":"aiida.tools.data.orbital.orbital:Orbital","core.realhydrogen":"aiida.tools.data.orbital.realhydrogen:RealhydrogenOrbital"},"aiida.tools.dbexporters":{},"aiida.tools.dbimporters":{"core.cod":"aiida.tools.dbimporters.plugins.cod:CodDbImporter","core.icsd":"aiida.tools.dbimporters.plugins.icsd:IcsdDbImporter","core.materialsproject":"aiida.tools.dbimporters.plugins.materialsproject:MaterialsProjectImporter","core.mpds":"aiida.tools.dbimporters.plugins.mpds:MpdsDbImporter","core.mpod":"aiida.tools.dbimporters.plugins.mpod:MpodDbImporter","core.nninc":"aiida.tools.dbimporters.plugins.nninc:NnincDbImporter","core.oqmd":"aiida.tools.dbimporters.plugins.oqmd:OqmdDbImporter","core.pcod":"aiida.tools.dbimporters.plugins.pcod:PcodDbImporter","core.tcod":"aiida.tools.dbimporters.plugins.tcod:TcodDbImporter"},"aiida.transports":{"core.local":"aiida.transports.plugins.local:LocalTransport","core.ssh":"aiida.transports.plugins.ssh:SshTransport"},"aiida.workflows":{"core.arithmetic.add_multiply":{description:["Add two numbers and multiply it with a third."],spec:{inputs:[{name:"x",required:!0,valid_types:"Data",info:""},{name:"y",required:!0,valid_types:"Data",info:""},{name:"z",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida.workflows.arithmetic.add_multiply:add_multiply"},"core.arithmetic.multiply_add":{description:["WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode",info:""},{name:"x",required:!0,valid_types:"Int",info:""},{name:"y",required:!0,valid_types:"Int",info:""},{name:"z",required:!0,valid_types:"Int",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"result",required:!0,valid_types:"Int",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"The result is a negative number."}]},class:"aiida.workflows.arithmetic.multiply_add:MultiplyAddWorkChain"}},console_scripts:{runaiida:"aiida.cmdline.commands.cmd_run:run",verdi:"aiida.cmdline.commands.cmd_verdi:verdi"}},commits_count:333,summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:29},{colorclass:"green",text:"Workflows",count:2},{colorclass:"purple",text:"Console scripts",count:2},{colorclass:"orange",text:"Other (Calculations importers, Calculations monitors, Cmdline computer configure, ...)",count:47}],pip_install_cmd:"pip install aiida-core",is_installable:"True"},"aiida-cp2k":{code_home:"https://github.com/cp2k/aiida-cp2k",entry_point_prefix:"cp2k",pip_url:"aiida-cp2k",plugin_info:"https://raw.githubusercontent.com/cp2k/aiida-cp2k/master/setup.json",name:"aiida-cp2k",package_name:"aiida_cp2k",hosted_on:"github.com",metadata:{description:"The official AiiDA plugin for CP2K.",author:"The AiiDA team",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3"],version:"2.0.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{cp2k:{description:["This is a Cp2kCalculation, subclass of JobCalculation, to prepare input for an ab-initio CP2K calculation.","","    For information on CP2K, refer to: https://www.cp2k.org."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters."},{name:"basissets",required:!1,valid_types:"",info:"A dictionary of basissets to be used in the calculations: key is the atomic symbol, value is either a single basisset or a list of basissets. If multiple basissets for a single symbol are passed, it is mandatory to specify a KIND section with a BASIS_SET keyword matching the names (or aliases) of the basissets."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"file",required:!1,valid_types:"SinglefileData, StructureData",info:"Additional input files."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoint mesh."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Working directory of a previously ran calculation to restart from."},{name:"pseudos",required:!1,valid_types:"",info:"A dictionary of pseudopotentials to be used in the calculations: key is the atomic symbol, value is either a single pseudopotential or a list of pseudopotentials. If multiple pseudos for a single symbol are passed, it is mandatory to specify a KIND section with a PSEUDOPOTENTIAL keyword matching the names (or aliases) of the pseudopotentials."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional input parameters."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"The main input structure."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The output dictionary containing results of the calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Computed electronic band structure."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required output file."},{status:301,message:"The output file could not be read."},{status:302,message:"The output file could not be parsed."},{status:303,message:"The output file was incomplete."},{status:304,message:'The output file contains the word "ABORT".'},{status:312,message:"The output structure could not be parsed."},{status:350,message:"The parser raised an unexpected exception."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."},{status:501,message:"The maximum number of optimization steps reached."}]},class:"aiida_cp2k.calculations:Cp2kCalculation"}},"aiida.parsers":{cp2k_advanced_parser:"aiida_cp2k.parsers:Cp2kAdvancedParser",cp2k_base_parser:"aiida_cp2k.parsers:Cp2kBaseParser",cp2k_tools_parser:"aiida_cp2k.parsers:Cp2kToolsParser"},"aiida.workflows":{"cp2k.base":{description:["Workchain to run a CP2K calculation with automated error handling and restarts."],spec:{inputs:[{name:"cp2k",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The output dictionary containing results of the calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"final_input_parameters",required:!1,valid_types:"Dict",info:"The input parameters used for the final calculation."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Computed electronic band structure."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unidentified unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:310,message:"The calculation failed with a known unrecoverable error."},{status:400,message:"The calculation didn't produce any data to restart from."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_cp2k.workchains:Cp2kBaseWorkChain"}}},commits_count:18,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-cp2k",is_installable:"True"},"aiida-crystal-dft":{code_home:"https://github.com/tilde-lab/aiida-crystal-dft",development_status:"beta",documentation_url:"https://github.com/tilde-lab/aiida-crystal-dft",entry_point_prefix:"crystal_dft",pip_url:"git+https://github.com/tilde-lab/aiida-crystal-dft",name:"aiida-crystal-dft",package_name:"aiida_crystal_dft",hosted_on:"github.com",metadata:{description:`Yet another AiiDA plugin for CRYSTAL code, mainly intended for use with the cloud infrastructures
(currently, MPDS)`,classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Intended Audience :: Science/Research","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Topic :: Scientific/Engineering","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Information Analysis"],author:"Andrey Sobolev, based on aiida-crystal17 plugin by Chris Sewell",author_email:"as@tilde.pro"},aiida_version:">=2.0.2",entry_points:{"aiida.data":{"crystal_dft.basis":"aiida_crystal_dft.data.basis:CrystalBasisData","crystal_dft.basis_family":"aiida_crystal_dft.data.basis_family:CrystalBasisFamilyData"},"aiida.calculations":{"crystal_dft.serial":{description:["No description available"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"basis",required:!1,valid_types:"CrystalBasisData",info:""},{name:"basis_family",required:!1,valid_types:"CrystalBasisFamilyData, NoneType",info:""},{name:"guess_oxistates",required:!1,valid_types:"Bool, NoneType",info:""},{name:"high_spin_preferred",required:!1,valid_types:"Bool, NoneType",info:""},{name:"is_magnetic",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"spinlock_steps",required:!1,valid_types:"Int, NoneType",info:""},{name:"use_oxistates",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"oxidation_states",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"SCF calculation not converged"},{status:301,message:"Geometry optimization failed"},{status:302,message:"Unit cell not neutral"},{status:303,message:"Basis set linearly dependent"},{status:304,message:"Neighbour list too large"},{status:305,message:"No G-vectors left"},{status:306,message:"Collapsed geometry"},{status:307,message:"Closed shell run - spin polarization not allowed"},{status:308,message:"Parameters for model hessian not defined"},{status:309,message:"Fermi energy not in interval"},{status:310,message:"Insufficient indices for Madelung sums"},{status:350,message:"Internal memory error"},{status:360,message:"Inadequate elastic calculation: additional optimization needed"},{status:400,message:"Unknown error"},{status:401,message:"The retrieved folder data node could not be accessed"}]},class:"aiida_crystal_dft.calculations.serial:CrystalSerialCalculation"},"crystal_dft.parallel":{description:["No description available"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"basis",required:!1,valid_types:"CrystalBasisData",info:""},{name:"basis_family",required:!1,valid_types:"CrystalBasisFamilyData, NoneType",info:""},{name:"guess_oxistates",required:!1,valid_types:"Bool, NoneType",info:""},{name:"high_spin_preferred",required:!1,valid_types:"Bool, NoneType",info:""},{name:"is_magnetic",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"spinlock_steps",required:!1,valid_types:"Int, NoneType",info:""},{name:"use_oxistates",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"oxidation_states",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"SCF calculation not converged"},{status:301,message:"Geometry optimization failed"},{status:302,message:"Unit cell not neutral"},{status:303,message:"Basis set linearly dependent"},{status:304,message:"Neighbour list too large"},{status:305,message:"No G-vectors left"},{status:306,message:"Collapsed geometry"},{status:307,message:"Closed shell run - spin polarization not allowed"},{status:308,message:"Parameters for model hessian not defined"},{status:309,message:"Fermi energy not in interval"},{status:310,message:"Insufficient indices for Madelung sums"},{status:350,message:"Internal memory error"},{status:360,message:"Inadequate elastic calculation: additional optimization needed"},{status:400,message:"Unknown error"},{status:401,message:"The retrieved folder data node could not be accessed"}]},class:"aiida_crystal_dft.calculations.parallel:CrystalParallelCalculation"},"crystal_dft.properties":{description:["AiiDA calculation plugin wrapping the properties executable."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"wavefunction",required:!0,valid_types:"SinglefileData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:""},{name:"output_bands_down",required:!1,valid_types:"BandsData",info:""},{name:"output_dos",required:!1,valid_types:"ArrayData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_crystal_dft.calculations.properties:PropertiesCalculation"}},"aiida.parsers":{crystal_dft:"aiida_crystal_dft.parsers.cry_pycrystal:CrystalParser","crystal_dft.properties":"aiida_crystal_dft.parsers.properties:PropertiesParser"},"aiida.workflows":{"crystal_dft.base":{description:["Run CRYSTAL calculation"],spec:{inputs:[{name:"basis_family",required:!0,valid_types:"CrystalBasisFamilyData",info:""},{name:"code",required:!0,valid_types:"Code",info:""},{name:"options",required:!0,valid_types:"Dict",info:"Calculation options"},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_params",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"oxidation_states",required:!1,valid_types:"Dict",info:""},{name:"primitive_structure",required:!1,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"CRYSTAL error"},{status:400,message:"Unknown error"}]},class:"aiida_crystal_dft.workflows.base:BaseCrystalWorkChain"}},"aiida.cmdline.data":{crystal_dft:"aiida_crystal_dft.cli.basis:basis_set"}},commits_count:19,summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/tilde-lab/aiida-crystal-dft",is_installable:"True"},"aiida-crystal17":{code_home:"https://github.com/aiidaplugins/aiida-crystal17",development_status:"beta",documentation_url:"https://aiida-crystal17.readthedocs.io",entry_point_prefix:"crystal17",pip_url:"aiida-crystal17",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-crystal17/master/setup.json",name:"aiida-crystal17",package_name:"aiida_crystal17",hosted_on:"github.com",metadata:{description:"AiiDA plugin for running the CRYSTAL17 code",author:"Chris Sewell",author_email:"chrisj_sewell@hotmail.com",license:"MIT",home_page:"https://github.com/chrisjsewell/aiida-crystal17",classifiers:["Framework :: AiiDA","Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.6","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"0.11.0"},aiida_version:">=1.4.0,<2.0.0",entry_points:{"aiida.calculations":{"crystal17.basic":{description:["AiiDA calculation plugin to run the crystal17 executable,","    by supplying a normal .d12 input file and (optional) .gui file"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"input_file",required:!0,valid_types:"SinglefileData",info:"the input .d12 file content."},{name:"input_external",required:!1,valid_types:"SinglefileData",info:"optional input fort.34 (gui) file content (for use with EXTERNAL keyword)."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"the data extracted from the main output file"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"the structure output from the calculation"},{name:"symmetry",required:!1,valid_types:"SymmetryData",info:"the symmetry data from the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"the main (stdout) output file was not found"},{status:211,message:"the temporary retrieved folder was not found"},{status:300,message:"An error was flagged trying to parse the crystal exec stdout file"},{status:301,message:"An error occurred parsing the 'opta'/'optc' geometry files"},{status:302,message:"The crystal exec stdout file denoted that the run was a testgeom"},{status:350,message:"the input file could not be read by CRYSTAL"},{status:351,message:"CRYSTAL could not find the required wavefunction file"},{status:352,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:353,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:354,message:"Error in CHEMOD basis set modification"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:401,message:"The calculation stopped prematurely because it ran out of memory."},{status:402,message:"The calculation stopped prematurely because it ran out of virtual memory."},{status:411,message:"SCF convergence did not finalise (usually due to reaching step limit)"},{status:412,message:"Geometry convergence did not finalise (usually due to reaching step limit)"},{status:413,message:"an error encountered usually during geometry optimisation"},{status:414,message:"an error was encountered during an SCF computation"},{status:415,message:"an unknown error was encountered, causing the MPI to abort"},{status:499,message:"The main crystal output file flagged an unhandled error"},{status:510,message:"inconsistency in the input and output symmetry"},{status:520,message:"primitive symmops were not found in the output file"}]},class:"aiida_crystal17.calculations.cry_basic:CryBasicCalculation"},"crystal17.doss":{description:["AiiDA calculation plugin to run the ``properties`` executable,","    for DOSS calculations."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"Dict",info:"the input parameters to create the properties input file."},{name:"wf_folder",required:!0,valid_types:"FolderData, RemoteData, SinglefileData",info:"the folder containing the wavefunction fort.9 file"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"Summary Data extracted from the output file(s)"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"arrays",required:!1,valid_types:"ArrayData",info:"energies and DoS arrays"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"the main (stdout) output file was not found"},{status:211,message:"the temporary retrieved folder was not found"},{status:300,message:"An error was flagged trying to parse the crystal exec stdout file"},{status:350,message:"the input file could not be read by CRYSTAL"},{status:351,message:"CRYSTAL could not find the required wavefunction file"},{status:352,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:352,message:"parser could not find the output isovalue (fort.25) file"},{status:353,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:353,message:"error parsing output isovalue (fort.25) file"},{status:354,message:"Error in CHEMOD basis set modification"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:401,message:"The calculation stopped prematurely because it ran out of memory."},{status:402,message:"The calculation stopped prematurely because it ran out of virtual memory."},{status:413,message:"an error encountered usually during geometry optimisation"},{status:414,message:"an error was encountered during an SCF computation"},{status:415,message:"an unknown error was encountered, causing the MPI to abort"},{status:499,message:"The main crystal output file flagged an unhandled error"}]},class:"aiida_crystal17.calculations.prop_doss:CryDossCalculation"},"crystal17.ech3":{description:["AiiDA calculation plugin to run the ``properties`` executable, for 3D charge density (ECH3)."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"Dict",info:"the input parameters to create the properties input file."},{name:"wf_folder",required:!0,valid_types:"FolderData, RemoteData, SinglefileData",info:"the folder containing the wavefunction fort.9 file"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"charge",required:!0,valid_types:"GaussianCube",info:"The charge density cube"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"Summary Data extracted from the output file(s)"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"spin",required:!1,valid_types:"GaussianCube",info:"The spin density cube"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"the main (stdout) output file was not found"},{status:211,message:"the temporary retrieved folder was not found"},{status:300,message:"An error was flagged trying to parse the crystal exec stdout file"},{status:350,message:"the input file could not be read by CRYSTAL"},{status:351,message:"CRYSTAL could not find the required wavefunction file"},{status:352,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:352,message:"parser could not find the output density file"},{status:353,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:353,message:"error parsing output density file"},{status:354,message:"Error in CHEMOD basis set modification"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:401,message:"The calculation stopped prematurely because it ran out of memory."},{status:402,message:"The calculation stopped prematurely because it ran out of virtual memory."},{status:413,message:"an error encountered usually during geometry optimisation"},{status:414,message:"an error was encountered during an SCF computation"},{status:415,message:"an unknown error was encountered, causing the MPI to abort"},{status:499,message:"The main crystal output file flagged an unhandled error"}]},class:"aiida_crystal17.calculations.prop_ech3:CryEch3Calculation"},"crystal17.main":{description:["AiiDA calculation plugin to run the crystal17 executable,","    by supplying aiida nodes, with data sufficient to create the","    .d12 input file and .gui file"],spec:{inputs:[{name:"basissets",required:!0,valid_types:"BasisSetData",info:"Use a node for the basis set of one of the elements in the structure. You have to pass an additional parameter ('element') specifying the atomic element symbol for which you want to use this basis set."},{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"CryInputParamsData",info:"the input parameters to create the .d12 file content."},{name:"structure",required:!0,valid_types:"StructureData",info:"structure used to construct the input fort.34 (gui) file"},{name:"kinds",required:!1,valid_types:"KindData",info:"additional structure kind specific data (e.g. initial spin)"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"symmetry",required:!1,valid_types:"SymmetryData",info:"the symmetry of the structure, used to construct the input .gui file (fort.34)"},{name:"wf_folder",required:!1,valid_types:"RemoteData",info:"An optional working directory, of a previously completed calculation, containing a fort.9 wavefunction file to restart from"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"the data extracted from the main output file"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"optimisation",required:!1,valid_types:"TrajectoryData",info:"atomic configurations, for each optimisation step"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"the structure output from the calculation"},{name:"symmetry",required:!1,valid_types:"SymmetryData",info:"the symmetry data from the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"the main (stdout) output file was not found"},{status:211,message:"the temporary retrieved folder was not found"},{status:300,message:"An error was flagged trying to parse the crystal exec stdout file"},{status:301,message:"An error occurred parsing the 'opta'/'optc' geometry files"},{status:302,message:"The crystal exec stdout file denoted that the run was a testgeom"},{status:350,message:"the input file could not be read by CRYSTAL"},{status:351,message:"CRYSTAL could not find the required wavefunction file"},{status:352,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:353,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:354,message:"Error in CHEMOD basis set modification"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:401,message:"The calculation stopped prematurely because it ran out of memory."},{status:402,message:"The calculation stopped prematurely because it ran out of virtual memory."},{status:411,message:"SCF convergence did not finalise (usually due to reaching step limit)"},{status:412,message:"Geometry convergence did not finalise (usually due to reaching step limit)"},{status:413,message:"an error encountered usually during geometry optimisation"},{status:414,message:"an error was encountered during an SCF computation"},{status:415,message:"an unknown error was encountered, causing the MPI to abort"},{status:499,message:"The main crystal output file flagged an unhandled error"},{status:510,message:"inconsistency in the input and output symmetry"},{status:520,message:"primitive symmops were not found in the output file"}]},class:"aiida_crystal17.calculations.cry_main:CryMainCalculation"},"crystal17.newk":{description:["AiiDA calculation plugin to run the properties17 executable,","    for NEWK calculations (to return the fermi energy)"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"Dict",info:"the input parameters to create the properties input file."},{name:"wf_folder",required:!0,valid_types:"FolderData, RemoteData, SinglefileData",info:"the folder containing the wavefunction fort.9 file"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"Summary Data extracted from the output file(s)"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"the main (stdout) output file was not found"},{status:211,message:"the temporary retrieved folder was not found"},{status:300,message:"An error was flagged trying to parse the crystal exec stdout file"},{status:350,message:"the input file could not be read by CRYSTAL"},{status:351,message:"CRYSTAL could not find the required wavefunction file"},{status:352,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:353,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:354,message:"Error in CHEMOD basis set modification"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:401,message:"The calculation stopped prematurely because it ran out of memory."},{status:402,message:"The calculation stopped prematurely because it ran out of virtual memory."},{status:413,message:"an error encountered usually during geometry optimisation"},{status:414,message:"an error was encountered during an SCF computation"},{status:415,message:"an unknown error was encountered, causing the MPI to abort"},{status:499,message:"The main crystal output file flagged an unhandled error"}]},class:"aiida_crystal17.calculations.prop_newk:CryNewkCalculation"},"crystal17.ppan":{description:["AiiDA calculation plugin to run the ``properties`` executable,","    for PPAN (Mulliken population analysis) calculations."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"Dict",info:"the input parameters to create the properties input file."},{name:"wf_folder",required:!0,valid_types:"FolderData, RemoteData, SinglefileData",info:"the folder containing the wavefunction fort.9 file"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"Summary Data extracted from the output file(s)"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"the main (stdout) output file was not found"},{status:211,message:"the temporary retrieved folder was not found"},{status:300,message:"An error was flagged trying to parse the crystal exec stdout file"},{status:350,message:"the input file could not be read by CRYSTAL"},{status:351,message:"CRYSTAL could not find the required wavefunction file"},{status:352,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:352,message:"parser could not find the output PPAN.dat file"},{status:353,message:"Possibly due to erroneous CHEMOD basis set modification"},{status:353,message:"error parsing output PPAN.dat file"},{status:354,message:"Error in CHEMOD basis set modification"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:401,message:"The calculation stopped prematurely because it ran out of memory."},{status:402,message:"The calculation stopped prematurely because it ran out of virtual memory."},{status:413,message:"an error encountered usually during geometry optimisation"},{status:414,message:"an error was encountered during an SCF computation"},{status:415,message:"an unknown error was encountered, causing the MPI to abort"},{status:499,message:"The main crystal output file flagged an unhandled error"}]},class:"aiida_crystal17.calculations.prop_ppan:CryPpanCalculation"}},"aiida.cmdline.data":{"crystal17.basis":"aiida_crystal17.cmndline.basis_set:basisset","crystal17.parse":"aiida_crystal17.cmndline.cmd_parser:parse","crystal17.symmetry":"aiida_crystal17.cmndline.symmetry:symmetry"},"aiida.data":{"crystal17.basisset":"aiida_crystal17.data.basis_set:BasisSetData","crystal17.gcube":"aiida_crystal17.data.gcube:GaussianCube","crystal17.kinds":"aiida_crystal17.data.kinds:KindData","crystal17.parameters":"aiida_crystal17.data.input_params:CryInputParamsData","crystal17.symmetry":"aiida_crystal17.data.symmetry:SymmetryData"},"aiida.groups":{"crystal17.basisset":"aiida_crystal17.data.basis_set:BasisSetFamily"},"aiida.parsers":{"crystal17.doss":"aiida_crystal17.parsers.cry_doss:CryDossParser","crystal17.ech3":"aiida_crystal17.parsers.cry_ech3:CryEch3Parser","crystal17.main":"aiida_crystal17.parsers.cry_main:CryMainParser","crystal17.newk":"aiida_crystal17.parsers.cry_newk:CryNewkParser","crystal17.ppan":"aiida_crystal17.parsers.cry_ppan:CryPpanParser"},"aiida.workflows":{"crystal17.main.base":{description:["Workchain to run a standard CRYSTAL17 calculation,","    with automated error handling and restarts."],spec:{inputs:[{name:"cry",required:!0,valid_types:"",info:""},{name:"basis_family",required:!1,valid_types:"Str",info:"An alternative to specifying the basis sets manually: one can specify the name of an existing basis set family and the work chain will generate the basis sets automatically based on the input structure."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"kpoints_distance",required:!1,valid_types:"Float",info:"The minimum desired distance in 1/Å between k-points in reciprocal space. The explicit k-points will be generated automatically by the input structure, and will replace the SHRINK IS value in the input parameters.Note: This methods assumes the PRIMITIVE unit cell is provided"},{name:"kpoints_force_parity",required:!1,valid_types:"Bool",info:"Optional input when constructing the k-points based on a desired `kpoints_distance`. Setting this to `True` will force the k-point mesh to have an even number of points along each lattice vector except for any non-periodic directions."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"the data extracted from the main output file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"the structure output from the calculation"},{name:"symmetry",required:!1,valid_types:"SymmetryData",info:"the symmetry data from the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"The parameters could not be validated against the jsonschema."},{status:202,message:"The explicit `basis_sets` or `basis_family` could not be used to get the necessary basis sets."},{status:204,message:"The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:320,message:"The initialization calculation failed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_crystal17.workflows.crystal_main.base:CryMainBaseWorkChain"},"crystal17.properties":{description:["A WorkChain to compute properties of a structure, using CRYSTAL.","","    Either a pre-computed wavefunction (fort.9) file,","    or inputs for a CryMainCalculation, should be supplied.","    Inputs for property calculations can then be added","    (currently available; doss, ech3)."],spec:{inputs:[{name:"check_remote",required:!1,valid_types:"Bool",info:"If a RemoteData wf_folder is input, check it contains the wavefunction file, before launching calculations. Note, this will fail if the remote computer is not immediately available"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"doss",required:!1,valid_types:"",info:""},{name:"ech3",required:!1,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"ppan",required:!1,valid_types:"",info:""},{name:"scf",required:!1,valid_types:"",info:""},{name:"test_run",required:!1,valid_types:"Bool",info:"break off the workchain before submitting a calculation"},{name:"wf_folder",required:!1,valid_types:"FolderData, RemoteData, SinglefileData",info:"the folder containing the wavefunction fort.9 file"}],outputs:[{name:"doss",required:!1,valid_types:"",info:""},{name:"ech3",required:!1,valid_types:"",info:""},{name:"ppan",required:!1,valid_types:"",info:""},{name:"scf",required:!1,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"Workchain ended before submitting calculation."},{status:201,message:"Neither a wf_folder nor scf calculation was supplied."},{status:202,message:"No property calculation inputs were supplied."},{status:203,message:"The supplied folder does contain the wavefunction file."},{status:210,message:"The SCF calculation submission failed."},{status:301,message:"The SCF calculation failed."},{status:302,message:"One or more property calculations failed."}]},class:"aiida_crystal17.workflows.crystal_props.base:CryPropertiesWorkChain"},"crystal17.sym3d":{description:["modify an AiiDa structure instance and compute its symmetry","","    Inequivalent atomic sites are dictated by atom kinds"],spec:{inputs:[{name:"settings",required:!0,valid_types:"Dict",info:""},{name:"cif",required:!1,valid_types:"CifData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"structure",required:!1,valid_types:"StructureData",info:""}],outputs:[{name:"symmetry",required:!0,valid_types:"SymmetryData",info:""},{name:"structure",required:!1,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"one of either a structure or cif input must be supplied"},{status:301,message:'the supplied structure must be 3D (i.e. have all dimensions pbc=True)"'},{status:302,message:"idealize can only be used when standardize=True"},{status:303,message:"the kind names supplied are not compatible with the structure"},{status:304,message:"error creating new structure"},{status:305,message:"error computing symmetry operations"}]},class:"aiida_crystal17.workflows.symmetrise_3d_struct:Symmetrise3DStructure"}},console_scripts:{mock_crystal17:"aiida_crystal17.tests.mock_crystal17:main",mock_properties17:"aiida_crystal17.tests.mock_properties17:main"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:6},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:5},{colorclass:"green",text:"Workflows",count:3},{colorclass:"purple",text:"Console scripts",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:4}],pip_install_cmd:"pip install aiida-crystal17",is_installable:"True"},"aiida-cusp":{code_home:"https://github.com/aiida-cusp/aiida-cusp",documentation_url:"https://aiida-cusp.readthedocs.io",entry_point_prefix:"cusp",pip_url:"https://pypi.org/project/aiida-cusp",name:"aiida-cusp",package_name:"aiida_cusp",hosted_on:"github.com",metadata:{author:"Andreas Stamminger",author_email:"stammingera@gmail.com",version:"0.1.0b2",description:"Custodian based VASP Plugin for AiiDA",classifiers:["Development Status :: 4 - Beta","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Chemistry","Environment :: Plugins","Framework :: AiiDA"]},aiida_version:">=1.3.0,<2.0.0",entry_points:{"aiida.data":{"cusp.kpoints":"aiida_cusp.data.inputs.vasp_kpoint:VaspKpointData","cusp.poscar":"aiida_cusp.data.inputs.vasp_poscar:VaspPoscarData","cusp.incar":"aiida_cusp.data.inputs.vasp_incar:VaspIncarData","cusp.potcar":"aiida_cusp.data.inputs.vasp_potcar:VaspPotcarData","cusp.vasprun":"aiida_cusp.data.outputs.vasp_vasprun:VaspVasprunData","cusp.outcar":"aiida_cusp.data.outputs.vasp_outcar:VaspOutcarData","cusp.contcar":"aiida_cusp.data.outputs.vasp_contcar:VaspContcarData","cusp.chgcar":"aiida_cusp.data.outputs.vasp_chgcar:VaspChgcarData","cusp.wavecar":"aiida_cusp.data.outputs.vasp_wavecar:VaspWavecarData","cusp.generic":"aiida_cusp.data.outputs.vasp_generic:VaspGenericData","cusp.potcarfile":"aiida_cusp.data.inputs.vasp_potcar:VaspPotcarFile"},"aiida.calculations":{"cusp.vasp":"aiida_cusp.calculators.vasp_calculation:VaspCalculation"},"aiida.parsers":{"cusp.default":"aiida_cusp.parsers.vasp_file_parser:VaspFileParser"},"aiida.cmdline.data":{potcar:"aiida_cusp.cli.potcar_cmd:potcar"}},commits_count:70,development_status:"beta",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:11},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install https://pypi.org/project/aiida-cusp",is_installable:"False"},"aiida-dataframe":{entry_point_prefix:"dataframe",plugin_info:"https://raw.github.com/janssenhenning/aiida-dataframe/main/pyproject.toml",code_home:"https://github.com/janssenhenning/aiida-dataframe",version_file:"https://raw.githubusercontent.com/janssenhenning/aiida-dataframe/main/aiida_dataframe/__init__.py",pip_url:"aiida-dataframe",documentation_url:"https://aiida-dataframe.readthedocs.io/en/latest/",name:"aiida-dataframe",package_name:"aiida_dataframe",hosted_on:"github.com",metadata:{description:"AiiDA data plugin for pandas DataFrame objects",author_email:"Henning Janßen <henning.janssen@gmx.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"0.1.3"},aiida_version:">=1.0,<3",entry_points:{"aiida.cmdline.data":{dataframe:"aiida_dataframe.cli:data_cli"},"aiida.data":{"dataframe.frame":"aiida_dataframe.data.dataframe:PandasFrameData"}},commits_count:13,development_status:"beta",summaryinfo:[{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-dataframe",is_installable:"True"},"aiida-ddec":{code_home:"https://github.com/lsmo-epfl/aiida-ddec",entry_point_prefix:"ddec",pip_url:"git+https://github.com/yakutovicha/aiida-ddec",name:"aiida-ddec",package_name:"aiida_ddec",hosted_on:"github.com",metadata:{author:"Aliaksandr Yakutovich",author_email:"aliaksandr.yakutovich@epfl.ch",version:"1.1.0",description:"AiiDA plugin for DDEC code",classifiers:["License :: OSI Approved :: MIT License","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Framework :: AiiDA","Development Status :: 5 - Production/Stable"]},aiida_version:">=1.1.0,<3",entry_points:{"aiida.calculations":{ddec:{description:["AiiDA plugin for the ddec code that performs density derived","    electrostatic and chemical atomic population analysis."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters such as net charge, protocol, atomic densities path, ..."},{name:"charge_density_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder (for restarts and similar)"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"structure_ddec",required:!0,valid_types:"CifData",info:"structure with DDEC charges"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"The retrieved folder does not contain an output file."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_ddec.calculations:DdecCalculation"}},"aiida.parsers":{ddec:"aiida_ddec.parsers:DdecParser"},"aiida.workflows":{"ddec.cp2k_ddec":"aiida_ddec.workchains:Cp2kDdecWorkChain"}},commits_count:9,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/yakutovicha/aiida-ddec",is_installable:"True"},"aiida-defects":{code_home:"https://github.com/epfl-theos/aiida-defects",entry_point_prefix:"defects",pip_url:"aiida-defects",plugin_info:"https://raw.githubusercontent.com/epfl-theos/aiida-defects/master/pyproject.toml",name:"aiida-defects",package_name:"aiida_defects",hosted_on:"github.com",metadata:{description:"AiiDA-Defects is a plugin for the AiiDA computational materials science framework, and provides tools and automated workflows for the study of defects in materials.",author:"The AiiDA-Defects developers",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"1.0.1"},aiida_version:">=2.0,<3",entry_points:{"aiida.data":{"defects.array.stability":"aiida_defects.data.data:StabilityData"},"aiida.workflows":{"defects.formation_energy.chemical_potential":"aiida_defects.formation_energy.chemical_potential.chemical_potential:ChemicalPotentialWorkchain","defects.formation_energy.corrections.gaussian_countercharge":"aiida_defects.formation_energy.corrections.gaussian_countercharge.gaussian_countercharge:GaussianCounterChargeWorkchain","defects.formation_energy.corrections.gaussian_countercharge.model_potential":"aiida_defects.formation_energy.corrections.gaussian_countercharge.model_potential.model_potential:ModelPotentialWorkchain","defects.formation_energy.corrections.point_countercharge":"aiida_defects.formation_energy.corrections.point_countercharge.point_countercharge:PointCounterChargeWorkchain","defects.formation_energy.potential_alignment":"aiida_defects.formation_energy.potential_alignment.potential_alignment:PotentialAlignmentWorkchain","defects.formation_energy.qe":"aiida_defects.formation_energy.formation_energy_qe:FormationEnergyWorkchainQE","defects.formation_energy.siesta":"aiida_defects.formation_energy.formation_energy_siesta:FormatonEnergyWorkchainSiesta"}},commits_count:10,development_status:"beta",summaryinfo:[{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:7}],pip_install_cmd:"pip install aiida-defects",is_installable:"True"},"aiida-diff":{code_home:"https://github.com/aiidateam/aiida-diff",development_status:"stable",documentation_url:"https://aiida-diff.readthedocs.io/",entry_point_prefix:"diff",pip_url:"git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0",name:"aiida-diff",package_name:"aiida_diff",hosted_on:"github.com",metadata:{description:"AiiDA demo plugin that wraps the `diff` executable for computing the difference between two files.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"The AiiDA Team"},aiida_version:">=2.0,<3",entry_points:{"aiida.data":{diff:"aiida_diff.data:DiffParameters"},"aiida.calculations":{diff:"aiida_diff.calculations:DiffCalculation"},"aiida.parsers":{diff:"aiida_diff.parsers:DiffParser"},"aiida.cmdline.data":{diff:"aiida_diff.cli:data_cli"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0",is_installable:"False"},"aiida-donothing":{code_home:"https://github.com/atztogo/aiida-donothing",entry_point_prefix:"donothing",name:"aiida-donothing",package_name:"aiida_donothing",hosted_on:"github.com",metadata:{author:"Atsushi Togo",author_email:"atz.togo@gmail.com",version:"0.1",description:"AiiDA calculation plugin for doing nothing",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.6.5,<2.0.0",entry_points:{"aiida.calculations":{"donothing.donothing":"aiida_donothing.calculations.donothing:DoNothingCalculation"},"aiida.parsers":{"donothing.donothing":"aiida_donothing.parsers.donothing:DoNothingParser"}},commits_count:1,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"See source code repository."},"aiida-dynamic-workflows":{code_home:"https://github.com/microsoft/aiida-dynamic-workflows",entry_point_prefix:"dynamic_workflows",name:"aiida-dynamic-workflows",package_name:"aiida_dynamic_workflows",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-environ":{code_home:"https://github.com/environ-developers/aiida-environ",entry_point_prefix:"environ",pip_url:"git+https://github.com/environ-developers/aiida-environ",name:"aiida-environ",package_name:"aiida_environ",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/environ-developers/aiida-environ"},"aiida-eon":{code_home:"https://github.com/HaoZeke/aiida-eon",entry_point_prefix:"eon",name:"aiida-eon",package_name:"aiida_eon",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-eonclient":{code_home:"https://github.com/HaoZeke/aiida-eonclient",entry_point_prefix:"eonclient",name:"aiida-eonclient",package_name:"aiida_eonclient",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-fenics":{code_home:"https://github.com/sphuber/aiida-fenics/tree/master",entry_point_prefix:"fenics",pip_url:"git+https://github.com/sphuber/aiida-fenics",name:"aiida-fenics",package_name:"aiida_fenics",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:-1,development_status:"planning",summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/sphuber/aiida-fenics"},"aiida-firecrest":{code_home:"https://github.com/aiidateam/aiida-firecrest",entry_point_prefix:"firecrest",pip_url:"aiida-firecrest",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-firecrest/main/pyproject.toml",name:"aiida-firecrest",package_name:"aiida_firecrest",hosted_on:"github.com",metadata:{description:"AiiDA Transport/Scheduler plugins for interfacing with FirecREST.",author_email:"Chris Sewell <chrisj_sewell@hotmail.com>",classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.1.0a1"},aiida_version:"<2",entry_points:{"aiida.schedulers":{firecrest:"aiida_firecrest.scheduler:FirecrestScheduler"},"aiida.transports":{firecrest:"aiida_firecrest.transport:FirecrestTransport"},console_scripts:{"aiida-firecrest-cli":"aiida_firecrest.cli:main"}},commits_count:19,development_status:"alpha",summaryinfo:[{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Schedulers, Transports)",count:2}],pip_install_cmd:"pip install --pre aiida-firecrest",is_installable:"True"},"aiida-fireworks-scheduler":{code_home:"https://github.com/zhubonan/aiida-fireworks-scheduler",development_status:"beta",documentation_url:"https://aiida-fireworks-scheduler.readthedocs.io",entry_point_prefix:"fireworks_scheduler",pip_url:"git+https://github.com/zhubonan/aiida-fireworks-scheduler",name:"aiida-fireworks-scheduler",package_name:"aiida_fireworks_scheduler",hosted_on:"github.com",metadata:{author:"Bonan Zhu",author_email:"zhubonan@outlook.com",version:"1.2.0",description:"AiiDA plugin to allow using `fireworks` as the execution engine for `CalcJob`.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:null,entry_points:{"aiida.schedulers":{fireworks:"aiida_fireworks_scheduler.fwscheduler:FwScheduler","fireworks_scheduler.default":"aiida_fireworks_scheduler.fwscheduler:FwScheduler","fireworks_scheduler.keepenv":"aiida_fireworks_scheduler.fwscheduler:FwSchedulerKeepEnv"},"aiida.cmdline.data":{"fireworks-scheduler":"aiida_fireworks_scheduler.cmdline:fw_cli"},console_scripts:{arlaunch:"aiida_fireworks_scheduler.scripts.arlaunch_run:arlaunch"}},commits_count:0,summaryinfo:[{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Schedulers)",count:4}],pip_install_cmd:"pip install git+https://github.com/zhubonan/aiida-fireworks-scheduler",is_installable:"True"},"aiida-fleur":{code_home:"https://github.com/JuDFTteam/aiida-fleur/tree/develop",development_status:"stable",documentation_url:"https://aiida-fleur.readthedocs.io/",entry_point_prefix:"fleur",pip_url:"aiida-fleur",plugin_info:"https://raw.github.com/JuDFTteam/aiida-fleur/develop/setup.json",name:"aiida-fleur",package_name:"aiida_fleur",hosted_on:"github.com",metadata:{description:"AiiDA Plugin for running the FLEUR code and its input generator. Also includes high-level workchains and utilities",author_email:"The JuDFT team <j.broeder@fz-juelich.de>",classifiers:["Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.0.0"},aiida_version:">=2.0.1,<3.0.0",entry_points:{"aiida.calculations":{"fleur.fleur":{description:["A CalcJob class that represents FLEUR DFT calculation.","    For more information about the FLEUR-code family go to http://www.flapw.de/"],spec:{inputs:[{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:"Use a FleurinpData node that specifies the input parametersusually copy from the parent calculation, basically makesthe inp.xml file visible in the db and makes sure it has the files needed."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote or local repository folder as parent folder (also for restarts and similar). It should contain all the needed files for a Fleur calc, only edited files should be uploaded from the repository."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"error_params",required:!1,valid_types:"Dict",info:""},{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_params_complex",required:!1,valid_types:"Dict",info:""},{name:"relax_parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"No retrieved folder found."},{status:301,message:"One of the output files can not be opened."},{status:302,message:"FLEUR calculation failed for unknown reason."},{status:303,message:"XML output file was not found."},{status:304,message:"Parsing of XML output file failed."},{status:305,message:"Parsing of relax XML output file failed."},{status:310,message:"FLEUR calculation failed due to lack of memory."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:312,message:"FLEUR calculation failed due to MT overlap."},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:314,message:"Problem with cdn is suspected. Consider removing cdn"},{status:315,message:"The LDA+U density matrix contains invalid elements."},{status:316,message:"Calculation failed due to time limits."},{status:318,message:"Calculation failed due to missing dependency ({name}) for given calculation."}]},class:"aiida_fleur.calculation.fleur:FleurCalculation"},"fleur.inpgen":{description:["JobCalculationClass for the inpgen, which is a preprocessor for a FLEUR calculation.","    For more information about produced files and the FLEUR-code family, go to http://www.flapw.de/."],spec:{inputs:[{name:"structure",required:!0,valid_types:"StructureData",info:"Choose the input structure to use"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Use a node that specifies the input parameters for the namelists"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"fleurinp",required:!0,valid_types:"FleurinpData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"No retrieved folder found."},{status:301,message:"One of the output files can not be opened."},{status:306,message:"XML input file was not found."},{status:307,message:"Some required files were not retrieved."},{status:308,message:"During parsing: FleurinpData could not be initialized, see log. "},{status:309,message:"During parsing: FleurinpData failed validation."},{status:310,message:"The profile {profile} is not known to the used inpgen code"}]},class:"aiida_fleur.calculation.fleurinputgen:FleurinputgenCalculation"}},"aiida.data":{"fleur.fleurinp":"aiida_fleur.data.fleurinp:FleurinpData"},"aiida.parsers":{"fleur.fleurinpgenparser":"aiida_fleur.parsers.fleur_inputgen:Fleur_inputgenParser","fleur.fleurparser":"aiida_fleur.parsers.fleur:FleurParser"},"aiida.workflows":{"fleur.banddos":{description:["This workflow calculated a bandstructure from a Fleur calculation","","    :Params: a Fleurcalculation node","    :returns: Success, last result node, list with convergence behavior"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"banddos_calc",required:!0,valid_types:"",info:""},{name:"output_banddos_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_banddos_wc_bands",required:!1,valid_types:"BandsData",info:""},{name:"output_banddos_wc_dos",required:!1,valid_types:"XyData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"SCF calculation failed."},{status:335,message:"Found no SCF calculation remote repository."}]},class:"aiida_fleur.workflows.banddos:FleurBandDosWorkChain"},"fleur.base":{description:["Workchain to run a FLEUR calculation with automated error handling and restarts"],spec:{inputs:[{name:"options",required:!0,valid_types:"Dict",info:"Optional parameters to set up computational details."},{name:"add_comp_para",required:!1,valid_types:"Dict",info:"Gives additional control over computational parametersonly_even_MPI: set to true if you want to suppress odd number of MPI processes in parallelisation.This might speedup a calculation for machines having even number of sockets per node.max_queue_nodes: maximal number of nodes allowed on the remote machine. Used only to automatically solve some FLEUR failures.max_queue_wallclock_sec: maximal wallclock time allowed on the remote machine. Used only to automatically solve some FLEUR failures."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"description",required:!1,valid_types:"str, NoneType",info:"Calculation description."},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:"Use a FleurinpData node that specifies the input parametersusually copy from the parent calculation, basically makesthe inp.xml file visible in the db and makes sure it has the files needed."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"label",required:!1,valid_types:"str, NoneType",info:"Calculation label."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote or local repository folder as parent folder (also for restarts and similar). It should contain all the needed files for a Fleur calc, only edited files should be uploaded from the repository."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"error_params",required:!1,valid_types:"Dict",info:""},{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_params_complex",required:!1,valid_types:"Dict",info:""},{name:"relax_parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:388,message:"Computational resources are not optimal."},{status:389,message:"Computational resources are not optimal."},{status:390,message:"Computational resources are not optimal."},{status:399,message:"FleurCalculation failed and FleurBaseWorkChain has no strategy to resolve this"},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_fleur.workflows.base_fleur:FleurBaseWorkChain"},"fleur.base_relax":{description:["Workchain to run Relax WorkChain with automated error handling and restarts"],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"description",required:!1,valid_types:"str, NoneType",info:"Calculation description."},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"label",required:!1,valid_types:"str, NoneType",info:"Calculation label."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"last_scf",required:!0,valid_types:"",info:""},{name:"optimized_structure",required:!0,valid_types:"StructureData",info:""},{name:"output_relax_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:399,message:"FleurRelaxWorkChain failed and FleurBaseRelaxWorkChain has no strategy to resolve this"},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_fleur.workflows.base_relax:FleurBaseRelaxWorkChain"},"fleur.cfcoeff":{description:["Workflow for calculating rare-earth crystal field coefficients"],spec:{inputs:[{name:"metadata",required:!1,valid_types:"",info:""},{name:"orbcontrol",required:!1,valid_types:"Data",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"scf_rare_earth_analogue",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_cfcoeff_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_cfcoeff_wc_charge_densities",required:!1,valid_types:"XyData",info:""},{name:"output_cfcoeff_wc_potentials",required:!1,valid_types:"XyData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:345,message:"Convergence scf workflow failed."},{status:451,message:"Convergence orbcontrol workflow failed."},{status:452,message:"CF calculation failed."}]},class:"aiida_fleur.workflows.cfcoeff:FleurCFCoeffWorkChain"},"fleur.corehole":{description:["Turn key solution for a corehole calculation with the FLEUR code.","    Has different protocols for different core-hole types (valence, charge).","","    Calculates supercells. Extracts binding energies","    for certain corelevels from the total energy differences a the calculation with","    corehole and without.","","    Documentation:","    See help for details.","","    Two paths are possible:","","    (1) Start from a structure -> workchains run inpgen first (recommended)","    (2) Start from a Fleurinp data object","","    Also it is recommended to provide a calc parameter node for the structure","","    :param wf_parameters: Dict node, specify, resources and what should be calculated","    :param structure: structureData node, crystal structure","    :param calc_parameters: Dict node, inpgen parameters for the crystal structure","    :param fleurinp:  fleurinpData node,","    :param inpgen: Code node,","    :param fleur: Code node,","","    :return: output_corehole_wc_para Dict node,  successful=True if no error","","    :uses workchains: fleur_scf_wc, fleur_relax_wc","    :uses calcfunctions: supercell, create_corehole_result_node, prepare_struc_corehole_wf"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"inpgen",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_corehole_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:1,message:"The input resources are invalid."},{status:2,message:"The process failed with legacy failure mode."},{status:2,message:"Input resources are missing."},{status:3,message:"The code provided is invalid, or not of the right kind."},{status:4,message:"Inpgen calculation FAILED, check output"},{status:5,message:"Changing of the FLEURINP data went wrong, check log."},{status:6,message:"The FLEUR input file for the calculation did not validate."},{status:7,message:"At least one FLEUR calculation FAILED, check the output and log."},{status:8,message:"At least one FLEUR calculation did not/could not reach thedesired convergece Criteria, with the current parameters."},{status:9,message:"Something went wrong in the determiation what coreholes to calculate, probably the input format was not correct. Check log."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.corehole:FleurCoreholeWorkChain"},"fleur.create_magnetic":{description:["This workflow creates relaxed magnetic film on a substrate."],spec:{inputs:[{name:"distance_suggestion",required:!1,valid_types:"Dict, NoneType",info:""},{name:"eos",required:!1,valid_types:"Data",info:""},{name:"eos_output",required:!1,valid_types:"Dict, NoneType",info:""},{name:"interlayer_dist",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"optimized_structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"relax",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"magnetic_structure",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:380,message:"Specified substrate has to be bcc or fcc."},{status:382,message:"Relaxation calculation failed."},{status:383,message:"EOS WorkChain failed."}]},class:"aiida_fleur.workflows.create_magnetic_film:FleurCreateMagneticWorkChain"},"fleur.dmi":{description:["This workflow calculates DMI energy dispersion of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_dmi_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.dmi:FleurDMIWorkChain"},"fleur.dos":{description:["DEPRECATED: Use FleurBandDosWorkChain instead (entrypoint fleur.banddos)","    This workflow calculated a DOS from a Fleur calculation","","    :Params: a Fleurcalculation node","    :returns: Success, last result node, list with convergence behavior","","    wf_parameters: {  'tria', 'nkpts', 'sigma', 'emin', 'emax'}","    defaults : tria = True, nkpts = 800, sigma=0.005, emin= -0.3, emax = 0.8"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.dos:fleur_dos_wc"},"fleur.eos":{description:["This workflow calculates the equation of states of a structure.","    Calculates several unit cells with different volumes.","    A Birch_Murnaghan  equation of states fit determines the Bulk modulus and the","    groundstate volume of the cell.","","    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict","    :params structure: StructureData node, 'structure' crystal structure","    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen","    :params inpgen: Code node,","    :params fleur: Code node,","","","    :return output_eos_wc_para: Dict node, contains relevant output information.","                                about general succeed, fit results and so on."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_eos_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_eos_wc_structure",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:400,message:"At least one of the SCF sub processes did not finish successfully."}]},class:"aiida_fleur.workflows.eos:FleurEosWorkChain"},"fleur.init_cls":{description:["Turn key solution for the calculation of core level shift"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_initial_cls_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.initial_cls:FleurInitialCLSWorkChain"},"fleur.mae":{description:["This workflow calculates the Magnetic Anisotropy Energy of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_mae_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.mae:FleurMaeWorkChain"},"fleur.mae_conv":{description:["This workflow calculates the Magnetic Anisotropy Energy of a structure."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_mae_conv_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:343,message:"Convergence MAE calculation failed for all SQAs."},{status:344,message:"Convergence MAE calculation failed for some SQAs."}]},class:"aiida_fleur.workflows.mae_conv:FleurMaeConvWorkChain"},"fleur.orbcontrol":{description:["Workchain for determining the groundstate density matrix in an DFT+U","    calculation. This is done in 2 or 3 steps:","","        1. Converge the system without DFT+U (a converged calculation can be","           provided to skip this step)","        2. A fixed number of iterations is run with fixed density matrices","           either generated as all distinct permutations for the given occupations","           or the explicitly given configurations","        3. The system and density matrix is relaxed","","    :param wf_parameters: (Dict), Workchain Specifications","    :param scf_no_ldau: (Dict), Inputs to a FleurScfWorkChain providing the initial system","                                either converged or staring from a structure","    :param scf_with_ldau: (Dict), Inputs to a FleurScfWorkChain. Only the wf_parameters are valid","    :param fleurinp: (FleurinpData) FleurinpData to start from if no SCF should be done","    :param remote: (RemoteData) RemoteData to start from if no SCF should be done","    :param structure: (StructureData) Structure to start from if no SCF should be done","    :param calc_parameters: (Dict), Inpgen Parameters","    :param settings: (Dict), additional settings for e.g retrieving files","    :param options: (Dict), Options for the submission of the jobs","    :param inpgen: (Code)","    :param fleur: (Code)"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fixed_remotes",required:!1,valid_types:"RemoteData",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"options_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"relaxed_remotes",required:!1,valid_types:"RemoteData",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf_no_ldau",required:!1,valid_types:"Data",info:"Inputs for SCF Workchain before adding LDA+U"},{name:"scf_with_ldau",required:!1,valid_types:"Data",info:"Inputs for SCF Workchain after the LDA+U matrix was fixed"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"groundstate_scf",required:!0,valid_types:"",info:""},{name:"output_orbcontrol_wc_para",required:!0,valid_types:"Dict",info:""},{name:"groundstate_denmat",required:!1,valid_types:"SinglefileData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Input codes do not correspond to fleur or inpgen respectively."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:342,message:"Convergence LDA+U calculation failed for some Initial configurations."},{status:343,message:"Convergence LDA+U calculation failed for all Initial configurations."},{status:360,message:"Inpgen calculation failed."},{status:450,message:"Convergence workflow without LDA+U failed."}]},class:"aiida_fleur.workflows.orbcontrol:FleurOrbControlWorkChain"},"fleur.relax":{description:["This workflow performs structure optimization."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"last_scf",required:!0,valid_types:"",info:""},{name:"optimized_structure",required:!0,valid_types:"StructureData",info:""},{name:"output_relax_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"If you want to run a final scf inpgen has to be there."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:350,message:"Optimization cycle did not lead to convergence of forces."},{status:351,message:"SCF Workchains failed for some reason."},{status:352,message:"Found no relaxed structure info in the output of SCF"},{status:353,message:"Found no SCF output"},{status:354,message:"Force is small, switch to BFGS"}]},class:"aiida_fleur.workflows.relax:FleurRelaxWorkChain"},"fleur.relax_torque":{description:["This workflow performs spin structure optimization."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_relax_torque_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"If you want to run a final scf inpgen has to be there."},{status:350,message:"Optimization cycle did not lead to convergence."},{status:351,message:"An SCF Workchain failed for some reason."}]},class:"aiida_fleur.workflows.relax_torque:FleurRelaxTorqueWorkChain"},"fleur.scf":{description:["Workchain for converging a FLEUR calculation (SCF).","","    It converges the charge density, total energy or the largest force.","    Two paths are possible:","","    (1) Start from a structure and run the inpgen first optional with calc_parameters","    (2) Start from a Fleur calculation, with optional remoteData","","    :param wf_parameters: (Dict), Workchain Specifications","    :param structure: (StructureData), Crystal structure","    :param calc_parameters: (Dict), Inpgen Parameters","    :param fleurinp: (FleurinpData), to start with a Fleur calculation","    :param remote_data: (RemoteData), from a Fleur calculation","    :param inpgen: (Code)","    :param fleur: (Code)","","    :return: output_scf_wc_para (Dict), Information of workflow results","        like Success, last result node, list with convergence behavior"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"fleurinp",required:!0,valid_types:"FleurinpData",info:""},{name:"last_calc",required:!0,valid_types:"",info:""},{name:"output_scf_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Input codes do not correspond to fleur or inpgen respectively."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:360,message:"Inpgen calculation failed."},{status:361,message:"Fleur calculation failed."},{status:362,message:"SCF cycle did not lead to convergence."}]},class:"aiida_fleur.workflows.scf:FleurScfWorkChain"},"fleur.ssdisp":{description:["This workflow calculates spin spiral dispersion of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_ssdisp_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.ssdisp:FleurSSDispWorkChain"},"fleur.ssdisp_conv":{description:["This workflow calculates the Spin Spiral Dispersion of a structure."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_ssdisp_conv_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:340,message:"Convergence SSDisp calculation failed for all q-vectors."},{status:341,message:"Convergence SSDisp calculation failed for some q-vectors."}]},class:"aiida_fleur.workflows.ssdisp_conv:FleurSSDispConvWorkChain"},"fleur.strain":{description:["This workflow calculates the deformation potential a structure = -BdEg/dP = d(Eg)/d(ln(V)).","    Calculates several unit cells with different volumes.","    A Birch_Murnaghan  equation of states fit determines the Bulk modulus(B) and the","    ground-state volume of the cell.","","    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict","    :params structure: StructureData node, 'structure' crystal structure","    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen","    :params inpgen: Code node,","    :params fleur: Code node,","","","    :return output_strain_wc_para: Dict node, contains relevant output information.","                                about general succeed, fit results and so on."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"inpgen",required:!0,valid_types:"Code",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_strain_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:331,message:"Invalid code node specified, check inpgen and fleur code nodes."}]},class:"aiida_fleur.workflows.strain:FleurStrainWorkChain"}},console_scripts:{"aiida-fleur":"aiida_fleur.cmdline:cmd_root"}},commits_count:202,summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:19},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-fleur",is_installable:"True"},"aiida-flexpart":{code_home:"https://github.com/aiidaplugins/aiida-flexpart",entry_point_prefix:"flexpart",pip_url:"git+https://github.com/aiidaplugins/aiida-flexpart",name:"aiida-flexpart",package_name:"aiida_flexpart",hosted_on:"github.com",metadata:{author:"The AiiDA Team",author_email:"aliaksandr.yakutovich@empa.ch",version:"0.1.0a0",description:"AiiDA plugin for the FLEXPART code (simulation of atmospheric transport processes).",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.6.5,<3.0.0",entry_points:{"aiida.calculations":{"flexpart.cosmo":"aiida_flexpart.calculations.cosmo:FlexpartCosmoCalculation"},"aiida.parsers":{"flexpart.cosmo":"aiida_flexpart.parsers.cosmo:FlexpartCosmoParser"},"aiida.workflows":{"flexpart.multi_dates":"aiida_flexpart.workflows.multi_dates_workflow:FlexpartMultipleDatesWorkflow"}},commits_count:0,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/aiidaplugins/aiida-flexpart"},"aiida-gaussian":{code_home:"https://github.com/nanotech-empa/aiida-gaussian",entry_point_prefix:"gaussian",pip_url:"aiida-gaussian",plugin_info:"https://raw.githubusercontent.com/nanotech-empa/aiida-gaussian/master/pyproject.toml",name:"aiida-gaussian",package_name:"aiida_gaussian",hosted_on:"github.com",metadata:{description:"AiiDA plugin for the Gaussian quantum chemistry software.",author:"Kristjan Eimre, Pezhman Zarabadi-Poor, Aliaksandr Yakutovich",license:"MIT",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python :: 3","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Software Development :: Libraries :: Python Modules"],version:"2.0.4"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{gaussian:"aiida_gaussian.calculations:GaussianCalculation","gaussian.cubegen":"aiida_gaussian.calculations:CubegenCalculation","gaussian.formchk":"aiida_gaussian.calculations:FormchkCalculation"},"aiida.parsers":{"gaussian.advanced":"aiida_gaussian.parsers.gaussian:GaussianAdvancedParser","gaussian.base":"aiida_gaussian.parsers.gaussian:GaussianBaseParser","gaussian.cubegen_base":"aiida_gaussian.parsers.cubegen:CubegenBaseParser"},"aiida.workflows":{"gaussian.base":"aiida_gaussian.workchains:GaussianBaseWorkChain","gaussian.cubes":"aiida_gaussian.workchains:GaussianCubesWorkChain"}},commits_count:20,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"green",text:"Workflows",count:2}],pip_install_cmd:"pip install aiida-gaussian",is_installable:"False"},"aiida-gaussian-datatypes":{code_home:"https://github.com/dev-zero/aiida-gaussian-datatypes",documentation_url:"https://github.com/dev-zero/aiida-gaussian-datatypes/blob/master/README.md",entry_point_prefix:"gaussian",pip_url:"aiida-gaussian-datatypes",plugin_info:"https://raw.github.com/dev-zero/aiida-gaussian-datatypes/master/setup.json",name:"aiida-gaussian-datatypes",package_name:"aiida_gaussian_datatypes",hosted_on:"github.com",metadata:{description:"AiiDA data plugin to manage gaussian datatypes (basis sets and pseudopotentials) as first-class citizens",author:"Tiziano Müller",author_email:"tiziano.mueller@chem.uzh.ch",license:"MIT License",home_page:"https://github.com/dev-zero/aiida-gaussian-datatypes",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.5.1"},aiida_version:">=1.6.2",entry_points:{"aiida.cmdline.data":{"gaussian.basisset":"aiida_gaussian_datatypes.basisset.cli:cli","gaussian.pseudo":"aiida_gaussian_datatypes.pseudopotential.cli:cli"},"aiida.data":{"gaussian.basisset":"aiida_gaussian_datatypes.basisset.data:BasisSet","gaussian.pseudo":"aiida_gaussian_datatypes.pseudopotential.data:Pseudopotential"},"aiida.groups":{"gaussian.basisset":"aiida_gaussian_datatypes.groups:BasisSetGroup","gaussian.pseudo":"aiida_gaussian_datatypes.groups:PseudopotentialGroup"}},commits_count:0,development_status:"beta",summaryinfo:[{colorclass:"red",text:"Data",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:4}],pip_install_cmd:"pip install aiida-gaussian-datatypes",is_installable:"True"},"aiida-gollum":{code_home:"https://github.com/garsua/aiida-gollum/",documentation_url:"https://aiida-gollum.readthedocs.io/",entry_point_prefix:"gollum",pip_url:"git+https://github.com/garsua/aiida-gollum",name:"aiida-gollum",package_name:"aiida_gollum",hosted_on:"github.com",metadata:{author:"Victor M. Garcia-Suarez",author_email:"vm.garcia@cinn.es",version:"0.12.0",description:"A plugin for Gollum functionality within AiiDA framework.",classifiers:["License :: OSI Approved :: MIT License","Framework :: AiiDA","Programming Language :: Python :: 2.7","Development Status :: 1 - Alpha"]},aiida_version:">=0.12.0",entry_points:{"aiida.calculations":{"gollum.gollum":"aiida_gollum.calculations.gollum:GollumCalculation"},"aiida.parsers":{"gollum.parser":"aiida_gollum.parsers.gollum:GollumParser"}},commits_count:0,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/garsua/aiida-gollum"},"aiida-graphql":{code_home:"https://github.com/dev-zero/aiida-graphql",entry_point_prefix:"graphql",pip_url:"aiida-graphql",name:"aiida-graphql",package_name:"aiida_graphql",hosted_on:"github.com",metadata:{description:"Strawberry-based GraphQL API Server for AiiDA",author:"Tiziano Müller",author_email:"tiziano.mueller@chem.uzh.ch",license:"MIT",home_page:"https://github.com/dev-zero/aiida-graphql",classifiers:["Development Status :: 3 - Alpha","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.0.2"},aiida_version:">=1.0.0b6,<2.0.0",entry_points:{},commits_count:0,development_status:"alpha",summaryinfo:[],pip_install_cmd:"pip install aiida-graphql",is_installable:"True"},"aiida-gromacs":{code_home:"https://github.com/jimboid/aiida-gromacs",documentation_url:"https://aiida-gromacs.readthedocs.io/",entry_point_prefix:"gromacs",pip_url:"git+https://github.com/jimboid/aiida-gromacs",name:"aiida-gromacs",package_name:"aiida_gromacs",hosted_on:"github.com",metadata:{description:"A plugin for using GROMACS with AiiDA for molecular dymanics simulations.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"James Gebbie-Rayet",author_email:"james.gebbie@stfc.ac.uk"},aiida_version:">=2.0,<3",entry_points:{"aiida.data":{"gromacs.pdb2gmx":"aiida_gromacs.data.pdb2gmx:Pdb2gmxParameters","gromacs.editconf":"aiida_gromacs.data.editconf:EditconfParameters","gromacs.genion":"aiida_gromacs.data.genion:GenionParameters","gromacs.grompp":"aiida_gromacs.data.grompp:GromppParameters","gromacs.mdrun":"aiida_gromacs.data.mdrun:MdrunParameters","gromacs.solvate":"aiida_gromacs.data.solvate:SolvateParameters"},"aiida.calculations":{"gromacs.pdb2gmx":{description:["AiiDA calculation plugin wrapping the 'gmx pdb2gmx' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Pdb2gmxParameters",info:"Command line parameters for gmx pdb2gmx"},{name:"pdbfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"itpfile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"n_file",required:!1,valid_types:"SinglefileData",info:"Output index file"},{name:"q_file",required:!1,valid_types:"SinglefileData",info:"Output Structure file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.pdb2gmx:Pdb2gmxCalculation"},"gromacs.editconf":{description:["AiiDA calculation plugin wrapping the 'gmx editconf' executable.","","    AiiDA plugin wrapper for adding a simulation box to structure file."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure file."},{name:"parameters",required:!0,valid_types:"EditconfParameters",info:"Command line parameters for gmx editconf."},{name:"bf_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Generic data file."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output file containing simulation box."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"mead_file",required:!1,valid_types:"SinglefileData",info:"Coordination file for MEAD"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.editconf:EditconfCalculation"},"gromacs.genion":{description:["AiiDA calculation plugin wrapping the 'gmx genion' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"GenionParameters",info:"Command line parameters for gmx genion"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology file."},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Input tpr file."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output gro file with ions added."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output topology with ions added."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.genion:GenionCalculation"},"gromacs.grompp":{description:["AiiDA calculation plugin wrapping the 'gmx grompp' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure"},{name:"mdpfile",required:!0,valid_types:"SinglefileData",info:"grompp run file."},{name:"parameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"e_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Energy file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file"},{name:"qmi_file",required:!1,valid_types:"SinglefileData, NoneType",info:"QM input file"},{name:"r_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Structure file"},{name:"rb_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Structure file"},{name:"ref_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Full precision trajectory file"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"t_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Full precision trajectory file"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Output gro file ready for adding ions."},{name:"imd_file",required:!1,valid_types:"SinglefileData",info:"Coordinate file in Gromos-87 format"},{name:"po_file",required:!1,valid_types:"SinglefileData",info:"grompp input file with MD parameters"},{name:"pp_file",required:!1,valid_types:"SinglefileData",info:"Topology file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.grompp:GromppCalculation"},"gromacs.mdrun":{description:["AiiDA calculation plugin wrapping the 'gmx mdrun' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun"},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"awh_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"cpi_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Checkpoint file"},{name:"ei_file",required:!1,valid_types:"SinglefileData, NoneType",info:"ED sampling input"},{name:"membed_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Generic data file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"mn_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file"},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"mp_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Topology file"},{name:"multidir_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Run directory"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"rerun_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Trajectory: xtc trr cpt gro g96 pdb tng"},{name:"table_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"tableb_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"tablep_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"}],outputs:[{name:"enfile",required:!0,valid_types:"SinglefileData",info:"Output energy file."},{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output structure file."},{name:"logfile",required:!0,valid_types:"SinglefileData",info:"Output log file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"trrfile",required:!0,valid_types:"SinglefileData",info:"Output trajectory."},{name:"cptfile",required:!1,valid_types:"SinglefileData",info:"Checkpoint file."},{name:"dhdl_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"eo_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"field_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"if_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"mtx_file",required:!1,valid_types:"SinglefileData",info:"Hessian Matrix"},{name:"pf_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"px_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"ra_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"ro_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"rs_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"rt_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"swap_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"tpi_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"tpid_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"x_file",required:!1,valid_types:"SinglefileData",info:"Compressed trajectory (tng format or portable xdr format)"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.mdrun:MdrunCalculation"},"gromacs.solvate":{description:["AiiDA calculation plugin wrapping the 'gmx solvate' executable.","","    AiiDA plugin wrapper for solvating a molecular system."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure"},{name:"parameters",required:!0,valid_types:"SolvateParameters",info:"Command line parameters for gmx solvate."},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output solvated gro file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output topology file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.solvate:SolvateCalculation"},"general-MD":{description:["AiiDA calculation plugin wrapping an executable with user defined","    input and output files."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"input_files",required:!1,valid_types:"SinglefileData",info:"Dictionary of input files."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"output_files",required:!1,valid_types:"List, NoneType",info:"List of output file names."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"log",required:!1,valid_types:"SinglefileData",info:"link to the default file.out."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."},{status:301,message:"Specified output file not produced by command."}]},class:"aiida_gromacs.calculations.generalMD:GeneralCalculation"}},"aiida.parsers":{"gromacs.pdb2gmx":"aiida_gromacs.parsers.pdb2gmx:Pdb2gmxParser","gromacs.editconf":"aiida_gromacs.parsers.editconf:EditconfParser","gromacs.genion":"aiida_gromacs.parsers.genion:GenionParser","gromacs.grompp":"aiida_gromacs.parsers.grompp:GromppParser","gromacs.mdrun":"aiida_gromacs.parsers.mdrun:MdrunParser","gromacs.solvate":"aiida_gromacs.parsers.solvate:SolvateParser","general-MD":"aiida_gromacs.parsers.generalMD:GeneralParser"},"aiida.workflows":{"gromacs.setup":{description:["WorkChain for setting up a gromacs simulation automatically."],spec:{inputs:[{name:"editconfparameters",required:!0,valid_types:"EditconfParameters",info:"Command line parameters for gmx editconf"},{name:"genionparameters",required:!0,valid_types:"GenionParameters",info:"Command line parameters for gmx genion"},{name:"gromppionsparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp"},{name:"gromppminparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp minimisation run"},{name:"gromppnptparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp npt equilibration run"},{name:"gromppnvtparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp nvt equilibration run"},{name:"gromppprodparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp production run"},{name:"ionsmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for adding ions."},{name:"local_code",required:!0,valid_types:"Code",info:""},{name:"mdrunparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun production run"},{name:"minimiseparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun minimisation run"},{name:"minmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for minimisation."},{name:"nptmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for NPT equilibration."},{name:"nptparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun npt equilibration run"},{name:"nvtmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for NVT equilibration."},{name:"nvtparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun nvt equilibration run"},{name:"pdb2gmxparameters",required:!0,valid_types:"Pdb2gmxParameters",info:"Command line parameters for gmx pdb2gmx"},{name:"pdbfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"prodmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for production run."},{name:"solvateparameters",required:!0,valid_types:"SolvateParameters",info:"Command line parameters for gmx solvate"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"remote_code",required:!1,valid_types:"Code, NoneType",info:""}],outputs:[{name:"result",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_gromacs.workflows.simsetup:SetupWorkChain"}}},commits_count:99,development_status:"alpha",summaryinfo:[{colorclass:"blue",text:"Calculations",count:7},{colorclass:"brown",text:"Parsers",count:7},{colorclass:"red",text:"Data",count:6},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/jimboid/aiida-gromacs",is_installable:"True"},"aiida-grouppathx":{code_home:"https://github.com/zhubonan/aiida-grouppathx",development_status:"beta",entry_point_prefix:"grouppathx",pip_url:"aiida-grouppathx",name:"aiida-grouppathx",package_name:"aiida_grouppathx",hosted_on:"github.com",metadata:{description:"AiiDA plugin provides the GroupPathX class",author_email:"Bonan Zhu <zhubonan@outlook.com>",classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.0"},aiida_version:">=1.6.4,<3",entry_points:{"aiida.cmdline.data":{gpx:"aiida_grouppathx.cli:grouppathx_cli"}},commits_count:7,summaryinfo:[{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-grouppathx",is_installable:"True"},"aiida-gudhi":{code_home:"https://github.com/ltalirz/aiida-gudhi",development_status:"beta",entry_point_prefix:"gudhi",pip_url:"aiida-gudhi",plugin_info:"https://raw.github.com/ltalirz/aiida-gudhi/master/setup.json",name:"aiida-gudhi",package_name:"aiida_gudhi",hosted_on:"github.com",metadata:{description:"AiiDA plugin for the [GUDHI](http://gudhi.gforge.inria.fr/) library for topological data analysis.",author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-gudhi",classifiers:["Programming Language :: Python"],version:"0.1.0a3"},aiida_version:"*",entry_points:{"aiida.calculations":{"gudhi.rdm":"aiida_gudhi.calculations.rips:RipsDistanceMatrixCalculation"},"aiida.data":{"gudhi.rdm":"aiida_gudhi.data.rips:RipsDistanceMatrixParameters"},"aiida.parsers":{"gudhi.rdm":"aiida_gudhi.parsers.rips:RipsParser"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install --pre aiida-gudhi",is_installable:"True"},"aiida-gulp":{code_home:"https://github.com/aiidaplugins/aiida-gulp",development_status:"beta",documentation_url:"https://aiida-gulp.readthedocs.io",entry_point_prefix:"gulp",pip_url:"aiida-gulp",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-gulp/master/setup.json",name:"aiida-gulp",package_name:"aiida_gulp",hosted_on:"github.com",metadata:{description:"AiiDA plugin for running the GULP MD code",author:"Chris Sewell",author_email:"chrisj_sewell@hotmail.com",license:"MIT",home_page:"https://github.com/chrisjsewell/aiida-gulp",classifiers:["Framework :: AiiDA","Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.6","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"0.10.0b5"},aiida_version:"1.0.0b5",entry_points:{"aiida.calculations":{"gulp.fitting":"aiida_gulp.calculations.gulp_fitting:GulpFittingCalculation","gulp.optimize":"aiida_gulp.calculations.gulp_optimize:GulpOptCalculation","gulp.single":"aiida_gulp.calculations.gulp_single:GulpSingleCalculation"},"aiida.cmdline.data":{"gulp.potentials":"aiida_gulp.cmndline.potentials:potentials"},"aiida.data":{"gulp.potential":"aiida_gulp.data.potential:EmpiricalPotential","gulp.symmetry":"aiida_gulp.data.symmetry:SymmetryData"},"aiida.parsers":{"gulp.fitting":"aiida_gulp.parsers.parse_fitting:GulpFittingParser","gulp.optimize":"aiida_gulp.parsers.parse_opt:GulpOptParser","gulp.single":"aiida_gulp.parsers.parse_single:GulpSingleParser"},"aiida.workflows":{},console_scripts:{gulp_mock:"aiida_gulp.tests.mock_gulp:main"},"gulp.potentials":{lj:"aiida_gulp.potentials.lj:PotentialWriterLJ",reaxff:"aiida_gulp.potentials.reaxff:PotentialWriterReaxff"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"red",text:"Data",count:2},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Gulp potentials)",count:3}],pip_install_cmd:"pip install --pre aiida-gulp",is_installable:"True"},"aiida-kkr":{code_home:"https://github.com/JuDFTteam/aiida-kkr/tree/develop",development_status:"stable",documentation_url:"https://aiida-kkr.readthedocs.io/",entry_point_prefix:"kkr",pip_url:"aiida-kkr",name:"aiida-kkr",package_name:"aiida_kkr",hosted_on:"github.com",metadata:{description:"AiiDA plugin for the JuKKR codes",author_email:"Philipp Ruessmann <p.ruessmann@fz-juelich.de>, Jens Broeder <j.broeder@fz-juelich.de>, Fabian Bertoldo <f.bertoldo@fz-juelich.de>",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.0.0"},aiida_version:null,entry_points:{},commits_count:90,summaryinfo:[],pip_install_cmd:"pip install aiida-kkr",is_installable:"True"},"aiida-lammps":{code_home:"https://github.com/aiidaplugins/aiida-lammps",development_status:"beta",entry_point_prefix:"lammps",pip_url:"git+https://github.com/aiidaplugins/aiida-lammps",name:"aiida-lammps",package_name:"aiida_lammps",hosted_on:"github.com",metadata:{author:"Abel Carreras, Chris Sewell",author_email:"chrisj_sewell@hotmail.com",version:"0.8.0",description:"AiiDA plugin for LAMMPS",classifiers:["Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Framework :: AiiDA"]},aiida_version:">=1.4.0,<2.0.0",entry_points:{"aiida.calculations":{"lammps.combinate":"aiida_lammps.calculations.lammps.combinate:CombinateCalculation","lammps.force":"aiida_lammps.calculations.lammps.force:ForceCalculation","lammps.md":"aiida_lammps.calculations.lammps.md:MdCalculation","lammps.md.multi":"aiida_lammps.calculations.lammps.md_multi:MdMultiCalculation","lammps.optimize":"aiida_lammps.calculations.lammps.optimize:OptimizeCalculation",dynaphopy:"aiida_lammps.calculations.dynaphopy: DynaphopyCalculation"},"aiida.parsers":{"lammps.force":"aiida_lammps.parsers.lammps.force:ForceParser","lammps.md":"aiida_lammps.parsers.lammps.md:MdParser","lammps.md.multi":"aiida_lammps.parsers.lammps.md_multi:MdMultiParser","lammps.optimize":"aiida_lammps.parsers.lammps.optimize:OptimizeParser",dynaphopy:"aiida_lammps.parsers.dynaphopy: DynaphopyParser"},"aiida.data":{"lammps.potential":"aiida_lammps.data.potential:EmpiricalPotential","lammps.trajectory":"aiida_lammps.data.trajectory:LammpsTrajectory"},"lammps.potentials":{eam:"aiida_lammps.data.pot_plugins.eam:EAM",lennard_jones:"aiida_lammps.data.pot_plugins.lennard_jones:LennardJones",reaxff:"aiida_lammps.data.pot_plugins.reaxff:Reaxff",tersoff:"aiida_lammps.data.pot_plugins.tersoff:Tersoff"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:6},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:2},{colorclass:"orange",text:"Other (Lammps potentials)",count:4}],pip_install_cmd:"pip install git+https://github.com/aiidaplugins/aiida-lammps",is_installable:"True"},"aiida-lsmo":{code_home:"https://github.com/lsmo-epfl/aiida-lsmo",development_status:"stable",entry_point_prefix:"lsmo",pip_url:"git+https://github.com/lsmo-epfl/aiida-lsmo",name:"aiida-lsmo",package_name:"aiida_lsmo",hosted_on:"github.com",metadata:{author:"Aliaksandr Yakutovich, Daniele Ongari, Leopold Talirz",author_email:"aliaksandr.yakutovich@epfl.ch",version:"1.0.0",description:"AiiDA workflows for the LSMO laboratory at EPFL",classifiers:["Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7"]},aiida_version:">=1.0.0",entry_points:{"aiida.calculations":{"lsmo.ff_builder":{description:["AiiDA calcfunction to assemble force filed parameters into SinglefileData for Raspa."],spec:{inputs:[{name:"params",required:!0,valid_types:"Data",info:""},{name:"cif_molecule",required:!1,valid_types:"Data, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.calcfunctions:ff_builder"},"lsmo.calc_ch4_working_cap":{description:["Compute the CH4 working capacity from the output_parameters Dict of IsothermWorkChain.","    This must have run calculations at 5.8 and 65.0 bar (at 298K), which are the standard reference for the evaluation.","","    The results can be compared with Simon2015 (10.1039/C4EE03515A)."],spec:{inputs:[{name:"isot_dict",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.calcfunctions:calc_ch4_working_cap"},"lsmo.calc_h2_working_cap":{description:["Compute the H2 working capacity from the output_parameters Dict of MultiTempIsothermWorkChain.","    This must have run calculations at 1, 5 and 100 bar at 77, 198, 298 K.","    The US DOE Target for the Onboard Storage of Hydrogen Vehicles set the bar to 4.5 wt% and 30 g/L (Kapelewski2018).","    Case-A: near-ambient-T adsorption, 100bar/198K to 5bar/298K (cf. Kapelewski2018, 10.1021/acs.chemmater.8b03276)","    ....... Ni2(m-dobdc), experimental: 23.0 g/L","    Case-B: low T adsorption, 100-5bar at 77K (cf. Ahmed2019, 10.1038/s41467-019-09365-w)","    ....... NU-100, best experimental: 35.5 g/L","    Case-C: low T adsorption at low discharge, 100-1bar at 77K (cf. Thornton2017, 10.1021/acs.chemmater.6b04933)","    ....... hypMOF-5059389, best simulated: 40.0 g/L"],spec:{inputs:[{name:"isotmt_dict",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.calcfunctions:calc_h2_working_cap"},"lsmo.calc_o2_working_cap":{description:["Compute the O2 working capacity from the output_parameters Dict of IsothermWorkChain.","    This must have run calculations at 5 and 140.0 bar (at 298K), to be consistent with the screening of Moghadam2018","    (10.1038/s41467-018-03892-8), for which the MOF ANUGIA (UMCM-152) was found to have a volumetric working capacity","    of 249 vSTP/v (simulations are nearly identical to experiments).","    Consider that, at the same conditions, an empty thank can only store 136 vSTP/v, and a comparable working capacity","    can only br obtained compressing till 300bar."],spec:{inputs:[{name:"isot_dict",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.calcfunctions:calc_o2_working_cap"},"lsmo.calc_selectivity":{description:["Compute the selectivity of gas A on gas B as S = kH_a/kH_b.","    Note that if the material is not porous to one of the materials, the result is simply {'is_porous': False}.","    To maintain the comptaibility with v1, intead of checking 'is_porous', it checks for the henry_coefficient_average","    key in the Dict."],spec:{inputs:[{name:"isot_dict_a",required:!0,valid_types:"Data",info:""},{name:"isot_dict_b",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.calcfunctions:calc_selectivity"}},"aiida.parsers":{"lsmo.cp2k_bsse_parser":"aiida_lsmo.parsers:Cp2kBsseParser","lsmo.cp2k_advanced_parser":"aiida_lsmo.parsers:Cp2kAdvancedParser"},"aiida.workflows":{"lsmo.binding_site":{description:["A workchain that combines SimAnnealing & Cp2kBindingEnergy"],spec:{inputs:[{name:"cp2k_base",required:!0,valid_types:"",info:""},{name:"molecule",required:!0,valid_types:"Str, Dict",info:"Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dict for non-standard settings."},{name:"parameters",required:!0,valid_types:"Dict",info:"Parameters for the SimAnnealing workchain: will be merged with default ones."},{name:"raspa_base",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"CifData",info:"Adsorbent framework CIF."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"protocol_modify",required:!1,valid_types:"Dict",info:"Specify custom settings that overvrite the yaml settings"},{name:"protocol_tag",required:!1,valid_types:"Str",info:"The tag of the protocol tag.yaml. NOTE: only the settings are read, stage is set to GEO_OPT."},{name:"protocol_yaml",required:!1,valid_types:"SinglefileData",info:"Specify a custom yaml file. NOTE: only the settings are read, stage is set to GEO_OPT."},{name:"starting_settings_idx",required:!1,valid_types:"Int",info:"If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{idx}"}],outputs:[{name:"dft",required:!0,valid_types:"",info:""},{name:"ff",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.workchains:BindingSiteWorkChain"},"lsmo.cp2k_binding_energy":{description:["Submits Cp2kBase work chain for structure + molecule system, first optimizing the geometry of the molecule and","    later computing the BSSE corrected interaction energy.","    This work chain is inspired to Cp2kMultistage, and shares some logics and data from it."],spec:{inputs:[{name:"cp2k_base",required:!0,valid_types:"",info:""},{name:"molecule",required:!0,valid_types:"StructureData",info:"Input molecule in the unit cell of the structure."},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure that contains the molecule."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"protocol_modify",required:!1,valid_types:"Dict",info:"Specify custom settings that overvrite the yaml settings"},{name:"protocol_tag",required:!1,valid_types:"Str",info:"The tag of the protocol tag.yaml. NOTE: only the settings are read, stage is set to GEO_OPT."},{name:"protocol_yaml",required:!1,valid_types:"SinglefileData",info:"Specify a custom yaml file. NOTE: only the settings are read, stage is set to GEO_OPT."},{name:"starting_settings_idx",required:!1,valid_types:"Int",info:"If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{idx}"}],outputs:[{name:"loaded_molecule",required:!0,valid_types:"StructureData",info:"Molecule geometry in the unit cell."},{name:"loaded_structure",required:!0,valid_types:"StructureData",info:"Geometry of the system with both fragments."},{name:"output_parameters",required:!0,valid_types:"Dict",info:"Info regarding the binding energy of the system."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:901,message:"Specified starting_settings_idx that is not existing, or any in between 0 and idx is missing"},{status:902,message:"Settings for Stage0 are not ok but there are no more robust settings to try"},{status:903,message:"Something important was not printed correctly and the parsing of the first calculation failed"}]},class:"aiida_lsmo.workchains.cp2k_binding_energy:Cp2kBindingEnergyWorkChain"},"lsmo.cp2k_multistage":{description:["Submits Cp2kBase workchains for ENERGY, GEO_OPT, CELL_OPT and MD jobs iteratively","    The protocol_yaml file contains a series of settings_x and stage_x:","    the workchains starts running the settings_0/stage_0 calculation, and, in case of a failure, changes the settings","    untill the SCF of stage_0 converges. Then it uses the same settings to run the next stages (i.e., stage_1, etc.)."],spec:{inputs:[{name:"cp2k_base",required:!0,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_cell_size",required:!1,valid_types:"Float",info:"To avoid using k-points, extend the cell so that min(perp_width)>min_cell_size"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData",info:"Provide an initial parent folder that contains the wavefunction for restart"},{name:"protocol_modify",required:!1,valid_types:"Dict",info:"Specify custom settings that overvrite the yaml settings"},{name:"protocol_tag",required:!1,valid_types:"Str",info:"The tag of the protocol to be read from {tag}.yaml unless protocol_yaml input is specified"},{name:"protocol_yaml",required:!1,valid_types:"SinglefileData",info:"Specify a custom yaml file with the multistage settings (and ignore protocol_tag)"},{name:"starting_settings_idx",required:!1,valid_types:"Int",info:"If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{idx}"},{name:"structure",required:!1,valid_types:"StructureData",info:"Input structure"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"last_input_parameters",required:!1,valid_types:"Dict",info:"CP2K input parameters used (and possibly working) used in the last stage"},{name:"output_parameters",required:!1,valid_types:"Dict",info:"Output CP2K parameters of all the stages, merged together"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Processed structure (missing if only ENERGY calculation is performed)"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:901,message:"Specified starting_settings_idx that is not existing, or any in between 0 and idx is missing"},{status:902,message:"Settings for Stage0 are not ok but there are no more robust settings to try"},{status:903,message:"Something important was not printed correctly and the parsing of the first calculation failed"}]},class:"aiida_lsmo.workchains:Cp2kMultistageWorkChain"},"lsmo.cp2k_multistage_ddec":{description:["A workchain that combines: Cp2kMultistageWorkChain + Cp2kDdecWorkChain"],spec:{inputs:[{name:"cp2k_base",required:!0,valid_types:"",info:""},{name:"ddec",required:!0,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_cell_size",required:!1,valid_types:"Float",info:"To avoid using k-points, extend the cell so that min(perp_width)>min_cell_size"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData",info:"Provide an initial parent folder that contains the wavefunction for restart"},{name:"protocol_modify",required:!1,valid_types:"Dict",info:"Specify custom settings that overvrite the yaml settings"},{name:"protocol_tag",required:!1,valid_types:"Str",info:"The tag of the protocol to be read from {tag}.yaml unless protocol_yaml input is specified"},{name:"protocol_yaml",required:!1,valid_types:"SinglefileData",info:"Specify a custom yaml file with the multistage settings (and ignore protocol_tag)"},{name:"starting_settings_idx",required:!1,valid_types:"Int",info:"If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{idx}"},{name:"structure",required:!1,valid_types:"StructureData",info:"Input structure"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"structure_ddec",required:!0,valid_types:"CifData",info:"structure with DDEC charges"},{name:"last_input_parameters",required:!1,valid_types:"Dict",info:"CP2K input parameters used (and possibly working) used in the last stage"},{name:"output_parameters",required:!1,valid_types:"Dict",info:"Output CP2K parameters of all the stages, merged together"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.workchains:Cp2kMultistageDdecWorkChain"},"lsmo.isotherm":{description:["Workchain that computes volpo and blocking spheres: if accessible volpo>0","    it also runs a raspa widom calculation for the Henry coefficient."],spec:{inputs:[{name:"molecule",required:!0,valid_types:"Str, Dict",info:"Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dict for non-standard settings."},{name:"parameters",required:!0,valid_types:"Dict",info:"Parameters for the Isotherm workchain (see workchain.schema for default values)."},{name:"raspa_base",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"CifData",info:"Adsorbent framework CIF."},{name:"zeopp",required:!0,valid_types:"",info:""},{name:"geometric",required:!1,valid_types:"Dict",info:"[Only used by IsothermMultiTempWorkChain] Already computed geometric properties"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Results of the single temperature wc: keys can vay depending on is_porous and is_kh_enough booleans."},{name:"block",required:!1,valid_types:"SinglefileData",info:"Blocked pockets fileoutput file."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.workchains:IsothermWorkChain"},"lsmo.isotherm_multi_temp":{description:["Run IsothermWorkChain for multiple temperatures: first compute geometric properties","    and then submit Widom+GCMC at different temperatures in parallel"],spec:{inputs:[{name:"molecule",required:!0,valid_types:"Str, Dict",info:"Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dict for non-standard settings."},{name:"parameters",required:!0,valid_types:"Dict",info:"Parameters for the Isotherm workchain (see workchain.schema for default values)."},{name:"raspa_base",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"CifData",info:"Adsorbent framework CIF."},{name:"zeopp",required:!0,valid_types:"",info:""},{name:"geometric",required:!1,valid_types:"Dict",info:"[Only used by IsothermMultiTempWorkChain] Already computed geometric properties"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Results of isotherms run at different temperatures."},{name:"block",required:!1,valid_types:"SinglefileData",info:"Blocked pockets fileoutput file."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.workchains:IsothermMultiTempWorkChain"},"lsmo.isotherm_calc_pe":{description:["Compute CO2 parassitic energy (PE) after running IsothermWorkChain for CO2 and N2 at 300K."],spec:{inputs:[{name:"raspa_base",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"CifData",info:"Adsorbent framework CIF."},{name:"zeopp",required:!0,valid_types:"",info:""},{name:"geometric",required:!1,valid_types:"Dict",info:"[Only used by IsothermMultiTempWorkChain] Already computed geometric properties"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"Parameters for Isotherm work chain"},{name:"pe_parameters",required:!1,valid_types:"Dict",info:"Parameters for PE process modelling"}],outputs:[{name:"co2",required:!0,valid_types:"Data",info:""},{name:"n2",required:!0,valid_types:"Data",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:"Output parmaters of a calc_PE calculations"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.workchains:IsothermCalcPEWorkChain"},"lsmo.zeopp_multistage_ddec":{description:["A workchain that combines: Zeopp + Cp2kMultistageWorkChain + Cp2kDdecWorkChain + Zeopp"],spec:{inputs:[{name:"cp2k_base",required:!0,valid_types:"",info:""},{name:"ddec",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"CifData",info:"input structure"},{name:"zeopp",required:!0,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_cell_size",required:!1,valid_types:"Float",info:"To avoid using k-points, extend the cell so that min(perp_width)>min_cell_size"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData",info:"Provide an initial parent folder that contains the wavefunction for restart"},{name:"protocol_modify",required:!1,valid_types:"Dict",info:"Specify custom settings that overvrite the yaml settings"},{name:"protocol_tag",required:!1,valid_types:"Str",info:"The tag of the protocol to be read from {tag}.yaml unless protocol_yaml input is specified"},{name:"protocol_yaml",required:!1,valid_types:"SinglefileData",info:"Specify a custom yaml file with the multistage settings (and ignore protocol_tag)"},{name:"starting_settings_idx",required:!1,valid_types:"Int",info:"If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{idx}"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"structure_ddec",required:!0,valid_types:"CifData",info:"structure with DDEC charges"},{name:"zeopp_after_opt",required:!0,valid_types:"Data",info:""},{name:"zeopp_before_opt",required:!0,valid_types:"Data",info:""},{name:"last_input_parameters",required:!1,valid_types:"Dict",info:"CP2K input parameters used (and possibly working) used in the last stage"},{name:"output_parameters",required:!1,valid_types:"Dict",info:"Output CP2K parameters of all the stages, merged together"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.workchains:ZeoppMultistageDdecWorkChain"},"lsmo.sim_annealing":{description:["A work chain to compute the minimum energy geometry of a molecule inside a framework, using simulated annealing,","    i.e., decreasing the temperature of a Monte Carlo simulation and finally running and energy minimization step."],spec:{inputs:[{name:"molecule",required:!0,valid_types:"Str, Dict",info:"Adsorbate molecule: settings to be read from the yaml.Advanced: input a Dict for non-standard settings."},{name:"parameters",required:!0,valid_types:"Dict",info:"Parameters for the SimAnnealing workchain: will be merged with default ones."},{name:"raspa_base",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"CifData",info:"Adsorbent framework CIF."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"loaded_molecule",required:!0,valid_types:"CifData",info:"CIF containing the final postition of the molecule."},{name:"loaded_structure",required:!0,valid_types:"CifData",info:"CIF containing the loaded structure."},{name:"output_parameters",required:!1,valid_types:"Dict",info:"Information about the final configuration."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.workchains.sim_annealing:SimAnnealingWorkChain"},"lsmo.nanoporous_screening_1":{description:["A workchain that combines: ZeoppMultistageDdecWorkChain wc1 and IsothermCalcPEWorkChain wc2.","    In future I will use this to include more applications to run in parallel."],spec:{inputs:[{name:"cp2k_base",required:!0,valid_types:"",info:""},{name:"ddec",required:!0,valid_types:"",info:""},{name:"raspa_base",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"CifData",info:"input structure"},{name:"zeopp",required:!0,valid_types:"",info:""},{name:"geometric",required:!1,valid_types:"Dict",info:"[Only used by IsothermMultiTempWorkChain] Already computed geometric properties"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_cell_size",required:!1,valid_types:"Float",info:"To avoid using k-points, extend the cell so that min(perp_width)>min_cell_size"},{name:"parameters",required:!1,valid_types:"Dict",info:"Parameters for Isotherm work chain"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData",info:"Provide an initial parent folder that contains the wavefunction for restart"},{name:"pe_parameters",required:!1,valid_types:"Dict",info:"Parameters for PE process modelling"},{name:"protocol_modify",required:!1,valid_types:"Dict",info:"Specify custom settings that overvrite the yaml settings"},{name:"protocol_tag",required:!1,valid_types:"Str",info:"The tag of the protocol to be read from {tag}.yaml unless protocol_yaml input is specified"},{name:"protocol_yaml",required:!1,valid_types:"SinglefileData",info:"Specify a custom yaml file with the multistage settings (and ignore protocol_tag)"},{name:"starting_settings_idx",required:!1,valid_types:"Int",info:"If idx>0 is chosen, jumps directly to overwrite settings_0 with settings_{idx}"}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_lsmo.workchains:NanoporousScreening1WorkChain"}}},commits_count:17,summaryinfo:[{colorclass:"blue",text:"Calculations",count:5},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:10}],pip_install_cmd:"pip install git+https://github.com/lsmo-epfl/aiida-lsmo",is_installable:"True"},"aiida-metavo-scheduler":{code_home:"https://github.com/pzarabadip/aiida-metavo-scheduler",development_status:"stable",entry_point_prefix:"metavo_scheduler",pip_url:"git+https://github.com/pzarabadip/aiida-metavo-scheduler",name:"aiida-metavo-scheduler",package_name:"aiida_metavo_scheduler",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"1.0.0",description:"",classifiers:["Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering"]},aiida_version:">=1.0.0,<1.6",entry_points:{"aiida.cmdline.computer.configure":{sshmetavo:"aiida_metavo_scheduler.metavo.ssh_metavo:CONFIGURE_SSH_CMD"},"aiida.schedulers":{pbsprometavo:"aiida_metavo_scheduler.metavo.pbspro_metavo:PbsproSchedulerMetaVO"},"aiida.transports":{sshmetavo:"aiida_metavo_scheduler.metavo.ssh_metavo:SshTransport"}},commits_count:0,summaryinfo:[{colorclass:"orange",text:"Other (Cmdline computer configure, Schedulers, Transports)",count:3}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-metavo-scheduler",is_installable:"False"},"aiida-mpds":{code_home:"https://github.com/mpds-io/mpds-aiida",development_status:"beta",documentation_url:"https://github.com/mpds-io/mpds-aiida",entry_point_prefix:"mpds",pip_url:"git+https://github.com/mpds-io/mpds-aiida",name:"aiida-mpds",package_name:"aiida_mpds",hosted_on:"github.com",metadata:{author:"Andrey Sobolev",author_email:"as@tilde.pro",version:"",description:"Aiida workflows for MPDS based on CRYSTAL",classifiers:["Programming Language :: Python","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Information Analysis","Framework :: AiiDA"]},aiida_version:">=1.0.1",entry_points:{"aiida.workflows":{"crystal.mpds":"mpds_aiida.workflows.mpds:MPDSStructureWorkchain","crystal.cif":"mpds_aiida.workflows.cif:CIFStructureWorkchain","crystal.aiida":"mpds_aiida.workflows.aiida:AiidaStructureWorkchain"}},commits_count:9,summaryinfo:[{colorclass:"green",text:"Workflows",count:3}],pip_install_cmd:"pip install git+https://github.com/mpds-io/mpds-aiida",is_installable:"False"},"aiida-muon":{entry_point_prefix:"muon",code_home:"https://github.com/positivemuon/aiida-muon",version_file:"https://github.com/positivemuon/aiida-muon/blob/main/aiida_muon/__init__.py",pip_url:"git+https://github.com/positivemuon/aiida-muon",name:"aiida-muon",package_name:"aiida_muon",hosted_on:"github.com",metadata:{description:"aiida-muon is allows to find candiate muon implantation sites and hyperfine field by DFT supercell relaxations and from further symmetry and kinetics analysis.  ",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 2 - Pre-Alpha","Framework :: AiiDA"],author:"Muon  group Parma"},aiida_version:">=2.0,<3",entry_points:{"aiida.workflows":{"muon.find_muon":{description:["FindMuonWorkChain finds the candidate implantation site for a positive muon.","    It first performs DFT relaxation calculations for a set of initial muon sites.","    It then analyzes the results of these calculations and finds candidate muon sites.","    If there are magnetic inequivalent sites not initially, they are recalculated","    It further calculates the muon contact hyperfine field at these candidate sites."],spec:{inputs:[{name:"sc_matrix",required:!0,valid_types:"List",info:" List of length 1 for supercell size "},{name:"structure",required:!0,valid_types:"StructureData",info:"Input initial structure"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"mu_spacing",required:!1,valid_types:"Float, NoneType",info:"Minimum distance in Angstrom between two starting muon positions  generated on a grid."},{name:"qe",required:!1,valid_types:"",info:"Input parameters, settings and options for QE DFT calculations"}],outputs:[{name:"all_index_uuid",required:!0,valid_types:"Dict",info:""},{name:"all_sites",required:!0,valid_types:"Dict",info:""},{name:"unique_sites",required:!0,valid_types:"Dict",info:""},{name:"unique_sites_dipolar",required:!1,valid_types:"List",info:""},{name:"unique_sites_hyperfine",required:!1,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:405,message:"One of the PwRelaxWorkChain subprocesses failed"},{status:406,message:"One of the PwBaseWorkChain subprocesses failed"},{status:407,message:"One of the PPWorkChain subprocesses failed"}]},class:"aiida_muon.workflows.find_muon:FindMuonWorkChain"}}},commits_count:21,development_status:"pre-alpha",summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/positivemuon/aiida-muon",is_installable:"True"},"aiida-musconv":{entry_point_prefix:"musconv",code_home:"https://github.com/positivemuon/aiida-musconv",version_file:"https://github.com/positivemuon/aiida-musconv/blob/main/aiida_musconv/__init__.py",pip_url:"git+https://github.com/positivemuon/aiida-musconv",name:"aiida-musconv",package_name:"aiida_musconv",hosted_on:"github.com",metadata:{description:"aiida-musconv is a plugin that allows to obtain converged supercell size for an interstitial impurity calculation.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 2 - Pre-Alpha","Framework :: AiiDA"],author:"Muon  group Parma"},aiida_version:">=2.0,<3",entry_points:{"aiida.workflows":{musconv:{description:["WorkChain for finding converged supercell for interstitial impurity calculation"],spec:{inputs:[{name:"pwscf",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"Input initial structure"},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The minimum desired distance in 1/Å between k-points in reciprocal space."},{name:"max_iter_num",required:!1,valid_types:"Int, NoneType",info:"Maximum number of iteration in the supercell convergence loop"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_length",required:!1,valid_types:"Float, NoneType",info:"The minimum length of the smallest lattice vector for the first generated supercell "},{name:"pseudofamily",required:!1,valid_types:"Str, NoneType",info:"The label of the pseudo family"}],outputs:[{name:"Converged_SCmatrix",required:!0,valid_types:"ArrayData",info:""},{name:"Converged_supercell",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:402,message:"one of the PwCalculation subprocesses failed"},{status:702,message:"Max number of supercell convergence reached "},{status:704,message:"Error in fitting the forces to an exponential"}]},class:"aiida_musconv.workflows.musconv:MusconvWorkChain"}}},commits_count:43,development_status:"pre-alpha",summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/positivemuon/aiida-musconv",is_installable:"True"},"aiida-nanotech-empa":{code_home:"https://github.com/nanotech-empa/aiida-nanotech-empa",development_status:"beta",entry_point_prefix:"nanotech_empa",pip_url:"git+https://github.com/nanotech-empa/aiida-nanotech-empa",name:"aiida-nanotech-empa",package_name:"aiida_nanotech_empa",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:26,summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/nanotech-empa/aiida-nanotech-empa",is_installable:"False"},"aiida-nims-scheduler":{code_home:"https://github.com/atztogo/aiida-nims-scheduler",development_status:"stable",documentation_url:"https://github.com/atztogo/aiida-nims-scheduler",entry_point_prefix:"nims_scheduler",pip_url:"git+https://github.com/atztogo/aiida-nims-scheduler",name:"aiida-nims-scheduler",package_name:"aiida_nims_scheduler",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:21,summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/atztogo/aiida-nims-scheduler",is_installable:"True"},"aiida-nwchem":{code_home:"https://github.com/aiidateam/aiida-nwchem",documentation_url:"https://aiida-nwchem.readthedocs.io/",entry_point_prefix:"nwchem",pip_url:"aiida-nwchem",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-nwchem/master/setup.json",name:"aiida-nwchem",package_name:"aiida_nwchem",hosted_on:"github.com",metadata:{description:"The official AiiDA plugin for NWChem",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"3.0.0"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"nwchem.base":{description:["Base calculation class for NWChem."],spec:{inputs:[{name:"input_file",required:!0,valid_types:"SinglefileData",info:"NWChem input file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, FolderData, NoneType",info:"Remote directory of a completed NWChem calculation to restart from."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Required output files are missing."},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"The stdout output file could not be read."},{status:312,message:"The stdout output file was incomplete."},{status:313,message:"The stdout contains multiple calculations"},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception."}]},class:"aiida_nwchem.calculations.nwchem:NwchemBaseCalculation"},"nwchem.nwchem":{description:["Base calculation class for NWChem.","","    Synthesizes NWChem input file from parameter dictionary and StructureData."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure, with or without a cell"},{name:"add_cell",required:!1,valid_types:"Bool",info:"The input structure, with or without a cell"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, FolderData, NoneType",info:"Remote directory of a completed NWChem calculation to restart from."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Required output files are missing."},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"The stdout output file could not be read."},{status:312,message:"The stdout output file was incomplete."},{status:313,message:"The stdout contains multiple calculations"},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception."}]},class:"aiida_nwchem.calculations.nwchem:NwchemCalculation"}},"aiida.parsers":{"nwchem.nwchem":"aiida_nwchem.parsers.nwchem:NwchemBaseParser"},"aiida.workflows":{"nwchem.base":{description:["Workchain to run an NWChem calculation with automated error handling and restarts."],spec:{inputs:[{name:"nwchem",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_nwchem.workflows.base:NwchemBaseWorkChain"}}},commits_count:20,development_status:"beta",summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-nwchem",is_installable:"True"},"aiida-open_circuit_voltage":{entry_point_prefix:"quantumespresso.ocv",code_home:"https://github.com/tsthakur/aiida-open_circuit_voltage",name:"aiida-open_circuit_voltage",package_name:"aiida_open_circuit_voltage",hosted_on:"github.com",metadata:{author:"Tushar Thakur",author_email:"tushar.thakur@epfl.ch",version:"0.1.0",description:"The AiiDA plugin to calculate ocv at various charge of states using QE",classifiers:["Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Development Status :: 3 - Alpha","Natural Language :: English","Intended Audience :: Science/Research"]},aiida_version:">=1.1.0,<2.0.0",entry_points:{"aiida.workflows":{"quantumespresso.ocv.ocvwc":"aiida_open_circuit_voltage.workflows.workchain:OCVWorkChain"}},commits_count:28,development_status:"alpha",summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"See source code repository."},"aiida-optimize":{code_home:"https://github.com/greschd/aiida-optimize",documentation_url:"https://aiida-optimize.readthedocs.io",entry_point_prefix:"optimize",pip_url:"aiida-optimize",plugin_info:"https://raw.githubusercontent.com/greschd/aiida-optimize/master/setup.json",name:"aiida-optimize",package_name:"aiida_optimize",hosted_on:"github.com",metadata:{description:"AiiDA Plugin for running optimization algorithms.",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-optimize.readthedocs.io/",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"1.0.2"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.workflows":{"optimize.optimize":{description:["Runs an optimization procedure, given an optimization engine that defines the optimization","    algorithm, and a process which evaluates the function to be optimized."],spec:{inputs:[{name:"engine",required:!0,valid_types:"Str",info:"Engine that runs the optimization."},{name:"engine_kwargs",required:!0,valid_types:"Dict",info:"Keyword arguments passed to the optimization engine."},{name:"evaluate_process",required:!0,valid_types:"Str",info:"Process which produces the result to be optimized."},{name:"evaluate",required:!1,valid_types:"",info:"Inputs that are passed to all evaluation processes."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"optimal_process_output",required:!0,valid_types:"",info:"Output value of the optimal evaluation process."},{name:"optimal_process_uuid",required:!0,valid_types:"",info:"UUID of the optimal evaluation process."},{name:"engine_outputs",required:!1,valid_types:"",info:""},{name:"optimal_process_input",required:!1,valid_types:"",info:"Input value of the optimal evaluation process."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Optimization failed because one of the evaluate processes did not finish ok."},{status:202,message:"Optimization failed because the engine did not finish ok."}]},class:"aiida_optimize._optimization_workchain:OptimizationWorkChain"},"optimize.wrappers.add_inputs":{description:["Wrapper workchain that takes inputs as keys and values and passes it","    on to a sub-process. This enables taking a process which was not","    designed to be used in optimization, and optimize with respect to","    some arbitrary input. Inputs which always remain the same can be","    specified in the ``inputs`` namespace, whereas the inputs to be","    optimized are given through the ``added_input_keys`` and","    ``added_input_values`` inputs.","","    The outputs of the wrapper workchain are the same as those of","    the wrapped process.","",'    The "added" inputs can only be BaseType sub-classes, or',"    attributes of a Dict. For each input, its port location is given",'    in the "added_input_keys" input. For example, ``x.y`` would set',"    the ``y`` input in the ``x`` namespace.","","    For cases where the input is a Dict attribute, the (possibly nested) attribute name is given after a colon. That means ``x:a.b`` would","    set the ``['a']['b']`` attribute of the ``Dict`` given in the ``x``","    input.","","    In cases where only a single input needs to be added, they can be","    specified directly instead of wrapped in a List."],spec:{inputs:[{name:"added_input_keys",required:!0,valid_types:"List, Str",info:"Specifies the location of each added input."},{name:"added_input_values",required:!0,valid_types:"List, BaseType",info:"Values of the added inputs to be passed into the sub-process."},{name:"sub_process",required:!0,valid_types:"Str",info:"The class of the process that should be wrapped."},{name:"inputs",required:!1,valid_types:"",info:"Inputs to be passed on to the sub-process."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Workchain failed because the sub-process did not finish ok."}]},class:"aiida_optimize.wrappers._add_inputs:AddInputsWorkChain"},"optimize.wrappers.concatenate":{description:["Allows concatenating an arbitrary number of sub-processes.","","    A wrapper workchain that allows concatenating an arbitrary number","    of sub-processes. Outputs of one processes can be configured to","    be passed to the next one."],spec:{inputs:[{name:"output_input_mappings",required:!0,valid_types:"List",info:"Defines how inputs are passed between sub-processes. Each list entry entry has the form `((process_label_a, process_label_b), mapping)`, and defines outputs of process A to be passed to process B. The `mapping` values are dictionaries `{'output_name': 'input_name'}` giving the output name (in process A) and input name (in process B) for each value to pass."},{name:"process_inputs",required:!0,valid_types:"",info:"Inputs which are passed on to the sub-processes. The inputs should be grouped into a namespace identified by the process label."},{name:"process_labels",required:!0,valid_types:"List",info:"A list of pairs (label, process_name). The labels can be any string, the process_name needs to be loadable by `aiida_optimize.process_inputs.load_object`, and defines which process is being run."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"process_outputs",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"Workchain failed because a sub-process failed."}]},class:"aiida_optimize.wrappers._concatenate:ConcatenateWorkChain"},"optimize.wrappers.create_evaluate":{description:["Wrapper workchain to combine two processes: The first process _creates_","    a result, and the second _evaluates_ that result.","","    The purpose of this workchain is to facilitate optimization of processes","    which don't natively produce an output that can be optimized, by only","    having to add the 'evaluation' part."],spec:{inputs:[{name:"create",required:!0,valid_types:"",info:"Inputs which are passed on to the create sub-process."},{name:"create_process",required:!0,valid_types:"Str",info:"The sub-process which performs the create step."},{name:"evaluate_process",required:!0,valid_types:"Str",info:"The sub-process which performs the evaluate step."},{name:"output_input_mapping",required:!0,valid_types:"Dict",info:"A mapping from output names of the create process to input names of the evaluate process. These outputs (if present) are forwarded to the evaluate process."},{name:"evaluate",required:!1,valid_types:"",info:"Inputs which are passed on to the evaluate sub-process."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"create",required:!0,valid_types:"",info:""},{name:"evaluate",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Workchain failed because the 'create' sub-process failed."},{status:202,message:"Workchain failed because the 'evaluate' sub-process failed."}]},class:"aiida_optimize.wrappers._create_evaluate:CreateEvaluateWorkChain"}}},commits_count:2,development_status:"stable",summaryinfo:[{colorclass:"green",text:"Workflows",count:4}],pip_install_cmd:"pip install aiida-optimize",is_installable:"True"},"aiida-orca":{code_home:"https://github.com/pzarabadip/aiida-orca",development_status:"stable",documentation_url:"https://aiida-orca.readthedocs.io/",entry_point_prefix:"orca",pip_url:"git+https://github.com/pzarabadip/aiida-orca",name:"aiida-orca",package_name:"aiida_orca",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"0.5.1",description:"AiiDA plugin for ORCA code",classifiers:["Environment :: Plugins","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Framework :: AiiDA"]},aiida_version:">=1.0.0,<2.0.0",entry_points:{"aiida.calculations":{orca_main:"aiida_orca.calculations:OrcaCalculation",orca_asa:"aiida_orca.calculations:OrcaAsaCalculation"},"aiida.parsers":{orca_base_parser:"aiida_orca.parsers:OrcaBaseParser"},"aiida.workflows":{"orca.base":{description:["Workchain to run a orca calculation with automated error handling and restarts."],spec:{inputs:[{name:"orca",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"the results of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"relaxed_structure",required:!1,valid_types:"StructureData",info:"relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unidentified unrecoverable error."},{status:301,message:"The sub process excepted."},{status:301,message:"The calculation failed with an unrecoverable error coming from aiida-orca."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_orca.workchains:OrcaBaseWorkChain"}}},commits_count:42,summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-orca",is_installable:"True"},"aiida-phonopy":{code_home:"https://github.com/aiida-phonopy/aiida-phonopy",documentation_url:"https://aiida-phonopy.readthedocs.io/",entry_point_prefix:"phonopy",pip_url:"aiida-phonopy",plugin_info:"https://raw.githubusercontent.com/aiida-phonopy/aiida-phonopy/master/setup.json",name:"aiida-phonopy",package_name:"aiida_phonopy",hosted_on:"github.com",metadata:{description:"The official AiiDA plugin for Phonopy",author_email:"Lorenzo Bastonero <bastonero.lorenzo@gmail.com>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"1.1.3"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{"phonopy.phonopy":{description:["Base `CalcJob` implementation for Phonopy post-processing."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:`Phonopy parameters (\`setting tags\`) for post processing. The following tags, along their type, are allowed:
PRIMITIVE_AXES
PRIMITIVE_AXIS
EIGENVECTORS
BAND
BAND_PATHS
BAND_POINTS
BAND_LABELS
BAND_CONNECTION
BAND_INDICES
MESH
MP
MESH_NUMBERS
MP_SHIFT
GAMMA_CENTER
WRITE_MESH
DOS
DOS_RANGE
FMIN
FMAX
FPITCH
PDOS
PROJECTION_DIRECTION
XYZ_DIRECTION
SIGMA
DEBYE_MODEL
MOMEMT
MOMENT_ORDER
TPROP
TMIN
TMAX
TSTEP
PRETEND_REAL
CUTOFF_FREQUENCY
TDISP
TDISPMAT
TDISPMAT_CIF
QPOINTS
WRITEDM
NAC_METHOD
Q_DIRECTION
GROUP_VELOCITY
GV_DELTA_Q
SYMMETRY_TOLERANCE
SYMMETRY
MESH_SYMMETRY
FC_SYMMETRY
FULL_FORCE_CONSTANTS
WRITE_FORCE_CONSTANTS
ANIME_TYPE
ANIME
MODULATION
IRREPS
SHOW_IRREPS
LITTLE_COGROUP`},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"force_constants",required:!1,valid_types:"ForceConstantsData, NoneType",info:"Force constants of the input structure."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"phonopy_data",required:!1,valid_types:"PhonopyData, NoneType",info:"The preprocess output info of a previous ForceConstantsWorkChain."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Settings for phonopy calculation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"irreducible_representations",required:!1,valid_types:"Dict",info:"Irreducible representation output."},{name:"modulation",required:!1,valid_types:"Dict",info:"Modulation information."},{name:"output_force_constants",required:!1,valid_types:"ArrayData",info:"Calculated force constants."},{name:"output_parameters",required:!1,valid_types:"Dict",info:"Sum up info of phonopy calculation."},{name:"phonon_bands",required:!1,valid_types:"BandsData",info:"Calculated phonon band structure."},{name:"projected_phonon_dos",required:!1,valid_types:"XyData",info:"Calculated projected DOS."},{name:"qpoints",required:!1,valid_types:"BandsData",info:"Calculated qpoints."},{name:"qpoints_mesh",required:!1,valid_types:"BandsData",info:"Calculated qpoint mesh."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"thermal_displacement_matrices",required:!1,valid_types:"Dict",info:"Calculated thermal displacements matrices."},{name:"thermal_displacements",required:!1,valid_types:"Dict",info:"Calculated thermal displacements."},{name:"thermal_properties",required:!1,valid_types:"XyData",info:"Calculated thermal properties."},{name:"total_phonon_dos",required:!1,valid_types:"XyData",info:"Calculated total DOS."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required phonopy file."},{status:304,message:"The retrieved folder did not contain one or more expected output files."},{status:305,message:"No run mode has been selected."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The loading of yaml file got an unexpected error."},{status:321,message:"The file loading via numpy got an unexpected error."},{status:350,message:"The parser raised an unexpected exception."},{status:400,message:"The parser was not able to parse one or more files."}]},class:"aiida_phonopy.calculations.phonopy:PhonopyCalculation"}},"aiida.data":{"phonopy.force_constants":"aiida_phonopy.data.force_constants:ForceConstantsData","phonopy.phonopy":"aiida_phonopy.data.phonopy:PhonopyData","phonopy.preprocess":"aiida_phonopy.data.preprocess:PreProcessData","phonopy.raw":"aiida_phonopy.data.raw:RawData"},"aiida.parsers":{"phonopy.phonopy":"aiida_phonopy.parsers.phonopy:PhonopyParser"},"aiida.workflows":{"phonopy.phonopy":{description:["Abstract workflow for automated frozen phonons.","","    Phonopy is used to produce structures with displacements,","    while the forces are calculated with a quantum engine of choice.","","    This workchain is meant to be used as a base for other specific force calculato plugin workchains,","    or as an example on how to set a possible workchain/workflow. For this reason, the outline of","    this class is not defined, while it provides the inputs and a `setup` method, which can be used","    in a specific workflow outline. Ideally, the workflow would look like:","","    1. Setup the preprocess data.","","        This is already provided in this class. It setups a `PreProcessData` node, from where","        supercell, primitive cell and supercells with displacements can be easily extracted using","        the methods of the nodes. This node can be taken from `self.ctx.preprocess_data`, and used","        during the outline of the workflow.","","    2. Run supercells using the selected quantum engine/force calculator code.","","        In specific code implementations, a force calculation on supercells needs to be run.","        To get these supercells, one need simply to run:","","        ```self.ctx.preprocess_data.calcfunctions.get_supercells_with_displacements()```","","        This will return a dictionary with all the supercells as StructureData to run for the phonon calculation.","        The keys of this dictionary are of the type `supercell_{number}`, where `number` is an integer.","        These numbers are essentials since the `phonopy` force sets is generated following these numbers,","        in order to make sure to refer to the correct displacement. Thus, it is required to keep track","        of them.","        Moreover,a calculation over the pristine supercell structure should be run before hand as reference.","        This structure can instead be gotten via:","","        ```self.ctx.preprocess_data.calcfunctions.get_supercell()```","","        This will return a StructureData without any label.","","        For an example of implementation, refer to aiidateam/aiida-common-worfklows.","","        * Note: some type of force calculation needs to map some variables from the unitcell to the supercell","        (and in certain case even the primitive cell), e.g. the atomic spin in VASP. Since this is code dependent,","        you will need to map these parameters before launching the force calculation of a certain supercell","        with displacement. This information can be gotten via:","","        ```self.ctx.preprocess_data.get_cells_mappings()```","","        Moreover, consider that cells in phonopy will always (re)fold the atoms in order to have positive coordinates.","","    3. Inspect all runs and expose the forces and energies (not mandatory) outputs.","","        * Suggested: when the calculation on each supercell has finished (correctly)","        expose the output forces (and energies) in the dynamical `supercells_forces(energies)` namespace(s).","        Provide each supercell forces as an `ArrayData` with the forces stored as `forces`","        (e.g. if your code plugin stores  the forces in `TrajectoryData`, extract them with a `calcfunction`).","        Expose each `ArrayData` choosing a **common prefix**, while as **suffix use","        _{number}**, with `{number}` referring to the correspective supercell label suffix (that you are supposed to","        keep track somewhere, e.g. in the label of the code calculation/workchain).","        Now you can gather all the information in one data noe, i.e. in a `PhonopyData` node.","        To do so, you can simple run:","","        ```self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(**self.outputs.supercells_forces)```","","        and then expose it as output in the `output_phonopy_data` namespace.","","        * Alternatively: instead of exposing the supercell forces as outputs, you can directly gather all the forces","        in a dictionary and run directly to the `generate_phonopy_data` method using this dictionary (always using","        the double *).","","        See the implementation in aiidateam/aiida-common-workflows for an example.","","    4. (optional) Run the non-analytical constants on the primitive cell.","","        Non-analytical constants should be run for polar insulators. These require usually a linear response code","        or a finite difference approach (e.g. using the electric enthalpy). Since this is usually the most expensive","        part, you should run them on the primitive cell. To get it, use:","","        ```self.ctx.preprocess_data.calcfunctions.get_primitive_cell()```","","        If you compute also these, collect the dielectric tensor and the effectic born charges in an ArrayData,","        with the arraynames `dielectric` and `born_charges` (in Cartesian coordinates!).","        Then, gather all the information of nac and forces in a unique `PhonopyData` via:","","        ```","        self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(","            nac_parameters=nac_paramters,","            **self.outputs.supercells_forces","            )","        ```","","        and expose the output.","","        * Note: we require in the input for generating the full phonopy data, to give the nac in the primitive cell.","        The primitive cell of phonopy will just rotate the lattice vectors, thus mantaining the Cartasian coordinate","        system. It can happen, though, that the unitcell is not the primitive cell of the system, meaning that the","        primitive cell will contain less atoms. We expect in input the nac computed on this number of atoms. If you","        want, for some reason, compute the nac on the unitcell, you will need to get the reduced nac.","        To do so, you can consider using a built-in function in phonopy, namely:","","        :py:func:`phonopy.structure.symmetry.elaborate_borns_and_epsilon`"],spec:{inputs:[{name:"options",required:!0,valid_types:"",info:"Options for how to run the workflow."},{name:"displacement_generator",required:!1,valid_types:"Dict, NoneType",info:`Info for displacements generation. The following flags are allowed:
 distance
 is_plusminus
 is_diagonal
 is_trigonal
 number_of_snapshots
 random_seed
 temperature
 cutoff_frequency`},{name:"fc_options",required:!1,valid_types:"Dict, NoneType",info:`Options for force constants calculation (optional). The following flags are allowed:
 calculate_full_force_constants
 fc_calculator
 fc_calculator_options`},{name:"is_symmetry",required:!1,valid_types:"Bool, NoneType",info:"Whether using or not the space group symmetries."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"nac_parameters",required:!1,valid_types:"ArrayData, NoneType",info:"Non-analytical parameters."},{name:"preprocess_data",required:!1,valid_types:"PhonopyData, PreProcessData, NoneType",info:"The preprocess data for frozen phonon calcualtion."},{name:"primitive_matrix",required:!1,valid_types:"List, NoneType",info:"The matrix used to generate the primitive cell from the input structure in the List format. Allowed shapes are 3x1 and 3x3 lists."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"The structure at equilibrium volume."},{name:"supercell_matrix",required:!1,valid_types:"List, NoneType",info:"The matrix used to generate the supercell from the input structure in the List format. Allowed shapes are 3x1 and 3x3 lists."},{name:"symmetry_tolerance",required:!1,valid_types:"Float, NoneType",info:"Symmetry tolerance for space group analysis on the input structure."}],outputs:[{name:"output_phonopy_data",required:!0,valid_types:"PhonopyData",info:"The phonopy data with supercells displacements, forces and (optionally)nac parameters to use in the post-processing calculation."},{name:"supercells_forces",required:!0,valid_types:"ArrayData",info:"The forces acting on the atoms of each supercell."},{name:"output_force_constants",required:!1,valid_types:"ForceConstantsData",info:"The matrix of force constants computed with finite displacements."},{name:"supercells",required:!1,valid_types:"StructureData",info:"The supercells with displacements."},{name:"supercells_energies",required:!1,valid_types:"Float",info:"The total energy of each supercell."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_phonopy.workflows.phonopy:PhonopyWorkChain"}}},commits_count:66,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:4},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-phonopy",is_installable:"True"},"aiida-phtools":{code_home:"https://github.com/ltalirz/aiida-phtools",entry_point_prefix:"phtools",pip_url:"aiida-phtools",plugin_info:"https://raw.github.com/ltalirz/aiida-phtools/master/setup.json",name:"aiida-phtools",package_name:"aiida_phtools",hosted_on:"github.com",metadata:{description:"AiiDA plugin for persistence homology tools, used to analyze nanoporous materials.",author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-phtools",classifiers:["Programming Language :: Python"],version:"0.1.0a1"},aiida_version:"*",entry_points:{"aiida.calculations":{"phtools.dmatrix":"aiida_phtools.calculations.distance_matrix:DistanceMatrixCalculation","phtools.surface":"aiida_phtools.calculations.pore_surface:PoreSurfaceCalculation"},"aiida.data":{"phtools.surface":"aiida_phtools.data.pore_surface:PoreSurfaceParameters"},"aiida.parsers":{"phtools.dmatrix":"aiida_phtools.parsers.distance_matrix:DistanceMatrixParser","phtools.surface":"aiida_phtools.parsers.pore_surface:PoreSurfaceParser"}},commits_count:0,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install --pre aiida-phtools"},"aiida-plumed":{code_home:"https://github.com/ConradJohnston/aiida-plumed",entry_point_prefix:"plumed",pip_url:"aiida-plumed",plugin_info:"https://raw.github.com/ConradJohnston/aiida-plumed/AiiDA-v1.0-compatibility/setup.json",name:"aiida-plumed",package_name:"aiida_plumed",hosted_on:"github.com",metadata:{description:"AiiDA plugin providing support for Plumed2",author:"Conrad Johnston",author_email:"conrad.s.johnston@googlemail.com",license:"MIT",home_page:"https://github.com/ConradJohnston/aiida-plumed",classifiers:["Development Status :: 2 - Pre-Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0a0"},aiida_version:">=1.0.0b3,<2.0.0",entry_points:{"aiida.calculations":{plumed:"aiida_plumed.calculations:DiffCalculation"},"aiida.cmdline.data":{plumed:"aiida_plumed.cli:data_cli"},"aiida.data":{plumed:"aiida_plumed.data:DiffParameters"},"aiida.parsers":{plumed:"aiida_plumed.parsers:DiffParser"}},commits_count:0,development_status:"pre-alpha",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install --pre aiida-plumed",is_installable:"True"},"aiida-porousmaterials":{code_home:"https://github.com/pzarabadip/aiida-porousmaterials",development_status:"stable",entry_point_prefix:"porousmaterials",pip_url:"aiida-porousmaterials",name:"aiida-porousmaterials",package_name:"aiida_porousmaterials",hosted_on:"github.com",metadata:{description:"AiiDA plugin for PorousMaterials code",author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",license:"MIT",home_page:"https://github.com/pzarabadip/aiida-porousmaterials",classifiers:["Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8"],version:"1.0.0a3"},aiida_version:null,entry_points:{"aiida.calculations":{porousmaterials:{description:["This is PorousMaterialsCalculation as the subclass","    of AiiDA CalcJob to prepare input for the PorousMaterials","    suite of Julia codes.","    Please refer to : https://github.com/SimonEnsemble/PorousMaterials.jl"],spec:{inputs:[{name:"acc_voronoi_nodes",required:!0,valid_types:"SinglefileData",info:"Accessible Voronoi nodes calculated by Zeo++"},{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"Dict",info:"parameters such as cutoff and mixing rules."},{name:"structure",required:!0,valid_types:"CifData",info:"Framework input file as CIF"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"settings",required:!1,valid_types:"Dict",info:"Additional input parameters"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"dictionary of calculated Voronoi energies"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"ev_output_file",required:!1,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"The retrieved folder does not contain an output file."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."}]},class:"aiida_porousmaterials.calculations:PorousMaterialsCalculation"}},"aiida.parsers":{porousmaterials:"aiida_porousmaterials.parser:PorousMaterialsParser"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install --pre aiida-porousmaterials",is_installable:"True"},"aiida-pseudo":{code_home:"https://github.com/aiidateam/aiida-pseudo",entry_point_prefix:"pseudo",pip_url:"aiida-pseudo",plugin_info:"https://raw.github.com/aiidateam/aiida-pseudo/master/setup.cfg",name:"aiida-pseudo",package_name:"aiida_pseudo",hosted_on:"github.com",metadata:{description:"AiiDA plugin that simplifies working with pseudo potentials.",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>',classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"1.1.0"},aiida_version:">=2.1,<3.0",entry_points:{"aiida.data":{pseudo:"aiida_pseudo.data.pseudo.pseudo:PseudoPotentialData","pseudo.jthxml":"aiida_pseudo.data.pseudo.jthxml:JthXmlData","pseudo.psf":"aiida_pseudo.data.pseudo.psf:PsfData","pseudo.psml":"aiida_pseudo.data.pseudo.psml:PsmlData","pseudo.psp8":"aiida_pseudo.data.pseudo.psp8:Psp8Data","pseudo.upf":"aiida_pseudo.data.pseudo.upf:UpfData","pseudo.vps":"aiida_pseudo.data.pseudo.vps:VpsData"},"aiida.groups":{"pseudo.family":"aiida_pseudo.groups.family.pseudo:PseudoPotentialFamily","pseudo.family.cutoffs":"aiida_pseudo.groups.family.cutoffs:CutoffsPseudoPotentialFamily","pseudo.family.pseudo_dojo":"aiida_pseudo.groups.family.pseudo_dojo:PseudoDojoFamily","pseudo.family.sssp":"aiida_pseudo.groups.family.sssp:SsspFamily"},console_scripts:{"aiida-pseudo":"aiida_pseudo.cli:cmd_root"}},commits_count:24,development_status:"stable",summaryinfo:[{colorclass:"red",text:"Data",count:7},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Groups)",count:4}],pip_install_cmd:"pip install aiida-pseudo",is_installable:"True"},"aiida-psi4":{code_home:"https://github.com/ltalirz/aiida-psi4/tree/master",development_status:"beta",entry_point_prefix:"psi4",pip_url:"git+https://github.com/ltalirz/aiida-psi4",name:"aiida-psi4",package_name:"aiida_psi4",hosted_on:"github.com",metadata:{author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",version:"0.1.0a0",description:"AiiDA plugin for the Psi4 Quantum Chemistry package.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.6.4,<2.0.0",entry_points:{"aiida.data":{"psi4.atomic_input":"aiida_psi4.data:AtomicInput"},"aiida.calculations":{psi4:{description:["AiiDA calculation plugin wrapping the psi4 executable."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"psiapi",required:!1,valid_types:"Str, SinglefileData",info:"Psi4 input in PsiAPI python format"},{name:"qcschema",required:!1,valid_types:"Dict, AtomicInput",info:"Psi4 input in QCSchema JSON format"}],outputs:[{name:"qcschema",required:!0,valid_types:"Dict",info:"Psi4 output in QCSchema JSON format"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"Psi4 logfile"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:100,message:"Calculation did not produce all expected output files."},{status:101,message:"Psi4 reported calculation as unsuccessful."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."}]},class:"aiida_psi4.calculations:Psi4Calculation"}},"aiida.parsers":{psi4:"aiida_psi4.parsers:QCSchemaParser"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install git+https://github.com/ltalirz/aiida-psi4",is_installable:"True"},"aiida-pyscf":{code_home:"https://github.com/microsoft/aiida-pyscf",entry_point_prefix:"pyscf",pip_url:"aiida-pyscf",plugin_info:"https://github.com/microsoft/aiida-pyscf/blob/main/pyproject.toml",name:"aiida-pyscf",package_name:"aiida_pyscf",hosted_on:"github.com",metadata:{description:"AiiDA plugin for the Python-based Simulations of Chemistry Framework (PySCF).",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>, Adam Grofe <v-adamgrofe@microsoft.com>',classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"0.4.0"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{"pyscf.base":{description:["``CalcJob`` plugin for PySCF."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure with molecular structure definition."},{name:"checkpoint",required:!1,valid_types:"SinglefileData, NoneType",info:"Checkpoint of a previously completed calculation that failed to converge."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Input parameters used to render the PySCF script template."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cubegen",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"checkpoint",required:!1,valid_types:"SinglefileData",info:"The checkpoint file in case the calculation did not converge. Can be used as an input for a restart."},{name:"fcidump",required:!1,valid_types:"SinglefileData",info:"Computed fcidump files."},{name:"parameters",required:!1,valid_types:"Dict",info:"Various computed properties parsed from the `FILENAME_RESULTS` output file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The optimized structure if the input parameters contained the `optimizer` key."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The geometry optimization trajectory if the input parameters contained the `optimizer` key."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The stdout output file was not retrieved."},{status:303,message:"The results JSON file was not retrieved."},{status:410,message:"The electronic minimization cycle did not reach self-consistency."},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."}]},class:"aiida_pyscf.calculations.base:PyscfCalculation"}},"aiida.parsers":{"pyscf.base":"aiida_pyscf.parsers.base:PyscfParser"},"aiida.workflows":{"pyscf.base":{description:["Workchain to run a pyscf calculation with automated error handling and restarts."],spec:{inputs:[{name:"pyscf",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"cubegen",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"checkpoint",required:!1,valid_types:"SinglefileData",info:"The checkpoint file in case the calculation did not converge. Can be used as an input for a restart."},{name:"fcidump",required:!1,valid_types:"SinglefileData",info:"Computed fcidump files."},{name:"parameters",required:!1,valid_types:"Dict",info:"Various computed properties parsed from the `FILENAME_RESULTS` output file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The optimized structure if the input parameters contained the `optimizer` key."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The geometry optimization trajectory if the input parameters contained the `optimizer` key."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:310,message:"The calculation failed and did not retrieve a checkpoint file from which can be restarted."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_pyscf.workflows.base:PyscfBaseWorkChain"}}},commits_count:63,development_status:"alpha",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-pyscf",is_installable:"True"},"aiida-python":{entry_point_prefix:"aiidapython",code_home:"https://github.com/addman2/aiida-python",name:"aiida-python",package_name:"aiida_python",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:59,development_status:"planning",summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-qeq":{code_home:"https://github.com/ltalirz/aiida-qeq",development_status:"stable",entry_point_prefix:"qeq",pip_url:"aiida-qeq",plugin_info:"https://raw.githubusercontent.com/ltalirz/aiida-qeq/master/setup.json",name:"aiida-qeq",package_name:"aiida_qeq",hosted_on:"github.com",metadata:{description:"AiiDA plugin for computing electronic charges on atoms using equilibration-type models (QEq, EQEq, ...).",author:"Leopold Talirz, Daniele Ongari",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-qeq",classifiers:["Programming Language :: Python"],version:"0.1.0"},aiida_version:">=0.12.2,<1.0.0",entry_points:{"aiida.calculations":{"qeq.eqeq":{description:["AiiDA calculation plugin for the EQeq code."],spec:{inputs:[{name:"charge_data",required:!0,valid_types:"SinglefileData",info:"File containing information on common oxidation state of the elements."},{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"ionization_data",required:!0,valid_types:"SinglefileData",info:"File containing ionization data on the elements."},{name:"parameters",required:!0,valid_types:"EQeqParameters",info:"Command line parameters for EQEQ"},{name:"structure",required:!0,valid_types:"CifData",info:"Input structure, for which atomic charges are to be computed."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."}]},class:"aiida_qeq.calculations.eqeq:EQeqCalculation"},"qeq.qeq":{description:["AiiDA calculation plugin for the Qeq code."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"SinglefileData",info:"File containing electronegativity and Idempotential data of the elements."},{name:"structure",required:!0,valid_types:"CifData",info:"Input structure, for which atomic charges are to be computed."},{name:"configure",required:!1,valid_types:"QeqParameters",info:"Configuration input for QEQ (configure.input file)"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."}]},class:"aiida_qeq.calculations.qeq:QeqCalculation"}},"aiida.data":{"qeq.eqeq":"aiida_qeq.data.eqeq:EQeqParameters","qeq.qeq":"aiida_qeq.data.qeq:QeqParameters"},"aiida.parsers":{"qeq.eqeq":"aiida_qeq.parsers.eqeq:EQeqParser","qeq.qeq":"aiida_qeq.parsers.qeq:QeqParser"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:2}],pip_install_cmd:"pip install aiida-qeq",is_installable:"True"},"aiida-qp2":{code_home:"https://github.com/TREX-CoE/aiida-qp2",entry_point_prefix:"qp2",pip_url:"aiida-qp2",documentation_url:"https://trex-coe.github.io/aiida-qp2/index.html",name:"aiida-qp2",package_name:"aiida_qp2",hosted_on:"github.com",metadata:{description:"AiiDA plugin for the Quantum Package 2.0",author:"Evgeny Posenitskiy",author_email:"posenitskiy@irsamc.ups-tlse.fr",license:"MIT",home_page:"https://github.com/TREX-CoE/aiida-qp2",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python"],version:"0.2.0"},aiida_version:null,entry_points:{"aiida.calculations":{qp2:{description:["AiiDA calculation plugin wrapping the Quantum Package code."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters to generate the input file."},{name:"basissets",required:!1,valid_types:"",info:"A dictionary of basissets to be used in the calculations: key is the atomic symbol, value is either a single basisset."},{name:"code",required:!1,valid_types:"Code",info:"The `Code` to use for this job."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"pseudos",required:!1,valid_types:"",info:"A dictionary of pseudopotentials to be used in the calculations: key is the atomic symbol, value is a single pseudopotential."},{name:"settings",required:!1,valid_types:"Dict",info:"Additional input parameters."},{name:"structure",required:!1,valid_types:"StructureData",info:"Input structrure"},{name:"wavefunction",required:!1,valid_types:"SinglefileData",info:"The wavefunction file (EZFIO or TREXIO)."}],outputs:[{name:"output_wavefunction",required:!0,valid_types:"SinglefileData",info:"The wave function file (EZFIO or TREXIO)"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_energy",required:!1,valid_types:"Float",info:"The result of the calculation"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:300,message:"Calculation did not produce all expected output files."},{status:400,message:"Energy value is not present in the output file."}]},class:"aiida_qp2.calculations:QP2Calculation"}},"aiida.parsers":{qp2:"aiida_qp2.parsers:QP2Parser"}},commits_count:0,development_status:"beta",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-qp2",is_installable:"True"},"aiida-quantumespresso":{code_home:"https://github.com/aiidateam/aiida-quantumespresso",documentation_url:"https://aiida-quantumespresso.readthedocs.io/",entry_point_prefix:"quantumespresso",pip_url:"aiida-quantumespresso",plugin_info:"https://raw.github.com/aiidateam/aiida-quantumespresso/master/setup.json",name:"aiida-quantumespresso",package_name:"aiida_quantumespresso",hosted_on:"github.com",metadata:{description:"The official AiiDA plugin for Quantum ESPRESSO",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"4.4.0"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{"quantumespresso.cp":{description:["`CalcJob` implementation for the cp.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters that are to be used to construct the input file."},{name:"pseudos",required:!0,valid_types:"UpfData, UpfData",info:"A mapping of `UpfData` nodes onto the kind name to which they should apply."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parallelization",required:!1,valid_types:"Dict, NoneType",info:`Parallelization options. The following flags are allowed:
`},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job and the parsing are performed."},{name:"vdw_table",required:!1,valid_types:"SinglefileData, NoneType",info:"Optional van der Waals table contained in a `SinglefileData`."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"output_trajectory",required:!0,valid_types:"TrajectoryData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The required XML file is not present in the retrieved folder."},{status:304,message:"The retrieved folder contains multiple XML files."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The required XML file could not be read."},{status:330,message:"The required POS file could not be read."},{status:340,message:"The required trajectory data could not be read."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."}]},class:"aiida_quantumespresso.calculations.cp:CpCalculation"},"quantumespresso.create_kpoints_from_distance":{description:["Generate a uniformly spaced kpoint mesh for a given structure.","","    The spacing between kpoints in reciprocal space is guaranteed to be at least the defined distance.","","    :param structure: the StructureData to which the mesh should apply","    :param distance: a Float with the desired distance between kpoints in reciprocal space","    :param force_parity: a Bool to specify whether the generated mesh should maintain parity","    :returns: a KpointsData with the generated mesh"],spec:{inputs:[{name:"distance",required:!0,valid_types:"Data",info:"a Float with the desired distance between kpoints in reciprocal space"},{name:"force_parity",required:!0,valid_types:"Data",info:"a Bool to specify whether the generated mesh should maintain parity"},{name:"structure",required:!0,valid_types:"Data",info:"the StructureData to which the mesh should apply"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_quantumespresso.calculations.functions.create_kpoints_from_distance:create_kpoints_from_distance"},"quantumespresso.create_magnetic_configuration":{description:["Create a new magnetic configuration from the given structure based on a list of magnetic moments per site.","","    To create the new list of kinds, the algorithm loops over all the elements in the structure and makes a list of the","    sites with that element and their corresponding magnetic moment. Next, it splits this list in three lists:","","    * Zero magnetic moments: Any site that has an absolute magnetic moment lower than ``ztol``","    * Positive magnetic moments","    * Negative magnetic moments","","    The algorithm then sorts the positive and negative lists from large to small absolute value, and loops over each of","    list. New magnetic kinds will be created when the absolute difference between the magnetic moment of the current","    kind and the site exceeds ``atol``.","","    The positive and negative magnetic moments are handled separately to avoid assigning two sites with opposite signs","    in their magnetic moment to the same kind and make sure that each kind has the correct magnetic moment, i.e. the","    largest magnetic moment in absolute value of the sites corresponding to that kind.","","    .. important:: the function currently does not support alloys.","","    :param structure: a `StructureData` instance.","    :param magnetic_moment_per_site: list of magnetic moments for each site in the structure.","    :param atol: the absolute tolerance on determining if two sites have the same magnetic moment.","    :param ztol: threshold for considering a kind to have non-zero magnetic moment."],spec:{inputs:[{name:"magnetic_moment_per_site",required:!0,valid_types:"Data",info:"list of magnetic moments for each site in the structure."},{name:"structure",required:!0,valid_types:"Data",info:"a `StructureData` instance."},{name:"atol",required:!1,valid_types:"Data",info:"the absolute tolerance on determining if two sites have the same magnetic moment."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"ztol",required:!1,valid_types:"Data",info:"threshold for considering a kind to have non-zero magnetic moment."}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_quantumespresso.calculations.functions.create_magnetic_configuration:create_magnetic_configuration"},"quantumespresso.dos":{description:["`CalcJob` implementation for the dos.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"output_dos",required:!0,valid_types:"XyData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:330,message:"The dos file could not be read from the retrieved folder."}]},class:"aiida_quantumespresso.calculations.dos:DosCalculation"},"quantumespresso.epw":{description:["`CalcJob` implementation for the epw.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"kfpoints",required:!0,valid_types:"KpointsData",info:"fine kpoint mesh"},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"coarse kpoint mesh"},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"parent_folder_nscf",required:!0,valid_types:"RemoteData",info:"the folder of a completed nscf `PwCalculation`"},{name:"parent_folder_ph",required:!0,valid_types:"RemoteData",info:"the folder of a completed `PhCalculation`"},{name:"qfpoints",required:!0,valid_types:"KpointsData",info:"fine qpoint mesh"},{name:"qpoints",required:!0,valid_types:"KpointsData",info:"coarse qpoint mesh"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_quantumespresso.calculations.epw:EpwCalculation"},"quantumespresso.matdyn":{description:["`CalcJob` implementation for the matdyn.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"force_constants",required:!0,valid_types:"ForceConstantsData",info:""},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"Kpoints on which to calculate the phonon frequencies."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"parent_folder",required:!1,valid_types:"RemoteData, FolderData, SinglefileData, NoneType",info:"Use a local or remote folder as parent folder (for restarts and similar)"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"output_phonon_bands",required:!0,valid_types:"BandsData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:330,message:"The output frequencies file could not be read from the retrieved folder."},{status:410,message:"Number of kpoints not found in the output data"},{status:411,message:"Number of kpoints in the inputs is not commensurate with those in the output"}]},class:"aiida_quantumespresso.calculations.matdyn:MatdynCalculation"},"quantumespresso.merge_ph_outputs":{description:["Calcfunction to merge outputs from multiple `ph.x` calculations with different q-points."],spec:{inputs:[{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_quantumespresso.calculations.functions.merge_ph_outputs:merge_ph_outputs"},"quantumespresso.namelists":{description:["`CalcJob` implementation to serve as base class for simple post-processing tools of Quantum ESPRESSO."],spec:{inputs:[{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"parent_folder",required:!1,valid_types:"RemoteData, FolderData, SinglefileData, NoneType",info:"Use a local or remote folder as parent folder (for restarts and similar)"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."}]},class:"aiida_quantumespresso.calculations.namelists:NamelistsCalculation"},"quantumespresso.neb":{description:["Nudged Elastic Band code (neb.x) of Quantum ESPRESSO distribution."],spec:{inputs:[{name:"first_structure",required:!0,valid_types:"StructureData",info:"Initial structure"},{name:"last_structure",required:!0,valid_types:"StructureData",info:"Final structure"},{name:"parameters",required:!0,valid_types:"Dict",info:"NEB-specific input parameters"},{name:"pw",required:!0,valid_types:"Data",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job and the parsing are performed."}],outputs:[{name:"output_mep",required:!0,valid_types:"ArrayData",info:"The original and interpolated energy profiles along the minimum-energy path (mep)"},{name:"output_parameters",required:!0,valid_types:"Dict",info:"The output parameters dictionary of the NEB calculation"},{name:"output_trajectory",required:!0,valid_types:"TrajectoryData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"iteration_array",required:!1,valid_types:"ArrayData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:303,message:"The required XML file is not present in the retrieved folder."},{status:320,message:"The XML output file could not be read."},{status:321,message:"The XML output file could not be parsed."},{status:322,message:"The XML output file has an unsupported format."},{status:350,message:"The parser raised an unexpected exception: {exception}"}]},class:"aiida_quantumespresso.calculations.neb:NebCalculation"},"quantumespresso.open_grid":{description:["``CalcJob`` implementation for the ``open_grid.x`` code of Quantum ESPRESSO."],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:"The output folder of a completed `PwCalculation` on an irreducible Brillouin zone"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The explicit list of kpoints of the unfolded kmesh"},{name:"kpoints_mesh",required:!0,valid_types:"KpointsData",info:"The dimensions of the unfolded kmesh"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"The retrieved folder data node could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:312,message:"Found rotation or fractional translation not compatible with FFT grid."},{status:350,message:"Mismatch between kmesh dimensions and number of kpoints."}]},class:"aiida_quantumespresso.calculations.open_grid:OpenGridCalculation"},"quantumespresso.ph":{description:["`CalcJob` implementation for the ph.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:"the folder of a completed `PwCalculation`"},{name:"qpoints",required:!0,valid_types:"KpointsData",info:"qpoint mesh"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:305,message:"Both the stdout and XML output files could not be read or parsed."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:350,message:"The parser raised an unexpected exception: {exception}"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:410,message:"The minimization cycle did not reach self-consistency."},{status:462,message:"The code failed during the cholesky factorization."}]},class:"aiida_quantumespresso.calculations.ph:PhCalculation"},"quantumespresso.pp":{description:["`CalcJob` implementation for the pp.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters for the namelists"},{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:"Output folder of a completed `PwCalculation`"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job is performed."}],outputs:[{name:"output_data",required:!0,valid_types:"ArrayData",info:""},{name:"output_data_multiple",required:!0,valid_types:"ArrayData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The parent folder did not contain the required XML output file."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete."},{status:330,message:"The formatted data output file `{filename}` was not present in the retrieved (temporary) folder."},{status:331,message:"The formatted data output file `{filename}` could not be read."},{status:332,message:"The data file format is not supported by the parser"},{status:333,message:"The formatted data output file `{filename}` could not be parsed: {exception}"},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception: {exception}"}]},class:"aiida_quantumespresso.calculations.pp:PpCalculation"},"quantumespresso.projwfc":{description:["`CalcJob` implementation for the projwfc.x code of Quantum ESPRESSO.","","    Projwfc.x code of the Quantum ESPRESSO distribution, handles the the computation of projections of bloch","    wavefunctions onto atomic orbitals.","","    <Psi(n,k) | Y(theta,phi)R(r) >. For more information, refer to http://www.quantum-espresso.org/"],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:"The output folder of a pw.x calculation"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"Dos",required:!0,valid_types:"XyData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:""},{name:"bands_down",required:!1,valid_types:"BandsData",info:""},{name:"bands_up",required:!1,valid_types:"BandsData",info:""},{name:"projections",required:!1,valid_types:"ProjectionData",info:""},{name:"projections_down",required:!1,valid_types:"ProjectionData",info:""},{name:"projections_up",required:!1,valid_types:"ProjectionData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required XML file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The XML output file could not be read."},{status:321,message:"The XML output file could not be parsed."},{status:322,message:"The XML output file has an unsupported format."},{status:330,message:"The pdos_tot file could not be read from the retrieved folder."},{status:340,message:"An exception was raised parsing bands and projections."}]},class:"aiida_quantumespresso.calculations.projwfc:ProjwfcCalculation"},"quantumespresso.pw":{description:["`CalcJob` implementation for the pw.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"kpoint mesh or kpoint path"},{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters that are to be used to construct the input file."},{name:"pseudos",required:!0,valid_types:"UpfData, UpfData",info:"A mapping of `UpfData` nodes onto the kind name to which they should apply."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"hubbard_file",required:!1,valid_types:"SinglefileData, NoneType",info:"SinglefileData node containing the output Hubbard parameters from a HpCalculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parallelization",required:!1,valid_types:"Dict, NoneType",info:`Parallelization options. The following flags are allowed:
npool  : The number of 'pools', each taking care of a group of k-points.
nband  : The number of 'band groups', each taking care of a group of Kohn-Sham orbitals.
ntg    : The number of 'task groups' across which the FFT planes are distributed.
ndiag  : The number of 'linear algebra groups' used when parallelizing the subspace diagonalization / iterative orthonormalization. By default, no parameter is passed to Quantum ESPRESSO, meaning it will use its default.`},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job and the parsing are performed."},{name:"vdw_table",required:!1,valid_types:"SinglefileData, NoneType",info:"Optional van der Waals table contained in a `SinglefileData`."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_atomic_occupations",required:!1,valid_types:"Dict",info:""},{name:"output_band",required:!1,valid_types:"BandsData",info:"The `output_band` output node of the successful calculation if present."},{name:"output_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The `output_structure` output node of the successful calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required XML file."},{status:304,message:"The retrieved folder contained multiple XML files."},{status:305,message:"Both the stdout and XML output files could not be read or parsed."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The XML output file could not be read."},{status:321,message:"The XML output file could not be parsed."},{status:322,message:"The XML output file has an unsupported format."},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception: {exception}"},{status:360,message:"The code failed in finding a valid reciprocal lattice vector."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:410,message:"The electronic minimization cycle did not reach self-consistency."},{status:461,message:"The code failed with negative dexx in the exchange calculation."},{status:462,message:"The code failed during the cholesky factorization."},{status:463,message:"Too many bands failed to converge during the diagonalization."},{status:464,message:"The S matrix was found to be not positive definite."},{status:465,message:"The `zhegvd` failed in the PPCG diagonalization."},{status:466,message:"The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."},{status:467,message:"The eigenvector failed to converge."},{status:468,message:"The factorization in the Broyden routine failed."},{status:481,message:'The k-point parallelization "npools" is too high, some nodes have no k-points.'},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."},{status:501,message:"Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."},{status:502,message:"The ionic minimization cycle did not converge after the maximum number of steps."},{status:503,message:"The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."},{status:510,message:"The electronic minimization cycle failed during an ionic minimization cycle."},{status:511,message:"The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."},{status:520,message:"The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."},{status:521,message:"The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."},{status:531,message:"The electronic minimization cycle did not reach self-consistency."},{status:541,message:"The variable cell optimization broke the symmetry of the k-points."},{status:542,message:"The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."},{status:710,message:"The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."}]},class:"aiida_quantumespresso.calculations.pw:PwCalculation"},"quantumespresso.pw2gw":{description:["`CalcJob` implementation for the pw2gw.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData",info:"Output folder of a completed `PwCalculation`"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"eps",required:!0,valid_types:"ArrayData",info:"The `eps` output node containing 5 arrays `energy`, `epsX`, `epsY`, `epsZ`, `epsTOT`"},{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation.`"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:305,message:"The eps*.dat output files could not be read or parsed."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:330,message:"The eps*.dat output files do not have the expected shape (N, 2)."},{status:331,message:"The eps*.dat output files contains different values of energies."},{status:350,message:"The parser raised an unexpected exception: {exception}"}]},class:"aiida_quantumespresso.calculations.pw2gw:Pw2gwCalculation"},"quantumespresso.pw2wannier90":{description:["`CalcJob` implementation for the pw2wannier.x code of Quantum ESPRESSO.","","    For more information, refer to http://www.quantum-espresso.org/ and http://www.wannier.org/"],spec:{inputs:[{name:"nnkp_file",required:!0,valid_types:"SinglefileData",info:"A SinglefileData containing the .nnkp file generated by wannier90.x -pp"},{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:"The output folder of a pw.x calculation"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:340,message:"Encountered a generic error message"},{status:350,message:"The parser raised an unexpected exception: {exception}"}]},class:"aiida_quantumespresso.calculations.pw2wannier90:Pw2wannier90Calculation"},"quantumespresso.pwimmigrant":{description:["Create a PwCalculation object that can be used to import old jobs.","","    This is a sublass of aiida_quantumespresso.calculations.PwCalculation","    with slight modifications to some of the class variables and additional","    methods that","","        a. parse the job's input file to create the calculation's input","           nodes that would exist if the calculation were submitted using AiiDa,","        b. bypass the functions of the daemon, and prepare the node's attributes","           such that all the processes (copying of the files to the repository,","           results parsing, ect.) can be performed","","    .. note:: The keyword arguments of PwCalculation are also available.","","    :param remote_workdir: Absolute path to the directory where the job was run.","        The transport of the computer you link ask input to the calculation is","        the transport that will be used to retrieve the calculation's files.","        Therefore, ``remote_workdir`` should be the absolute path to the job's","        directory on that computer.","    :type remote_workdir: str","","    :param input_file_name: The file name of the job's input file.","    :type input_file_name: str","","    :param output_file_name: The file name of the job's output file (i.e. the","        file containing the stdout of QE).","    :type output_file_name: str"],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"kpoint mesh or kpoint path"},{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters that are to be used to construct the input file."},{name:"pseudos",required:!0,valid_types:"UpfData, UpfData",info:"A mapping of `UpfData` nodes onto the kind name to which they should apply."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"hubbard_file",required:!1,valid_types:"SinglefileData, NoneType",info:"SinglefileData node containing the output Hubbard parameters from a HpCalculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parallelization",required:!1,valid_types:"Dict, NoneType",info:`Parallelization options. The following flags are allowed:
npool  : The number of 'pools', each taking care of a group of k-points.
nband  : The number of 'band groups', each taking care of a group of Kohn-Sham orbitals.
ntg    : The number of 'task groups' across which the FFT planes are distributed.
ndiag  : The number of 'linear algebra groups' used when parallelizing the subspace diagonalization / iterative orthonormalization. By default, no parameter is passed to Quantum ESPRESSO, meaning it will use its default.`},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job and the parsing are performed."},{name:"vdw_table",required:!1,valid_types:"SinglefileData, NoneType",info:"Optional van der Waals table contained in a `SinglefileData`."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_atomic_occupations",required:!1,valid_types:"Dict",info:""},{name:"output_band",required:!1,valid_types:"BandsData",info:"The `output_band` output node of the successful calculation if present."},{name:"output_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The `output_structure` output node of the successful calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required XML file."},{status:304,message:"The retrieved folder contained multiple XML files."},{status:305,message:"Both the stdout and XML output files could not be read or parsed."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The XML output file could not be read."},{status:321,message:"The XML output file could not be parsed."},{status:322,message:"The XML output file has an unsupported format."},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception: {exception}"},{status:360,message:"The code failed in finding a valid reciprocal lattice vector."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:410,message:"The electronic minimization cycle did not reach self-consistency."},{status:461,message:"The code failed with negative dexx in the exchange calculation."},{status:462,message:"The code failed during the cholesky factorization."},{status:463,message:"Too many bands failed to converge during the diagonalization."},{status:464,message:"The S matrix was found to be not positive definite."},{status:465,message:"The `zhegvd` failed in the PPCG diagonalization."},{status:466,message:"The `[Q, R] = qr(X, 0)` failed in the PPCG diagonalization."},{status:467,message:"The eigenvector failed to converge."},{status:468,message:"The factorization in the Broyden routine failed."},{status:481,message:'The k-point parallelization "npools" is too high, some nodes have no k-points.'},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."},{status:501,message:"Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."},{status:502,message:"The ionic minimization cycle did not converge after the maximum number of steps."},{status:503,message:"The ionic minimization cycle did not finish because the calculation was interrupted but a partial trajectory and output structure was successfully parsed which can be used for a restart."},{status:510,message:"The electronic minimization cycle failed during an ionic minimization cycle."},{status:511,message:"The ionic minimization cycle converged, but electronic convergence was not reached in the final SCF."},{status:520,message:"The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm."},{status:521,message:"The ionic minimization cycle terminated prematurely because of two consecutive failures in the BFGS algorithm and electronic convergence failed in the final SCF."},{status:531,message:"The electronic minimization cycle did not reach self-consistency."},{status:541,message:"The variable cell optimization broke the symmetry of the k-points."},{status:542,message:"The cell relaxation caused a significant volume contraction and there is not enough space allocated for radial FFT."},{status:710,message:"The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."}]},class:"aiida_quantumespresso.calculations.pwimmigrant:PwimmigrantCalculation"},"quantumespresso.q2r":{description:["`CalcJob` implementation for the q2r.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"parent_folder",required:!0,valid_types:"RemoteData, FolderData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"force_constants",required:!0,valid_types:"ForceConstantsData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:330,message:"The force constants file could not be read."}]},class:"aiida_quantumespresso.calculations.q2r:Q2rCalculation"},"quantumespresso.seekpath_structure_analysis":{description:["Primitivize the structure with SeeKpath and generate the high symmetry k-point path through its Brillouin zone.","","    This calcfunction will take a structure and pass it through SeeKpath to get the normalized primitive cell and the","    path of high symmetry k-points through its Brillouin zone. Note that the returned primitive cell may differ from the","    original structure in which case the k-points are only congruent with the primitive cell.","","    The keyword arguments can be used to specify various Seekpath parameters, such as:","","        with_time_reversal: True","        reference_distance: 0.025","        recipe: 'hpkot'","        threshold: 1e-07","        symprec: 1e-05","        angle_tolerance: -1.0","","    Note that exact parameters that are available and their defaults will depend on your Seekpath version."],spec:{inputs:[{name:"structure",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_quantumespresso.calculations.functions.seekpath_structure_analysis:seekpath_structure_analysis"},"quantumespresso.xspectra":{description:["CalcJob implementation for the xspectra.x code of Quantum ESPRESSO."],spec:{inputs:[{name:"core_wfc_data",required:!0,valid_types:"SinglefileData",info:"Core wavefunction data, generated by the upf2plotcore.sh utility"},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The K-point sampling to be used for the XSpectra calculation"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"gamma_file",required:!1,valid_types:"SinglefileData, NoneType",info:"An optional file containing the data for the broadening function used when `gamma_mode=file`"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the namelists in the input file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Use an additional node for special settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"spectra",required:!0,valid_types:"XyData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"An exception was raised while reading the `stdout` file: {exception}"},{status:311,message:"An exception was raised while parsing the `stdout` file: {exception}"},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:313,message:"xiabs was set incorrectly, check and ensure that the index value correctly refers to the atomic species containing the core-hole (where the index starts from 1)."},{status:314,message:"xiabs was either set to 0 or less, or was greater than ntyp."},{status:330,message:"The xspectra output file could not be read from the retrieved folder."},{status:331,message:"The spectrum data file could not be read using NumPy genfromtxt"},{status:400,message:"The time limit set for the calculation was exceeded, and the job wrote a save file before exiting."}]},class:"aiida_quantumespresso.calculations.xspectra:XspectraCalculation"}},"aiida.data":{"quantumespresso.force_constants":"aiida_quantumespresso.data.force_constants:ForceConstantsData","quantumespresso.hubbard_structure":"aiida_quantumespresso.data.hubbard_structure:HubbardStructureData"},"aiida.parsers":{"quantumespresso.cp":"aiida_quantumespresso.parsers.cp:CpParser","quantumespresso.dos":"aiida_quantumespresso.parsers.dos:DosParser","quantumespresso.matdyn":"aiida_quantumespresso.parsers.matdyn:MatdynParser","quantumespresso.neb":"aiida_quantumespresso.parsers.neb:NebParser","quantumespresso.open_grid":"aiida_quantumespresso.parsers.open_grid:OpenGridParser","quantumespresso.ph":"aiida_quantumespresso.parsers.ph:PhParser","quantumespresso.pp":"aiida_quantumespresso.parsers.pp:PpParser","quantumespresso.projwfc":"aiida_quantumespresso.parsers.projwfc:ProjwfcParser","quantumespresso.pw":"aiida_quantumespresso.parsers.pw:PwParser","quantumespresso.pw2gw":"aiida_quantumespresso.parsers.pw2gw:Pw2gwParser","quantumespresso.pw2wannier90":"aiida_quantumespresso.parsers.pw2wannier90:Pw2wannier90Parser","quantumespresso.q2r":"aiida_quantumespresso.parsers.q2r:Q2rParser","quantumespresso.xspectra":"aiida_quantumespresso.parsers.xspectra:XspectraParser"},"aiida.tools.calculations":{"quantumespresso.pw":"aiida_quantumespresso.tools.calculations.pw:PwCalculationTools"},"aiida.tools.data.orbitals":{noncollinearhydrogen:"aiida_quantumespresso.tools.data.orbital.noncollinearhydrogen:NoncollinearHydrogenOrbital",spinorbithydrogen:"aiida_quantumespresso.tools.data.orbital.spinorbithydrogen:SpinorbitHydrogenOrbital"},"aiida.workflows":{"quantumespresso.matdyn.base":{description:["Workchain to run a Quantum ESPRESSO matdyn.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"matdyn",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"output_phonon_bands",required:!0,valid_types:"BandsData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_quantumespresso.workflows.matdyn.base:MatdynBaseWorkChain"},"quantumespresso.pdos":{description:["A WorkChain to compute Total & Partial Density of States of a structure, using Quantum Espresso."],spec:{inputs:[{name:"dos",required:!0,valid_types:"Data",info:"Input parameters for the `dos.x` calculation. Note that the `Emin`, `Emax` and `DeltaE` values have to match with those in the `projwfc` inputs."},{name:"nscf",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` of the `nscf` calculation."},{name:"projwfc",required:!0,valid_types:"Data",info:"Input parameters for the `projwfc.x` calculation. Note that the `Emin`, `Emax` and `DeltaE` values have to match with those in the `dos` inputs."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"align_to_fermi",required:!1,valid_types:"Bool",info:"If true, Emin=>Emin-Efermi & Emax=>Emax-Efermi, where Efermi is taken from the `nscf` calculation. Note that it only makes sense to align `Emax` and `Emin` to the fermi level in case they are actually provided by in the `dos` and `projwfc` inputs, since otherwise the "},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If ``True``, work directories of all called calculation will be cleaned at the end of execution."},{name:"dry_run",required:!1,valid_types:"Bool, NoneType",info:"Terminate workchain steps before submitting calculations (test purposes only)."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"scf",required:!1,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` of the `scf` calculation."},{name:"serial_clean",required:!1,valid_types:"Bool, NoneType",info:"If ``True``, calculations will be run in serial, and work directories will be cleaned before the next step."}],outputs:[{name:"dos",required:!0,valid_types:"",info:""},{name:"nscf",required:!0,valid_types:"",info:""},{name:"projwfc",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified for base or nscf namespaces."},{status:401,message:"the SCF sub process failed"},{status:402,message:"the NSCF sub process failed"},{status:403,message:"the DOS sub process failed"},{status:404,message:"the PROJWFC sub process failed"},{status:404,message:"both the DOS and PROJWFC sub process failed"}]},class:"aiida_quantumespresso.workflows.pdos:PdosWorkChain"},"quantumespresso.ph.base":{description:["Workchain to run a Quantum ESPRESSO ph.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"ph",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"only_initialization",required:!1,valid_types:"Bool",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:204,message:"The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:401,message:"The work chain failed to merge the q-points data from multiple `PhCalculation`s because not all q-points were parsed."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_quantumespresso.workflows.ph.base:PhBaseWorkChain"},"quantumespresso.pw.bands":{description:["Workchain to compute a band structure for a given structure using Quantum ESPRESSO pw.x.","","    The logic for the computation of various parameters for the BANDS step is as follows:","","    Number of bands:","        One can specify the number of bands to be used in the BANDS step either directly through the input parameters","        `bands.pw.parameters.SYSTEM.nbnd` or through `nbands_factor`. Note that specifying both is not allowed. When","        neither is specified nothing will be set by the work chain and the default of Quantum ESPRESSO will end up being","        used. If the `nbands_factor` is specified the maximum value of the following values will be used:","","        * `nbnd` of the preceding SCF calculation","        * 0.5 * nelectrons * nbands_factor","        * 0.5 * nelectrons + 4","","    Kpoints:","        There are three options; specify either an existing `KpointsData` through `bands_kpoints`, or specify the","        `bands_kpoint_distance`, or specify neither. For the former those exact kpoints will be used for the BANDS step.","        In the two other cases, the structure will first be normalized using SeekPath and the path along high-symmetry","        k-points will be generated on that structure. The distance between kpoints for the path will be equal to that","        of `bands_kpoints_distance` or the SeekPath default if not specified."],spec:{inputs:[{name:"bands",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` for the BANDS calculation."},{name:"scf",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` for the SCF calculation."},{name:"structure",required:!0,valid_types:"StructureData",info:"The inputs structure."},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints to use for the BANDS calculation. Specify either this or `bands_kpoints_distance`."},{name:"bands_kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"Minimum kpoints distance for the BANDS calculation. Specify either this or `bands_kpoints`."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"nbands_factor",required:!1,valid_types:"Float, NoneType",info:"The number of bands for the BANDS calculation is that used for the SCF multiplied by this factor."},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for the `PwRelaxWorkChain`, if not specified at all, the relaxation step is skipped."}],outputs:[{name:"band_parameters",required:!0,valid_types:"Dict",info:"The output parameters of the BANDS `PwBaseWorkChain`."},{name:"band_structure",required:!0,valid_types:"BandsData",info:"The computed band structure."},{name:"scf_parameters",required:!0,valid_types:"Dict",info:"The output parameters of the SCF `PwBaseWorkChain`."},{name:"primitive_structure",required:!1,valid_types:"StructureData",info:"The normalized and primitivized structure for which the bands are computed."},{name:"seekpath_parameters",required:!1,valid_types:"Dict",info:"The parameters used in the SeeKpath call to normalize the input or relaxed structure."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Cannot specify both `nbands_factor` and `bands.pw.parameters.SYSTEM.nbnd`."},{status:202,message:"Cannot specify both `bands_kpoints` and `bands_kpoints_distance`."},{status:401,message:"The PwRelaxWorkChain sub process failed"},{status:402,message:"The scf PwBasexWorkChain sub process failed"},{status:403,message:"The bands PwBasexWorkChain sub process failed"}]},class:"aiida_quantumespresso.workflows.pw.bands:PwBandsWorkChain"},"quantumespresso.pw.base":{description:["Workchain to run a Quantum ESPRESSO pw.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"pw",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"An explicit k-points list or mesh. Either this or `kpoints_distance` has to be provided."},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The minimum desired distance in 1/Å between k-points in reciprocal space. The explicit k-points will be generated automatically by a calculation function based on the input structure."},{name:"kpoints_force_parity",required:!1,valid_types:"Bool, NoneType",info:"Optional input when constructing the k-points based on a desired `kpoints_distance`. Setting this to `True` will force the k-point mesh to have an even number of points along each lattice vector except for any non-periodic directions."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_atomic_occupations",required:!1,valid_types:"Dict",info:""},{name:"output_band",required:!1,valid_types:"BandsData",info:"The `output_band` output node of the successful calculation if present."},{name:"output_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The `output_structure` output node of the successful calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"The explicit `pseudos` or `pseudo_family` could not be used to get the necessary pseudos."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified."},{status:203,message:"Neither the `options` nor `automatic_parallelization` input was specified. This exit status has been deprecated as the check it corresponded to was incorrect."},{status:204,message:"The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`. This exit status has been deprecated as the check it corresponded to was incorrect."},{status:210,message:"Required key for `automatic_parallelization` was not specified.This exit status has been deprecated as the automatic parallellization feature was removed."},{status:211,message:"Unrecognized keys were specified for `automatic_parallelization`.This exit status has been deprecated as the automatic parallellization feature was removed."},{status:300,message:"The calculation failed with an unidentified unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:310,message:"The calculation failed with a known unrecoverable error."},{status:320,message:"The initialization calculation failed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:501,message:"Then ionic minimization cycle converged but the thresholds are exceeded in the final SCF."},{status:710,message:"The electronic minimization cycle did not reach self-consistency, but `scf_must_converge` is `False` and/or `electron_maxstep` is 0."}]},class:"aiida_quantumespresso.workflows.pw.base:PwBaseWorkChain"},"quantumespresso.pw.relax":{description:["Workchain to relax a structure using Quantum ESPRESSO pw.x."],spec:{inputs:[{name:"base",required:!0,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` for the main relax loop."},{name:"structure",required:!0,valid_types:"StructureData",info:"The inputs structure."},{name:"base_final_scf",required:!1,valid_types:"Data",info:"Inputs for the `PwBaseWorkChain` for the final scf."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"max_meta_convergence_iterations",required:!1,valid_types:"Int",info:"The maximum number of variable cell relax iterations in the meta convergence cycle."},{name:"meta_convergence",required:!1,valid_types:"Bool",info:"If `True` the workchain will perform a meta-convergence on the cell volume."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"volume_convergence",required:!1,valid_types:"Float",info:"The volume difference threshold between two consecutive meta convergence iterations."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The `output_parameters` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_atomic_occupations",required:!1,valid_types:"Dict",info:""},{name:"output_band",required:!1,valid_types:"BandsData",info:"The `output_band` output node of the successful calculation if present."},{name:"output_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The successfully relaxed structure."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"the relax PwBaseWorkChain sub process failed"},{status:402,message:"the final scf PwBaseWorkChain sub process failed"}]},class:"aiida_quantumespresso.workflows.pw.relax:PwRelaxWorkChain"},"quantumespresso.q2r.base":{description:["Workchain to run a Quantum ESPRESSO q2r.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"q2r",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"force_constants",required:!0,valid_types:"ForceConstantsData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_quantumespresso.workflows.q2r.base:Q2rBaseWorkChain"},"quantumespresso.xps":{description:["Workchain to compute X-ray photoelectron spectra (XPS) for a given structure.","","    The WorkChain itself firstly calls the PwRelaxWorkChain to relax the input structure if","    required. Then determines the input settings for each XPS calculation automatically using","    ``get_xspectra_structures()``. The input structures are generated from the standardized","    structure by converting each to a supercell with cell dimensions of at least 8.0 angstrom","    in each periodic dimension in order to sufficiently reduce the unphysical interaction","    of the core-hole with neighbouring images. The size of the minimum size requirement can be","    overriden by the user if required. Then the standard Delta-Self-Consistent-Field (ΔSCF)","    method is used to get the XPS binding energy. Finally, the XPS spectrum is calculated","    using the Voigt profile."],spec:{inputs:[{name:"ch_scf",required:!0,valid_types:"Data",info:"Input parameters for the basic xps workflow (core-hole SCF)."},{name:"core_hole_pseudos",required:!0,valid_types:"UpfData, UpfData",info:'Dynamic namespace for pairs of excited-state pseudopotentials for each absorbing element. Must use the mapping "{element}" : {Upf}".'},{name:"gipaw_pseudos",required:!0,valid_types:"UpfData, UpfData",info:'Dynamic namespace for pairs of ground-state pseudopotentials for each absorbing element. Must use the mapping "{element}" : {Upf}".'},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for calculation."},{name:"abs_atom_marker",required:!1,valid_types:"Str",info:"The name for the Kind representing the absorbing atom in the structure. Will be used in all structures generated in ``get_xspectra_structures`` step."},{name:"calc_binding_energy",required:!1,valid_types:"Bool",info:"If `True`, run scf calculation for the supercell."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculations will be cleaned at the end of execution."},{name:"core_hole_treatments",required:!1,valid_types:"Dict, NoneType",info:"Optional dictionary to set core-hole treatment to all elements present. The default full-core-hole treatment will be used if not specified."},{name:"correction_energies",required:!1,valid_types:"Dict, NoneType",info:"Optional dictionary to set the correction energy to all elements present. "},{name:"dry_run",required:!1,valid_types:"Bool, NoneType",info:"Terminate workchain steps before submitting calculations (test purposes only)."},{name:"elements_list",required:!1,valid_types:"List, NoneType",info:"The list of elements to be considered for analysis, each must be valid elements of the periodic table."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"Data",info:"Input parameters for the relax process. If not specified at all, the relaxation step is skipped."},{name:"spglib_settings",required:!1,valid_types:"Dict, NoneType",info:"Optional settings dictionary for the spglib call within ``get_xspectra_structures``."},{name:"structure_preparation_settings",required:!1,valid_types:"Dict, Float, Int, Bool, Str",info:"Optional settings dictionary for the ``get_xspectra_structures()`` method."},{name:"voight_gamma",required:!1,valid_types:"Float",info:"The gamma parameter for the Lorenzian broadening in the Voight method."},{name:"voight_sigma",required:!1,valid_types:"Float",info:"The sigma parameter for the gaussian broadening in the Voight method."}],outputs:[{name:"binding_energies",required:!0,valid_types:"Dict",info:"All the binding energy values for each element calculated by the WorkChain."},{name:"chemical_shifts",required:!0,valid_types:"Dict",info:"All the chemical shift values for each element calculated by the WorkChain."},{name:"final_spectra_be",required:!0,valid_types:"XyData",info:"The fully-resolved spectra for each element based on binding energy."},{name:"final_spectra_cls",required:!0,valid_types:"XyData",info:"The fully-resolved spectra for each element based on chemical shift."},{name:"output_parameters_ch_scf",required:!0,valid_types:"Dict",info:"The output parameters of each ``PwBaseWorkChain`` performed``."},{name:"supercell_structure",required:!0,valid_types:"StructureData",info:"The supercell of ``outputs.standardized_structure`` used to generate structures for XPS sub-processes."},{name:"symmetry_analysis_data",required:!0,valid_types:"Dict",info:"The output parameters from ``get_xspectra_structures()``."},{name:"optimized_structure",required:!1,valid_types:"StructureData",info:"The optimized structure from the ``relax`` process."},{name:"output_parameters_relax",required:!1,valid_types:"Dict",info:"The output_parameters of the relax step."},{name:"output_parameters_scf",required:!1,valid_types:"Dict",info:"The output_parameters of the scf step."},{name:"standardized_structure",required:!1,valid_types:"StructureData",info:"The standardized crystal structure used to generate structures for XPS sub-processes."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The Relax sub process failed"},{status:402,message:"The SCF Pw sub processes failed"},{status:402,message:"One or more CH_SCF Pw sub processes failed"}]},class:"aiida_quantumespresso.workflows.xps:XpsWorkChain"},"quantumespresso.xspectra.base":{description:["Workchain to run a Quantum ESPRESSO xspectra.x calculation with automated error handling and restarts."],spec:{inputs:[{name:"xspectra",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"An explicit k-points mesh. Either this or `kpoints_distance` has to be provided."},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The minimum desired distance in 1/Å between k-points in reciprocal space. The explicit k-points will be generated automatically by a calculation function based on the input structure."},{name:"kpoints_force_parity",required:!1,valid_types:"Bool, NoneType",info:"Optional input when constructing the k-points based on a desired `kpoints_distance`. Setting this to `True` will force the k-point mesh to have an even number of points along each lattice vector except for any non-periodic directions."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"spectra",required:!0,valid_types:"XyData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_quantumespresso.workflows.xspectra.base:XspectraBaseWorkChain"},"quantumespresso.xspectra.core":{description:["Workchain to compute X-ray absorption spectra for a given structure using Quantum ESPRESSO.","","    The workflow follows the process required to compute the XAS of an input structure: an SCF calculation is performed","    using the provided structure, which is then followed by the calculation of the XAS itself by XSpectra. The","    calculations performed by the WorkChain in a typical run will be:","","    - PwSCF calculation with pw.x of the input structure with a core-hole present.","    - Generation of core-wavefunction data with upf2plotcore.sh (if requested).","    - XAS calculation with xspectra.x to compute the Lanczos coefficients and print the XANES spectra for the","      polarisation vectors requested in the input.","    - Collation of output data from pw.x and xspectra.x calculations, including a combination of XANES dipole spectra","      based on polarisation vectors to represent the powder spectrum of the structure (if requested).","","    If ``run_replot = True`` is set in the inputs (defaults to False), the WorkChain will run a second xspectra.x","    calculation which replots the spectra produced from the ``xs_prod`` step. This option can be very useful for","    obtaining a final spectrum at low levels of broadening (relative to the default of 0.5 eV), particularly as higher","    levels of broadening significantly speed up the convergence of the Lanczos procedure. Inputs for the replot","    calculation are found in the ``xs_plot`` namespace.","","    The core-wavefunction plot derived from the ground-state of the absorbing element can be provided as a top-level","    input or produced by the WorkChain. If left to the WorkChain, the ground-state pseudopotential assigned to the","    absorbing element will be used to generate this data using the upf2plotcore.sh utility script (via the","    ``aiida-shell`` plugin).","","    In its current stage of development, the workflow requires the following:","","    - An input structure where the desired absorbing atom in the system is marked as a separate Kind. The default","      behaviour for the WorkChain is to set the Kind name as 'X', however this can be changed via the `overrides`","      dictionary.","    - A code node for ``upf2plotcore``, configured for the ``aiida-shell`` plugin","      (https://github.com/sphuber/aiida-shell). Alternatively, a ``SinglefileData`` node from a previous ``ShellJob``","      run can be supplied under ``inputs.core_wfc_data``.","    - A suitable pair of pseudopotentials for the element type of the absorbing atom, one for the ground-state occupancy","      which contains GIPAW informtation for the core level of interest for the XAS (e.g. 1s in the case of a K-edge","      calculation) and the other containing a core hole. (For the moment this can be passed either via the","      ``core_hole_pseudos`` field in ``get_builder_from_protocol`` or via the overrides, but will be changed later once","      full families of core-hole pseudopotentials become available)."],spec:{inputs:[{name:"eps_vectors",required:!0,valid_types:"List",info:"The list of 3-vectors to use in XSpectra sub-processes. The number of sub-lists will subsequently define the number of XSpectra calculations to perform"},{name:"scf",required:!0,valid_types:"Data",info:"Input parameters for the `pw.x` calculation."},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for calculation, with at least one site containing the `abs_atom_marker` as the kind label."},{name:"xs_prod",required:!0,valid_types:"Data",info:"Input parameters for the `xspectra.x` calculation to compute the Lanczos."},{name:"abs_atom_marker",required:!1,valid_types:"Str, NoneType",info:"The name for the Kind representing the absorbing atom in the structure. Must corespond to a Kind within the StructureData node supplied to the calculation."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"core_wfc_data",required:!1,valid_types:"SinglefileData, NoneType",info:"The core wavefunction data file extracted from the ground-state pseudo for the absorbing atom."},{name:"dry_run",required:!1,valid_types:"Bool, NoneType",info:"Terminate workchain steps before submitting calculations (test purposes only)."},{name:"get_powder_spectrum",required:!1,valid_types:"Bool",info:"If `True`, the WorkChain will combine XANES dipole spectra computed using the XAS basis vectors defined according to the `get_powder_spectrum` CalcFunction."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"run_replot",required:!1,valid_types:"Bool",info:""},{name:"upf2plotcore_code",required:!1,valid_types:"Code, NoneType",info:"The code node required for upf2plotcore.sh configured for ``aiida-shell``. Must be provided if `core_wfc_data` is not provided."},{name:"xs_plot",required:!1,valid_types:"Data",info:"Input parameters for the re-plot `xspectra.x` calculation of the Lanczos."}],outputs:[{name:"parameters_scf",required:!0,valid_types:"Dict",info:"The output parameters of the SCF `PwBaseWorkChain`."},{name:"parameters_xspectra",required:!0,valid_types:"Dict",info:"The output dictionaries of each `XspectraBaseWorkChain` performed"},{name:"spectra",required:!0,valid_types:"XyData",info:"An XyData node containing all the final spectra produced by the WorkChain."},{name:"powder_spectrum",required:!1,valid_types:"XyData",info:"The simulated powder spectrum"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The SCF sub process failed"},{status:402,message:"One or more XSpectra sub processes failed"},{status:403,message:"The pseudo for the absorbing element contains no GIPAW information."}]},class:"aiida_quantumespresso.workflows.xspectra.core:XspectraCoreWorkChain"},"quantumespresso.xspectra.crystal":{description:["Workchain to compute all X-ray absorption spectra for a given structure using Quantum ESPRESSO.","","    The WorkChain follows the process required to compute all the K-edge XAS spectra for each","    element in a given structure. The WorkChain itself firstly calls the PwRelaxWorkChain to","    relax the input structure, then determines the input settings for each XAS","    calculation automatically using ``get_xspectra_structures()``:","","        - Firstly the input structure is converted to its conventional standard cell using","          ``spglib`` and detects the space group number for the conventional cell.","        - Symmetry analysis of the standardized structure using ``spglib`` is then used to","          determine the number of non-equivalent atomic sites in the structure for each","          element considered for analysis.","","    Using the symmetry data returned from ``get_xspectra_structures``, input structures for","    the XspectraCoreWorkChain are generated from the standardized structure by converting each","    to a supercell with cell dimensions of at least 8.0 angstroms in each periodic dimension -","    required in order to sufficiently reduce the unphysical interaction of the core-hole with","    neighbouring images. The size of the minimum size requirement can be overriden by the","    user if required. The WorkChain then uses the space group number to set the list of","    polarisation vectors for the ``XspectraCoreWorkChain`` to compute for all subsequent","    calculations."],spec:{inputs:[{name:"core",required:!0,valid_types:"Data",info:"Input parameters for the basic xspectra workflow (core-hole SCF + XAS."},{name:"core_hole_pseudos",required:!0,valid_types:"UpfData, UpfData",info:'Dynamic namespace for pairs of excited-state pseudopotentials for each absorbing element. Must use the mapping "{element}" : {Upf}".'},{name:"elements_list",required:!0,valid_types:"List",info:"The list of elements to be considered for analysis, each must be a valid element of the periodic table."},{name:"gipaw_pseudos",required:!0,valid_types:"UpfData, UpfData",info:'Dynamic namespace for pairs of ground-state pseudopotentials for each absorbing element. Must use the mapping "{element}" : {Upf}.'},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for calculation."},{name:"abs_atom_marker",required:!1,valid_types:"Str",info:"The name for the Kind representing the absorbing atom in the structure. Will be used in all structures generated in ``get_xspectra_structures`` step."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculations will be cleaned at the end of execution."},{name:"core_hole_treatments",required:!1,valid_types:"Dict, NoneType",info:"Optional dictionary to set core-hole treatment to given elements present. The default full-core-hole treatment will be used if not specified."},{name:"core_wfc_data",required:!1,valid_types:"SinglefileData",info:"Input namespace to provide core wavefunction inputs for each element. Must follow the format: ``core_wfc_data__{symbol} = {node}``"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"Data",info:"Input parameters for the relax process. If not specified at all, the relaxation step is skipped."},{name:"return_all_powder_spectra",required:!1,valid_types:"Bool",info:"If ``True``, the WorkChain will return all ``powder_spectrum`` nodes from each ``XspectraCoreWorkChain`` sub-process."},{name:"spglib_settings",required:!1,valid_types:"Dict, NoneType",info:"Optional settings dictionary for the spglib call within ``get_xspectra_structures``."},{name:"structure_preparation_settings",required:!1,valid_types:"Dict, Float, Int, Bool, Str",info:"Optional settings dictionary for the ``get_xspectra_structures()`` method."},{name:"upf2plotcore_code",required:!1,valid_types:"Code, NoneType",info:"Code node for the upf2plotcore.sh ShellJob code."}],outputs:[{name:"final_spectra",required:!0,valid_types:"XyData",info:"The fully-resolved spectra for each element"},{name:"supercell_structure",required:!0,valid_types:"StructureData",info:"The supercell of ``outputs.standardized_structure`` used to generate structures for XSpectra sub-processes."},{name:"symmetry_analysis_data",required:!0,valid_types:"Dict",info:"The output parameters from ``get_xspectra_structures()``."},{name:"optimized_structure",required:!1,valid_types:"StructureData",info:"The optimized structure from the ``relax`` process."},{name:"parameters_relax",required:!1,valid_types:"Dict",info:"The output_parameters of the relax step."},{name:"parameters_scf",required:!1,valid_types:"Dict",info:"The output parameters of each ``PwBaseWorkChain`` performed in each ``XspectraCoreWorkChain``."},{name:"parameters_xspectra",required:!1,valid_types:"Dict",info:"The output dictionaries of each `XspectraCalculation` performed"},{name:"powder_spectra",required:!1,valid_types:"XyData",info:"All the spectra generated by the WorkChain."},{name:"standardized_structure",required:!1,valid_types:"StructureData",info:"The standardized crystal structure used to generate structures for XSpectra sub-processes."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The Relax sub process failed"},{status:402,message:"One or more XSpectra workflows failed"},{status:403,message:"The pseudos for one or more absorbing elements contain no GIPAW information."}]},class:"aiida_quantumespresso.workflows.xspectra.crystal:XspectraCrystalWorkChain"}},console_scripts:{"aiida-quantumespresso":"aiida_quantumespresso.cli:cmd_root"}},commits_count:96,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:20},{colorclass:"brown",text:"Parsers",count:13},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:11},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Tools calculations, Tools data orbitals)",count:3}],pip_install_cmd:"pip install aiida-quantumespresso",is_installable:"True"},"aiida-quantumespresso-hp":{code_home:"https://github.com/sphuber/aiida-quantumespresso-hp",entry_point_prefix:"quantumespresso.hp",pip_url:"git+https://github.com/sphuber/aiida-quantumespresso-hp",name:"aiida-quantumespresso-hp",package_name:"aiida_quantumespresso_hp",hosted_on:"github.com",metadata:{author:"Sebastiaan P. Huber",author_email:"mail@sphuber.net",version:"0.1.0",description:"The AiiDA plugin for the Hubbard module of Quantum ESPRESSO",classifiers:["License :: OSI Approved :: MIT License","Programming Language :: Python :: 2.7","Development Status :: 4 - Beta"]},aiida_version:">=1.0.0b6,<2.0",entry_points:{"aiida.calculations":{"quantumespresso.hp":"aiida_quantumespresso_hp.calculations.hp:HpCalculation"},"aiida.parsers":{"quantumespresso.hp":"aiida_quantumespresso_hp.parsers.hp:HpParser"},"aiida.workflows":{"quantumespresso.hp.main":"aiida_quantumespresso_hp.workflows.hp.main:HpWorkChain","quantumespresso.hp.parallelize_atoms":"aiida_quantumespresso_hp.workflows.hp.parallelize_atoms:HpParallelizeAtomsWorkChain","quantumespresso.hp.base":"aiida_quantumespresso_hp.workflows.hp.base:HpBaseWorkChain","quantumespresso.hp.hubbard":"aiida_quantumespresso_hp.workflows.hubbard:SelfConsistentHubbardWorkChain"},console_scripts:{launch_calculation_hp:"aiida_quantumespresso_hp.cli.calculations.hp:launch",launch_workflow_hp_base:"aiida_quantumespresso_hp.cli.workflows.hp.base:launch",launch_workflow_hp_main:"aiida_quantumespresso_hp.cli.workflows.hp.main:launch",launch_workflow_hp_hubbard:"aiida_quantumespresso_hp.cli.workflows.hubbard:launch"}},commits_count:0,development_status:"beta",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:4},{colorclass:"purple",text:"Console scripts",count:4}],pip_install_cmd:"pip install git+https://github.com/sphuber/aiida-quantumespresso-hp",is_installable:"True"},"aiida-raspa":{code_home:"https://github.com/yakutovicha/aiida-raspa",entry_point_prefix:"raspa",pip_url:"aiida-raspa",name:"aiida-raspa",package_name:"aiida_raspa",hosted_on:"github.com",metadata:{description:"AiiDA plugin for RASPA code",author:"Aliaksandr Yakutovich",author_email:"aliaksandr.yakutovich@epfl.ch",license:"MIT License",home_page:"https://github.com/yakutovicha/aiida-raspa",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3"],version:"1.2.0"},aiida_version:null,entry_points:{"aiida.calculations":{raspa:{description:["This is a RaspaCalculation, subclass of CalcJob, to prepare input for RASPA code.","    For information on RASPA, refer to: https://github.com/iraspa/raspa2."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"block_pocket",required:!1,valid_types:"SinglefileData",info:"Zeo++ block pocket file"},{name:"file",required:!1,valid_types:"SinglefileData",info:"Additional input file(s)"},{name:"framework",required:!1,valid_types:"CifData",info:"Input framework(s)"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parent_folder",required:!1,valid_types:"RemoteData",info:"Remote folder used to continue the same simulation stating from the binary restarts."},{name:"retrieved_parent_folder",required:!1,valid_types:"FolderData",info:"To use an old calculation as a starting poing for a new one."},{name:"settings",required:!1,valid_types:"Dict",info:"Additional input parameters"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The results of a calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"warnings",required:!1,valid_types:"List",info:"Warnings that appeared during the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"The retrieved folder does not contain an output file."},{status:102,message:'The output does not contain "Starting simulation".'},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:500,message:"The calculation could not be completed due to the lack of time."}]},class:"aiida_raspa.calculations:RaspaCalculation"}},"aiida.parsers":{raspa:"aiida_raspa.parsers:RaspaParser"},"aiida.workflows":{"raspa.base":{description:["Workchain to run a RASPA calculation with automated error handling and restarts."],spec:{inputs:[{name:"raspa",required:!0,valid_types:"",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The results of a calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"warnings",required:!1,valid_types:"List",info:"Warnings that appeared during the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_raspa.workchains:RaspaBaseWorkChain"}}},commits_count:0,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-raspa",is_installable:"True"},"aiida-shell":{code_home:"https://github.com/sphuber/aiida-shell",entry_point_prefix:"core",pip_url:"aiida-shell",plugin_info:"https://raw.github.com/sphuber/aiida-shell/master/pyproject.toml",name:"aiida-shell",package_name:"aiida_shell",hosted_on:"github.com",metadata:{description:"AiiDA plugin that makes running shell commands easy.",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>',classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"0.5.3"},aiida_version:">=2.1,<3.0",entry_points:{"aiida.calculations":{"core.shell":{description:["Implementation of :class:`aiida.engine.CalcJob` to run a simple shell command."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"arguments",required:!1,valid_types:"List, NoneType",info:""},{name:"filenames",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"nodes",required:!1,valid_types:"Data",info:""},{name:"outputs",required:!1,valid_types:"List, NoneType",info:""},{name:"parser",required:!1,valid_types:"PickledData, NoneType",info:""},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Exit status could not be determined: exit status file was not retrieved."},{status:301,message:"Exit status could not be determined: exit status file does not contain a valid integer."},{status:302,message:"The stdout file was not retrieved."},{status:303,message:"One or more output files defined in the `outputs` input were not retrieved: {missing_filepaths}."},{status:310,message:"Callable specified in the `parser` input excepted: {exception}."},{status:400,message:"The command exited with a non-zero status: {status} {stderr}."},{status:410,message:"The command exited with a zero status but the stderr was not empty."}]},class:"aiida_shell.calculations.shell:ShellJob"}},"aiida.data":{"core.code.installed.shell":"aiida_shell.data.code:ShellCode","core.pickled":"aiida_shell.data.pickled:PickledData"},"aiida.parsers":{"core.shell":"aiida_shell.parsers.shell:ShellParser"}},commits_count:46,development_status:"alpha",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:2}],pip_install_cmd:"pip install aiida-shell",is_installable:"True"},"aiida-siesta":{code_home:"https://github.com/siesta-project/aiida_siesta_plugin/tree/master",documentation_url:"https://aiida-siesta-plugin.readthedocs.io/",entry_point_prefix:"siesta",pip_url:"aiida-siesta",name:"aiida-siesta",package_name:"aiida_siesta",hosted_on:"github.com",metadata:{description:"A plugin for Siesta's basic functionality within the AiiDA framework.",author_email:'Albero Garcia <albertog@icmab.es>, "Victor M. Garcia-Suarez" <garciavictor@uniovi.es>, Emanuele Bosoni <ebosoni@icmab.es>, Vladimir Dikan <vdikan@icmab.es>, Pol Febrer <pol.febrer@icn2.cat>',classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{},commits_count:8,development_status:"stable",summaryinfo:[],pip_install_cmd:"pip install aiida-siesta",is_installable:"True"},"aiida-spex":{code_home:"https://github.com/JuDFTteam/aiida-spex",entry_point_prefix:"spex",pip_url:"git+https://github.com/JuDFTteam/aiida-spex",name:"aiida-spex",package_name:"aiida_spex",hosted_on:"github.com",metadata:{author:"The SPEX Team",author_email:"a.chandran@fz-juelich.de",version:"1.1.2",description:"AiiDA plugin for SPEX code",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.0.0b3,<3.0.0",entry_points:{"aiida.calculations":{"spex.spex":"aiida_spex.calculations.spex:SpexCalculation"},"aiida.data":{"spex.spexinp":"aiida_spex.data.spexinp:SpexinpData"},"aiida.parsers":{"spex.spexparser":"aiida_spex.parsers.spex:SpexParser"},"aiida.workflows":{"spex.job":"aiida_spex.workflows.job:SpexJobWorkchain"}},commits_count:0,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/JuDFTteam/aiida-spex"},"aiida-spirit":{code_home:"https://github.com/JuDFTteam/aiida-spirit/tree/main",documentation_url:"https://aiida-spirit.readthedocs.io/",entry_point_prefix:"spirit",name:"aiida-spirit",pip_url:"aiida-spirit",package_name:"aiida_spirit",hosted_on:"github.com",metadata:{description:"AiiDA plugin for the spirit code",author:"The JuDFT Team",author_email:"p.ruessmann@fz-juelich.de",license:"MIT",home_page:"https://github.com/JuDFTteam/aiida-spirit",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.2"},aiida_version:null,entry_points:{"aiida.calculations":{spirit:"aiida_spirit.calculations:SpiritCalculation"},"aiida.parsers":{spirit:"aiida_spirit.parsers:SpiritParser"}},commits_count:9,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-spirit"},"aiida-sshonly":{code_home:"https://github.com/adegomme/aiida-sshonly",development_status:"beta",entry_point_prefix:"sshonly",pip_url:"aiida-sshonly",plugin_info:"https://raw.github.com/adegomme/aiida-sshonly/master/setup.json",name:"aiida-sshonly",package_name:"aiida_sshonly",hosted_on:"github.com",metadata:{description:"AiiDA plugin adding a sshonly transport option, using only SSH to transfer files, avoiding SFTP, in case it's blocked or non functional on a remote system",author:"adegomme",license:"MIT",home_page:"https://github.com/adegomme/aiida-sshonly",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0a3"},aiida_version:">=1.3.0,<2.0.0",entry_points:{"aiida.transports":{ssh_only:"aiida_sshonly.transports.sshonly:SshOnlyTransport"}},commits_count:0,summaryinfo:[{colorclass:"orange",text:"Other (Transports)",count:1}],pip_install_cmd:"pip install --pre aiida-sshonly",is_installable:"True"},"aiida-statefile-schedulers":{code_home:"https://github.com/dev-zero/aiida-statefile-schedulers",development_status:"beta",entry_point_prefix:"statefile_schedulers",pip_url:"aiida-statefile-schedulers",name:"aiida-statefile-schedulers",package_name:"aiida_statefile_schedulers",hosted_on:"github.com",metadata:{description:"Simple statefile-driven task schedulers for AiiDA",author:"Tiziano Müller",author_email:"tm@dev-zero.ch",license:"MIT",home_page:"https://github.com/dev-zero/aiida-statefile-schedulers",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.1"},aiida_version:null,entry_points:{"aiida.schedulers":{"statefile_schedulers.direct":"aiida_statefile_schedulers.schedulers.direct:StatefileDirectScheduler"}},commits_count:0,summaryinfo:[{colorclass:"orange",text:"Other (Schedulers)",count:1}],pip_install_cmd:"pip install aiida-statefile-schedulers",is_installable:"True"},"aiida-strain":{code_home:"https://github.com/greschd/aiida-strain",documentation_url:"https://aiida-strain.readthedocs.io",entry_point_prefix:"strain",pip_url:"aiida-strain",name:"aiida-strain",package_name:"aiida_strain",hosted_on:"github.com",metadata:{description:"AiiDA Plugin for applying strain to structures",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-strain.readthedocs.io",classifiers:["Development Status :: 3 - Alpha","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0"},aiida_version:null,entry_points:{"aiida.workflows":{"strain.apply_strains":{description:["Workchain to create strained structures from a given input structure."],spec:{inputs:[{name:"strain_kind",required:!0,valid_types:"Str",info:""},{name:"strain_parameters",required:!0,valid_types:"Str",info:""},{name:"strain_strengths",required:!0,valid_types:"List",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_strain:ApplyStrains"},"strain.apply_strains_with_symmetry":{description:["Workchain to create strained structures from an input structure, and select the symmetries which are compatible with the strained structure from a set of given input symmetries."],spec:{inputs:[{name:"strain_kind",required:!0,valid_types:"Str",info:""},{name:"strain_parameters",required:!0,valid_types:"Str",info:""},{name:"strain_strengths",required:!0,valid_types:"List",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:""},{name:"symmetry_repr_code",required:!0,valid_types:"Code",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_strain:ApplyStrainsWithSymmetry"}}},commits_count:0,development_status:"alpha",summaryinfo:[{colorclass:"green",text:"Workflows",count:2}],pip_install_cmd:"pip install aiida-strain",is_installable:"True"},"aiida-supercell":{code_home:"https://github.com/pzarabadip/aiida-supercell",development_status:"stable",documentation_url:"https://aiida-supercell.readthedocs.io/",entry_point_prefix:"supercell",pip_url:"git+https://github.com/pzarabadip/aiida-supercell",name:"aiida-supercell",package_name:"aiida_supercell",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"1.0.1",description:"AiiDA Plugin for Supercell program",classifiers:["Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"]},aiida_version:">=1.0.0,<2.0",entry_points:{"aiida.calculations":{supercell:{description:["This is a SupercellCalculation, subclass of JobCalculation,","    to prepare input for enumerating structures using Supercell program"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"structure",required:!0,valid_types:"StructureData, SinglefileData",info:"Input structure"},{name:"supercell_size",required:!0,valid_types:"List",info:"Supercell size for enumeration"},{name:"calculate_coulomb_energies",required:!1,valid_types:"Bool",info:"Whether to calculate Coulomb energies"},{name:"charge_balance_method",required:!1,valid_types:"Str",info:"Method to use for charge balancing"},{name:"charges",required:!1,valid_types:"Dict",info:"Dictionary of formal charges to be used"},{name:"merge_symmetric",required:!1,valid_types:"Bool",info:"Whether to merge symmetrically distinct configurations"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"random_seed",required:!1,valid_types:"Int",info:"Random seed number"},{name:"sample_structures",required:!1,valid_types:"Dict",info:"How to sample structures from huge configuration space"},{name:"save_as_archive",required:!1,valid_types:"Bool",info:"Whether to save resulting structures as archive"},{name:"tolerance",required:!1,valid_types:"Float",info:"The maximum distance (in Angstroms) between sites that should be contained within the same group."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"the results of the calculation"},{name:"output_structures",required:!0,valid_types:"StructureData",info:"relaxed structure"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"Input structure could not be processed."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."}]},class:"aiida_supercell.calculations:SupercellCalculation"}},"aiida.parsers":{supercell:"aiida_supercell.parsers:SupercellParser"}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-supercell",is_installable:"True"},"aiida-symmetry-representation":{code_home:"https://github.com/greschd/aiida_symmetry_representation",documentation_url:"https://aiida-symmetry-representation.readthedocs.io",entry_point_prefix:"symmetry_representation",pip_url:"aiida-symmetry-representation",name:"aiida-symmetry-representation",package_name:"aiida_symmetry_representation",hosted_on:"github.com",metadata:{description:"AiiDA Plugin for symmetry representations.",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-symmetry-representation.readthedocs.io",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0"},aiida_version:null,entry_points:{"aiida.calculations":{"symmetry_representation.filter_symmetries":{description:["Calculation class to run the ``symmetry-repr filter_symmetries`` command."],spec:{inputs:[{name:"structure",required:!0,valid_types:"StructureData",info:"Structure with which the filtered symmetries should be compatible."},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:"File containing the symmetries (in HDF5 format)."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:"The HDF5 file containing the symmetries which are compatible with the structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_symmetry_representation.calculations.filter_symmetries:FilterSymmetriesCalculation"}},"aiida.parsers":{"symmetry_representation.symmetry":"aiida_symmetry_representation.parsers.symmetries:SymmetriesParser"}},commits_count:0,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-symmetry-representation",is_installable:"True"},"aiida-tbextraction":{code_home:"https://github.com/greschd/aiida-tbextraction",documentation_url:"https://aiida-tbextraction.readthedocs.io/",entry_point_prefix:"tbextraction",pip_url:"aiida-tbextraction",name:"aiida-tbextraction",package_name:"aiida_tbextraction",hosted_on:"github.com",metadata:{description:"AiiDA Plugin for extracting tight-binding models",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-tbextraction.readthedocs.io",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0b1"},aiida_version:null,entry_points:{"aiida.workflows":{"tbextraction.fp_run.base":"aiida_tbextraction.fp_run:FirstPrinciplesRunBase","tbextraction.fp_run.reference_bands.base":"aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase","tbextraction.fp_run.wannier_input.base":"aiida_tbextraction.fp_run.wannier_input:WannierInputBase","tbextraction.calculate_tb":"aiida_tbextraction.calculate_tb:TightBindingCalculation","tbextraction.model_evaluation.base":"aiida_tbextraction.model_evaluation:ModelEvaluationBase","tbextraction.model_evaluation.band_difference":"aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation","tbextraction.energy_windows.run_window":"aiida_tbextraction.energy_windows.run_window:RunWindow","tbextraction.energy_windows.window_search":"aiida_tbextraction.energy_windows.window_search:WindowSearch","tbextraction.optimize_fp_tb":"aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding","tbextraction.optimize_strained_fp_tb":"aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding"}},commits_count:0,development_status:"beta",summaryinfo:[{colorclass:"green",text:"Workflows",count:10}],pip_install_cmd:"pip install --pre aiida-tbextraction",is_installable:"True"},"aiida-tbmodels":{code_home:"https://github.com/greschd/aiida-tbmodels",documentation_url:"https://aiida-tbmodels.readthedocs.io",entry_point_prefix:"tbmodels",pip_url:"aiida-tbmodels",name:"aiida-tbmodels",package_name:"aiida_tbmodels",hosted_on:"github.com",metadata:{description:"AiiDA Plugin for running TBmodels",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-tbmodels.readthedocs.io",classifiers:["Development Status :: 3 - Alpha","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.3.0"},aiida_version:null,entry_points:{"aiida.calculations":{"tbmodels.eigenvals":{description:["Calculation class for the 'tbmodels eigenvals' command, which computes the eigenvalues from a given tight-binding model."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"Kpoints for which the eigenvalues are calculated."},{name:"tb_model",required:!0,valid_types:"SinglefileData",info:"Input model in TBmodels HDF5 format."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"bands",required:!0,valid_types:"BandsData",info:"The calculated eigenvalues of the model at given k-points."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:300,message:"The result HDF5 file was not found."},{status:301,message:"The standard error file contains an unknown TBmodels exception."}]},class:"aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation"},"tbmodels.parse":{description:["Calculation plugin for the 'tbmodels parse' command, which creates a","    TBmodels tight-binding model from the Wannier90 output."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"wannier_folder",required:!0,valid_types:"FolderData",info:"Folder containing the Wannier90 output data."},{name:"distance_ratio_threshold",required:!1,valid_types:"Float",info:"Determines the minimum ratio between nearest and next-nearest atom when parsing with 'nearest_atom' mode."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"pos_kind",required:!1,valid_types:"Str",info:"Determines how the orbital positions are parsed."},{name:"sparsity",required:!1,valid_types:"Str",info:"Set the sparsity of the output model. Requires TBmodels version >=1.4."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"tb_model",required:!0,valid_types:"SinglefileData",info:"Output model in TBmodels HDF5 format."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:300,message:"The output model HDF5 file was not found."},{status:301,message:"The standard error file contains an unknown TBmodels exception."},{status:301,message:"The seedname_wsvec.dat file is empty or incomplete."},{status:401,message:"The nearest atom to use for position parsing is ambiguous."}]},class:"aiida_tbmodels.calculations.parse:ParseCalculation"},"tbmodels.slice":{description:["Calculation plugin for the 'tbmodels slice' command, which re-orders or slices orbitals of a tight-binding model."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"slice_idx",required:!0,valid_types:"List",info:"Indices of the orbitals which are sliced from the model."},{name:"tb_model",required:!0,valid_types:"SinglefileData",info:"Input model in TBmodels HDF5 format."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"sparsity",required:!1,valid_types:"Str",info:"Set the sparsity of the output model. Requires TBmodels version >=1.4."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"tb_model",required:!0,valid_types:"SinglefileData",info:"Output model in TBmodels HDF5 format."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:300,message:"The output model HDF5 file was not found."},{status:301,message:"The standard error file contains an unknown TBmodels exception."}]},class:"aiida_tbmodels.calculations.slice:SliceCalculation"},"tbmodels.symmetrize":{description:["Calculation class for the 'tbmodels symmetrize' command, which creates a symmetrized tight-binding model from a tight-binding model and symmetry representations."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:"File containing the symmetries in HDF5 format."},{name:"tb_model",required:!0,valid_types:"SinglefileData",info:"Input model in TBmodels HDF5 format."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"sparsity",required:!1,valid_types:"Str",info:"Set the sparsity of the output model. Requires TBmodels version >=1.4."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"tb_model",required:!0,valid_types:"SinglefileData",info:"Output model in TBmodels HDF5 format."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:300,message:"The output model HDF5 file was not found."},{status:301,message:"The standard error file contains an unknown TBmodels exception."},{status:301,message:"The type of the given symmetries object is incorrect."}]},class:"aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation"}},"aiida.parsers":{"tbmodels.model":"aiida_tbmodels.parsers.model:ModelParser"}},commits_count:0,development_status:"alpha",summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-tbmodels",is_installable:"True"},"aiida-tcod":{code_home:"https://github.com/aiidateam/aiida-tcod",development_status:"beta",entry_point_prefix:"tcod",pip_url:"git+https://github.com/aiidateam/aiida-tcod",name:"aiida-tcod",package_name:"aiida_tcod",hosted_on:"github.com",metadata:{author:"The AiiDA team",author_email:"developers@aiida.net",version:"0.1.0a0",description:"AiiDA plugin to interact with the TCOD",classifiers:["Programming Language :: Python"]},aiida_version:">=1.0.0b1",entry_points:{"aiida.tools.dbexporters":{tcod:"aiida.tools.dbexporters.tcod"}},commits_count:0,summaryinfo:[{colorclass:"orange",text:"Other (Database Exporters)",count:1}],pip_install_cmd:"pip install git+https://github.com/aiidateam/aiida-tcod",is_installable:"True"},"aiida-uppasd":{code_home:"https://github.com/uppasd/aiida-uppasd",documentation_url:"https://github.com/uppasd/aiida-uppasd/blob/master/README.md",entry_point_prefix:"uppasd",pip_url:"git+https://github.com/unkcpz/aiida-uppasd",name:"aiida-uppasd",package_name:"aiida_uppasd",hosted_on:"github.com",metadata:{author:"Qichen Xu, Anders Bergman, Anna Delin, Jonathan Chico",author_email:"qichenx@kth.se",version:"0.1.0",description:"Interface for UppASD and AiiDA",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.1.0,<2.0.0",entry_points:{"aiida.calculations":{UppASD_core_calculations:"UppASD_AiiDA.calculations.core_calcs:UppASD"},"aiida.parsers":{UppASD_core_parsers:"UppASD_AiiDA.parsers.core_parser:SpinDynamic_core_parser"}},commits_count:0,development_status:"planning",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/unkcpz/aiida-uppasd"},"aiida-vasp":{code_home:"https://github.com/aiida-vasp/aiida-vasp",documentation_url:"https://aiida-vasp.readthedocs.io/",entry_point_prefix:"vasp",pip_url:"aiida-vasp",plugin_info:"https://raw.githubusercontent.com/aiida-vasp/aiida-vasp/master/setup.json",name:"aiida-vasp",package_name:"aiida_vasp",hosted_on:"github.com",metadata:{description:"AiiDA plugin for running VASP calculations and workflows.",author_email:"Espen Flage-Larsen <espen.flage-larsen@sigma2.no>",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"3.0.1"},aiida_version:">=2.4,<3.0",entry_points:{"aiida.calculations":{"vasp.immigrant":{description:["Parse VASP output objects stored in a specified directory.","","    Simulate running the VaspCalculation up to the point where it can be","    retrieved and parsed, then hand over control to the runner for the rest.","","    Usage examples","    --------------","    Immigrant calculation can be perfomed as follows.","","    ::","","       code = Code.get_from_string('vasp@local')","       folder = '/home/username/vasp-calc-dir'","       settings = {'parser_settings': {'add_energies': True,","                                       'add_forces': True,","                                       'electronic_step_energies': True}}","       VaspImmigrant = CalculationFactory('vasp.immigrant')","       builder = VaspImmigrant.get_builder_from_folder(code,","                                                       folder,","                                                       settings=settings)","       submit(builder)","","    Instead of ``builder``, inputs dict is obtained similarly as","","    ::","","       code = Code.get_from_string('vasp@local')","       folder = '/home/username/vasp-calc-dir'","       settings = {'parser_settings': {'add_energies': True,","                                       'add_forces': True,","                                       'electronic_step_energies': True}}","       VaspImmigrant = CalculationFactory('vasp.immigrant')","       inputs = VaspImmigrant.get_inputs_from_folder(code,","                                                     folder,","                                                     settings=settings)","       submit(VaspImmigrant, **inputs)","","    Note","    ----","    The defaul metadata is set automatically as follows::","","       {'options': {'max_wallclock_seconds': 1,","        'resources': {'num_machines': 1, 'num_mpiprocs_per_machine': 1}}}","","    Specific scheduler may require setting ``resources`` differently","    (e.g., sge ``'parallel_env'``).","","    ``get_inputs_from_folder`` and ``get_builder_from_folder`` accept several","    kwargs, see the docstring of ``get_inputs_from_folder``."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The kpoints to use (KPOINTS)."},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential",required:!0,valid_types:"PotcarData",info:"The potentials (POTCAR)."},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR)."},{name:"charge_density",required:!1,valid_types:"ChargedensityData",info:"The charge density. (CHGCAR)"},{name:"dynamics",required:!1,valid_types:"Dict",info:"The VASP parameters related to ionic dynamics, e.g. flags to set the selective dynamics"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"remote_workdir",required:!1,valid_types:"str",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict",info:"Additional parameters not related to VASP itself."},{name:"wavefunctions",required:!1,valid_types:"WavefunData",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:333,message:"VASP did not produce any output and did likely not execute properly."},{status:350,message:"the retrieved folder data node could not be accessed."},{status:351,message:"the retrieved_temporary folder data node could not be accessed."},{status:352,message:"an object that is marked by the parser as critical is missing."},{status:700,message:"Calculation did not reach the end of execution."},{status:701,message:"The electronic structure is not converged."},{status:702,message:"The ionic relaxation is not converged."},{status:703,message:"VASP calculation encountered a critical error: {error_message}."},{status:704,message:"Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."},{status:1001,message:"parsing an object has failed."},{status:1002,message:"the parser is not able to parse the {quantity} quantity"},{status:1003,message:"the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"},{status:1004,message:"the parser is not able to compose one or more output nodes: {nodes}"},{status:1005,message:"Overflow detected in XML while parsing."}]},class:"aiida_vasp.calcs.immigrant:VaspImmigrant"},"vasp.neb":{description:["NEB calculations using VASP","","    ------------------------------------","    Calculations for performing NEB calculations.","    NEB calculations requires standard VASP inputs, but POSCAR are placed in","    folder names 00, 01, 02... N for N-1 number of images.","","    Input frames should be placed under the ``neb_images`` input namespace as a dictionary like::","      {","          'image_00': structure_1,","          'image_01': structure_2","          ....","      }","","    Output of individual frames are placed in the corresponding namespace under the same convention."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"final_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for the final image."},{name:"initial_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for initial image."},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The kpoints to use (KPOINTS)."},{name:"neb_images",required:!0,valid_types:"StructureData, CifData",info:"Starting structure for the NEB images"},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential",required:!0,valid_types:"PotcarData",info:"The potentials (POTCAR)."},{name:"charge_density",required:!1,valid_types:"ChargedensityData",info:"The charge density. (CHGCAR)"},{name:"dynamics",required:!1,valid_types:"Dict",info:"The VASP parameters related to ionic dynamics, e.g. flags to set the selective dynamics"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict",info:"Additional parameters not related to VASP itself."},{name:"wavefunctions",required:!1,valid_types:"WavefunData",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"Per-image misc output."},{name:"neb_misc",required:!0,valid_types:"Dict",info:"NEB related data combined for each image"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"structure",required:!0,valid_types:"StructureData",info:"NEB images"},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"Kpoints for each image."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization for each image."},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output file containing the plane wave coefficients."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:333,message:"VASP did not produce any output files and did likely not execute properly."},{status:350,message:"the retrieved folder data node could not be accessed."},{status:351,message:"the retrieved_temporary folder data node could not be accessed."},{status:352,message:"an object that is marked by the parser as critical is missing."},{status:352,message:"a file that is marked by the parser as critical is missing."},{status:700,message:"Calculation did not reach the end of execution."},{status:701,message:"The electronic structure is not converged."},{status:702,message:"The ionic relaxation is not converged."},{status:703,message:"VASP calculation encountered a critical error: {error_message}."},{status:704,message:"Outputs for diagnosis are missing, please make sure the `neb_data` and `run_status` quantities are requested for parsing."},{status:1001,message:"parsing an object has failed."},{status:1001,message:"parsing a file has failed."},{status:1002,message:"the parser is not able to parse the {quantity} quantity"},{status:1003,message:"the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"},{status:1004,message:"the parser is not able to compose one or more output nodes: {nodes}"},{status:1005,message:"Overflow detected in XML while parsing."}]},class:"aiida_vasp.calcs.neb:VaspNEBCalculation"},"vasp.vasp":{description:["General-purpose VASP calculation.","","    ---------------------------------","    By default retrieves only the 'OUTCAR', 'vasprun.xml', 'EIGENVAL', 'DOSCAR'","    and Wannier90 input / output objects. These objects are deleted after parsing.","    Additional retrieve objects can be specified via the","    ``settings['ADDITIONAL_RETRIEVE_TEMPORARY_LIST']`` input. In addition, if you want to keep","    any objects after parsing, put them in ``settings['ADDITIONAL_RETRIEVE_LIST']`` which is empty","    by default.","","    Floating point precision for writing POSCAR objects can be adjusted using","    ``settings['poscar_precision']``, default: 10","","    The following assumes you are familiar with the AiiDA data structures and","    how to set up and run an AiiDA calculation in general.","","    Example usage::","","        from aiida.orm import CalculationFactory, DataFactory","        from aiida.work import submit","","        proc = CalculationFactory('vasp.vasp').process()","        inputs = proc.get_inputs_template()","        inputs.parameter = <Dict with INCAR params>","        inputs.structure = <StructureData>","        inputs.kpoints = <KpointsData>","        inputs.settings = <Dict with parser settings etc.>","        inputs.potential = DataFactory('vasp.potcar').get_potcars_from_structure(structure, ...)","        inputs.code = <Code representing vasp on your cluster>","","        submit(proc, **inputs)","","    Which is very similar to the workchain example.","","    Since we do not want the content parsers to know about the AiiDA infrastructure,","    i.e. processes etc. we have no access to the exit codes defined on the CalcJob.","    We thus have to deal with failures in parsing directly in the write calls here."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The kpoints to use (KPOINTS)."},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential",required:!0,valid_types:"PotcarData",info:"The potentials (POTCAR)."},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR)."},{name:"charge_density",required:!1,valid_types:"ChargedensityData",info:"The charge density. (CHGCAR)"},{name:"dynamics",required:!1,valid_types:"Dict",info:"The VASP parameters related to ionic dynamics, e.g. flags to set the selective dynamics"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict",info:"Additional parameters not related to VASP itself."},{name:"wavefunctions",required:!1,valid_types:"WavefunData",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:333,message:"VASP did not produce any output and did likely not execute properly."},{status:350,message:"the retrieved folder data node could not be accessed."},{status:351,message:"the retrieved_temporary folder data node could not be accessed."},{status:352,message:"an object that is marked by the parser as critical is missing."},{status:700,message:"Calculation did not reach the end of execution."},{status:701,message:"The electronic structure is not converged."},{status:702,message:"The ionic relaxation is not converged."},{status:703,message:"VASP calculation encountered a critical error: {error_message}."},{status:704,message:"Outputs for diagnosis are missing, please make sure `run_status` and `notifications` quantities are requested for parsing."},{status:1001,message:"parsing an object has failed."},{status:1002,message:"the parser is not able to parse the {quantity} quantity"},{status:1003,message:"the vasprun.xml was truncated and recovery parsing failed to parse at least one of the requested quantities: {quantities}, very likely the VASP calculation did not run properly"},{status:1004,message:"the parser is not able to compose one or more output nodes: {nodes}"},{status:1005,message:"Overflow detected in XML while parsing."}]},class:"aiida_vasp.calcs.vasp:VaspCalculation"},"vasp.vasp2w90":"aiida_vasp.calcs.vasp2w90:Vasp2w90Calculation"},"aiida.cmdline.data":{"vasp-potcar":"aiida_vasp.commands.potcar:potcar"},"aiida.data":{"vasp.archive":"aiida_vasp.data.archive:ArchiveData","vasp.chargedensity":"aiida_vasp.data.chargedensity:ChargedensityData","vasp.potcar":"aiida_vasp.data.potcar:PotcarData","vasp.potcar_file":"aiida_vasp.data.potcar:PotcarFileData","vasp.wavefun":"aiida_vasp.data.wavefun:WavefunData"},"aiida.groups":{"vasp.potcar":"aiida_vasp.data.potcar:PotcarGroup"},"aiida.parsers":{"vasp.neb":"aiida_vasp.parsers.neb:VtstNebParser","vasp.vasp":"aiida_vasp.parsers.vasp:VaspParser","vasp.vasp2w90":"aiida_vasp.parsers.vasp2w90:Vasp2w90Parser"},"aiida.workflows":{"vasp.bands":{description:["Extract the band structure using k-point paths fetched from SeeKpath."],spec:{inputs:[{name:"bands",required:!0,valid_types:"",info:""},{name:"code",required:!0,valid_types:"Code",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"restart_folder",required:!0,valid_types:"RemoteData",info:`
            The folder to restart in, which contains the outputs from the prerun to extract the charge density.
            `},{name:"smearing",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"max_iterations",required:!1,valid_types:"Int",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:""},{name:"settings",required:!1,valid_types:"Dict",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData",info:""}],outputs:[{name:"bands",required:!0,valid_types:"BandsData",info:""},{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the bands workchain"},{status:2001,message:"BandsData not found in exposed_ouputs"}]},class:"aiida_vasp.workchains.bands:BandsWorkChain"},"vasp.converge":{description:["A workchain to perform convergence tests."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"converge",required:!0,valid_types:"",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"verify",required:!0,valid_types:"",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"max_iterations",required:!1,valid_types:"Int",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData",info:""}],outputs:[{name:"converge",required:!0,valid_types:"",info:""},{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"relax",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the converge workchain"}]},class:"aiida_vasp.workchains.converge:ConvergeWorkChain"},"vasp.immigrant":{description:["Import a VASP run executed in the directory specified by folder_path."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"folder_path",required:!1,valid_types:"Str",info:"Deprecated."},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"max_iterations",required:!1,valid_types:"Int",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict",info:""},{name:"potential_family",required:!1,valid_types:"Str",info:""},{name:"potential_mapping",required:!1,valid_types:"Dict",info:""},{name:"remote_workdir",required:!1,valid_types:"str",info:""},{name:"settings",required:!1,valid_types:"Dict",info:""},{name:"use_chgcar",required:!1,valid_types:"Bool",info:`
            If True, WavefunData (of WAVECAR) is attached.
            `},{name:"use_wavecar",required:!1,valid_types:"Bool",info:`
            If True, WavefunData (of WAVECAR) is attached.
            `},{name:"verbose",required:!1,valid_types:"Bool",info:`
            If True, enable more detailed output during workchain execution.
            `}],outputs:[{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_vasp.workchains.immigrant:VaspImmigrantWorkChain"},"vasp.master":{description:["The master workchain that selects sub workchains to perform necessary calculations."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"converge",required:!0,valid_types:"",info:""},{name:"dos",required:!0,valid_types:"",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"verify",required:!0,valid_types:"",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:""},{name:"extract_bands",required:!1,valid_types:"Bool",info:`
                   Do you want to extract the band structure?
                   `},{name:"extract_dos",required:!1,valid_types:"Bool",info:`
                   Do you want to extract the density of states?
                   `},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"kpoints_distance",required:!1,valid_types:"Float",info:`
                   The maximum distance between k-points in inverse AA.
                   `},{name:"max_iterations",required:!1,valid_types:"Int",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData",info:""}],outputs:[{name:"bands",required:!1,valid_types:"",info:""},{name:"dos",required:!1,valid_types:"",info:""}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the master workchain"}]},class:"aiida_vasp.workchains.master:MasterWorkChain"},"vasp.neb":{description:["The NEB workchain.","","    -------------------","    Error handling enriched wrapper around VaspNEBCalculation.","","    Deliberately conserves most of the interface (required inputs) of the VaspNEBCalculation class, but","    makes it possible for a user to interact with a workchain and not a calculation.","","    In addition, implement restarts of calculation when the calculation is net full converged for error handling."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"final_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for the final image."},{name:"initial_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for initial image."},{name:"neb_images",required:!0,valid_types:"StructureData, CifData",info:"Starting structure for the NEB images"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"charge_density",required:!1,valid_types:"ChargedensityData",info:"The charge density. (CHGCAR)"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"kpoints_spacing",required:!1,valid_types:"Float",info:"Spacing for the kpoints in units A^-1 * 2pi (CASTEP style `kpoints_mp_spacing`)"},{name:"kpoints_spacing_vasp",required:!1,valid_types:"Float",info:"Spacing for the kpoints in units A^-1 (VASP style)"},{name:"ldau_mapping",required:!1,valid_types:"Dict",info:"Mappings, see the doc string of 'get_ldau_keys'"},{name:"max_iterations",required:!1,valid_types:"Int",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict",info:"Additional parameters not related to VASP itself."},{name:"verbose",required:!1,valid_types:"Bool",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavefunctions",required:!1,valid_types:"WavefunData",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"Per-image misc output."},{name:"neb_misc",required:!0,valid_types:"Dict",info:"NEB related data combined for each image"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"structure",required:!0,valid_types:"StructureData",info:"NEB images"},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"Kpoints for each image."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization for each image."},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output file containing the plane wave coefficients."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:501,message:"Unrecoverable error in launched NEB calculations."},{status:700,message:"the user did not supply a potential family name"},{status:701,message:"ValueError was returned from get_potcars_from_structure"},{status:702,message:"the potential does not exist"},{status:703,message:"the exception: {exception} was thrown while massaging the parameters"}]},class:"aiida_vasp.workchains.neb:VaspNEBWorkChain"},"vasp.relax":{description:["Structure relaxation workchain."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"kpoints",required:!0,valid_types:"KpointsData",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"relax",required:!0,valid_types:"",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"verify",required:!0,valid_types:"",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"max_iterations",required:!1,valid_types:"Int",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData",info:""}],outputs:[{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"relax",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"the called workchain does not contain the necessary relaxed output structure"},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the relax workchain"},{status:502,message:"there was an error overriding the parameters"}]},class:"aiida_vasp.workchains.relax:RelaxWorkChain"},"vasp.vasp":{description:["The VASP workchain.","","    -------------------","    Error handling enriched wrapper around VaspCalculation.","","    Deliberately conserves most of the interface (required inputs) of the VaspCalculation class, but","    makes it possible for a user to interact with a workchain and not a calculation.","","    This is intended to be used instead of directly submitting a VaspCalculation,","    so that future features like","    automatic restarting, error checking etc. can be propagated to higher level workchains","    automatically by implementing them here.","","    Handlers are implemented to try fix common problems and improves the robustness.","    Individual handlers can be enabled/disabled by setting the ``handler_overrides`` input port.",'    Additional settings may be passed under the "settings" input, which is also forwarded to the',"    calculations. The avaliable options are:","","    - ``USE_WAVECAR_FOR_RESTART`` wether calculation restarts should use the WAVECAR. The default is ``True``.","","    Usage::","","        from aiida.common.extendeddicts import AttributeDict","        from aiida.work import submit","        basevasp = WorkflowFactory('vasp.vasp')","        inputs = basevasp.get_builder()","        inputs = AttributeDict()","        ## ... set inputs","        submit(basevasp, **inputs)","","    To see a working example, including generation of input nodes from scratch, please","    refer to ``examples/run_vasp_lean.py``."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"kpoints",required:!0,valid_types:"KpointsData",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict",info:"Mapping where keys are process handler names and the values are a boolean, where `True` will enable the corresponding handler and `False` will disable it. This overrides the default value set by the `enabled` keyword of the `process_handler` decorator with which the method is decorated."},{name:"max_iterations",required:!1,valid_types:"Int",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData",info:""}],outputs:[{name:"custom_outputs",required:!0,valid_types:"",info:""},{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output Born effective charges."},{name:"charge_density",required:!1,valid_types:"ArrayData",info:"The output charge density."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output dielectric functions."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output dynamical matrix."},{name:"energies",required:!1,valid_types:"ArrayData",info:"The output total energies."},{name:"forces",required:!1,valid_types:"ArrayData",info:"The output forces."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output Hessian matrix."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"magnetization_density",required:!1,valid_types:"ArrayData",info:"The output magnetization density."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The output projectors of decomposition."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"site_magnetization",required:!1,valid_types:"Dict",info:"The output of the site magnetization"},{name:"stress",required:!1,valid_types:"ArrayData",info:"The output stress."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"the calculation is missing at least one required output in the restart workchain"},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:400,message:"the run_calculation step did not successfully add a calculation node to the context"},{status:401,message:"the maximum number of iterations was exceeded"},{status:402,message:"the calculation finished with an unexpected calculation state"},{status:403,message:"the calculation experienced and unexpected failure"},{status:404,message:"the calculation failed to submit, twice in a row"},{status:405,message:"the calculation failed for an unknown reason, twice in a row"},{status:500,message:"Missing critical output for inspecting the status of the calculation."},{status:501,message:"Cannot handle the error - inputs are likely need to be revised manually. Message: {message}"},{status:502,message:"Cannot handle the error - the last calculation did not reach the end of execution."},{status:503,message:"Cannot handle the error - the last calculation did not reach electronic convergence."},{status:504,message:"The ionic relaxation is not converged."},{status:505,message:"At least one of the ionic steps during the relaxation has did not have converged electronic structure."},{status:700,message:"the user did not supply a potential family name"},{status:701,message:"ValueError was returned from get_potcars_from_structure"},{status:702,message:"the potential does not exist"},{status:703,message:"the exception: {exception} was thrown while massaging the parameters"}]},class:"aiida_vasp.workchains.vasp:VaspWorkChain"}},console_scripts:{"mock-vasp":"aiida_vasp.commands.mock_vasp:mock_vasp","mock-vasp-strict":"aiida_vasp.commands.mock_vasp:mock_vasp_strict"}},commits_count:110,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"red",text:"Data",count:5},{colorclass:"green",text:"Workflows",count:7},{colorclass:"purple",text:"Console scripts",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:2}],pip_install_cmd:"pip install aiida-vasp",is_installable:"True"},"aiida-wannier90":{code_home:"https://github.com/aiidateam/aiida-wannier90",documentation_url:"https://aiida-wannier90.readthedocs.io/",entry_point_prefix:"wannier90",pip_url:"aiida-wannier90",plugin_info:"https://raw.github.com/aiidateam/aiida-wannier90/master/setup.json",name:"aiida-wannier90",package_name:"aiida_wannier90",hosted_on:"github.com",metadata:{description:"AiiDA Plugin for the Wannier90 code",author:"Junfeng Qiao, Dominik Gresch, Antimo Marrazzo, Daniel Marchand, Giovanni Pizzi, Norma Rivano, The AiiDA team",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.1.0"},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{"wannier90.postw90":{description:["Plugin for Wannier90.","","    Wannier90 is a code for computing maximally-localized Wannier functions.","    See http://www.wannier.org/ for more details."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the Wannier90 code"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possibly stored in a remote computer."},{name:"structure",required:!0,valid_types:"StructureData",info:"input crystal structure"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"A list of k-points along a path to be used for bands interpolation; it should contain `labels`. Specify either this or `kpoint_path`."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"kpoint_path",required:!1,valid_types:"Dict, NoneType",info:"Description of the k-points path to be used for bands interpolation; it should contain two properties: a list ``path`` of length-2 tuples with the labels of the endpoints of the path; and a dictionary ``point_coords`` giving the scaled coordinates for each high-symmetry endpoint."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"k-point mesh used in the NSCF calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"projections",required:!1,valid_types:"OrbitalData, Dict, List, NoneType",info:"Starting projections for the Wannierisation procedure."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional settings to manage the Wannier90 calculation."}],outputs:[{name:"boltzwann",required:!0,valid_types:"",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:"The ``output_parameters`` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"interpolated_bands",required:!1,valid_types:"BandsData",info:"The interpolated band structure by Wannier90 (if any)."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required stdout output file."},{status:300,message:"A Wannier90 error file (.werr) has been found."},{status:400,message:'The string "Exiting..." has been found in the Wannier90 output (some partial output might have been parsed).'},{status:401,message:"An error related to bvectors has been found in the Wannier90 output."},{status:402,message:"Energy window contains fewer states than number of target WFs."},{status:403,message:"Error plotting Wanier functions in cube format."},{status:404,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:405,message:"Some output files were missing probably because the calculation got interrupted."},{status:406,message:"The retrieved temporary folder could not be accessed."}]},class:"aiida_wannier90.calculations:Postw90Calculation"},"wannier90.wannier90":{description:["Plugin for Wannier90.","","    Wannier90 is a code for computing maximally-localized Wannier functions.","    See http://www.wannier.org/ for more details."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"k-point mesh used in the NSCF calculation."},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the Wannier90 code"},{name:"structure",required:!0,valid_types:"StructureData",info:"input crystal structure"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"A list of k-points along a path to be used for bands interpolation; it should contain `labels`. Specify either this or `kpoint_path`."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"kpoint_path",required:!1,valid_types:"Dict, NoneType",info:"Description of the k-points path to be used for bands interpolation; it should contain two properties: a list ``path`` of length-2 tuples with the labels of the endpoints of the path; and a dictionary ``point_coords`` giving the scaled coordinates for each high-symmetry endpoint."},{name:"local_input_folder",required:!1,valid_types:"FolderData, NoneType",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``FolderData`` stored in the AiiDA repository."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"projections",required:!1,valid_types:"OrbitalData, Dict, List, NoneType",info:"Starting projections for the Wannierisation procedure."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"remote_input_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possibly stored in a remote computer."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional settings to manage the Wannier90 calculation."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The ``output_parameters`` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"interpolated_bands",required:!1,valid_types:"BandsData",info:"The interpolated band structure by Wannier90 (if any)."},{name:"nnkp_file",required:!1,valid_types:"SinglefileData",info:"The ``.nnkp`` file, produced only in -pp (postproc) mode."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required stdout output file."},{status:300,message:"A Wannier90 error file (.werr) has been found."},{status:400,message:'The string "Exiting..." has been found in the Wannier90 output (some partial output might have been parsed).'},{status:401,message:"An error related to bvectors has been found in the Wannier90 output."},{status:402,message:"Energy window contains fewer states than number of target WFs."},{status:403,message:"Error plotting Wanier functions in cube format."},{status:404,message:"The stdout output file was incomplete probably because the calculation got interrupted."}]},class:"aiida_wannier90.calculations:Wannier90Calculation"}},"aiida.parsers":{"wannier90.postw90":"aiida_wannier90.parsers:Postw90Parser","wannier90.wannier90":"aiida_wannier90.parsers:Wannier90Parser"},"aiida.workflows":{"wannier90.minimal":{description:["Workchain to run a full stack of Quantum ESPRESSO + Wannier90 for GaAs.","","    Note that this is mostly to be used as an example, as there is no","    error checking and runs directly Quantum ESPRESSO calculations rather","    than the base workflows."],spec:{inputs:[{name:"kpoint_path",required:!0,valid_types:"Dict",info:"The kpoints path for the NSCF run and Wannierisation."},{name:"kpoints_nscf",required:!0,valid_types:"KpointsData",info:"The kpoints for the NSCF run and Wannierisation."},{name:"kpoints_scf",required:!0,valid_types:"KpointsData",info:"The kpoints for the SCF run."},{name:"projections",required:!0,valid_types:"OrbitalData",info:"The projections for the Wannierisation."},{name:"pseudo_family",required:!0,valid_types:"Str",info:"The name of a pseudopotential family to use."},{name:"pw2wannier90_code",required:!0,valid_types:"Code",info:"The `pw2wannier90.x` code to use for the `Pw2Wannier90Calculation`s."},{name:"pw_code",required:!0,valid_types:"Code",info:"The `pw.x` code to use for the `PwCalculation`s."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"wannier_code",required:!0,valid_types:"Code",info:"The `wannier90.x` code to use for the `Wannier90Calculation`s."},{name:"max_wallclock_seconds",required:!1,valid_types:"Int, NoneType",info:"Maximum wallclock time in seconds"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"num_machines",required:!1,valid_types:"Int, NoneType",info:"The number of machines (nodes) to use"}],outputs:[{name:"matrices_folder",required:!0,valid_types:"FolderData",info:""},{name:"nnkp_file",required:!0,valid_types:"SinglefileData",info:""},{name:"nscf_output",required:!0,valid_types:"Dict",info:""},{name:"p2wannier_output",required:!0,valid_types:"Dict",info:""},{name:"pw2wan_remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"scf_output",required:!0,valid_types:"Dict",info:""},{name:"wannier_bands",required:!0,valid_types:"BandsData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_wannier90.workflows.minimal:MinimalW90WorkChain"}}},commits_count:20,development_status:"stable",summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-wannier90",is_installable:"True"},"aiida-wannier90-workflows":{code_home:"https://github.com/aiidateam/aiida-wannier90-workflows",development_status:"stable",entry_point_prefix:"wannier90_workflows",pip_url:"aiida-wannier90-workflows",plugin_info:"https://raw.github.com/aiidateam/aiida-wannier90-workflows/master/setup.json",name:"aiida-wannier90-workflows",package_name:"aiida_wannier90_workflows",hosted_on:"github.com",metadata:{description:"Advanced AiiDA workflows for Wannier90",author:"Junfeng Qiao, Antimo Marrazzo, Giovanni Pizzi",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.1.0"},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{"wannier90_workflows.split":"aiida_wannier90_workflows.calculations.split:Wannier90SplitCalculation"},"aiida.parsers":{"wannier90_workflows.split":"aiida_wannier90_workflows.parsers.split:Wannier90SplitParser"},"aiida.workflows":{"wannier90_workflows.bands":"aiida_wannier90_workflows.workflows.bands:Wannier90BandsWorkChain","wannier90_workflows.base.open_grid":"aiida_wannier90_workflows.workflows.base.open_grid:OpenGridBaseWorkChain","wannier90_workflows.base.projwfc":"aiida_wannier90_workflows.workflows.base.projwfc:ProjwfcBaseWorkChain","wannier90_workflows.base.pw2wannier90":"aiida_wannier90_workflows.workflows.base.pw2wannier90:Pw2wannier90BaseWorkChain","wannier90_workflows.base.wannier90":"aiida_wannier90_workflows.workflows.base.wannier90:Wannier90BaseWorkChain","wannier90_workflows.open_grid":"aiida_wannier90_workflows.workflows.open_grid:Wannier90OpenGridWorkChain","wannier90_workflows.optimize":"aiida_wannier90_workflows.workflows.optimize:Wannier90OptimizeWorkChain","wannier90_workflows.projwfcbands":"aiida_wannier90_workflows.workflows.projwfcbands:ProjwfcBandsWorkChain","wannier90_workflows.split":"aiida_wannier90_workflows.workflows.split:Wannier90SplitWorkChain","wannier90_workflows.wannier90":"aiida_wannier90_workflows.workflows.wannier90:Wannier90WorkChain"},console_scripts:{"aiida-wannier90-workflows":"aiida_wannier90_workflows.cli:cmd_root"}},commits_count:42,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:10},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-wannier90-workflows",is_installable:"True"},"aiida-wien2k":{code_home:"https://github.com/rubel75/aiida-wien2k",entry_point_prefix:"wien2k",name:"aiida-wien2k",package_name:"aiida_wien2k",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:3,development_status:"planning",summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-yambo":{code_home:"https://github.com/yambo-code/yambo-aiida/",development_status:"stable",entry_point_prefix:"yambo",pip_url:"aiida-yambo",plugin_info:"https://raw.github.com/yambo-code/yambo-aiida/master/setup.json",name:"aiida-yambo",package_name:"aiida_yambo",hosted_on:"github.com",metadata:{description:"YAMBO plugin and workflows for AiiDA",author:"Miki Bonacci, Michael Atambo, Antimo Marrazzo, Prandini Gianluca",author_email:"miki.bonacci@unimore.it",license:"MIT",home_page:"https://github.com/yambo-code/yambo-aiida",classifiers:["Environment :: Plugins","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Topic :: Scientific/Engineering :: Physics"],version:"1.3.0"},aiida_version:">=1.0.0a2",entry_points:{"aiida.calculations":{"yambo.yambo":{description:["AiiDA plugin for the Yambo code.","    For more information, refer to http://www.yambo-code.org/","    https://github.com/yambo-code/yambo-aiida and http://aiida-yambo.readthedocs.io/en/latest/"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Use a main code for yambo calculation"},{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:'Use a remote folder as parent folder (for "restarts and similar"'},{name:"settings",required:!0,valid_types:"Dict",info:"Use an additional node for special settings"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"precode_parameters",required:!1,valid_types:"Dict",info:"Use a node that specifies the input parameters for the yambo precode"},{name:"preprocessing_code",required:!1,valid_types:"Code",info:"Use a preprocessing code for starting yambo"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"returns the output parameters"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"array_alpha",required:!1,valid_types:"ArrayData",info:"returns the alpha array"},{name:"array_alpha_array",required:!1,valid_types:"ArrayData",info:"returns the alpha array"},{name:"array_alpha_bands",required:!1,valid_types:"ArrayData",info:"returns the alpha array bands"},{name:"array_eels",required:!1,valid_types:"ArrayData",info:"returns the eels array"},{name:"array_eps",required:!1,valid_types:"ArrayData",info:"returns the eps array"},{name:"array_ndb",required:!1,valid_types:"ArrayData",info:"returns the array for ndb"},{name:"array_ndb_HFlocXC",required:!1,valid_types:"ArrayData",info:"returns the array ndb for HFlocXC"},{name:"array_ndb_QP",required:!1,valid_types:"ArrayData",info:"returns the array for ndbQP"},{name:"array_qp",required:!1,valid_types:"ArrayData",info:"returns the quasiparticle array band structure"},{name:"bands_quasiparticle",required:!1,valid_types:"BandsData",info:"returns the quasiparticle band structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"system_info",required:!1,valid_types:"Dict",info:"returns some system information after a p2y"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:500,message:"The retrieved folder data node could not be accessed."},{status:501,message:"time exceeded the max walltime"},{status:502,message:"failed calculation for some reason: could be a low number of conduction bands"},{status:503,message:"Unexpected behavior of YamboFolder"},{status:504,message:"parallelization error"},{status:505,message:"general memory error"},{status:506,message:"x_par allocation memory error"}]},class:"aiida_yambo.calculations.yambo:YamboCalculation"}},"aiida.data":{},"aiida.parsers":{"yambo.yambo":"aiida_yambo.parsers.parsers:YamboParser"}},commits_count:59,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-yambo",is_installable:"True"},"aiida-yambo-wannier90":{code_home:"https://github.com/aiidaplugins/aiida-yambo-wannier90",entry_point_prefix:"yambo_wannier90",pip_url:"aiida-yambo-wannier90",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/pyproject.toml",documentation_url:"https://aiida-yambo-wannier90.readthedocs.io/en/latest/",version_file:"https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/aiida_yambo_wannier90/__init__.py",name:"aiida-yambo-wannier90",package_name:"aiida_yambo_wannier90",hosted_on:"github.com",metadata:{description:"Plugin to combine Wannier90 interpolations with GW corrections computed by Yambo",author:"The AiiDA Team",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0b0"},aiida_version:">=1.6.4,<3",entry_points:{"aiida.calculations":{"yambo_wannier90.gw2wannier90":"aiida_yambo_wannier90.calculations.gw2wannier90:Gw2wannier90Calculation"},"aiida.parsers":{"yambo_wannier90.gw2wannier90":"aiida_yambo_wannier90.parsers.gw2wannier90:Gw2wannier90Parser"},"aiida.workflows":{yambo_wannier90:"aiida_yambo_wannier90.workflows:YamboWannier90WorkChain"},console_scripts:{"aiida-yambo-wannier90":"aiida_yambo_wannier90.cli:cmd_root"}},commits_count:0,development_status:"beta",summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install --pre aiida-yambo-wannier90",is_installable:"True"},"aiida-yascheduler":{code_home:"https://github.com/tilde-lab/yascheduler",documentation_url:"https://github.com/tilde-lab/yascheduler",entry_point_prefix:"yascheduler",pip_url:"yascheduler",plugin_info:"https://raw.githubusercontent.com/tilde-lab/yascheduler/master/setup.json",name:"aiida-yascheduler",package_name:"aiida_yascheduler",hosted_on:"github.com",metadata:{description:"Yet another computing scheduler and cloud orchestration engine",author:"Andrey Sobolev",author_email:"Evgeny Blokhin <eb@tilde.pro>, Sergei Korolev <knopki@duck.com>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Information Analysis","Topic :: Scientific/Engineering :: Physics","Topic :: Software Development :: Libraries :: Python Modules"],version:"1.2.0"},aiida_version:null,entry_points:{"aiida.schedulers":{yascheduler:"yascheduler.aiida_plugin:YaScheduler"},console_scripts:{yainit:"yascheduler.utils:init",yanodes:"yascheduler.utils:show_nodes",yascheduler:"yascheduler.utils:daemonize",yasetnode:"yascheduler.utils:manage_node",yastatus:"yascheduler.utils:check_status",yasubmit:"yascheduler.utils:submit"}},commits_count:76,development_status:"beta",summaryinfo:[{colorclass:"purple",text:"Console scripts",count:6},{colorclass:"orange",text:"Other (Schedulers)",count:1}],pip_install_cmd:"pip install yascheduler",is_installable:"True"},"aiida-z2pack":{code_home:"https://github.com/AntimoMarrazzo/aiida-z2pack",entry_point_prefix:"z2pack",pip_url:"git+https://github.com/AntimoMarrazzo/aiida-z2pack",name:"aiida-z2pack",package_name:"aiida_z2pack",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:18,development_status:"planning",summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/AntimoMarrazzo/aiida-z2pack"},"aiida-zeopp":{code_home:"https://github.com/ltalirz/aiida-zeopp",development_status:"stable",entry_point_prefix:"zeopp",pip_url:"aiida-zeopp",name:"aiida-zeopp",package_name:"aiida_zeopp",hosted_on:"github.com",metadata:{description:"AiiDA plugin for zeo++",author:"Leopold Talirz",author_email:"leopold.talirz@epfl.ch",license:"Creative Commons",home_page:"https://github.com/ltalirz/aiida-zeopp",classifiers:["Framework :: AiiDA","Programming Language :: Python"],version:"1.1.2"},aiida_version:null,entry_points:{"aiida.calculations":{"zeopp.network":{description:["AiiDA calculation plugin for the zeo++ network binary"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"The `Code` to use for this job."},{name:"parameters",required:!0,valid_types:"NetworkParameters",info:"command line parameters for zeo++"},{name:"structure",required:!0,valid_types:"CifData",info:"input structure to be analyzed"},{name:"atomic_radii",required:!1,valid_types:"SinglefileData",info:"atomic radii file"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"key-value pairs parsed from zeo++ output file(s)."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"block",required:!1,valid_types:"SinglefileData",info:"Blocked pockets fileoutput file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation completed successfully."},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"Not all expected output files were found."},{status:102,message:"Empty block file. This indicates the calculation of blocked pockets did not finish."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."}]},class:"aiida_zeopp.calculations.network:NetworkCalculation"}},"aiida.parsers":{"zeopp.network":"aiida_zeopp.parsers.network:NetworkParser"},"aiida.data":{"zeopp.parameters":"aiida_zeopp.data.parameters:NetworkParameters"},console_scripts:{"zeopp-submit":"aiida_zeopp.console_scripts.data_cli:cli"},"aiida.workflows":{}},commits_count:0,summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-zeopp",is_installable:"True"}},nw=[{name:"Calculations",colorclass:"blue",num_entries:54,total_num:132},{name:"Parsers",colorclass:"brown",num_entries:55,total_num:110},{name:"Data",colorclass:"red",num_entries:29,total_num:101},{name:"Workflows",colorclass:"green",num_entries:39,total_num:130},{name:"Console scripts",colorclass:"purple",num_entries:16,total_num:27},{name:"Other",tooltip:"Aenet potentials, Calculations importers, Calculations monitors, ...",colorclass:"orange",num_entries:26,total_num:99}],ow={planning:["Not yet ready to use. Developers welcome!","status-planning-d9644d.svg"],"pre-alpha":["Not yet ready to use. Developers welcome!","status-planning-d9644d.svg"],alpha:["Adds new functionality, not yet ready for production. Testing welcome!","status-alpha-d6af23.svg"],beta:["Adds new functionality, not yet ready for production. Testing welcome!","status-beta-d6af23.svg"],stable:["Ready for production calculations. Bug reports welcome!","status-stable-4cc61e.svg"],mature:["Ready for production calculations. Bug reports welcome!","status-stable-4cc61e.svg"],inactive:["No longer maintained.","status-inactive-bbbbbb.svg"]},lw={"aiida.calculations":"CalcJobs and calculation functions","aiida.parsers":"CalcJob parsers","aiida.data":"Data node types","aiida.cmdline.data":"verdi data commands","aiida.groups":"Group types","aiida.workflows":"WorkChains and work functions","aiida.schedulers":"Job scheduler support","aiida.transports":"Data transport protocols","aiida.tests":"Development test modules","aiida.tools.dbexporters":"Support for exporting to external databases","aiida.tools.dbimporters":"Support for importing from external databases",console_scripts:"Console scripts"},_i={plugins:rw,globalsummary:nw,status_dict:ow,entrypointtypes:lw},gg="data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAACMAAAAhCAYAAABTERJSAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAFhgAABYYBG6Yz4AAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAUbSURBVFiFzZhrbFRVEMd%2Fc%2B5uu6UUbIFC%2FUAUVEQCLbQJBIiBDyiImJiIhmohYNCkqJAQxASLF8tDgYRHBLXRhIcKNtFEhVDgAxBJqgmVh4JEKg3EIn2QYqBlt917xg%2BFss%2ByaDHOtzsz5z%2B%2FuZl7ztmF%2F5HJvxVQN6cPYX8%2FPLnOmsvNAvqfwuib%2FbNIk9cQeQnLcKRL5xLIV%2Fic9eJeunjPYbRs4FjQSpTB3aS1IpRKeeOOewajy%2FKKEO8Q0DuVdKy8IqsbPulxGHUfCBBu%2BwUYGuFuBTK7wQnht6PEbf4tlRomVRjCbXNjQEB0AyrFQOL5ENIJm7dTLZE6DPJCnEtFZVXDLny%2B4Sjv0PmmYu1ZdUek9RiMgoDmJ8V0L7XJqsZ3UW8YsBOwEeHeeFce7jEYXBy0m9m4BbXqSj2%2Bxnkg26MCVrN6DEZcwggtd8pTFx%2Fh3B9B50YLaFOPwXQKUt0tBLegtSomfBlfY13PwijbEnhztGzgJsK5h9W9qeWwBqjvyhB2iBs1Qz0AU974DciRGO8CVN8AJhAeMAdA3KbrKEtvxhsI%2B9emWiJlGBEU680Cfk%2BSsVqXZvcFYGXjF8ABVJ%2BTNfVXehyms1zzn1gmIOxLEB6E31%2FWBe5rnCarmo7elf7dJEeaLh80GasliI5F6Q9cAz1GY1OJVNDxTzQTw7iY%2FHEZRQY7xqJ9RU2LFe%2FYqakdP911ha0XhjjiTVAkDwgatWfCGeYocx8M3glG8g8EXhSrLrHnEFJ5Ymow%2FkhIYv6ttYUW1iFmEqqxdVoUs9FmsDYSqmtmJh3Cl1%2BVtl2s7owDUdocR5bceiyoSivGTT5vzpbzL1uoBpmcAAQgW7ArnKD9ng9rc%2BNgrobSNwpSkkhcRN%2BvmXLjIsDovYHHEfmsYFygPAnIDEQrQPzJYCOaLHLUfIt7Oq0LJn9fxkSgNCb1qEIQ5UKgT%2Fs6gJmVOOroJhQBXVqw118QtWLdyUxEP45sUpSzqP7RDdFYMyB9UReMiF1MzPwoUqHt8hjGFFeP5wZAbZ%2F0%2BcAtAAcji6LeSq%2FMYiAvSsdw3GtrfVSVFUBbIhwRWYR7yOcr%2FBi%2FB1MSJZ16JlgH1AGM3EO2QnmMyrSbTSiACgFBv4yCUapZkt9qwWVL7aeOyHvArJjm8%2Fz9BhdI4XcZgz2%2FvRALosjsk1ODOyMcJn9%2FYI6IrkS5vxMGdUwou2YKfyVqJpn5t9aNs3gbQMbdbkxnGdsr4bTHm2AxWo9yNZK4PXR3uzhAh%2BM0AZejnCrGdy0UvJxl0oMKgWSLR%2B1LH2aE9ViejiFs%2BXn6bTjng3MlIhJ1I1TkuLdg6OcAbD7Xx%2Bc3y9TrWAiSHqVkbZ2v9ilCo6s4AjwZCzFyD9mOL305nV9aonvsQeT2L0gVk4OwOJqXXVRW7naaxswDKVdlYLyMXAnntteYmws2xcVVZzq%2BtHPAooQggmJkc6TLSusOiL4RKgwzzYU1iFQgiUBA1H7E8yPau%2BZl9P7AblVNebtHqTgxLfRqrNvZWjsHZFuqMqKcDWdlFjF7UGvX8Jn24DyEAykJwNcdg0OvJ4p5pQ9tV6SMlP4A0PNh8aYze1ArROyUNTNouy8tNF3Rt0CSXb6bRFl4%2FIfQzNMjaE9WwpYOWQnOdEF%2BTdJNO0iFh7%2BI0kfORzQZb6P2kymS9oTxzBiM9rUqLWr1WE5G6ODhycQd%2FUnNVeMbcH68hYkGycNoUNWc8fxaxfwhDbHpfwM5oeTY7rUX8QAAAABJRU5ErkJggg%3D%3D";function D(){return D=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},D.apply(this,arguments)}function ei(e){return e!==null&&typeof e=="object"&&e.constructor===Object}function yg(e){if(!ei(e))return e;const t={};return Object.keys(e).forEach(a=>{t[a]=yg(e[a])}),t}function At(e,t,a={clone:!0}){const i=a.clone?D({},e):e;return ei(e)&&ei(t)&&Object.keys(t).forEach(s=>{s!=="__proto__"&&(ei(t[s])&&s in e&&ei(e[s])?i[s]=At(e[s],t[s],a):a.clone?i[s]=ei(t[s])?yg(t[s]):t[s]:i[s]=t[s])}),i}function $a(e){let t="https://mui.com/production-error/?code="+e;for(let a=1;a<arguments.length;a+=1)t+="&args[]="+encodeURIComponent(arguments[a]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}var ue={};/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Gd=Symbol.for("react.element"),Xd=Symbol.for("react.portal"),po=Symbol.for("react.fragment"),fo=Symbol.for("react.strict_mode"),mo=Symbol.for("react.profiler"),ho=Symbol.for("react.provider"),go=Symbol.for("react.context"),uw=Symbol.for("react.server_context"),yo=Symbol.for("react.forward_ref"),_o=Symbol.for("react.suspense"),vo=Symbol.for("react.suspense_list"),bo=Symbol.for("react.memo"),wo=Symbol.for("react.lazy"),dw=Symbol.for("react.offscreen"),_g;_g=Symbol.for("react.module.reference");function jt(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case Gd:switch(e=e.type,e){case po:case mo:case fo:case _o:case vo:return e;default:switch(e=e&&e.$$typeof,e){case uw:case go:case yo:case wo:case bo:case ho:return e;default:return t}}case Xd:return t}}}ue.ContextConsumer=go;ue.ContextProvider=ho;ue.Element=Gd;ue.ForwardRef=yo;ue.Fragment=po;ue.Lazy=wo;ue.Memo=bo;ue.Portal=Xd;ue.Profiler=mo;ue.StrictMode=fo;ue.Suspense=_o;ue.SuspenseList=vo;ue.isAsyncMode=function(){return!1};ue.isConcurrentMode=function(){return!1};ue.isContextConsumer=function(e){return jt(e)===go};ue.isContextProvider=function(e){return jt(e)===ho};ue.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===Gd};ue.isForwardRef=function(e){return jt(e)===yo};ue.isFragment=function(e){return jt(e)===po};ue.isLazy=function(e){return jt(e)===wo};ue.isMemo=function(e){return jt(e)===bo};ue.isPortal=function(e){return jt(e)===Xd};ue.isProfiler=function(e){return jt(e)===mo};ue.isStrictMode=function(e){return jt(e)===fo};ue.isSuspense=function(e){return jt(e)===_o};ue.isSuspenseList=function(e){return jt(e)===vo};ue.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===po||e===mo||e===fo||e===_o||e===vo||e===dw||typeof e=="object"&&e!==null&&(e.$$typeof===wo||e.$$typeof===bo||e.$$typeof===ho||e.$$typeof===go||e.$$typeof===yo||e.$$typeof===_g||e.getModuleId!==void 0)};ue.typeOf=jt;function qe(e){if(typeof e!="string")throw new Error($a(7));return e.charAt(0).toUpperCase()+e.slice(1)}function Nu(...e){return e.reduce((t,a)=>a==null?t:function(...s){t.apply(this,s),a.apply(this,s)},()=>{})}function To(e,t=166){let a;function i(...s){const r=()=>{e.apply(this,s)};clearTimeout(a),a=setTimeout(r,t)}return i.clear=()=>{clearTimeout(a)},i}function cw(e,t){return()=>null}function on(e,t){return b.isValidElement(e)&&t.indexOf(e.type.muiName)!==-1}function mt(e){return e&&e.ownerDocument||document}function ea(e){return mt(e).defaultView||window}function pw(e,t){return()=>null}function zn(e,t){typeof e=="function"?e(t):e&&(e.current=t)}const fw=typeof window<"u"?b.useLayoutEffect:b.useEffect,Wa=fw;let Bp=0;function mw(e){const[t,a]=b.useState(e),i=e||t;return b.useEffect(()=>{t==null&&(Bp+=1,a(`mui-${Bp}`))},[t]),i}const zp=fn["useId".toString()];function hw(e){if(zp!==void 0){const t=zp();return e??t}return mw(e)}function gw(e,t,a,i,s){return null}function Lu({controlled:e,default:t,name:a,state:i="value"}){const{current:s}=b.useRef(e!==void 0),[r,n]=b.useState(t),o=s?e:r,l=b.useCallback(u=>{s||n(u)},[]);return[o,l]}function ri(e){const t=b.useRef(e);return Wa(()=>{t.current=e}),b.useCallback((...a)=>(0,t.current)(...a),[])}function Qe(...e){return b.useMemo(()=>e.every(t=>t==null)?null:t=>{e.forEach(a=>{zn(a,t)})},e)}let qo=!0,Ou=!1,$p;const yw={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function _w(e){const{type:t,tagName:a}=e;return!!(a==="INPUT"&&yw[t]&&!e.readOnly||a==="TEXTAREA"&&!e.readOnly||e.isContentEditable)}function vw(e){e.metaKey||e.altKey||e.ctrlKey||(qo=!0)}function kl(){qo=!1}function bw(){this.visibilityState==="hidden"&&Ou&&(qo=!0)}function ww(e){e.addEventListener("keydown",vw,!0),e.addEventListener("mousedown",kl,!0),e.addEventListener("pointerdown",kl,!0),e.addEventListener("touchstart",kl,!0),e.addEventListener("visibilitychange",bw,!0)}function Tw(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch{}return qo||_w(t)}function vg(){const e=b.useCallback(s=>{s!=null&&ww(s.ownerDocument)},[]),t=b.useRef(!1);function a(){return t.current?(Ou=!0,window.clearTimeout($p),$p=window.setTimeout(()=>{Ou=!1},100),t.current=!1,!0):!1}function i(s){return Tw(s)?(t.current=!0,!0):!1}return{isFocusVisibleRef:t,onFocus:i,onBlur:a,ref:e}}function bg(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}function wg(e,t){const a=D({},t);return Object.keys(e).forEach(i=>{if(i.toString().match(/^(components|slots)$/))a[i]=D({},e[i],a[i]);else if(i.toString().match(/^(componentsProps|slotProps)$/)){const s=e[i]||{},r=t[i];a[i]={},!r||!Object.keys(r)?a[i]=s:!s||!Object.keys(s)?a[i]=r:(a[i]=D({},r),Object.keys(s).forEach(n=>{a[i][n]=wg(s[n],r[n])}))}else a[i]===void 0&&(a[i]=e[i])}),a}function Ne(e,t,a=void 0){const i={};return Object.keys(e).forEach(s=>{i[s]=e[s].reduce((r,n)=>{if(n){const o=t(n);o!==""&&r.push(o),a&&a[n]&&r.push(a[n])}return r},[]).join(" ")}),i}const Wp=e=>e,qw=()=>{let e=Wp;return{configure(t){e=t},generate(t){return e(t)},reset(){e=Wp}}},xw=qw(),Qd=xw,Dw={active:"active",checked:"checked",completed:"completed",disabled:"disabled",readOnly:"readOnly",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function Ae(e,t,a="Mui"){const i=Dw[t];return i?`${a}-${i}`:`${Qd.generate(e)}-${t}`}function De(e,t,a="Mui"){const i={};return t.forEach(s=>{i[s]=Ae(e,s,a)}),i}function Tg(e){var t=Object.create(null);return function(a){return t[a]===void 0&&(t[a]=e(a)),t[a]}}var kw=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Cw=Tg(function(e){return kw.test(e)||e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)<91});function Sw(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}function Pw(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),e.nonce!==void 0&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}var Aw=function(){function e(a){var i=this;this._insertTag=function(s){var r;i.tags.length===0?i.insertionPoint?r=i.insertionPoint.nextSibling:i.prepend?r=i.container.firstChild:r=i.before:r=i.tags[i.tags.length-1].nextSibling,i.container.insertBefore(s,r),i.tags.push(s)},this.isSpeedy=a.speedy===void 0?!0:a.speedy,this.tags=[],this.ctr=0,this.nonce=a.nonce,this.key=a.key,this.container=a.container,this.prepend=a.prepend,this.insertionPoint=a.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(i){i.forEach(this._insertTag)},t.insert=function(i){this.ctr%(this.isSpeedy?65e3:1)===0&&this._insertTag(Pw(this));var s=this.tags[this.tags.length-1];if(this.isSpeedy){var r=Sw(s);try{r.insertRule(i,r.cssRules.length)}catch{}}else s.appendChild(document.createTextNode(i));this.ctr++},t.flush=function(){this.tags.forEach(function(i){return i.parentNode&&i.parentNode.removeChild(i)}),this.tags=[],this.ctr=0},e}(),et="-ms-",$n="-moz-",ee="-webkit-",qg="comm",Jd="rule",Yd="decl",Iw="@import",xg="@keyframes",Rw="@layer",jw=Math.abs,xo=String.fromCharCode,Ew=Object.assign;function Fw(e,t){return Ke(e,0)^45?(((t<<2^Ke(e,0))<<2^Ke(e,1))<<2^Ke(e,2))<<2^Ke(e,3):0}function Dg(e){return e.trim()}function Nw(e,t){return(e=t.exec(e))?e[0]:e}function te(e,t,a){return e.replace(t,a)}function Mu(e,t){return e.indexOf(t)}function Ke(e,t){return e.charCodeAt(t)|0}function ur(e,t,a){return e.slice(t,a)}function Kt(e){return e.length}function Zd(e){return e.length}function Hr(e,t){return t.push(e),e}function Lw(e,t){return e.map(t).join("")}var Do=1,ts=1,kg=0,ht=0,je=0,ds="";function ko(e,t,a,i,s,r,n){return{value:e,root:t,parent:a,type:i,props:s,children:r,line:Do,column:ts,length:n,return:""}}function vs(e,t){return Ew(ko("",null,null,"",null,null,0),e,{length:-e.length},t)}function Ow(){return je}function Mw(){return je=ht>0?Ke(ds,--ht):0,ts--,je===10&&(ts=1,Do--),je}function bt(){return je=ht<kg?Ke(ds,ht++):0,ts++,je===10&&(ts=1,Do++),je}function Zt(){return Ke(ds,ht)}function ln(){return ht}function br(e,t){return ur(ds,e,t)}function dr(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function Cg(e){return Do=ts=1,kg=Kt(ds=e),ht=0,[]}function Sg(e){return ds="",e}function un(e){return Dg(br(ht-1,Bu(e===91?e+2:e===40?e+1:e)))}function Bw(e){for(;(je=Zt())&&je<33;)bt();return dr(e)>2||dr(je)>3?"":" "}function zw(e,t){for(;--t&&bt()&&!(je<48||je>102||je>57&&je<65||je>70&&je<97););return br(e,ln()+(t<6&&Zt()==32&&bt()==32))}function Bu(e){for(;bt();)switch(je){case e:return ht;case 34:case 39:e!==34&&e!==39&&Bu(je);break;case 40:e===41&&Bu(e);break;case 92:bt();break}return ht}function $w(e,t){for(;bt()&&e+je!==47+10;)if(e+je===42+42&&Zt()===47)break;return"/*"+br(t,ht-1)+"*"+xo(e===47?e:bt())}function Ww(e){for(;!dr(Zt());)bt();return br(e,ht)}function Uw(e){return Sg(dn("",null,null,null,[""],e=Cg(e),0,[0],e))}function dn(e,t,a,i,s,r,n,o,l){for(var u=0,f=0,y=n,_=0,d=0,h=0,c=1,x=1,m=1,p=0,g="",w=s,q=r,k=i,T=g;x;)switch(h=p,p=bt()){case 40:if(h!=108&&Ke(T,y-1)==58){Mu(T+=te(un(p),"&","&\f"),"&\f")!=-1&&(m=-1);break}case 34:case 39:case 91:T+=un(p);break;case 9:case 10:case 13:case 32:T+=Bw(h);break;case 92:T+=zw(ln()-1,7);continue;case 47:switch(Zt()){case 42:case 47:Hr(Hw($w(bt(),ln()),t,a),l);break;default:T+="/"}break;case 123*c:o[u++]=Kt(T)*m;case 125*c:case 59:case 0:switch(p){case 0:case 125:x=0;case 59+f:m==-1&&(T=te(T,/\f/g,"")),d>0&&Kt(T)-y&&Hr(d>32?Hp(T+";",i,a,y-1):Hp(te(T," ","")+";",i,a,y-2),l);break;case 59:T+=";";default:if(Hr(k=Up(T,t,a,u,f,s,o,g,w=[],q=[],y),r),p===123)if(f===0)dn(T,t,k,k,w,r,y,o,q);else switch(_===99&&Ke(T,3)===110?100:_){case 100:case 108:case 109:case 115:dn(e,k,k,i&&Hr(Up(e,k,k,0,0,s,o,g,s,w=[],y),q),s,q,y,o,i?w:q);break;default:dn(T,k,k,k,[""],q,0,o,q)}}u=f=d=0,c=m=1,g=T="",y=n;break;case 58:y=1+Kt(T),d=h;default:if(c<1){if(p==123)--c;else if(p==125&&c++==0&&Mw()==125)continue}switch(T+=xo(p),p*c){case 38:m=f>0?1:(T+="\f",-1);break;case 44:o[u++]=(Kt(T)-1)*m,m=1;break;case 64:Zt()===45&&(T+=un(bt())),_=Zt(),f=y=Kt(g=T+=Ww(ln())),p++;break;case 45:h===45&&Kt(T)==2&&(c=0)}}return r}function Up(e,t,a,i,s,r,n,o,l,u,f){for(var y=s-1,_=s===0?r:[""],d=Zd(_),h=0,c=0,x=0;h<i;++h)for(var m=0,p=ur(e,y+1,y=jw(c=n[h])),g=e;m<d;++m)(g=Dg(c>0?_[m]+" "+p:te(p,/&\f/g,_[m])))&&(l[x++]=g);return ko(e,t,a,s===0?Jd:o,l,u,f)}function Hw(e,t,a){return ko(e,t,a,qg,xo(Ow()),ur(e,2,-2),0)}function Hp(e,t,a,i){return ko(e,t,a,Yd,ur(e,0,i),ur(e,i+1,-1),i)}function Vi(e,t){for(var a="",i=Zd(e),s=0;s<i;s++)a+=t(e[s],s,e,t)||"";return a}function Vw(e,t,a,i){switch(e.type){case Rw:if(e.children.length)break;case Iw:case Yd:return e.return=e.return||e.value;case qg:return"";case xg:return e.return=e.value+"{"+Vi(e.children,i)+"}";case Jd:e.value=e.props.join(",")}return Kt(a=Vi(e.children,i))?e.return=e.value+"{"+a+"}":""}function Kw(e){var t=Zd(e);return function(a,i,s,r){for(var n="",o=0;o<t;o++)n+=e[o](a,i,s,r)||"";return n}}function Gw(e){return function(t){t.root||(t=t.return)&&e(t)}}var Xw=function(t,a,i){for(var s=0,r=0;s=r,r=Zt(),s===38&&r===12&&(a[i]=1),!dr(r);)bt();return br(t,ht)},Qw=function(t,a){var i=-1,s=44;do switch(dr(s)){case 0:s===38&&Zt()===12&&(a[i]=1),t[i]+=Xw(ht-1,a,i);break;case 2:t[i]+=un(s);break;case 4:if(s===44){t[++i]=Zt()===58?"&\f":"",a[i]=t[i].length;break}default:t[i]+=xo(s)}while(s=bt());return t},Jw=function(t,a){return Sg(Qw(Cg(t),a))},Vp=new WeakMap,Yw=function(t){if(!(t.type!=="rule"||!t.parent||t.length<1)){for(var a=t.value,i=t.parent,s=t.column===i.column&&t.line===i.line;i.type!=="rule";)if(i=i.parent,!i)return;if(!(t.props.length===1&&a.charCodeAt(0)!==58&&!Vp.get(i))&&!s){Vp.set(t,!0);for(var r=[],n=Jw(a,r),o=i.props,l=0,u=0;l<n.length;l++)for(var f=0;f<o.length;f++,u++)t.props[u]=r[l]?n[l].replace(/&\f/g,o[f]):o[f]+" "+n[l]}}},Zw=function(t){if(t.type==="decl"){var a=t.value;a.charCodeAt(0)===108&&a.charCodeAt(2)===98&&(t.return="",t.value="")}};function Pg(e,t){switch(Fw(e,t)){case 5103:return ee+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return ee+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return ee+e+$n+e+et+e+e;case 6828:case 4268:return ee+e+et+e+e;case 6165:return ee+e+et+"flex-"+e+e;case 5187:return ee+e+te(e,/(\w+).+(:[^]+)/,ee+"box-$1$2"+et+"flex-$1$2")+e;case 5443:return ee+e+et+"flex-item-"+te(e,/flex-|-self/,"")+e;case 4675:return ee+e+et+"flex-line-pack"+te(e,/align-content|flex-|-self/,"")+e;case 5548:return ee+e+et+te(e,"shrink","negative")+e;case 5292:return ee+e+et+te(e,"basis","preferred-size")+e;case 6060:return ee+"box-"+te(e,"-grow","")+ee+e+et+te(e,"grow","positive")+e;case 4554:return ee+te(e,/([^-])(transform)/g,"$1"+ee+"$2")+e;case 6187:return te(te(te(e,/(zoom-|grab)/,ee+"$1"),/(image-set)/,ee+"$1"),e,"")+e;case 5495:case 3959:return te(e,/(image-set\([^]*)/,ee+"$1$`$1");case 4968:return te(te(e,/(.+:)(flex-)?(.*)/,ee+"box-pack:$3"+et+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+ee+e+e;case 4095:case 3583:case 4068:case 2532:return te(e,/(.+)-inline(.+)/,ee+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(Kt(e)-1-t>6)switch(Ke(e,t+1)){case 109:if(Ke(e,t+4)!==45)break;case 102:return te(e,/(.+:)(.+)-([^]+)/,"$1"+ee+"$2-$3$1"+$n+(Ke(e,t+3)==108?"$3":"$2-$3"))+e;case 115:return~Mu(e,"stretch")?Pg(te(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(Ke(e,t+1)!==115)break;case 6444:switch(Ke(e,Kt(e)-3-(~Mu(e,"!important")&&10))){case 107:return te(e,":",":"+ee)+e;case 101:return te(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+ee+(Ke(e,14)===45?"inline-":"")+"box$3$1"+ee+"$2$3$1"+et+"$2box$3")+e}break;case 5936:switch(Ke(e,t+11)){case 114:return ee+e+et+te(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return ee+e+et+te(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return ee+e+et+te(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return ee+e+et+e+e}return e}var e0=function(t,a,i,s){if(t.length>-1&&!t.return)switch(t.type){case Yd:t.return=Pg(t.value,t.length);break;case xg:return Vi([vs(t,{value:te(t.value,"@","@"+ee)})],s);case Jd:if(t.length)return Lw(t.props,function(r){switch(Nw(r,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return Vi([vs(t,{props:[te(r,/:(read-\w+)/,":"+$n+"$1")]})],s);case"::placeholder":return Vi([vs(t,{props:[te(r,/:(plac\w+)/,":"+ee+"input-$1")]}),vs(t,{props:[te(r,/:(plac\w+)/,":"+$n+"$1")]}),vs(t,{props:[te(r,/:(plac\w+)/,et+"input-$1")]})],s)}return""})}},t0=[e0],a0=function(t){var a=t.key;if(a==="css"){var i=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(i,function(c){var x=c.getAttribute("data-emotion");x.indexOf(" ")!==-1&&(document.head.appendChild(c),c.setAttribute("data-s",""))})}var s=t.stylisPlugins||t0,r={},n,o=[];n=t.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+a+' "]'),function(c){for(var x=c.getAttribute("data-emotion").split(" "),m=1;m<x.length;m++)r[x[m]]=!0;o.push(c)});var l,u=[Yw,Zw];{var f,y=[Vw,Gw(function(c){f.insert(c)})],_=Kw(u.concat(s,y)),d=function(x){return Vi(Uw(x),_)};l=function(x,m,p,g){f=p,d(x?x+"{"+m.styles+"}":m.styles),g&&(h.inserted[m.name]=!0)}}var h={key:a,sheet:new Aw({key:a,container:n,nonce:t.nonce,speedy:t.speedy,prepend:t.prepend,insertionPoint:t.insertionPoint}),nonce:t.nonce,inserted:r,registered:{},insert:l};return h.sheet.hydrate(o),h},Ag={exports:{}},ne={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var We=typeof Symbol=="function"&&Symbol.for,ec=We?Symbol.for("react.element"):60103,tc=We?Symbol.for("react.portal"):60106,Co=We?Symbol.for("react.fragment"):60107,So=We?Symbol.for("react.strict_mode"):60108,Po=We?Symbol.for("react.profiler"):60114,Ao=We?Symbol.for("react.provider"):60109,Io=We?Symbol.for("react.context"):60110,ac=We?Symbol.for("react.async_mode"):60111,Ro=We?Symbol.for("react.concurrent_mode"):60111,jo=We?Symbol.for("react.forward_ref"):60112,Eo=We?Symbol.for("react.suspense"):60113,i0=We?Symbol.for("react.suspense_list"):60120,Fo=We?Symbol.for("react.memo"):60115,No=We?Symbol.for("react.lazy"):60116,s0=We?Symbol.for("react.block"):60121,r0=We?Symbol.for("react.fundamental"):60117,n0=We?Symbol.for("react.responder"):60118,o0=We?Symbol.for("react.scope"):60119;function xt(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case ec:switch(e=e.type,e){case ac:case Ro:case Co:case Po:case So:case Eo:return e;default:switch(e=e&&e.$$typeof,e){case Io:case jo:case No:case Fo:case Ao:return e;default:return t}}case tc:return t}}}function Ig(e){return xt(e)===Ro}ne.AsyncMode=ac;ne.ConcurrentMode=Ro;ne.ContextConsumer=Io;ne.ContextProvider=Ao;ne.Element=ec;ne.ForwardRef=jo;ne.Fragment=Co;ne.Lazy=No;ne.Memo=Fo;ne.Portal=tc;ne.Profiler=Po;ne.StrictMode=So;ne.Suspense=Eo;ne.isAsyncMode=function(e){return Ig(e)||xt(e)===ac};ne.isConcurrentMode=Ig;ne.isContextConsumer=function(e){return xt(e)===Io};ne.isContextProvider=function(e){return xt(e)===Ao};ne.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===ec};ne.isForwardRef=function(e){return xt(e)===jo};ne.isFragment=function(e){return xt(e)===Co};ne.isLazy=function(e){return xt(e)===No};ne.isMemo=function(e){return xt(e)===Fo};ne.isPortal=function(e){return xt(e)===tc};ne.isProfiler=function(e){return xt(e)===Po};ne.isStrictMode=function(e){return xt(e)===So};ne.isSuspense=function(e){return xt(e)===Eo};ne.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===Co||e===Ro||e===Po||e===So||e===Eo||e===i0||typeof e=="object"&&e!==null&&(e.$$typeof===No||e.$$typeof===Fo||e.$$typeof===Ao||e.$$typeof===Io||e.$$typeof===jo||e.$$typeof===r0||e.$$typeof===n0||e.$$typeof===o0||e.$$typeof===s0)};ne.typeOf=xt;Ag.exports=ne;var l0=Ag.exports,Rg=l0,u0={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},d0={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},jg={};jg[Rg.ForwardRef]=u0;jg[Rg.Memo]=d0;var c0=!0;function p0(e,t,a){var i="";return a.split(" ").forEach(function(s){e[s]!==void 0?t.push(e[s]+";"):i+=s+" "}),i}var Eg=function(t,a,i){var s=t.key+"-"+a.name;(i===!1||c0===!1)&&t.registered[s]===void 0&&(t.registered[s]=a.styles)},Fg=function(t,a,i){Eg(t,a,i);var s=t.key+"-"+a.name;if(t.inserted[a.name]===void 0){var r=a;do t.insert(a===r?"."+s:"",r,t.sheet,!0),r=r.next;while(r!==void 0)}};function f0(e){for(var t=0,a,i=0,s=e.length;s>=4;++i,s-=4)a=e.charCodeAt(i)&255|(e.charCodeAt(++i)&255)<<8|(e.charCodeAt(++i)&255)<<16|(e.charCodeAt(++i)&255)<<24,a=(a&65535)*1540483477+((a>>>16)*59797<<16),a^=a>>>24,t=(a&65535)*1540483477+((a>>>16)*59797<<16)^(t&65535)*1540483477+((t>>>16)*59797<<16);switch(s){case 3:t^=(e.charCodeAt(i+2)&255)<<16;case 2:t^=(e.charCodeAt(i+1)&255)<<8;case 1:t^=e.charCodeAt(i)&255,t=(t&65535)*1540483477+((t>>>16)*59797<<16)}return t^=t>>>13,t=(t&65535)*1540483477+((t>>>16)*59797<<16),((t^t>>>15)>>>0).toString(36)}var m0={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},h0=/[A-Z]|^ms/g,g0=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Ng=function(t){return t.charCodeAt(1)===45},Kp=function(t){return t!=null&&typeof t!="boolean"},Cl=Tg(function(e){return Ng(e)?e:e.replace(h0,"-$&").toLowerCase()}),Gp=function(t,a){switch(t){case"animation":case"animationName":if(typeof a=="string")return a.replace(g0,function(i,s,r){return Gt={name:s,styles:r,next:Gt},s})}return m0[t]!==1&&!Ng(t)&&typeof a=="number"&&a!==0?a+"px":a};function cr(e,t,a){if(a==null)return"";if(a.__emotion_styles!==void 0)return a;switch(typeof a){case"boolean":return"";case"object":{if(a.anim===1)return Gt={name:a.name,styles:a.styles,next:Gt},a.name;if(a.styles!==void 0){var i=a.next;if(i!==void 0)for(;i!==void 0;)Gt={name:i.name,styles:i.styles,next:Gt},i=i.next;var s=a.styles+";";return s}return y0(e,t,a)}case"function":{if(e!==void 0){var r=Gt,n=a(e);return Gt=r,cr(e,t,n)}break}}if(t==null)return a;var o=t[a];return o!==void 0?o:a}function y0(e,t,a){var i="";if(Array.isArray(a))for(var s=0;s<a.length;s++)i+=cr(e,t,a[s])+";";else for(var r in a){var n=a[r];if(typeof n!="object")t!=null&&t[n]!==void 0?i+=r+"{"+t[n]+"}":Kp(n)&&(i+=Cl(r)+":"+Gp(r,n)+";");else if(Array.isArray(n)&&typeof n[0]=="string"&&(t==null||t[n[0]]===void 0))for(var o=0;o<n.length;o++)Kp(n[o])&&(i+=Cl(r)+":"+Gp(r,n[o])+";");else{var l=cr(e,t,n);switch(r){case"animation":case"animationName":{i+=Cl(r)+":"+l+";";break}default:i+=r+"{"+l+"}"}}}return i}var Xp=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Gt,ic=function(t,a,i){if(t.length===1&&typeof t[0]=="object"&&t[0]!==null&&t[0].styles!==void 0)return t[0];var s=!0,r="";Gt=void 0;var n=t[0];n==null||n.raw===void 0?(s=!1,r+=cr(i,a,n)):r+=n[0];for(var o=1;o<t.length;o++)r+=cr(i,a,t[o]),s&&(r+=n[o]);Xp.lastIndex=0;for(var l="",u;(u=Xp.exec(r))!==null;)l+="-"+u[1];var f=f0(r)+l;return{name:f,styles:r,next:Gt}},_0=function(t){return t()},Lg=fn["useInsertionEffect"]?fn["useInsertionEffect"]:!1,v0=Lg||_0,Qp=Lg||b.useLayoutEffect,Og=b.createContext(typeof HTMLElement<"u"?a0({key:"css"}):null);Og.Provider;var Mg=function(t){return b.forwardRef(function(a,i){var s=b.useContext(Og);return t(a,s,i)})},sc=b.createContext({}),b0=Mg(function(e,t){var a=e.styles,i=ic([a],void 0,b.useContext(sc)),s=b.useRef();return Qp(function(){var r=t.key+"-global",n=new t.sheet.constructor({key:r,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),o=!1,l=document.querySelector('style[data-emotion="'+r+" "+i.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),l!==null&&(o=!0,l.setAttribute("data-emotion",r),n.hydrate([l])),s.current=[n,o],function(){n.flush()}},[t]),Qp(function(){var r=s.current,n=r[0],o=r[1];if(o){r[1]=!1;return}if(i.next!==void 0&&Fg(t,i.next,!0),n.tags.length){var l=n.tags[n.tags.length-1].nextElementSibling;n.before=l,n.flush()}t.insert("",i,n,!1)},[t,i.name]),null});function w0(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];return ic(t)}var rc=function(){var t=w0.apply(void 0,arguments),a="animation-"+t.name;return{name:a,styles:"@keyframes "+a+"{"+t.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}},T0=Cw,q0=function(t){return t!=="theme"},Jp=function(t){return typeof t=="string"&&t.charCodeAt(0)>96?T0:q0},Yp=function(t,a,i){var s;if(a){var r=a.shouldForwardProp;s=t.__emotion_forwardProp&&r?function(n){return t.__emotion_forwardProp(n)&&r(n)}:r}return typeof s!="function"&&i&&(s=t.__emotion_forwardProp),s},x0=function(t){var a=t.cache,i=t.serialized,s=t.isStringTag;return Eg(a,i,s),v0(function(){return Fg(a,i,s)}),null},D0=function e(t,a){var i=t.__emotion_real===t,s=i&&t.__emotion_base||t,r,n;a!==void 0&&(r=a.label,n=a.target);var o=Yp(t,a,i),l=o||Jp(s),u=!l("as");return function(){var f=arguments,y=i&&t.__emotion_styles!==void 0?t.__emotion_styles.slice(0):[];if(r!==void 0&&y.push("label:"+r+";"),f[0]==null||f[0].raw===void 0)y.push.apply(y,f);else{y.push(f[0][0]);for(var _=f.length,d=1;d<_;d++)y.push(f[d],f[0][d])}var h=Mg(function(c,x,m){var p=u&&c.as||s,g="",w=[],q=c;if(c.theme==null){q={};for(var k in c)q[k]=c[k];q.theme=b.useContext(sc)}typeof c.className=="string"?g=p0(x.registered,w,c.className):c.className!=null&&(g=c.className+" ");var T=ic(y.concat(w),x.registered,q);g+=x.key+"-"+T.name,n!==void 0&&(g+=" "+n);var C=u&&o===void 0?Jp(p):l,I={};for(var P in c)u&&P==="as"||C(P)&&(I[P]=c[P]);return I.className=g,I.ref=m,b.createElement(b.Fragment,null,b.createElement(x0,{cache:x,serialized:T,isStringTag:typeof p=="string"}),b.createElement(p,I))});return h.displayName=r!==void 0?r:"Styled("+(typeof s=="string"?s:s.displayName||s.name||"Component")+")",h.defaultProps=t.defaultProps,h.__emotion_real=h,h.__emotion_base=s,h.__emotion_styles=y,h.__emotion_forwardProp=o,Object.defineProperty(h,"toString",{value:function(){return"."+n}}),h.withComponent=function(c,x){return e(c,D({},a,x,{shouldForwardProp:Yp(h,x,!0)})).apply(void 0,y)},h}},k0=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"],zu=D0.bind();k0.forEach(function(e){zu[e]=zu(e)});function C0(e){return e==null||Object.keys(e).length===0}function S0(e){const{styles:t,defaultTheme:a={}}=e,i=typeof t=="function"?s=>t(C0(s)?a:s):t;return v.jsx(b0,{styles:i})}/**
 * @mui/styled-engine v5.13.2
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function Bg(e,t){return zu(e,t)}const P0=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))};function U(e,t){if(e==null)return{};var a={},i=Object.keys(e),s,r;for(r=0;r<i.length;r++)s=i[r],!(t.indexOf(s)>=0)&&(a[s]=e[s]);return a}const A0=["values","unit","step"],I0=e=>{const t=Object.keys(e).map(a=>({key:a,val:e[a]}))||[];return t.sort((a,i)=>a.val-i.val),t.reduce((a,i)=>D({},a,{[i.key]:i.val}),{})};function R0(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:a="px",step:i=5}=e,s=U(e,A0),r=I0(t),n=Object.keys(r);function o(_){return`@media (min-width:${typeof t[_]=="number"?t[_]:_}${a})`}function l(_){return`@media (max-width:${(typeof t[_]=="number"?t[_]:_)-i/100}${a})`}function u(_,d){const h=n.indexOf(d);return`@media (min-width:${typeof t[_]=="number"?t[_]:_}${a}) and (max-width:${(h!==-1&&typeof t[n[h]]=="number"?t[n[h]]:d)-i/100}${a})`}function f(_){return n.indexOf(_)+1<n.length?u(_,n[n.indexOf(_)+1]):o(_)}function y(_){const d=n.indexOf(_);return d===0?o(n[1]):d===n.length-1?l(n[d]):u(_,n[n.indexOf(_)+1]).replace("@media","@media not all and")}return D({keys:n,values:r,up:o,down:l,between:u,only:f,not:y,unit:a},s)}const j0={borderRadius:4},E0=j0;function zs(e,t){return t?At(e,t,{clone:!1}):e}const nc={xs:0,sm:600,md:900,lg:1200,xl:1536},Zp={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${nc[e]}px)`};function ha(e,t,a){const i=e.theme||{};if(Array.isArray(t)){const r=i.breakpoints||Zp;return t.reduce((n,o,l)=>(n[r.up(r.keys[l])]=a(t[l]),n),{})}if(typeof t=="object"){const r=i.breakpoints||Zp;return Object.keys(t).reduce((n,o)=>{if(Object.keys(r.values||nc).indexOf(o)!==-1){const l=r.up(o);n[l]=a(t[o],o)}else{const l=o;n[l]=t[l]}return n},{})}return a(t)}function F0(e={}){var t;return((t=e.keys)==null?void 0:t.reduce((i,s)=>{const r=e.up(s);return i[r]={},i},{}))||{}}function N0(e,t){return e.reduce((a,i)=>{const s=a[i];return(!s||Object.keys(s).length===0)&&delete a[i],a},t)}function Lo(e,t,a=!0){if(!t||typeof t!="string")return null;if(e&&e.vars&&a){const i=`vars.${t}`.split(".").reduce((s,r)=>s&&s[r]?s[r]:null,e);if(i!=null)return i}return t.split(".").reduce((i,s)=>i&&i[s]!=null?i[s]:null,e)}function Wn(e,t,a,i=a){let s;return typeof e=="function"?s=e(a):Array.isArray(e)?s=e[a]||i:s=Lo(e,a)||i,t&&(s=t(s,i,e)),s}function ie(e){const{prop:t,cssProperty:a=e.prop,themeKey:i,transform:s}=e,r=n=>{if(n[t]==null)return null;const o=n[t],l=n.theme,u=Lo(l,i)||{};return ha(n,o,y=>{let _=Wn(u,s,y);return y===_&&typeof y=="string"&&(_=Wn(u,s,`${t}${y==="default"?"":qe(y)}`,y)),a===!1?_:{[a]:_}})};return r.propTypes={},r.filterProps=[t],r}function L0(e){const t={};return a=>(t[a]===void 0&&(t[a]=e(a)),t[a])}const O0={m:"margin",p:"padding"},M0={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},ef={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},B0=L0(e=>{if(e.length>2)if(ef[e])e=ef[e];else return[e];const[t,a]=e.split(""),i=O0[t],s=M0[a]||"";return Array.isArray(s)?s.map(r=>i+r):[i+s]}),oc=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],lc=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"];[...oc,...lc];function wr(e,t,a,i){var s;const r=(s=Lo(e,t,!1))!=null?s:a;return typeof r=="number"?n=>typeof n=="string"?n:r*n:Array.isArray(r)?n=>typeof n=="string"?n:r[n]:typeof r=="function"?r:()=>{}}function zg(e){return wr(e,"spacing",8)}function Tr(e,t){if(typeof t=="string"||t==null)return t;const a=Math.abs(t),i=e(a);return t>=0?i:typeof i=="number"?-i:`-${i}`}function z0(e,t){return a=>e.reduce((i,s)=>(i[s]=Tr(t,a),i),{})}function $0(e,t,a,i){if(t.indexOf(a)===-1)return null;const s=B0(a),r=z0(s,i),n=e[a];return ha(e,n,r)}function $g(e,t){const a=zg(e.theme);return Object.keys(e).map(i=>$0(e,t,i,a)).reduce(zs,{})}function ke(e){return $g(e,oc)}ke.propTypes={};ke.filterProps=oc;function Ce(e){return $g(e,lc)}Ce.propTypes={};Ce.filterProps=lc;function W0(e=8){if(e.mui)return e;const t=zg({spacing:e}),a=(...i)=>(i.length===0?[1]:i).map(r=>{const n=t(r);return typeof n=="number"?`${n}px`:n}).join(" ");return a.mui=!0,a}function Oo(...e){const t=e.reduce((i,s)=>(s.filterProps.forEach(r=>{i[r]=s}),i),{}),a=i=>Object.keys(i).reduce((s,r)=>t[r]?zs(s,t[r](i)):s,{});return a.propTypes={},a.filterProps=e.reduce((i,s)=>i.concat(s.filterProps),[]),a}function Qt(e){return typeof e!="number"?e:`${e}px solid`}const U0=ie({prop:"border",themeKey:"borders",transform:Qt}),H0=ie({prop:"borderTop",themeKey:"borders",transform:Qt}),V0=ie({prop:"borderRight",themeKey:"borders",transform:Qt}),K0=ie({prop:"borderBottom",themeKey:"borders",transform:Qt}),G0=ie({prop:"borderLeft",themeKey:"borders",transform:Qt}),X0=ie({prop:"borderColor",themeKey:"palette"}),Q0=ie({prop:"borderTopColor",themeKey:"palette"}),J0=ie({prop:"borderRightColor",themeKey:"palette"}),Y0=ie({prop:"borderBottomColor",themeKey:"palette"}),Z0=ie({prop:"borderLeftColor",themeKey:"palette"}),Mo=e=>{if(e.borderRadius!==void 0&&e.borderRadius!==null){const t=wr(e.theme,"shape.borderRadius",4),a=i=>({borderRadius:Tr(t,i)});return ha(e,e.borderRadius,a)}return null};Mo.propTypes={};Mo.filterProps=["borderRadius"];Oo(U0,H0,V0,K0,G0,X0,Q0,J0,Y0,Z0,Mo);const Bo=e=>{if(e.gap!==void 0&&e.gap!==null){const t=wr(e.theme,"spacing",8),a=i=>({gap:Tr(t,i)});return ha(e,e.gap,a)}return null};Bo.propTypes={};Bo.filterProps=["gap"];const zo=e=>{if(e.columnGap!==void 0&&e.columnGap!==null){const t=wr(e.theme,"spacing",8),a=i=>({columnGap:Tr(t,i)});return ha(e,e.columnGap,a)}return null};zo.propTypes={};zo.filterProps=["columnGap"];const $o=e=>{if(e.rowGap!==void 0&&e.rowGap!==null){const t=wr(e.theme,"spacing",8),a=i=>({rowGap:Tr(t,i)});return ha(e,e.rowGap,a)}return null};$o.propTypes={};$o.filterProps=["rowGap"];const e1=ie({prop:"gridColumn"}),t1=ie({prop:"gridRow"}),a1=ie({prop:"gridAutoFlow"}),i1=ie({prop:"gridAutoColumns"}),s1=ie({prop:"gridAutoRows"}),r1=ie({prop:"gridTemplateColumns"}),n1=ie({prop:"gridTemplateRows"}),o1=ie({prop:"gridTemplateAreas"}),l1=ie({prop:"gridArea"});Oo(Bo,zo,$o,e1,t1,a1,i1,s1,r1,n1,o1,l1);function Ki(e,t){return t==="grey"?t:e}const u1=ie({prop:"color",themeKey:"palette",transform:Ki}),d1=ie({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:Ki}),c1=ie({prop:"backgroundColor",themeKey:"palette",transform:Ki});Oo(u1,d1,c1);function yt(e){return e<=1&&e!==0?`${e*100}%`:e}const p1=ie({prop:"width",transform:yt}),uc=e=>{if(e.maxWidth!==void 0&&e.maxWidth!==null){const t=a=>{var i;return{maxWidth:((i=e.theme)==null||(i=i.breakpoints)==null||(i=i.values)==null?void 0:i[a])||nc[a]||yt(a)}};return ha(e,e.maxWidth,t)}return null};uc.filterProps=["maxWidth"];const f1=ie({prop:"minWidth",transform:yt}),m1=ie({prop:"height",transform:yt}),h1=ie({prop:"maxHeight",transform:yt}),g1=ie({prop:"minHeight",transform:yt});ie({prop:"size",cssProperty:"width",transform:yt});ie({prop:"size",cssProperty:"height",transform:yt});const y1=ie({prop:"boxSizing"});Oo(p1,uc,f1,m1,h1,g1,y1);const _1={border:{themeKey:"borders",transform:Qt},borderTop:{themeKey:"borders",transform:Qt},borderRight:{themeKey:"borders",transform:Qt},borderBottom:{themeKey:"borders",transform:Qt},borderLeft:{themeKey:"borders",transform:Qt},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:Mo},color:{themeKey:"palette",transform:Ki},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:Ki},backgroundColor:{themeKey:"palette",transform:Ki},p:{style:Ce},pt:{style:Ce},pr:{style:Ce},pb:{style:Ce},pl:{style:Ce},px:{style:Ce},py:{style:Ce},padding:{style:Ce},paddingTop:{style:Ce},paddingRight:{style:Ce},paddingBottom:{style:Ce},paddingLeft:{style:Ce},paddingX:{style:Ce},paddingY:{style:Ce},paddingInline:{style:Ce},paddingInlineStart:{style:Ce},paddingInlineEnd:{style:Ce},paddingBlock:{style:Ce},paddingBlockStart:{style:Ce},paddingBlockEnd:{style:Ce},m:{style:ke},mt:{style:ke},mr:{style:ke},mb:{style:ke},ml:{style:ke},mx:{style:ke},my:{style:ke},margin:{style:ke},marginTop:{style:ke},marginRight:{style:ke},marginBottom:{style:ke},marginLeft:{style:ke},marginX:{style:ke},marginY:{style:ke},marginInline:{style:ke},marginInlineStart:{style:ke},marginInlineEnd:{style:ke},marginBlock:{style:ke},marginBlockStart:{style:ke},marginBlockEnd:{style:ke},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:Bo},rowGap:{style:$o},columnGap:{style:zo},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:yt},maxWidth:{style:uc},minWidth:{transform:yt},height:{transform:yt},maxHeight:{transform:yt},minHeight:{transform:yt},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}},Wo=_1;function v1(...e){const t=e.reduce((i,s)=>i.concat(Object.keys(s)),[]),a=new Set(t);return e.every(i=>a.size===Object.keys(i).length)}function b1(e,t){return typeof e=="function"?e(t):e}function w1(){function e(a,i,s,r){const n={[a]:i,theme:s},o=r[a];if(!o)return{[a]:i};const{cssProperty:l=a,themeKey:u,transform:f,style:y}=o;if(i==null)return null;if(u==="typography"&&i==="inherit")return{[a]:i};const _=Lo(s,u)||{};return y?y(n):ha(n,i,h=>{let c=Wn(_,f,h);return h===c&&typeof h=="string"&&(c=Wn(_,f,`${a}${h==="default"?"":qe(h)}`,h)),l===!1?c:{[l]:c}})}function t(a){var i;const{sx:s,theme:r={}}=a||{};if(!s)return null;const n=(i=r.unstable_sxConfig)!=null?i:Wo;function o(l){let u=l;if(typeof l=="function")u=l(r);else if(typeof l!="object")return l;if(!u)return null;const f=F0(r.breakpoints),y=Object.keys(f);let _=f;return Object.keys(u).forEach(d=>{const h=b1(u[d],r);if(h!=null)if(typeof h=="object")if(n[d])_=zs(_,e(d,h,r,n));else{const c=ha({theme:r},h,x=>({[d]:x}));v1(c,h)?_[d]=t({sx:h,theme:r}):_=zs(_,c)}else _=zs(_,e(d,h,r,n))}),N0(y,_)}return Array.isArray(s)?s.map(o):o(s)}return t}const Wg=w1();Wg.filterProps=["sx"];const Uo=Wg,T1=["breakpoints","palette","spacing","shape"];function dc(e={},...t){const{breakpoints:a={},palette:i={},spacing:s,shape:r={}}=e,n=U(e,T1),o=R0(a),l=W0(s);let u=At({breakpoints:o,direction:"ltr",components:{},palette:D({mode:"light"},i),spacing:l,shape:D({},E0,r)},n);return u=t.reduce((f,y)=>At(f,y),u),u.unstable_sxConfig=D({},Wo,n==null?void 0:n.unstable_sxConfig),u.unstable_sx=function(y){return Uo({sx:y,theme:this})},u}function q1(e){return Object.keys(e).length===0}function x1(e=null){const t=b.useContext(sc);return!t||q1(t)?e:t}const D1=dc();function Ho(e=D1){return x1(e)}function k1({styles:e,themeId:t,defaultTheme:a={}}){const i=Ho(a),s=typeof e=="function"?e(t&&i[t]||i):e;return v.jsx(S0,{styles:s})}const C1=["sx"],S1=e=>{var t,a;const i={systemProps:{},otherProps:{}},s=(t=e==null||(a=e.theme)==null?void 0:a.unstable_sxConfig)!=null?t:Wo;return Object.keys(e).forEach(r=>{s[r]?i.systemProps[r]=e[r]:i.otherProps[r]=e[r]}),i};function P1(e){const{sx:t}=e,a=U(e,C1),{systemProps:i,otherProps:s}=S1(a);let r;return Array.isArray(t)?r=[i,...t]:typeof t=="function"?r=(...n)=>{const o=t(...n);return ei(o)?D({},i,o):i}:r=D({},i,t),D({},s,{sx:r})}function Ug(e){var t,a,i="";if(typeof e=="string"||typeof e=="number")i+=e;else if(typeof e=="object")if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=Ug(e[t]))&&(i&&(i+=" "),i+=a);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}function X(){for(var e,t,a=0,i="";a<arguments.length;)(e=arguments[a++])&&(t=Ug(e))&&(i&&(i+=" "),i+=t);return i}const A1=["className","component"];function I1(e={}){const{themeId:t,defaultTheme:a,defaultClassName:i="MuiBox-root",generateClassName:s}=e,r=Bg("div",{shouldForwardProp:o=>o!=="theme"&&o!=="sx"&&o!=="as"})(Uo);return b.forwardRef(function(l,u){const f=Ho(a),y=P1(l),{className:_,component:d="div"}=y,h=U(y,A1);return v.jsx(r,D({as:d,ref:u,className:X(_,s?s(i):i),theme:t&&f[t]||f},h))})}const R1=["variant"];function tf(e){return e.length===0}function Hg(e){const{variant:t}=e,a=U(e,R1);let i=t||"";return Object.keys(a).sort().forEach(s=>{s==="color"?i+=tf(i)?e[s]:qe(e[s]):i+=`${tf(i)?s:qe(s)}${qe(e[s].toString())}`}),i}const j1=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function E1(e){return Object.keys(e).length===0}function F1(e){return typeof e=="string"&&e.charCodeAt(0)>96}const N1=(e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null,L1=(e,t)=>{let a=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(a=t.components[e].variants);const i={};return a.forEach(s=>{const r=Hg(s.props);i[r]=s.style}),i},O1=(e,t,a,i)=>{var s;const{ownerState:r={}}=e,n=[],o=a==null||(s=a.components)==null||(s=s[i])==null?void 0:s.variants;return o&&o.forEach(l=>{let u=!0;Object.keys(l.props).forEach(f=>{r[f]!==l.props[f]&&e[f]!==l.props[f]&&(u=!1)}),u&&n.push(t[Hg(l.props)])}),n};function $s(e){return e!=="ownerState"&&e!=="theme"&&e!=="sx"&&e!=="as"}const M1=dc(),B1=e=>e&&e.charAt(0).toLowerCase()+e.slice(1);function bs({defaultTheme:e,theme:t,themeId:a}){return E1(t)?e:t[a]||t}function z1(e){return e?(t,a)=>a[e]:null}function $1(e={}){const{themeId:t,defaultTheme:a=M1,rootShouldForwardProp:i=$s,slotShouldForwardProp:s=$s}=e,r=n=>Uo(D({},n,{theme:bs(D({},n,{defaultTheme:a,themeId:t}))}));return r.__mui_systemSx=!0,(n,o={})=>{P0(n,w=>w.filter(q=>!(q!=null&&q.__mui_systemSx)));const{name:l,slot:u,skipVariantsResolver:f,skipSx:y,overridesResolver:_=z1(B1(u))}=o,d=U(o,j1),h=f!==void 0?f:u&&u!=="Root"&&u!=="root"||!1,c=y||!1;let x,m=$s;u==="Root"||u==="root"?m=i:u?m=s:F1(n)&&(m=void 0);const p=Bg(n,D({shouldForwardProp:m,label:x},d)),g=(w,...q)=>{const k=q?q.map(P=>typeof P=="function"&&P.__emotion_real!==P?F=>P(D({},F,{theme:bs(D({},F,{defaultTheme:a,themeId:t}))})):P):[];let T=w;l&&_&&k.push(P=>{const F=bs(D({},P,{defaultTheme:a,themeId:t})),B=N1(l,F);if(B){const O={};return Object.entries(B).forEach(([j,E])=>{O[j]=typeof E=="function"?E(D({},P,{theme:F})):E}),_(P,O)}return null}),l&&!h&&k.push(P=>{const F=bs(D({},P,{defaultTheme:a,themeId:t}));return O1(P,L1(l,F),F,l)}),c||k.push(r);const C=k.length-q.length;if(Array.isArray(w)&&C>0){const P=new Array(C).fill("");T=[...w,...P],T.raw=[...w.raw,...P]}else typeof w=="function"&&w.__emotion_real!==w&&(T=P=>w(D({},P,{theme:bs(D({},P,{defaultTheme:a,themeId:t}))})));const I=p(T,...k);return n.muiName&&(I.muiName=n.muiName),I};return p.withConfig&&(g.withConfig=p.withConfig),g}}function W1(e){const{theme:t,name:a,props:i}=e;return!t||!t.components||!t.components[a]||!t.components[a].defaultProps?i:wg(t.components[a].defaultProps,i)}function U1({props:e,name:t,defaultTheme:a,themeId:i}){let s=Ho(a);return i&&(s=s[i]||s),W1({theme:s,name:t,props:e})}function cc(e,t=0,a=1){return Math.min(Math.max(t,e),a)}function H1(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let a=e.match(t);return a&&a[0].length===1&&(a=a.map(i=>i+i)),a?`rgb${a.length===4?"a":""}(${a.map((i,s)=>s<3?parseInt(i,16):Math.round(parseInt(i,16)/255*1e3)/1e3).join(", ")})`:""}function hi(e){if(e.type)return e;if(e.charAt(0)==="#")return hi(H1(e));const t=e.indexOf("("),a=e.substring(0,t);if(["rgb","rgba","hsl","hsla","color"].indexOf(a)===-1)throw new Error($a(9,e));let i=e.substring(t+1,e.length-1),s;if(a==="color"){if(i=i.split(" "),s=i.shift(),i.length===4&&i[3].charAt(0)==="/"&&(i[3]=i[3].slice(1)),["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(s)===-1)throw new Error($a(10,s))}else i=i.split(",");return i=i.map(r=>parseFloat(r)),{type:a,values:i,colorSpace:s}}function Vo(e){const{type:t,colorSpace:a}=e;let{values:i}=e;return t.indexOf("rgb")!==-1?i=i.map((s,r)=>r<3?parseInt(s,10):s):t.indexOf("hsl")!==-1&&(i[1]=`${i[1]}%`,i[2]=`${i[2]}%`),t.indexOf("color")!==-1?i=`${a} ${i.join(" ")}`:i=`${i.join(", ")}`,`${t}(${i})`}function V1(e){e=hi(e);const{values:t}=e,a=t[0],i=t[1]/100,s=t[2]/100,r=i*Math.min(s,1-s),n=(u,f=(u+a/30)%12)=>s-r*Math.max(Math.min(f-3,9-f,1),-1);let o="rgb";const l=[Math.round(n(0)*255),Math.round(n(8)*255),Math.round(n(4)*255)];return e.type==="hsla"&&(o+="a",l.push(t[3])),Vo({type:o,values:l})}function af(e){e=hi(e);let t=e.type==="hsl"||e.type==="hsla"?hi(V1(e)).values:e.values;return t=t.map(a=>(e.type!=="color"&&(a/=255),a<=.03928?a/12.92:((a+.055)/1.055)**2.4)),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function K1(e,t){const a=af(e),i=af(t);return(Math.max(a,i)+.05)/(Math.min(a,i)+.05)}function ni(e,t){return e=hi(e),t=cc(t),(e.type==="rgb"||e.type==="hsl")&&(e.type+="a"),e.type==="color"?e.values[3]=`/${t}`:e.values[3]=t,Vo(e)}function G1(e,t){if(e=hi(e),t=cc(t),e.type.indexOf("hsl")!==-1)e.values[2]*=1-t;else if(e.type.indexOf("rgb")!==-1||e.type.indexOf("color")!==-1)for(let a=0;a<3;a+=1)e.values[a]*=1-t;return Vo(e)}function X1(e,t){if(e=hi(e),t=cc(t),e.type.indexOf("hsl")!==-1)e.values[2]+=(100-e.values[2])*t;else if(e.type.indexOf("rgb")!==-1)for(let a=0;a<3;a+=1)e.values[a]+=(255-e.values[a])*t;else if(e.type.indexOf("color")!==-1)for(let a=0;a<3;a+=1)e.values[a]+=(1-e.values[a])*t;return Vo(e)}const qr="$$material";function Q1(e,t){return D({toolbar:{minHeight:56,[e.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[e.up("sm")]:{minHeight:64}}},t)}const J1={black:"#000",white:"#fff"},pr=J1,Y1={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Z1=Y1,eT={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},bi=eT,tT={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},wi=tT,aT={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},ws=aT,iT={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},Ti=iT,sT={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},qi=sT,rT={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},xi=rT,nT=["mode","contrastThreshold","tonalOffset"],sf={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:pr.white,default:pr.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Sl={text:{primary:pr.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:pr.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function rf(e,t,a,i){const s=i.light||i,r=i.dark||i*1.5;e[t]||(e.hasOwnProperty(a)?e[t]=e[a]:t==="light"?e.light=X1(e.main,s):t==="dark"&&(e.dark=G1(e.main,r)))}function oT(e="light"){return e==="dark"?{main:Ti[200],light:Ti[50],dark:Ti[400]}:{main:Ti[700],light:Ti[400],dark:Ti[800]}}function lT(e="light"){return e==="dark"?{main:bi[200],light:bi[50],dark:bi[400]}:{main:bi[500],light:bi[300],dark:bi[700]}}function uT(e="light"){return e==="dark"?{main:wi[500],light:wi[300],dark:wi[700]}:{main:wi[700],light:wi[400],dark:wi[800]}}function dT(e="light"){return e==="dark"?{main:qi[400],light:qi[300],dark:qi[700]}:{main:qi[700],light:qi[500],dark:qi[900]}}function cT(e="light"){return e==="dark"?{main:xi[400],light:xi[300],dark:xi[700]}:{main:xi[800],light:xi[500],dark:xi[900]}}function pT(e="light"){return e==="dark"?{main:ws[400],light:ws[300],dark:ws[700]}:{main:"#ed6c02",light:ws[500],dark:ws[900]}}function fT(e){const{mode:t="light",contrastThreshold:a=3,tonalOffset:i=.2}=e,s=U(e,nT),r=e.primary||oT(t),n=e.secondary||lT(t),o=e.error||uT(t),l=e.info||dT(t),u=e.success||cT(t),f=e.warning||pT(t);function y(c){return K1(c,Sl.text.primary)>=a?Sl.text.primary:sf.text.primary}const _=({color:c,name:x,mainShade:m=500,lightShade:p=300,darkShade:g=700})=>{if(c=D({},c),!c.main&&c[m]&&(c.main=c[m]),!c.hasOwnProperty("main"))throw new Error($a(11,x?` (${x})`:"",m));if(typeof c.main!="string")throw new Error($a(12,x?` (${x})`:"",JSON.stringify(c.main)));return rf(c,"light",p,i),rf(c,"dark",g,i),c.contrastText||(c.contrastText=y(c.main)),c},d={dark:Sl,light:sf};return At(D({common:D({},pr),mode:t,primary:_({color:r,name:"primary"}),secondary:_({color:n,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:_({color:o,name:"error"}),warning:_({color:f,name:"warning"}),info:_({color:l,name:"info"}),success:_({color:u,name:"success"}),grey:Z1,contrastThreshold:a,getContrastText:y,augmentColor:_,tonalOffset:i},d[t]),s)}const mT=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"];function hT(e){return Math.round(e*1e5)/1e5}const nf={textTransform:"uppercase"},of='"Roboto", "Helvetica", "Arial", sans-serif';function gT(e,t){const a=typeof t=="function"?t(e):t,{fontFamily:i=of,fontSize:s=14,fontWeightLight:r=300,fontWeightRegular:n=400,fontWeightMedium:o=500,fontWeightBold:l=700,htmlFontSize:u=16,allVariants:f,pxToRem:y}=a,_=U(a,mT),d=s/14,h=y||(m=>`${m/u*d}rem`),c=(m,p,g,w,q)=>D({fontFamily:i,fontWeight:m,fontSize:h(p),lineHeight:g},i===of?{letterSpacing:`${hT(w/p)}em`}:{},q,f),x={h1:c(r,96,1.167,-1.5),h2:c(r,60,1.2,-.5),h3:c(n,48,1.167,0),h4:c(n,34,1.235,.25),h5:c(n,24,1.334,0),h6:c(o,20,1.6,.15),subtitle1:c(n,16,1.75,.15),subtitle2:c(o,14,1.57,.1),body1:c(n,16,1.5,.15),body2:c(n,14,1.43,.15),button:c(o,14,1.75,.4,nf),caption:c(n,12,1.66,.4),overline:c(n,12,2.66,1,nf),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return At(D({htmlFontSize:u,pxToRem:h,fontFamily:i,fontSize:s,fontWeightLight:r,fontWeightRegular:n,fontWeightMedium:o,fontWeightBold:l},x),_,{clone:!1})}const yT=.2,_T=.14,vT=.12;function _e(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,${yT})`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,${_T})`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,${vT})`].join(",")}const bT=["none",_e(0,2,1,-1,0,1,1,0,0,1,3,0),_e(0,3,1,-2,0,2,2,0,0,1,5,0),_e(0,3,3,-2,0,3,4,0,0,1,8,0),_e(0,2,4,-1,0,4,5,0,0,1,10,0),_e(0,3,5,-1,0,5,8,0,0,1,14,0),_e(0,3,5,-1,0,6,10,0,0,1,18,0),_e(0,4,5,-2,0,7,10,1,0,2,16,1),_e(0,5,5,-3,0,8,10,1,0,3,14,2),_e(0,5,6,-3,0,9,12,1,0,3,16,2),_e(0,6,6,-3,0,10,14,1,0,4,18,3),_e(0,6,7,-4,0,11,15,1,0,4,20,3),_e(0,7,8,-4,0,12,17,2,0,5,22,4),_e(0,7,8,-4,0,13,19,2,0,5,24,4),_e(0,7,9,-4,0,14,21,2,0,5,26,4),_e(0,8,9,-5,0,15,22,2,0,6,28,5),_e(0,8,10,-5,0,16,24,2,0,6,30,5),_e(0,8,11,-5,0,17,26,2,0,6,32,5),_e(0,9,11,-5,0,18,28,2,0,7,34,6),_e(0,9,12,-6,0,19,29,2,0,7,36,6),_e(0,10,13,-6,0,20,31,3,0,8,38,7),_e(0,10,13,-6,0,21,33,3,0,8,40,7),_e(0,10,14,-6,0,22,35,3,0,8,42,7),_e(0,11,14,-7,0,23,36,3,0,9,44,8),_e(0,11,15,-7,0,24,38,3,0,9,46,8)],wT=bT,TT=["duration","easing","delay"],qT={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},xT={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function lf(e){return`${Math.round(e)}ms`}function DT(e){if(!e)return 0;const t=e/36;return Math.round((4+15*t**.25+t/5)*10)}function kT(e){const t=D({},qT,e.easing),a=D({},xT,e.duration);return D({getAutoHeightDuration:DT,create:(s=["all"],r={})=>{const{duration:n=a.standard,easing:o=t.easeInOut,delay:l=0}=r;return U(r,TT),(Array.isArray(s)?s:[s]).map(u=>`${u} ${typeof n=="string"?n:lf(n)} ${o} ${typeof l=="string"?l:lf(l)}`).join(",")}},e,{easing:t,duration:a})}const CT={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},ST=CT,PT=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];function Vg(e={},...t){const{mixins:a={},palette:i={},transitions:s={},typography:r={}}=e,n=U(e,PT);if(e.vars)throw new Error($a(18));const o=fT(i),l=dc(e);let u=At(l,{mixins:Q1(l.breakpoints,a),palette:o,shadows:wT.slice(),typography:gT(o,r),transitions:kT(s),zIndex:D({},ST)});return u=At(u,n),u=t.reduce((f,y)=>At(f,y),u),u.unstable_sxConfig=D({},Wo,n==null?void 0:n.unstable_sxConfig),u.unstable_sx=function(y){return Uo({sx:y,theme:this})},u}const AT=Vg(),Ko=AT;function xr(){const e=Ho(Ko);return e[qr]||e}function Le({props:e,name:t}){return U1({props:e,name:t,defaultTheme:Ko,themeId:qr})}const ta=e=>$s(e)&&e!=="classes",IT=$s,RT=$1({themeId:qr,defaultTheme:Ko,rootShouldForwardProp:ta}),V=RT,jT=e=>{let t;return e<1?t=5.11916*e**2:t=4.5*Math.log(e+1)+2,(t/100).toFixed(2)},uf=jT,ET=Vg(),FT=I1({themeId:qr,defaultTheme:ET,defaultClassName:"MuiBox-root",generateClassName:Qd.generate}),NT=FT;function Dr({props:e,states:t,muiFormControl:a}){return t.reduce((i,s)=>(i[s]=e[s],a&&typeof e[s]>"u"&&(i[s]=a[s]),i),{})}const LT=b.createContext(void 0),pc=LT;function kr(){return b.useContext(pc)}function OT(e){return Ae("MuiFormLabel",e)}const MT=De("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),Ws=MT,BT=["children","className","color","component","disabled","error","filled","focused","required"],zT=e=>{const{classes:t,color:a,focused:i,disabled:s,error:r,filled:n,required:o}=e,l={root:["root",`color${qe(a)}`,s&&"disabled",r&&"error",n&&"filled",i&&"focused",o&&"required"],asterisk:["asterisk",r&&"error"]};return Ne(l,OT,t)},$T=V("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>D({},t.root,e.color==="secondary"&&t.colorSecondary,e.filled&&t.filled)})(({theme:e,ownerState:t})=>D({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${Ws.focused}`]:{color:(e.vars||e).palette[t.color].main},[`&.${Ws.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${Ws.error}`]:{color:(e.vars||e).palette.error.main}})),WT=V("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})(({theme:e})=>({[`&.${Ws.error}`]:{color:(e.vars||e).palette.error.main}})),UT=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiFormLabel"}),{children:s,className:r,component:n="label"}=i,o=U(i,BT),l=kr(),u=Dr({props:i,muiFormControl:l,states:["color","required","focused","disabled","error","filled"]}),f=D({},i,{color:u.color||"primary",component:n,disabled:u.disabled,error:u.error,filled:u.filled,focused:u.focused,required:u.required}),y=zT(f);return v.jsxs($T,D({as:n,ownerState:f,className:X(y.root,r),ref:a},o,{children:[s,u.required&&v.jsxs(WT,{ownerState:f,"aria-hidden":!0,className:y.asterisk,children:[" ","*"]})]}))}),HT=UT;function VT(e){return Ae("MuiInputLabel",e)}De("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const KT=["disableAnimation","margin","shrink","variant","className"],GT=e=>{const{classes:t,formControl:a,size:i,shrink:s,disableAnimation:r,variant:n,required:o}=e,u=Ne({root:["root",a&&"formControl",!r&&"animated",s&&"shrink",i==="small"&&"sizeSmall",n],asterisk:[o&&"asterisk"]},VT,t);return D({},t,u)},XT=V(HT,{shouldForwardProp:e=>ta(e)||e==="classes",name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[{[`& .${Ws.asterisk}`]:t.asterisk},t.root,a.formControl&&t.formControl,a.size==="small"&&t.sizeSmall,a.shrink&&t.shrink,!a.disableAnimation&&t.animated,t[a.variant]]}})(({theme:e,ownerState:t})=>D({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},t.size==="small"&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},t.variant==="filled"&&D({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},t.size==="small"&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&D({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},t.size==="small"&&{transform:"translate(12px, 4px) scale(0.75)"})),t.variant==="outlined"&&D({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},t.size==="small"&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"}))),QT=b.forwardRef(function(t,a){const i=Le({name:"MuiInputLabel",props:t}),{disableAnimation:s=!1,shrink:r,className:n}=i,o=U(i,KT),l=kr();let u=r;typeof u>"u"&&l&&(u=l.filled||l.focused||l.adornedStart);const f=Dr({props:i,muiFormControl:l,states:["size","variant","required"]}),y=D({},i,{disableAnimation:s,formControl:l,shrink:u,size:f.size,variant:f.variant,required:f.required}),_=GT(y);return v.jsx(XT,D({"data-shrink":u,ownerState:y,ref:a,className:X(_.root,n)},o,{classes:_}))}),JT=QT,YT=b.createContext({}),$u=YT;function Wu(e,t){return Wu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(i,s){return i.__proto__=s,i},Wu(e,t)}function Kg(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Wu(e,t)}const df={disabled:!1},Un=zt.createContext(null);var ZT=function(t){return t.scrollTop},Is="unmounted",Ya="exited",Za="entering",Ci="entered",Uu="exiting",ya=function(e){Kg(t,e);function t(i,s){var r;r=e.call(this,i,s)||this;var n=s,o=n&&!n.isMounting?i.enter:i.appear,l;return r.appearStatus=null,i.in?o?(l=Ya,r.appearStatus=Za):l=Ci:i.unmountOnExit||i.mountOnEnter?l=Is:l=Ya,r.state={status:l},r.nextCallback=null,r}t.getDerivedStateFromProps=function(s,r){var n=s.in;return n&&r.status===Is?{status:Ya}:null};var a=t.prototype;return a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(s){var r=null;if(s!==this.props){var n=this.state.status;this.props.in?n!==Za&&n!==Ci&&(r=Za):(n===Za||n===Ci)&&(r=Uu)}this.updateStatus(!1,r)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var s=this.props.timeout,r,n,o;return r=n=o=s,s!=null&&typeof s!="number"&&(r=s.exit,n=s.enter,o=s.appear!==void 0?s.appear:n),{exit:r,enter:n,appear:o}},a.updateStatus=function(s,r){if(s===void 0&&(s=!1),r!==null)if(this.cancelNextCallback(),r===Za){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Ur.findDOMNode(this);n&&ZT(n)}this.performEnter(s)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Ya&&this.setState({status:Is})},a.performEnter=function(s){var r=this,n=this.props.enter,o=this.context?this.context.isMounting:s,l=this.props.nodeRef?[o]:[Ur.findDOMNode(this),o],u=l[0],f=l[1],y=this.getTimeouts(),_=o?y.appear:y.enter;if(!s&&!n||df.disabled){this.safeSetState({status:Ci},function(){r.props.onEntered(u)});return}this.props.onEnter(u,f),this.safeSetState({status:Za},function(){r.props.onEntering(u,f),r.onTransitionEnd(_,function(){r.safeSetState({status:Ci},function(){r.props.onEntered(u,f)})})})},a.performExit=function(){var s=this,r=this.props.exit,n=this.getTimeouts(),o=this.props.nodeRef?void 0:Ur.findDOMNode(this);if(!r||df.disabled){this.safeSetState({status:Ya},function(){s.props.onExited(o)});return}this.props.onExit(o),this.safeSetState({status:Uu},function(){s.props.onExiting(o),s.onTransitionEnd(n.exit,function(){s.safeSetState({status:Ya},function(){s.props.onExited(o)})})})},a.cancelNextCallback=function(){this.nextCallback!==null&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(s,r){r=this.setNextCallback(r),this.setState(s,r)},a.setNextCallback=function(s){var r=this,n=!0;return this.nextCallback=function(o){n&&(n=!1,r.nextCallback=null,s(o))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(s,r){this.setNextCallback(r);var n=this.props.nodeRef?this.props.nodeRef.current:Ur.findDOMNode(this),o=s==null&&!this.props.addEndListener;if(!n||o){setTimeout(this.nextCallback,0);return}if(this.props.addEndListener){var l=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],u=l[0],f=l[1];this.props.addEndListener(u,f)}s!=null&&setTimeout(this.nextCallback,s)},a.render=function(){var s=this.state.status;if(s===Is)return null;var r=this.props,n=r.children;r.in,r.mountOnEnter,r.unmountOnExit,r.appear,r.enter,r.exit,r.timeout,r.addEndListener,r.onEnter,r.onEntering,r.onEntered,r.onExit,r.onExiting,r.onExited,r.nodeRef;var o=U(r,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]);return zt.createElement(Un.Provider,{value:null},typeof n=="function"?n(s,o):zt.cloneElement(zt.Children.only(n),o))},t}(zt.Component);ya.contextType=Un;ya.propTypes={};function Di(){}ya.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Di,onEntering:Di,onEntered:Di,onExit:Di,onExiting:Di,onExited:Di};ya.UNMOUNTED=Is;ya.EXITED=Ya;ya.ENTERING=Za;ya.ENTERED=Ci;ya.EXITING=Uu;const fc=ya;function eq(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mc(e,t){var a=function(r){return t&&b.isValidElement(r)?t(r):r},i=Object.create(null);return e&&b.Children.map(e,function(s){return s}).forEach(function(s){i[s.key]=a(s)}),i}function tq(e,t){e=e||{},t=t||{};function a(f){return f in t?t[f]:e[f]}var i=Object.create(null),s=[];for(var r in e)r in t?s.length&&(i[r]=s,s=[]):s.push(r);var n,o={};for(var l in t){if(i[l])for(n=0;n<i[l].length;n++){var u=i[l][n];o[i[l][n]]=a(u)}o[l]=a(l)}for(n=0;n<s.length;n++)o[s[n]]=a(s[n]);return o}function oi(e,t,a){return a[t]!=null?a[t]:e.props[t]}function aq(e,t){return mc(e.children,function(a){return b.cloneElement(a,{onExited:t.bind(null,a),in:!0,appear:oi(a,"appear",e),enter:oi(a,"enter",e),exit:oi(a,"exit",e)})})}function iq(e,t,a){var i=mc(e.children),s=tq(t,i);return Object.keys(s).forEach(function(r){var n=s[r];if(b.isValidElement(n)){var o=r in t,l=r in i,u=t[r],f=b.isValidElement(u)&&!u.props.in;l&&(!o||f)?s[r]=b.cloneElement(n,{onExited:a.bind(null,n),in:!0,exit:oi(n,"exit",e),enter:oi(n,"enter",e)}):!l&&o&&!f?s[r]=b.cloneElement(n,{in:!1}):l&&o&&b.isValidElement(u)&&(s[r]=b.cloneElement(n,{onExited:a.bind(null,n),in:u.props.in,exit:oi(n,"exit",e),enter:oi(n,"enter",e)}))}}),s}var sq=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},rq={component:"div",childFactory:function(t){return t}},hc=function(e){Kg(t,e);function t(i,s){var r;r=e.call(this,i,s)||this;var n=r.handleExited.bind(eq(r));return r.state={contextValue:{isMounting:!0},handleExited:n,firstRender:!0},r}var a=t.prototype;return a.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},a.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(s,r){var n=r.children,o=r.handleExited,l=r.firstRender;return{children:l?aq(s,o):iq(s,n,o),firstRender:!1}},a.handleExited=function(s,r){var n=mc(this.props.children);s.key in n||(s.props.onExited&&s.props.onExited(r),this.mounted&&this.setState(function(o){var l=D({},o.children);return delete l[s.key],{children:l}}))},a.render=function(){var s=this.props,r=s.component,n=s.childFactory,o=U(s,["component","childFactory"]),l=this.state.contextValue,u=sq(this.state.children).map(n);return delete o.appear,delete o.enter,delete o.exit,r===null?zt.createElement(Un.Provider,{value:l},u):zt.createElement(Un.Provider,{value:l},zt.createElement(r,o,u))},t}(zt.Component);hc.propTypes={};hc.defaultProps=rq;const nq=hc;function oq(e){const{className:t,classes:a,pulsate:i=!1,rippleX:s,rippleY:r,rippleSize:n,in:o,onExited:l,timeout:u}=e,[f,y]=b.useState(!1),_=X(t,a.ripple,a.rippleVisible,i&&a.ripplePulsate),d={width:n,height:n,top:-(n/2)+r,left:-(n/2)+s},h=X(a.child,f&&a.childLeaving,i&&a.childPulsate);return!o&&!f&&y(!0),b.useEffect(()=>{if(!o&&l!=null){const c=setTimeout(l,u);return()=>{clearTimeout(c)}}},[l,o,u]),v.jsx("span",{className:_,style:d,children:v.jsx("span",{className:h})})}const lq=De("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Dt=lq,uq=["center","classes","className"];let Go=e=>e,cf,pf,ff,mf;const Hu=550,dq=80,cq=rc(cf||(cf=Go`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),pq=rc(pf||(pf=Go`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),fq=rc(ff||(ff=Go`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),mq=V("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),hq=V(oq,{name:"MuiTouchRipple",slot:"Ripple"})(mf||(mf=Go`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Dt.rippleVisible,cq,Hu,({theme:e})=>e.transitions.easing.easeInOut,Dt.ripplePulsate,({theme:e})=>e.transitions.duration.shorter,Dt.child,Dt.childLeaving,pq,Hu,({theme:e})=>e.transitions.easing.easeInOut,Dt.childPulsate,fq,({theme:e})=>e.transitions.easing.easeInOut),gq=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiTouchRipple"}),{center:s=!1,classes:r={},className:n}=i,o=U(i,uq),[l,u]=b.useState([]),f=b.useRef(0),y=b.useRef(null);b.useEffect(()=>{y.current&&(y.current(),y.current=null)},[l]);const _=b.useRef(!1),d=b.useRef(0),h=b.useRef(null),c=b.useRef(null);b.useEffect(()=>()=>{d.current&&clearTimeout(d.current)},[]);const x=b.useCallback(w=>{const{pulsate:q,rippleX:k,rippleY:T,rippleSize:C,cb:I}=w;u(P=>[...P,v.jsx(hq,{classes:{ripple:X(r.ripple,Dt.ripple),rippleVisible:X(r.rippleVisible,Dt.rippleVisible),ripplePulsate:X(r.ripplePulsate,Dt.ripplePulsate),child:X(r.child,Dt.child),childLeaving:X(r.childLeaving,Dt.childLeaving),childPulsate:X(r.childPulsate,Dt.childPulsate)},timeout:Hu,pulsate:q,rippleX:k,rippleY:T,rippleSize:C},f.current)]),f.current+=1,y.current=I},[r]),m=b.useCallback((w={},q={},k=()=>{})=>{const{pulsate:T=!1,center:C=s||q.pulsate,fakeElement:I=!1}=q;if((w==null?void 0:w.type)==="mousedown"&&_.current){_.current=!1;return}(w==null?void 0:w.type)==="touchstart"&&(_.current=!0);const P=I?null:c.current,F=P?P.getBoundingClientRect():{width:0,height:0,left:0,top:0};let B,O,j;if(C||w===void 0||w.clientX===0&&w.clientY===0||!w.clientX&&!w.touches)B=Math.round(F.width/2),O=Math.round(F.height/2);else{const{clientX:E,clientY:z}=w.touches&&w.touches.length>0?w.touches[0]:w;B=Math.round(E-F.left),O=Math.round(z-F.top)}if(C)j=Math.sqrt((2*F.width**2+F.height**2)/3),j%2===0&&(j+=1);else{const E=Math.max(Math.abs((P?P.clientWidth:0)-B),B)*2+2,z=Math.max(Math.abs((P?P.clientHeight:0)-O),O)*2+2;j=Math.sqrt(E**2+z**2)}w!=null&&w.touches?h.current===null&&(h.current=()=>{x({pulsate:T,rippleX:B,rippleY:O,rippleSize:j,cb:k})},d.current=setTimeout(()=>{h.current&&(h.current(),h.current=null)},dq)):x({pulsate:T,rippleX:B,rippleY:O,rippleSize:j,cb:k})},[s,x]),p=b.useCallback(()=>{m({},{pulsate:!0})},[m]),g=b.useCallback((w,q)=>{if(clearTimeout(d.current),(w==null?void 0:w.type)==="touchend"&&h.current){h.current(),h.current=null,d.current=setTimeout(()=>{g(w,q)});return}h.current=null,u(k=>k.length>0?k.slice(1):k),y.current=q},[]);return b.useImperativeHandle(a,()=>({pulsate:p,start:m,stop:g}),[p,m,g]),v.jsx(mq,D({className:X(Dt.root,r.root,n),ref:c},o,{children:v.jsx(nq,{component:null,exit:!0,children:l})}))}),yq=gq;function _q(e){return Ae("MuiButtonBase",e)}const vq=De("MuiButtonBase",["root","disabled","focusVisible"]),bq=vq,wq=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],Tq=e=>{const{disabled:t,focusVisible:a,focusVisibleClassName:i,classes:s}=e,n=Ne({root:["root",t&&"disabled",a&&"focusVisible"]},_q,s);return a&&i&&(n.root+=` ${i}`),n},qq=V("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${bq.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),xq=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiButtonBase"}),{action:s,centerRipple:r=!1,children:n,className:o,component:l="button",disabled:u=!1,disableRipple:f=!1,disableTouchRipple:y=!1,focusRipple:_=!1,LinkComponent:d="a",onBlur:h,onClick:c,onContextMenu:x,onDragLeave:m,onFocus:p,onFocusVisible:g,onKeyDown:w,onKeyUp:q,onMouseDown:k,onMouseLeave:T,onMouseUp:C,onTouchEnd:I,onTouchMove:P,onTouchStart:F,tabIndex:B=0,TouchRippleProps:O,touchRippleRef:j,type:E}=i,z=U(i,wq),M=b.useRef(null),S=b.useRef(null),R=Qe(S,j),{isFocusVisibleRef:N,onFocus:K,onBlur:G,ref:ge}=vg(),[se,oe]=b.useState(!1);u&&se&&oe(!1),b.useImperativeHandle(s,()=>({focusVisible:()=>{oe(!0),M.current.focus()}}),[]);const[Z,Ue]=b.useState(!1);b.useEffect(()=>{Ue(!0)},[]);const aa=Z&&!f&&!u;b.useEffect(()=>{se&&_&&!f&&Z&&S.current.pulsate()},[f,_,se,Z]);function Ie(W,$,ce=y){return ri(Re=>($&&$(Re),!ce&&S.current&&S.current[W](Re),!0))}const ot=Ie("start",k),ae=Ie("stop",x),H=Ie("stop",m),pe=Ie("stop",C),ye=Ie("stop",W=>{se&&W.preventDefault(),T&&T(W)}),Je=Ie("start",F),lt=Ie("stop",I),de=Ie("stop",P),Et=Ie("stop",W=>{G(W),N.current===!1&&oe(!1),h&&h(W)},!1),_a=ri(W=>{M.current||(M.current=W.currentTarget),K(W),N.current===!0&&(oe(!0),g&&g(W)),p&&p(W)}),He=()=>{const W=M.current;return l&&l!=="button"&&!(W.tagName==="A"&&W.href)},Oe=b.useRef(!1),Ft=ri(W=>{_&&!Oe.current&&se&&S.current&&W.key===" "&&(Oe.current=!0,S.current.stop(W,()=>{S.current.start(W)})),W.target===W.currentTarget&&He()&&W.key===" "&&W.preventDefault(),w&&w(W),W.target===W.currentTarget&&He()&&W.key==="Enter"&&!u&&(W.preventDefault(),c&&c(W))}),be=ri(W=>{_&&W.key===" "&&S.current&&se&&!W.defaultPrevented&&(Oe.current=!1,S.current.stop(W,()=>{S.current.pulsate(W)})),q&&q(W),c&&W.target===W.currentTarget&&He()&&W.key===" "&&!W.defaultPrevented&&c(W)});let ia=l;ia==="button"&&(z.href||z.to)&&(ia=d);const Nt={};ia==="button"?(Nt.type=E===void 0?"button":E,Nt.disabled=u):(!z.href&&!z.to&&(Nt.role="button"),u&&(Nt["aria-disabled"]=u));const sa=Qe(a,ge,M),va=D({},i,{centerRipple:r,component:l,disabled:u,disableRipple:f,disableTouchRipple:y,focusRipple:_,tabIndex:B,focusVisible:se}),le=Tq(va);return v.jsxs(qq,D({as:ia,className:X(le.root,o),ownerState:va,onBlur:Et,onClick:c,onContextMenu:ae,onFocus:_a,onKeyDown:Ft,onKeyUp:be,onMouseDown:ot,onMouseLeave:ye,onMouseUp:pe,onDragLeave:H,onTouchEnd:lt,onTouchMove:de,onTouchStart:Je,ref:sa,tabIndex:u?-1:B,type:E},Nt,z,{children:[n,aa?v.jsx(yq,D({ref:R,center:r},O)):null]}))}),Dq=xq;function kq(e){return Ae("MuiDivider",e)}const Cq=De("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),hf=Cq,Sq=["absolute","children","className","component","flexItem","light","orientation","role","textAlign","variant"],Pq=e=>{const{absolute:t,children:a,classes:i,flexItem:s,light:r,orientation:n,textAlign:o,variant:l}=e;return Ne({root:["root",t&&"absolute",l,r&&"light",n==="vertical"&&"vertical",s&&"flexItem",a&&"withChildren",a&&n==="vertical"&&"withChildrenVertical",o==="right"&&n!=="vertical"&&"textAlignRight",o==="left"&&n!=="vertical"&&"textAlignLeft"],wrapper:["wrapper",n==="vertical"&&"wrapperVertical"]},kq,i)},Aq=V("div",{name:"MuiDivider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.absolute&&t.absolute,t[a.variant],a.light&&t.light,a.orientation==="vertical"&&t.vertical,a.flexItem&&t.flexItem,a.children&&t.withChildren,a.children&&a.orientation==="vertical"&&t.withChildrenVertical,a.textAlign==="right"&&a.orientation!=="vertical"&&t.textAlignRight,a.textAlign==="left"&&a.orientation!=="vertical"&&t.textAlignLeft]}})(({theme:e,ownerState:t})=>D({margin:0,flexShrink:0,borderWidth:0,borderStyle:"solid",borderColor:(e.vars||e).palette.divider,borderBottomWidth:"thin"},t.absolute&&{position:"absolute",bottom:0,left:0,width:"100%"},t.light&&{borderColor:e.vars?`rgba(${e.vars.palette.dividerChannel} / 0.08)`:ni(e.palette.divider,.08)},t.variant==="inset"&&{marginLeft:72},t.variant==="middle"&&t.orientation==="horizontal"&&{marginLeft:e.spacing(2),marginRight:e.spacing(2)},t.variant==="middle"&&t.orientation==="vertical"&&{marginTop:e.spacing(1),marginBottom:e.spacing(1)},t.orientation==="vertical"&&{height:"100%",borderBottomWidth:0,borderRightWidth:"thin"},t.flexItem&&{alignSelf:"stretch",height:"auto"}),({ownerState:e})=>D({},e.children&&{display:"flex",whiteSpace:"nowrap",textAlign:"center",border:0,"&::before, &::after":{content:'""',alignSelf:"center"}}),({theme:e,ownerState:t})=>D({},t.children&&t.orientation!=="vertical"&&{"&::before, &::after":{width:"100%",borderTop:`thin solid ${(e.vars||e).palette.divider}`}}),({theme:e,ownerState:t})=>D({},t.children&&t.orientation==="vertical"&&{flexDirection:"column","&::before, &::after":{height:"100%",borderLeft:`thin solid ${(e.vars||e).palette.divider}`}}),({ownerState:e})=>D({},e.textAlign==="right"&&e.orientation!=="vertical"&&{"&::before":{width:"90%"},"&::after":{width:"10%"}},e.textAlign==="left"&&e.orientation!=="vertical"&&{"&::before":{width:"10%"},"&::after":{width:"90%"}})),Iq=V("span",{name:"MuiDivider",slot:"Wrapper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.wrapper,a.orientation==="vertical"&&t.wrapperVertical]}})(({theme:e,ownerState:t})=>D({display:"inline-block",paddingLeft:`calc(${e.spacing(1)} * 1.2)`,paddingRight:`calc(${e.spacing(1)} * 1.2)`},t.orientation==="vertical"&&{paddingTop:`calc(${e.spacing(1)} * 1.2)`,paddingBottom:`calc(${e.spacing(1)} * 1.2)`})),Gg=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiDivider"}),{absolute:s=!1,children:r,className:n,component:o=r?"div":"hr",flexItem:l=!1,light:u=!1,orientation:f="horizontal",role:y=o!=="hr"?"separator":void 0,textAlign:_="center",variant:d="fullWidth"}=i,h=U(i,Sq),c=D({},i,{absolute:s,component:o,flexItem:l,light:u,orientation:f,role:y,textAlign:_,variant:d}),x=Pq(c);return v.jsx(Aq,D({as:o,className:X(x.root,n),role:y,ref:a,ownerState:c},h,{children:r?v.jsx(Iq,{className:x.wrapper,ownerState:c,children:r}):null}))});Gg.muiSkipListHighlight=!0;const gf=Gg,Rq=De("MuiListItemIcon",["root","alignItemsFlexStart"]),yf=Rq,jq=De("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]),_f=jq;function Eq(e){return Ae("MuiMenuItem",e)}const Fq=De("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),Ts=Fq,Nq=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex","className"],Lq=(e,t)=>{const{ownerState:a}=e;return[t.root,a.dense&&t.dense,a.divider&&t.divider,!a.disableGutters&&t.gutters]},Oq=e=>{const{disabled:t,dense:a,divider:i,disableGutters:s,selected:r,classes:n}=e,l=Ne({root:["root",a&&"dense",t&&"disabled",!s&&"gutters",i&&"divider",r&&"selected"]},Eq,n);return D({},n,l)},Mq=V(Dq,{shouldForwardProp:e=>ta(e)||e==="classes",name:"MuiMenuItem",slot:"Root",overridesResolver:Lq})(({theme:e,ownerState:t})=>D({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Ts.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:ni(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Ts.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:ni(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Ts.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:ni(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:ni(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${Ts.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Ts.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`& + .${hf.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${hf.inset}`]:{marginLeft:52},[`& .${_f.root}`]:{marginTop:0,marginBottom:0},[`& .${_f.inset}`]:{paddingLeft:36},[`& .${yf.root}`]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&D({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${yf.root} svg`]:{fontSize:"1.25rem"}}))),Bq=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiMenuItem"}),{autoFocus:s=!1,component:r="li",dense:n=!1,divider:o=!1,disableGutters:l=!1,focusVisibleClassName:u,role:f="menuitem",tabIndex:y,className:_}=i,d=U(i,Nq),h=b.useContext($u),c=b.useMemo(()=>({dense:n||h.dense||!1,disableGutters:l}),[h.dense,n,l]),x=b.useRef(null);Wa(()=>{s&&x.current&&x.current.focus()},[s]);const m=D({},i,{dense:c.dense,divider:o,disableGutters:l}),p=Oq(i),g=Qe(x,a);let w;return i.disabled||(w=y!==void 0?y:-1),v.jsx($u.Provider,{value:c,children:v.jsx(Mq,D({ref:g,role:f,tabIndex:w,component:r,focusVisibleClassName:X(p.focusVisible,u),className:X(p.root,_)},d,{ownerState:m,classes:p}))})}),vf=Bq;function bf(e){return e!=null&&!(Array.isArray(e)&&e.length===0)}function Hn(e,t=!1){return e&&(bf(e.value)&&e.value!==""||t&&bf(e.defaultValue)&&e.defaultValue!=="")}function zq(e){return e.startAdornment}function $q(e){return Ae("MuiFormControl",e)}De("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const Wq=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],Uq=e=>{const{classes:t,margin:a,fullWidth:i}=e,s={root:["root",a!=="none"&&`margin${qe(a)}`,i&&"fullWidth"]};return Ne(s,$q,t)},Hq=V("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>D({},t.root,t[`margin${qe(e.margin)}`],e.fullWidth&&t.fullWidth)})(({ownerState:e})=>D({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},e.margin==="normal"&&{marginTop:16,marginBottom:8},e.margin==="dense"&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"})),Vq=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiFormControl"}),{children:s,className:r,color:n="primary",component:o="div",disabled:l=!1,error:u=!1,focused:f,fullWidth:y=!1,hiddenLabel:_=!1,margin:d="none",required:h=!1,size:c="medium",variant:x="outlined"}=i,m=U(i,Wq),p=D({},i,{color:n,component:o,disabled:l,error:u,fullWidth:y,hiddenLabel:_,margin:d,required:h,size:c,variant:x}),g=Uq(p),[w,q]=b.useState(()=>{let O=!1;return s&&b.Children.forEach(s,j=>{if(!on(j,["Input","Select"]))return;const E=on(j,["Select"])?j.props.input:j;E&&zq(E.props)&&(O=!0)}),O}),[k,T]=b.useState(()=>{let O=!1;return s&&b.Children.forEach(s,j=>{on(j,["Input","Select"])&&(Hn(j.props,!0)||Hn(j.props.inputProps,!0))&&(O=!0)}),O}),[C,I]=b.useState(!1);l&&C&&I(!1);const P=f!==void 0&&!l?f:C;let F;const B=b.useMemo(()=>({adornedStart:w,setAdornedStart:q,color:n,disabled:l,error:u,filled:k,focused:P,fullWidth:y,hiddenLabel:_,size:c,onBlur:()=>{I(!1)},onEmpty:()=>{T(!1)},onFilled:()=>{T(!0)},onFocus:()=>{I(!0)},registerEffect:F,required:h,variant:x}),[w,n,l,u,k,P,y,_,F,h,c,x]);return v.jsx(pc.Provider,{value:B,children:v.jsx(Hq,D({as:o,ownerState:p,className:X(g.root,r),ref:a},m,{children:s}))})}),Kq=Vq;function fr(e){return typeof e=="string"}function Gq(e,t,a){return e===void 0||fr(e)?t:D({},t,{ownerState:D({},t.ownerState,a)})}const Xq={disableDefaultClasses:!1},Qq=b.createContext(Xq);function Jq(e){const{disableDefaultClasses:t}=b.useContext(Qq);return a=>t?"":e(a)}function Yq(e,t=[]){if(e===void 0)return{};const a={};return Object.keys(e).filter(i=>i.match(/^on[A-Z]/)&&typeof e[i]=="function"&&!t.includes(i)).forEach(i=>{a[i]=e[i]}),a}function Vu(e,t,a){return typeof e=="function"?e(t,a):e}function wf(e){if(e===void 0)return{};const t={};return Object.keys(e).filter(a=>!(a.match(/^on[A-Z]/)&&typeof e[a]=="function")).forEach(a=>{t[a]=e[a]}),t}function Zq(e){const{getSlotProps:t,additionalProps:a,externalSlotProps:i,externalForwardedProps:s,className:r}=e;if(!t){const d=X(s==null?void 0:s.className,i==null?void 0:i.className,r,a==null?void 0:a.className),h=D({},a==null?void 0:a.style,s==null?void 0:s.style,i==null?void 0:i.style),c=D({},a,s,i);return d.length>0&&(c.className=d),Object.keys(h).length>0&&(c.style=h),{props:c,internalRef:void 0}}const n=Yq(D({},s,i)),o=wf(i),l=wf(s),u=t(n),f=X(u==null?void 0:u.className,a==null?void 0:a.className,r,s==null?void 0:s.className,i==null?void 0:i.className),y=D({},u==null?void 0:u.style,a==null?void 0:a.style,s==null?void 0:s.style,i==null?void 0:i.style),_=D({},u,a,l,o);return f.length>0&&(_.className=f),Object.keys(y).length>0&&(_.style=y),{props:_,internalRef:u.ref}}const ex=["elementType","externalSlotProps","ownerState","skipResolvingSlotProps"];function as(e){var t;const{elementType:a,externalSlotProps:i,ownerState:s,skipResolvingSlotProps:r=!1}=e,n=U(e,ex),o=r?{}:Vu(i,s),{props:l,internalRef:u}=Zq(D({},n,{externalSlotProps:o})),f=Qe(u,o==null?void 0:o.ref,(t=e.additionalProps)==null?void 0:t.ref);return Gq(a,D({},l,{ref:f}),s)}function tx(e){return Ae("MuiList",e)}De("MuiList",["root","padding","dense","subheader"]);const ax=["children","className","component","dense","disablePadding","subheader"],ix=e=>{const{classes:t,disablePadding:a,dense:i,subheader:s}=e;return Ne({root:["root",!a&&"padding",i&&"dense",s&&"subheader"]},tx,t)},sx=V("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,!a.disablePadding&&t.padding,a.dense&&t.dense,a.subheader&&t.subheader]}})(({ownerState:e})=>D({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0})),rx=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiList"}),{children:s,className:r,component:n="ul",dense:o=!1,disablePadding:l=!1,subheader:u}=i,f=U(i,ax),y=b.useMemo(()=>({dense:o}),[o]),_=D({},i,{component:n,dense:o,disablePadding:l}),d=ix(_);return v.jsx($u.Provider,{value:y,children:v.jsxs(sx,D({as:n,className:X(d.root,r),ref:a,ownerState:_},f,{children:[u,s]}))})}),nx=rx,ox=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function Pl(e,t,a){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:a?null:e.firstChild}function Tf(e,t,a){return e===t?a?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:a?null:e.lastChild}function Xg(e,t){if(t===void 0)return!0;let a=e.innerText;return a===void 0&&(a=e.textContent),a=a.trim().toLowerCase(),a.length===0?!1:t.repeating?a[0]===t.keys[0]:a.indexOf(t.keys.join(""))===0}function qs(e,t,a,i,s,r){let n=!1,o=s(e,t,t?a:!1);for(;o;){if(o===e.firstChild){if(n)return!1;n=!0}const l=i?!1:o.disabled||o.getAttribute("aria-disabled")==="true";if(!o.hasAttribute("tabindex")||!Xg(o,r)||l)o=s(e,o,a);else return o.focus(),!0}return!1}const lx=b.forwardRef(function(t,a){const{actions:i,autoFocus:s=!1,autoFocusItem:r=!1,children:n,className:o,disabledItemsFocusable:l=!1,disableListWrap:u=!1,onKeyDown:f,variant:y="selectedMenu"}=t,_=U(t,ox),d=b.useRef(null),h=b.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Wa(()=>{s&&d.current.focus()},[s]),b.useImperativeHandle(i,()=>({adjustStyleForScrollbar:(g,w)=>{const q=!d.current.style.width;if(g.clientHeight<d.current.clientHeight&&q){const k=`${bg(mt(g))}px`;d.current.style[w.direction==="rtl"?"paddingLeft":"paddingRight"]=k,d.current.style.width=`calc(100% + ${k})`}return d.current}}),[]);const c=g=>{const w=d.current,q=g.key,k=mt(w).activeElement;if(q==="ArrowDown")g.preventDefault(),qs(w,k,u,l,Pl);else if(q==="ArrowUp")g.preventDefault(),qs(w,k,u,l,Tf);else if(q==="Home")g.preventDefault(),qs(w,null,u,l,Pl);else if(q==="End")g.preventDefault(),qs(w,null,u,l,Tf);else if(q.length===1){const T=h.current,C=q.toLowerCase(),I=performance.now();T.keys.length>0&&(I-T.lastTime>500?(T.keys=[],T.repeating=!0,T.previousKeyMatched=!0):T.repeating&&C!==T.keys[0]&&(T.repeating=!1)),T.lastTime=I,T.keys.push(C);const P=k&&!T.repeating&&Xg(k,T);T.previousKeyMatched&&(P||qs(w,k,!1,l,Pl,T))?g.preventDefault():T.previousKeyMatched=!1}f&&f(g)},x=Qe(d,a);let m=-1;b.Children.forEach(n,(g,w)=>{if(!b.isValidElement(g)){m===w&&(m+=1,m>=n.length&&(m=-1));return}g.props.disabled||(y==="selectedMenu"&&g.props.selected||m===-1)&&(m=w),m===w&&(g.props.disabled||g.props.muiSkipListHighlight||g.type.muiSkipListHighlight)&&(m+=1,m>=n.length&&(m=-1))});const p=b.Children.map(n,(g,w)=>{if(w===m){const q={};return r&&(q.autoFocus=!0),g.props.tabIndex===void 0&&y==="selectedMenu"&&(q.tabIndex=0),b.cloneElement(g,q)}return g});return v.jsx(nx,D({role:"menu",ref:x,className:o,onKeyDown:c,tabIndex:s?0:-1},_,{children:p}))}),ux=lx,dx=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function cx(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?e.contentEditable==="true"||(e.nodeName==="AUDIO"||e.nodeName==="VIDEO"||e.nodeName==="DETAILS")&&e.getAttribute("tabindex")===null?0:e.tabIndex:t}function px(e){if(e.tagName!=="INPUT"||e.type!=="radio"||!e.name)return!1;const t=i=>e.ownerDocument.querySelector(`input[type="radio"]${i}`);let a=t(`[name="${e.name}"]:checked`);return a||(a=t(`[name="${e.name}"]`)),a!==e}function fx(e){return!(e.disabled||e.tagName==="INPUT"&&e.type==="hidden"||px(e))}function mx(e){const t=[],a=[];return Array.from(e.querySelectorAll(dx)).forEach((i,s)=>{const r=cx(i);r===-1||!fx(i)||(r===0?t.push(i):a.push({documentOrder:s,tabIndex:r,node:i}))}),a.sort((i,s)=>i.tabIndex===s.tabIndex?i.documentOrder-s.documentOrder:i.tabIndex-s.tabIndex).map(i=>i.node).concat(t)}function hx(){return!0}function gx(e){const{children:t,disableAutoFocus:a=!1,disableEnforceFocus:i=!1,disableRestoreFocus:s=!1,getTabbable:r=mx,isEnabled:n=hx,open:o}=e,l=b.useRef(!1),u=b.useRef(null),f=b.useRef(null),y=b.useRef(null),_=b.useRef(null),d=b.useRef(!1),h=b.useRef(null),c=Qe(t.ref,h),x=b.useRef(null);b.useEffect(()=>{!o||!h.current||(d.current=!a)},[a,o]),b.useEffect(()=>{if(!o||!h.current)return;const g=mt(h.current);return h.current.contains(g.activeElement)||(h.current.hasAttribute("tabIndex")||h.current.setAttribute("tabIndex","-1"),d.current&&h.current.focus()),()=>{s||(y.current&&y.current.focus&&(l.current=!0,y.current.focus()),y.current=null)}},[o]),b.useEffect(()=>{if(!o||!h.current)return;const g=mt(h.current),w=T=>{const{current:C}=h;if(C!==null){if(!g.hasFocus()||i||!n()||l.current){l.current=!1;return}if(!C.contains(g.activeElement)){if(T&&_.current!==T.target||g.activeElement!==_.current)_.current=null;else if(_.current!==null)return;if(!d.current)return;let F=[];if((g.activeElement===u.current||g.activeElement===f.current)&&(F=r(h.current)),F.length>0){var I,P;const B=!!((I=x.current)!=null&&I.shiftKey&&((P=x.current)==null?void 0:P.key)==="Tab"),O=F[0],j=F[F.length-1];typeof O!="string"&&typeof j!="string"&&(B?j.focus():O.focus())}else C.focus()}}},q=T=>{x.current=T,!(i||!n()||T.key!=="Tab")&&g.activeElement===h.current&&T.shiftKey&&(l.current=!0,f.current&&f.current.focus())};g.addEventListener("focusin",w),g.addEventListener("keydown",q,!0);const k=setInterval(()=>{g.activeElement&&g.activeElement.tagName==="BODY"&&w(null)},50);return()=>{clearInterval(k),g.removeEventListener("focusin",w),g.removeEventListener("keydown",q,!0)}},[a,i,s,n,o,r]);const m=g=>{y.current===null&&(y.current=g.relatedTarget),d.current=!0,_.current=g.target;const w=t.props.onFocus;w&&w(g)},p=g=>{y.current===null&&(y.current=g.relatedTarget),d.current=!0};return v.jsxs(b.Fragment,{children:[v.jsx("div",{tabIndex:o?0:-1,onFocus:p,ref:u,"data-testid":"sentinelStart"}),b.cloneElement(t,{ref:c,onFocus:m}),v.jsx("div",{tabIndex:o?0:-1,onFocus:p,ref:f,"data-testid":"sentinelEnd"})]})}function yx(e){return typeof e=="function"?e():e}const _x=b.forwardRef(function(t,a){const{children:i,container:s,disablePortal:r=!1}=t,[n,o]=b.useState(null),l=Qe(b.isValidElement(i)?i.ref:null,a);if(Wa(()=>{r||o(yx(s)||document.body)},[s,r]),Wa(()=>{if(n&&!r)return zn(a,n),()=>{zn(a,null)}},[a,n,r]),r){if(b.isValidElement(i)){const u={ref:l};return b.cloneElement(i,u)}return v.jsx(b.Fragment,{children:i})}return v.jsx(b.Fragment,{children:n&&lo.createPortal(i,n)})});function vx(e){const t=mt(e);return t.body===e?ea(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}function Us(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function qf(e){return parseInt(ea(e).getComputedStyle(e).paddingRight,10)||0}function bx(e){const a=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(e.tagName)!==-1,i=e.tagName==="INPUT"&&e.getAttribute("type")==="hidden";return a||i}function xf(e,t,a,i,s){const r=[t,a,...i];[].forEach.call(e.children,n=>{const o=r.indexOf(n)===-1,l=!bx(n);o&&l&&Us(n,s)})}function Al(e,t){let a=-1;return e.some((i,s)=>t(i)?(a=s,!0):!1),a}function wx(e,t){const a=[],i=e.container;if(!t.disableScrollLock){if(vx(i)){const n=bg(mt(i));a.push({value:i.style.paddingRight,property:"padding-right",el:i}),i.style.paddingRight=`${qf(i)+n}px`;const o=mt(i).querySelectorAll(".mui-fixed");[].forEach.call(o,l=>{a.push({value:l.style.paddingRight,property:"padding-right",el:l}),l.style.paddingRight=`${qf(l)+n}px`})}let r;if(i.parentNode instanceof DocumentFragment)r=mt(i).body;else{const n=i.parentElement,o=ea(i);r=(n==null?void 0:n.nodeName)==="HTML"&&o.getComputedStyle(n).overflowY==="scroll"?n:i}a.push({value:r.style.overflow,property:"overflow",el:r},{value:r.style.overflowX,property:"overflow-x",el:r},{value:r.style.overflowY,property:"overflow-y",el:r}),r.style.overflow="hidden"}return()=>{a.forEach(({value:r,el:n,property:o})=>{r?n.style.setProperty(o,r):n.style.removeProperty(o)})}}function Tx(e){const t=[];return[].forEach.call(e.children,a=>{a.getAttribute("aria-hidden")==="true"&&t.push(a)}),t}class qx{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(t,a){let i=this.modals.indexOf(t);if(i!==-1)return i;i=this.modals.length,this.modals.push(t),t.modalRef&&Us(t.modalRef,!1);const s=Tx(a);xf(a,t.mount,t.modalRef,s,!0);const r=Al(this.containers,n=>n.container===a);return r!==-1?(this.containers[r].modals.push(t),i):(this.containers.push({modals:[t],container:a,restore:null,hiddenSiblings:s}),i)}mount(t,a){const i=Al(this.containers,r=>r.modals.indexOf(t)!==-1),s=this.containers[i];s.restore||(s.restore=wx(s,a))}remove(t,a=!0){const i=this.modals.indexOf(t);if(i===-1)return i;const s=Al(this.containers,n=>n.modals.indexOf(t)!==-1),r=this.containers[s];if(r.modals.splice(r.modals.indexOf(t),1),this.modals.splice(i,1),r.modals.length===0)r.restore&&r.restore(),t.modalRef&&Us(t.modalRef,a),xf(r.container,t.mount,t.modalRef,r.hiddenSiblings,!1),this.containers.splice(s,1);else{const n=r.modals[r.modals.length-1];n.modalRef&&Us(n.modalRef,!1)}return i}isTopModal(t){return this.modals.length>0&&this.modals[this.modals.length-1]===t}}function xx(e){return Ae("MuiModal",e)}De("MuiModal",["root","hidden","backdrop"]);const Dx=["children","closeAfterTransition","container","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onKeyDown","open","onTransitionEnter","onTransitionExited","slotProps","slots"],kx=e=>{const{open:t,exited:a}=e;return Ne({root:["root",!t&&a&&"hidden"],backdrop:["backdrop"]},Jq(xx))};function Cx(e){return typeof e=="function"?e():e}function Sx(e){return e?e.props.hasOwnProperty("in"):!1}const Px=new qx,Ax=b.forwardRef(function(t,a){var i,s;const{children:r,closeAfterTransition:n=!1,container:o,disableAutoFocus:l=!1,disableEnforceFocus:u=!1,disableEscapeKeyDown:f=!1,disablePortal:y=!1,disableRestoreFocus:_=!1,disableScrollLock:d=!1,hideBackdrop:h=!1,keepMounted:c=!1,manager:x=Px,onBackdropClick:m,onClose:p,onKeyDown:g,open:w,onTransitionEnter:q,onTransitionExited:k,slotProps:T={},slots:C={}}=t,I=U(t,Dx),P=x,[F,B]=b.useState(!w),O=b.useRef({}),j=b.useRef(null),E=b.useRef(null),z=Qe(E,a),M=Sx(r),S=(i=t["aria-hidden"])!=null?i:!0,R=()=>mt(j.current),N=()=>(O.current.modalRef=E.current,O.current.mountNode=j.current,O.current),K=()=>{P.mount(N(),{disableScrollLock:d}),E.current&&(E.current.scrollTop=0)},G=ri(()=>{const de=Cx(o)||R().body;P.add(N(),de),E.current&&K()}),ge=b.useCallback(()=>P.isTopModal(N()),[P]),se=ri(de=>{j.current=de,!(!de||!E.current)&&(w&&ge()?K():Us(E.current,S))}),oe=b.useCallback(()=>{P.remove(N(),S)},[P,S]);b.useEffect(()=>()=>{oe()},[oe]),b.useEffect(()=>{w?G():(!M||!n)&&oe()},[w,oe,M,n,G]);const Z=D({},t,{closeAfterTransition:n,disableAutoFocus:l,disableEnforceFocus:u,disableEscapeKeyDown:f,disablePortal:y,disableRestoreFocus:_,disableScrollLock:d,exited:F,hideBackdrop:h,keepMounted:c}),Ue=kx(Z),aa=()=>{B(!1),q&&q()},Ie=()=>{B(!0),k&&k(),n&&oe()},ot=de=>{de.target===de.currentTarget&&(m&&m(de),p&&p(de,"backdropClick"))},ae=de=>{g&&g(de),!(de.key!=="Escape"||!ge())&&(f||(de.stopPropagation(),p&&p(de,"escapeKeyDown")))},H={};r.props.tabIndex===void 0&&(H.tabIndex="-1"),M&&(H.onEnter=Nu(aa,r.props.onEnter),H.onExited=Nu(Ie,r.props.onExited));const pe=(s=C.root)!=null?s:"div",ye=as({elementType:pe,externalSlotProps:T.root,externalForwardedProps:I,additionalProps:{ref:z,role:"presentation",onKeyDown:ae},className:Ue.root,ownerState:Z}),Je=C.backdrop,lt=as({elementType:Je,externalSlotProps:T.backdrop,additionalProps:{"aria-hidden":!0,onClick:ot,open:w},className:Ue.backdrop,ownerState:Z});return!c&&!w&&(!M||F)?null:v.jsx(_x,{ref:se,container:o,disablePortal:y,children:v.jsxs(pe,D({},ye,{children:[!h&&Je?v.jsx(Je,D({},lt)):null,v.jsx(gx,{disableEnforceFocus:u,disableAutoFocus:l,disableRestoreFocus:_,isEnabled:ge,open:w,children:b.cloneElement(r,H)})]}))})}),Ix=["onChange","maxRows","minRows","style","value"];function Vr(e){return parseInt(e,10)||0}const Rx={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}};function Df(e){return e==null||Object.keys(e).length===0||e.outerHeightStyle===0&&!e.overflow}const jx=b.forwardRef(function(t,a){const{onChange:i,maxRows:s,minRows:r=1,style:n,value:o}=t,l=U(t,Ix),{current:u}=b.useRef(o!=null),f=b.useRef(null),y=Qe(a,f),_=b.useRef(null),d=b.useRef(0),[h,c]=b.useState({outerHeightStyle:0}),x=b.useCallback(()=>{const q=f.current,T=ea(q).getComputedStyle(q);if(T.width==="0px")return{outerHeightStyle:0};const C=_.current;C.style.width=T.width,C.value=q.value||t.placeholder||"x",C.value.slice(-1)===`
`&&(C.value+=" ");const I=T.boxSizing,P=Vr(T.paddingBottom)+Vr(T.paddingTop),F=Vr(T.borderBottomWidth)+Vr(T.borderTopWidth),B=C.scrollHeight;C.value="x";const O=C.scrollHeight;let j=B;r&&(j=Math.max(Number(r)*O,j)),s&&(j=Math.min(Number(s)*O,j)),j=Math.max(j,O);const E=j+(I==="border-box"?P+F:0),z=Math.abs(j-B)<=1;return{outerHeightStyle:E,overflow:z}},[s,r,t.placeholder]),m=(q,k)=>{const{outerHeightStyle:T,overflow:C}=k;return d.current<20&&(T>0&&Math.abs((q.outerHeightStyle||0)-T)>1||q.overflow!==C)?(d.current+=1,{overflow:C,outerHeightStyle:T}):q},p=b.useCallback(()=>{const q=x();Df(q)||c(k=>m(k,q))},[x]),g=()=>{const q=x();Df(q)||lo.flushSync(()=>{c(k=>m(k,q))})};b.useEffect(()=>{const q=To(()=>{d.current=0,f.current&&g()});let k;const T=f.current,C=ea(T);return C.addEventListener("resize",q),typeof ResizeObserver<"u"&&(k=new ResizeObserver(q),k.observe(T)),()=>{q.clear(),C.removeEventListener("resize",q),k&&k.disconnect()}}),Wa(()=>{p()}),b.useEffect(()=>{d.current=0},[o]);const w=q=>{d.current=0,u||p(),i&&i(q)};return v.jsxs(b.Fragment,{children:[v.jsx("textarea",D({value:o,onChange:w,ref:y,rows:r,style:D({height:h.outerHeightStyle,overflow:h.overflow?"hidden":void 0},n)},l)),v.jsx("textarea",{"aria-hidden":!0,className:t.className,readOnly:!0,ref:_,tabIndex:-1,style:D({},Rx.shadow,n,{paddingTop:0,paddingBottom:0})})]})}),gc=e=>e.scrollTop;function is(e,t){var a,i;const{timeout:s,easing:r,style:n={}}=e;return{duration:(a=n.transitionDuration)!=null?a:typeof s=="number"?s:s[t.mode]||0,easing:(i=n.transitionTimingFunction)!=null?i:typeof r=="object"?r[t.mode]:r,delay:n.transitionDelay}}const Ex=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Ku(e){return`scale(${e}, ${e**2})`}const Fx={entering:{opacity:1,transform:Ku(1)},entered:{opacity:1,transform:"none"}},Il=typeof navigator<"u"&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),Qg=b.forwardRef(function(t,a){const{addEndListener:i,appear:s=!0,children:r,easing:n,in:o,onEnter:l,onEntered:u,onEntering:f,onExit:y,onExited:_,onExiting:d,style:h,timeout:c="auto",TransitionComponent:x=fc}=t,m=U(t,Ex),p=b.useRef(),g=b.useRef(),w=xr(),q=b.useRef(null),k=Qe(q,r.ref,a),T=E=>z=>{if(E){const M=q.current;z===void 0?E(M):E(M,z)}},C=T(f),I=T((E,z)=>{gc(E);const{duration:M,delay:S,easing:R}=is({style:h,timeout:c,easing:n},{mode:"enter"});let N;c==="auto"?(N=w.transitions.getAutoHeightDuration(E.clientHeight),g.current=N):N=M,E.style.transition=[w.transitions.create("opacity",{duration:N,delay:S}),w.transitions.create("transform",{duration:Il?N:N*.666,delay:S,easing:R})].join(","),l&&l(E,z)}),P=T(u),F=T(d),B=T(E=>{const{duration:z,delay:M,easing:S}=is({style:h,timeout:c,easing:n},{mode:"exit"});let R;c==="auto"?(R=w.transitions.getAutoHeightDuration(E.clientHeight),g.current=R):R=z,E.style.transition=[w.transitions.create("opacity",{duration:R,delay:M}),w.transitions.create("transform",{duration:Il?R:R*.666,delay:Il?M:M||R*.333,easing:S})].join(","),E.style.opacity=0,E.style.transform=Ku(.75),y&&y(E)}),O=T(_),j=E=>{c==="auto"&&(p.current=setTimeout(E,g.current||0)),i&&i(q.current,E)};return b.useEffect(()=>()=>{clearTimeout(p.current)},[]),v.jsx(x,D({appear:s,in:o,nodeRef:q,onEnter:I,onEntered:P,onEntering:C,onExit:B,onExited:O,onExiting:F,addEndListener:j,timeout:c==="auto"?null:c},m,{children:(E,z)=>b.cloneElement(r,D({style:D({opacity:0,transform:Ku(.75),visibility:E==="exited"&&!o?"hidden":void 0},Fx[E],h,r.props.style),ref:k},z))}))});Qg.muiSupportAuto=!0;const Nx=Qg,Lx=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],Ox={entering:{opacity:1},entered:{opacity:1}},Mx=b.forwardRef(function(t,a){const i=xr(),s={enter:i.transitions.duration.enteringScreen,exit:i.transitions.duration.leavingScreen},{addEndListener:r,appear:n=!0,children:o,easing:l,in:u,onEnter:f,onEntered:y,onEntering:_,onExit:d,onExited:h,onExiting:c,style:x,timeout:m=s,TransitionComponent:p=fc}=t,g=U(t,Lx),w=b.useRef(null),q=Qe(w,o.ref,a),k=j=>E=>{if(j){const z=w.current;E===void 0?j(z):j(z,E)}},T=k(_),C=k((j,E)=>{gc(j);const z=is({style:x,timeout:m,easing:l},{mode:"enter"});j.style.webkitTransition=i.transitions.create("opacity",z),j.style.transition=i.transitions.create("opacity",z),f&&f(j,E)}),I=k(y),P=k(c),F=k(j=>{const E=is({style:x,timeout:m,easing:l},{mode:"exit"});j.style.webkitTransition=i.transitions.create("opacity",E),j.style.transition=i.transitions.create("opacity",E),d&&d(j)}),B=k(h),O=j=>{r&&r(w.current,j)};return v.jsx(p,D({appear:n,in:u,nodeRef:w,onEnter:C,onEntered:I,onEntering:T,onExit:F,onExited:B,onExiting:P,addEndListener:O,timeout:m},g,{children:(j,E)=>b.cloneElement(o,D({style:D({opacity:0,visibility:j==="exited"&&!u?"hidden":void 0},Ox[j],x,o.props.style),ref:q},E))}))}),Bx=Mx;function zx(e){return Ae("MuiBackdrop",e)}De("MuiBackdrop",["root","invisible"]);const $x=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],Wx=e=>{const{classes:t,invisible:a}=e;return Ne({root:["root",a&&"invisible"]},zx,t)},Ux=V("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.invisible&&t.invisible]}})(({ownerState:e})=>D({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"})),Hx=b.forwardRef(function(t,a){var i,s,r;const n=Le({props:t,name:"MuiBackdrop"}),{children:o,className:l,component:u="div",components:f={},componentsProps:y={},invisible:_=!1,open:d,slotProps:h={},slots:c={},TransitionComponent:x=Bx,transitionDuration:m}=n,p=U(n,$x),g=D({},n,{component:u,invisible:_}),w=Wx(g),q=(i=h.root)!=null?i:y.root;return v.jsx(x,D({in:d,timeout:m},p,{children:v.jsx(Ux,D({"aria-hidden":!0},q,{as:(s=(r=c.root)!=null?r:f.Root)!=null?s:u,className:X(w.root,l,q==null?void 0:q.className),ownerState:D({},g,q==null?void 0:q.ownerState),classes:w,ref:a,children:o}))}))}),Vx=Hx,Kx=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","container","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","open","slotProps","slots","theme"],Gx=V("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,!a.open&&a.exited&&t.hidden]}})(({theme:e,ownerState:t})=>D({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"})),Xx=V(Vx,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),Qx=b.forwardRef(function(t,a){var i,s,r,n,o,l;const u=Le({name:"MuiModal",props:t}),{BackdropComponent:f=Xx,BackdropProps:y,classes:_,className:d,closeAfterTransition:h=!1,children:c,container:x,component:m,components:p={},componentsProps:g={},disableAutoFocus:w=!1,disableEnforceFocus:q=!1,disableEscapeKeyDown:k=!1,disablePortal:T=!1,disableRestoreFocus:C=!1,disableScrollLock:I=!1,hideBackdrop:P=!1,keepMounted:F=!1,onBackdropClick:B,onClose:O,open:j,slotProps:E,slots:z,theme:M}=u,S=U(u,Kx),[R,N]=b.useState(!0),K={container:x,closeAfterTransition:h,disableAutoFocus:w,disableEnforceFocus:q,disableEscapeKeyDown:k,disablePortal:T,disableRestoreFocus:C,disableScrollLock:I,hideBackdrop:P,keepMounted:F,onBackdropClick:B,onClose:O,open:j},G=D({},u,K,{exited:R}),ge=(i=(s=z==null?void 0:z.root)!=null?s:p.Root)!=null?i:Gx,se=(r=(n=z==null?void 0:z.backdrop)!=null?n:p.Backdrop)!=null?r:f,oe=(o=E==null?void 0:E.root)!=null?o:g.root,Z=(l=E==null?void 0:E.backdrop)!=null?l:g.backdrop;return v.jsx(Ax,D({slots:{root:ge,backdrop:se},slotProps:{root:()=>D({},Vu(oe,G),!fr(ge)&&{as:m,theme:M},{className:X(d,oe==null?void 0:oe.className,_==null?void 0:_.root,!G.open&&G.exited&&(_==null?void 0:_.hidden))}),backdrop:()=>D({},y,Vu(Z,G),{className:X(Z==null?void 0:Z.className,y==null?void 0:y.className,_==null?void 0:_.backdrop)})},onTransitionEnter:()=>N(!1),onTransitionExited:()=>N(!0),ref:a},S,K,{children:c}))}),Jg=Qx;function Jx(e){return Ae("MuiPaper",e)}De("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const Yx=["className","component","elevation","square","variant"],Zx=e=>{const{square:t,elevation:a,variant:i,classes:s}=e,r={root:["root",i,!t&&"rounded",i==="elevation"&&`elevation${a}`]};return Ne(r,Jx,s)},eD=V("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,t[a.variant],!a.square&&t.rounded,a.variant==="elevation"&&t[`elevation${a.elevation}`]]}})(({theme:e,ownerState:t})=>{var a;return D({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},t.variant==="outlined"&&{border:`1px solid ${(e.vars||e).palette.divider}`},t.variant==="elevation"&&D({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&e.palette.mode==="dark"&&{backgroundImage:`linear-gradient(${ni("#fff",uf(t.elevation))}, ${ni("#fff",uf(t.elevation))})`},e.vars&&{backgroundImage:(a=e.vars.overlays)==null?void 0:a[t.elevation]}))}),tD=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiPaper"}),{className:s,component:r="div",elevation:n=1,square:o=!1,variant:l="elevation"}=i,u=U(i,Yx),f=D({},i,{component:r,elevation:n,square:o,variant:l}),y=Zx(f);return v.jsx(eD,D({as:r,ownerState:f,className:X(y.root,s),ref:a},u))}),Yg=tD;function aD(e){return Ae("MuiPopover",e)}De("MuiPopover",["root","paper"]);const iD=["onEntering"],sD=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","slots","slotProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"],rD=["slotProps"];function kf(e,t){let a=0;return typeof t=="number"?a=t:t==="center"?a=e.height/2:t==="bottom"&&(a=e.height),a}function Cf(e,t){let a=0;return typeof t=="number"?a=t:t==="center"?a=e.width/2:t==="right"&&(a=e.width),a}function Sf(e){return[e.horizontal,e.vertical].map(t=>typeof t=="number"?`${t}px`:t).join(" ")}function Rl(e){return typeof e=="function"?e():e}const nD=e=>{const{classes:t}=e;return Ne({root:["root"],paper:["paper"]},aD,t)},oD=V(Jg,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Zg=V(Yg,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),lD=b.forwardRef(function(t,a){var i,s,r;const n=Le({props:t,name:"MuiPopover"}),{action:o,anchorEl:l,anchorOrigin:u={vertical:"top",horizontal:"left"},anchorPosition:f,anchorReference:y="anchorEl",children:_,className:d,container:h,elevation:c=8,marginThreshold:x=16,open:m,PaperProps:p={},slots:g,slotProps:w,transformOrigin:q={vertical:"top",horizontal:"left"},TransitionComponent:k=Nx,transitionDuration:T="auto",TransitionProps:{onEntering:C}={}}=n,I=U(n.TransitionProps,iD),P=U(n,sD),F=(i=w==null?void 0:w.paper)!=null?i:p,B=b.useRef(),O=Qe(B,F.ref),j=D({},n,{anchorOrigin:u,anchorReference:y,elevation:c,marginThreshold:x,externalPaperSlotProps:F,transformOrigin:q,TransitionComponent:k,transitionDuration:T,TransitionProps:I}),E=nD(j),z=b.useCallback(()=>{if(y==="anchorPosition")return f;const H=Rl(l),ye=(H&&H.nodeType===1?H:mt(B.current).body).getBoundingClientRect();return{top:ye.top+kf(ye,u.vertical),left:ye.left+Cf(ye,u.horizontal)}},[l,u.horizontal,u.vertical,f,y]),M=b.useCallback(H=>({vertical:kf(H,q.vertical),horizontal:Cf(H,q.horizontal)}),[q.horizontal,q.vertical]),S=b.useCallback(H=>{const pe={width:H.offsetWidth,height:H.offsetHeight},ye=M(pe);if(y==="none")return{top:null,left:null,transformOrigin:Sf(ye)};const Je=z();let lt=Je.top-ye.vertical,de=Je.left-ye.horizontal;const Et=lt+pe.height,_a=de+pe.width,He=ea(Rl(l)),Oe=He.innerHeight-x,Ft=He.innerWidth-x;if(lt<x){const be=lt-x;lt-=be,ye.vertical+=be}else if(Et>Oe){const be=Et-Oe;lt-=be,ye.vertical+=be}if(de<x){const be=de-x;de-=be,ye.horizontal+=be}else if(_a>Ft){const be=_a-Ft;de-=be,ye.horizontal+=be}return{top:`${Math.round(lt)}px`,left:`${Math.round(de)}px`,transformOrigin:Sf(ye)}},[l,y,z,M,x]),[R,N]=b.useState(m),K=b.useCallback(()=>{const H=B.current;if(!H)return;const pe=S(H);pe.top!==null&&(H.style.top=pe.top),pe.left!==null&&(H.style.left=pe.left),H.style.transformOrigin=pe.transformOrigin,N(!0)},[S]),G=(H,pe)=>{C&&C(H,pe),K()},ge=()=>{N(!1)};b.useEffect(()=>{m&&K()}),b.useImperativeHandle(o,()=>m?{updatePosition:()=>{K()}}:null,[m,K]),b.useEffect(()=>{if(!m)return;const H=To(()=>{K()}),pe=ea(l);return pe.addEventListener("resize",H),()=>{H.clear(),pe.removeEventListener("resize",H)}},[l,m,K]);let se=T;T==="auto"&&!k.muiSupportAuto&&(se=void 0);const oe=h||(l?mt(Rl(l)).body:void 0),Z=(s=g==null?void 0:g.root)!=null?s:oD,Ue=(r=g==null?void 0:g.paper)!=null?r:Zg,aa=as({elementType:Ue,externalSlotProps:D({},F,{style:R?F.style:D({},F.style,{opacity:0})}),additionalProps:{elevation:c,ref:O},ownerState:j,className:X(E.paper,F==null?void 0:F.className)}),Ie=as({elementType:Z,externalSlotProps:(w==null?void 0:w.root)||{},externalForwardedProps:P,additionalProps:{ref:a,slotProps:{backdrop:{invisible:!0}},container:oe,open:m},ownerState:j,className:X(E.root,d)}),{slotProps:ot}=Ie,ae=U(Ie,rD);return v.jsx(Z,D({},ae,!fr(Z)&&{slotProps:ot},{children:v.jsx(k,D({appear:!0,in:m,onEntering:G,onExited:ge,timeout:se},I,{children:v.jsx(Ue,D({},aa,{children:_}))}))}))}),uD=lD;function dD(e){return Ae("MuiMenu",e)}De("MuiMenu",["root","paper","list"]);const cD=["onEntering"],pD=["autoFocus","children","className","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant","slots","slotProps"],fD={vertical:"top",horizontal:"right"},mD={vertical:"top",horizontal:"left"},hD=e=>{const{classes:t}=e;return Ne({root:["root"],paper:["paper"],list:["list"]},dD,t)},gD=V(uD,{shouldForwardProp:e=>ta(e)||e==="classes",name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),yD=V(Zg,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),_D=V(ux,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),vD=b.forwardRef(function(t,a){var i,s;const r=Le({props:t,name:"MuiMenu"}),{autoFocus:n=!0,children:o,className:l,disableAutoFocusItem:u=!1,MenuListProps:f={},onClose:y,open:_,PaperProps:d={},PopoverClasses:h,transitionDuration:c="auto",TransitionProps:{onEntering:x}={},variant:m="selectedMenu",slots:p={},slotProps:g={}}=r,w=U(r.TransitionProps,cD),q=U(r,pD),k=xr(),T=k.direction==="rtl",C=D({},r,{autoFocus:n,disableAutoFocusItem:u,MenuListProps:f,onEntering:x,PaperProps:d,transitionDuration:c,TransitionProps:w,variant:m}),I=hD(C),P=n&&!u&&_,F=b.useRef(null),B=(R,N)=>{F.current&&F.current.adjustStyleForScrollbar(R,k),x&&x(R,N)},O=R=>{R.key==="Tab"&&(R.preventDefault(),y&&y(R,"tabKeyDown"))};let j=-1;b.Children.map(o,(R,N)=>{b.isValidElement(R)&&(R.props.disabled||(m==="selectedMenu"&&R.props.selected||j===-1)&&(j=N))});const E=(i=p.paper)!=null?i:yD,z=(s=g.paper)!=null?s:d,M=as({elementType:p.root,externalSlotProps:g.root,ownerState:C,className:[I.root,l]}),S=as({elementType:E,externalSlotProps:z,ownerState:C,className:I.paper});return v.jsx(gD,D({onClose:y,anchorOrigin:{vertical:"bottom",horizontal:T?"right":"left"},transformOrigin:T?fD:mD,slots:{paper:E,root:p.root},slotProps:{root:M,paper:S},open:_,ref:a,transitionDuration:c,TransitionProps:D({onEntering:B},w),ownerState:C},q,{classes:h,children:v.jsx(_D,D({onKeyDown:O,actions:F,autoFocus:n&&(j===-1||u),autoFocusItem:P,variant:m},f,{className:X(I.list,f.className),children:o}))}))}),bD=vD;function wD(e){return Ae("MuiNativeSelect",e)}const TD=De("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),yc=TD,qD=["className","disabled","error","IconComponent","inputRef","variant"],xD=e=>{const{classes:t,variant:a,disabled:i,multiple:s,open:r,error:n}=e,o={select:["select",a,i&&"disabled",s&&"multiple",n&&"error"],icon:["icon",`icon${qe(a)}`,r&&"iconOpen",i&&"disabled"]};return Ne(o,wD,t)},ey=({ownerState:e,theme:t})=>D({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":D({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:t.palette.mode==="light"?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${yc.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},e.variant==="filled"&&{"&&&":{paddingRight:32}},e.variant==="outlined"&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),DD=V("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:ta,overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.select,t[a.variant],a.error&&t.error,{[`&.${yc.multiple}`]:t.multiple}]}})(ey),ty=({ownerState:e,theme:t})=>D({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,[`&.${yc.disabled}`]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},e.variant==="filled"&&{right:7},e.variant==="outlined"&&{right:7}),kD=V("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.icon,a.variant&&t[`icon${qe(a.variant)}`],a.open&&t.iconOpen]}})(ty),CD=b.forwardRef(function(t,a){const{className:i,disabled:s,error:r,IconComponent:n,inputRef:o,variant:l="standard"}=t,u=U(t,qD),f=D({},t,{disabled:s,variant:l,error:r}),y=xD(f);return v.jsxs(b.Fragment,{children:[v.jsx(DD,D({ownerState:f,className:X(y.select,i),disabled:s,ref:o||a},u)),t.multiple?null:v.jsx(kD,{as:n,ownerState:f,className:y.icon})]})}),SD=CD;function PD(e){return Ae("MuiSelect",e)}const AD=De("MuiSelect",["select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),xs=AD;var Pf;const ID=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],RD=V("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[{[`&.${xs.select}`]:t.select},{[`&.${xs.select}`]:t[a.variant]},{[`&.${xs.error}`]:t.error},{[`&.${xs.multiple}`]:t.multiple}]}})(ey,{[`&.${xs.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),jD=V("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.icon,a.variant&&t[`icon${qe(a.variant)}`],a.open&&t.iconOpen]}})(ty),ED=V("input",{shouldForwardProp:e=>IT(e)&&e!=="classes",name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function Af(e,t){return typeof t=="object"&&t!==null?e===t:String(e)===String(t)}function FD(e){return e==null||typeof e=="string"&&!e.trim()}const ND=e=>{const{classes:t,variant:a,disabled:i,multiple:s,open:r,error:n}=e,o={select:["select",a,i&&"disabled",s&&"multiple",n&&"error"],icon:["icon",`icon${qe(a)}`,r&&"iconOpen",i&&"disabled"],nativeInput:["nativeInput"]};return Ne(o,PD,t)},LD=b.forwardRef(function(t,a){const{"aria-describedby":i,"aria-label":s,autoFocus:r,autoWidth:n,children:o,className:l,defaultOpen:u,defaultValue:f,disabled:y,displayEmpty:_,error:d=!1,IconComponent:h,inputRef:c,labelId:x,MenuProps:m={},multiple:p,name:g,onBlur:w,onChange:q,onClose:k,onFocus:T,onOpen:C,open:I,readOnly:P,renderValue:F,SelectDisplayProps:B={},tabIndex:O,value:j,variant:E="standard"}=t,z=U(t,ID),[M,S]=Lu({controlled:j,default:f,name:"Select"}),[R,N]=Lu({controlled:I,default:u,name:"Select"}),K=b.useRef(null),G=b.useRef(null),[ge,se]=b.useState(null),{current:oe}=b.useRef(I!=null),[Z,Ue]=b.useState(),aa=Qe(a,c),Ie=b.useCallback($=>{G.current=$,$&&se($)},[]),ot=ge==null?void 0:ge.parentNode;b.useImperativeHandle(aa,()=>({focus:()=>{G.current.focus()},node:K.current,value:M}),[M]),b.useEffect(()=>{u&&R&&ge&&!oe&&(Ue(n?null:ot.clientWidth),G.current.focus())},[ge,n]),b.useEffect(()=>{r&&G.current.focus()},[r]),b.useEffect(()=>{if(!x)return;const $=mt(G.current).getElementById(x);if($){const ce=()=>{getSelection().isCollapsed&&G.current.focus()};return $.addEventListener("click",ce),()=>{$.removeEventListener("click",ce)}}},[x]);const ae=($,ce)=>{$?C&&C(ce):k&&k(ce),oe||(Ue(n?null:ot.clientWidth),N($))},H=$=>{$.button===0&&($.preventDefault(),G.current.focus(),ae(!0,$))},pe=$=>{ae(!1,$)},ye=b.Children.toArray(o),Je=$=>{const ce=ye.find(Re=>Re.props.value===$.target.value);ce!==void 0&&(S(ce.props.value),q&&q($,ce))},lt=$=>ce=>{let Re;if(ce.currentTarget.hasAttribute("tabindex")){if(p){Re=Array.isArray(M)?M.slice():[];const Ga=M.indexOf($.props.value);Ga===-1?Re.push($.props.value):Re.splice(Ga,1)}else Re=$.props.value;if($.props.onClick&&$.props.onClick(ce),M!==Re&&(S(Re),q)){const Ga=ce.nativeEvent||ce,qc=new Ga.constructor(Ga.type,Ga);Object.defineProperty(qc,"target",{writable:!0,value:{value:Re,name:g}}),q(qc,$)}p||ae(!1,ce)}},de=$=>{P||[" ","ArrowUp","ArrowDown","Enter"].indexOf($.key)!==-1&&($.preventDefault(),ae(!0,$))},Et=ge!==null&&R,_a=$=>{!Et&&w&&(Object.defineProperty($,"target",{writable:!0,value:{value:M,name:g}}),w($))};delete z["aria-invalid"];let He,Oe;const Ft=[];let be=!1;(Hn({value:M})||_)&&(F?He=F(M):be=!0);const ia=ye.map($=>{if(!b.isValidElement($))return null;let ce;if(p){if(!Array.isArray(M))throw new Error($a(2));ce=M.some(Re=>Af(Re,$.props.value)),ce&&be&&Ft.push($.props.children)}else ce=Af(M,$.props.value),ce&&be&&(Oe=$.props.children);return b.cloneElement($,{"aria-selected":ce?"true":"false",onClick:lt($),onKeyUp:Re=>{Re.key===" "&&Re.preventDefault(),$.props.onKeyUp&&$.props.onKeyUp(Re)},role:"option",selected:ce,value:void 0,"data-value":$.props.value})});be&&(p?Ft.length===0?He=null:He=Ft.reduce(($,ce,Re)=>($.push(ce),Re<Ft.length-1&&$.push(", "),$),[]):He=Oe);let Nt=Z;!n&&oe&&ge&&(Nt=ot.clientWidth);let sa;typeof O<"u"?sa=O:sa=y?null:0;const va=B.id||(g?`mui-component-select-${g}`:void 0),le=D({},t,{variant:E,value:M,open:Et,error:d}),W=ND(le);return v.jsxs(b.Fragment,{children:[v.jsx(RD,D({ref:Ie,tabIndex:sa,role:"button","aria-disabled":y?"true":void 0,"aria-expanded":Et?"true":"false","aria-haspopup":"listbox","aria-label":s,"aria-labelledby":[x,va].filter(Boolean).join(" ")||void 0,"aria-describedby":i,onKeyDown:de,onMouseDown:y||P?null:H,onBlur:_a,onFocus:T},B,{ownerState:le,className:X(B.className,W.select,l),id:va,children:FD(He)?Pf||(Pf=v.jsx("span",{className:"notranslate",children:"​"})):He})),v.jsx(ED,D({"aria-invalid":d,value:Array.isArray(M)?M.join(","):M,name:g,ref:K,"aria-hidden":!0,onChange:Je,tabIndex:-1,disabled:y,className:W.nativeInput,autoFocus:r,ownerState:le},z)),v.jsx(jD,{as:h,className:W.icon,ownerState:le}),v.jsx(bD,D({id:`menu-${g||""}`,anchorEl:ot,open:Et,onClose:pe,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},m,{MenuListProps:D({"aria-labelledby":x,role:"listbox",disableListWrap:!0},m.MenuListProps),PaperProps:D({},m.PaperProps,{style:D({minWidth:Nt},m.PaperProps!=null?m.PaperProps.style:null)}),children:ia}))]})}),OD=LD;function MD(e){return Ae("MuiSvgIcon",e)}De("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const BD=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],zD=e=>{const{color:t,fontSize:a,classes:i}=e,s={root:["root",t!=="inherit"&&`color${qe(t)}`,`fontSize${qe(a)}`]};return Ne(s,MD,i)},$D=V("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.color!=="inherit"&&t[`color${qe(a.color)}`],t[`fontSize${qe(a.fontSize)}`]]}})(({theme:e,ownerState:t})=>{var a,i,s,r,n,o,l,u,f,y,_,d,h;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:(a=e.transitions)==null||(i=a.create)==null?void 0:i.call(a,"fill",{duration:(s=e.transitions)==null||(s=s.duration)==null?void 0:s.shorter}),fontSize:{inherit:"inherit",small:((r=e.typography)==null||(n=r.pxToRem)==null?void 0:n.call(r,20))||"1.25rem",medium:((o=e.typography)==null||(l=o.pxToRem)==null?void 0:l.call(o,24))||"1.5rem",large:((u=e.typography)==null||(f=u.pxToRem)==null?void 0:f.call(u,35))||"2.1875rem"}[t.fontSize],color:(y=(_=(e.vars||e).palette)==null||(_=_[t.color])==null?void 0:_.main)!=null?y:{action:(d=(e.vars||e).palette)==null||(d=d.action)==null?void 0:d.active,disabled:(h=(e.vars||e).palette)==null||(h=h.action)==null?void 0:h.disabled,inherit:void 0}[t.color]}}),ay=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiSvgIcon"}),{children:s,className:r,color:n="inherit",component:o="svg",fontSize:l="medium",htmlColor:u,inheritViewBox:f=!1,titleAccess:y,viewBox:_="0 0 24 24"}=i,d=U(i,BD),h=b.isValidElement(s)&&s.type==="svg",c=D({},i,{color:n,component:o,fontSize:l,instanceFontSize:t.fontSize,inheritViewBox:f,viewBox:_,hasSvgAsChild:h}),x={};f||(x.viewBox=_);const m=zD(c);return v.jsxs($D,D({as:o,className:X(m.root,r),focusable:"false",color:u,"aria-hidden":y?void 0:!0,role:y?"img":void 0,ref:a},x,d,h&&s.props,{ownerState:c,children:[h?s.props.children:s,y?v.jsx("title",{children:y}):null]}))});ay.muiName="SvgIcon";const If=ay;function iy(e,t){function a(i,s){return v.jsx(If,D({"data-testid":`${t}Icon`,ref:s},i,{children:e}))}return a.muiName=If.muiName,b.memo(b.forwardRef(a))}const WD=iy(v.jsx("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown");function UD(e){return v.jsx(k1,D({},e,{defaultTheme:Ko,themeId:qr}))}function HD(e){return Ae("MuiInputBase",e)}const VD=De("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),ss=VD,KD=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],Xo=(e,t)=>{const{ownerState:a}=e;return[t.root,a.formControl&&t.formControl,a.startAdornment&&t.adornedStart,a.endAdornment&&t.adornedEnd,a.error&&t.error,a.size==="small"&&t.sizeSmall,a.multiline&&t.multiline,a.color&&t[`color${qe(a.color)}`],a.fullWidth&&t.fullWidth,a.hiddenLabel&&t.hiddenLabel]},Qo=(e,t)=>{const{ownerState:a}=e;return[t.input,a.size==="small"&&t.inputSizeSmall,a.multiline&&t.inputMultiline,a.type==="search"&&t.inputTypeSearch,a.startAdornment&&t.inputAdornedStart,a.endAdornment&&t.inputAdornedEnd,a.hiddenLabel&&t.inputHiddenLabel]},GD=e=>{const{classes:t,color:a,disabled:i,error:s,endAdornment:r,focused:n,formControl:o,fullWidth:l,hiddenLabel:u,multiline:f,readOnly:y,size:_,startAdornment:d,type:h}=e,c={root:["root",`color${qe(a)}`,i&&"disabled",s&&"error",l&&"fullWidth",n&&"focused",o&&"formControl",_==="small"&&"sizeSmall",f&&"multiline",d&&"adornedStart",r&&"adornedEnd",u&&"hiddenLabel",y&&"readOnly"],input:["input",i&&"disabled",h==="search"&&"inputTypeSearch",f&&"inputMultiline",_==="small"&&"inputSizeSmall",u&&"inputHiddenLabel",d&&"inputAdornedStart",r&&"inputAdornedEnd",y&&"readOnly"]};return Ne(c,HD,t)},Jo=V("div",{name:"MuiInputBase",slot:"Root",overridesResolver:Xo})(({theme:e,ownerState:t})=>D({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${ss.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&D({padding:"4px 0 5px"},t.size==="small"&&{paddingTop:1}),t.fullWidth&&{width:"100%"})),Yo=V("input",{name:"MuiInputBase",slot:"Input",overridesResolver:Qo})(({theme:e,ownerState:t})=>{const a=e.palette.mode==="light",i=D({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:a?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),s={opacity:"0 !important"},r=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:a?.42:.5};return D({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":i,"&::-moz-placeholder":i,"&:-ms-input-placeholder":i,"&::-ms-input-placeholder":i,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${ss.formControl} &`]:{"&::-webkit-input-placeholder":s,"&::-moz-placeholder":s,"&:-ms-input-placeholder":s,"&::-ms-input-placeholder":s,"&:focus::-webkit-input-placeholder":r,"&:focus::-moz-placeholder":r,"&:focus:-ms-input-placeholder":r,"&:focus::-ms-input-placeholder":r},[`&.${ss.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},t.size==="small"&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},t.type==="search"&&{MozAppearance:"textfield"})}),XD=v.jsx(UD,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),QD=b.forwardRef(function(t,a){var i;const s=Le({props:t,name:"MuiInputBase"}),{"aria-describedby":r,autoComplete:n,autoFocus:o,className:l,components:u={},componentsProps:f={},defaultValue:y,disabled:_,disableInjectingGlobalStyles:d,endAdornment:h,fullWidth:c=!1,id:x,inputComponent:m="input",inputProps:p={},inputRef:g,maxRows:w,minRows:q,multiline:k=!1,name:T,onBlur:C,onChange:I,onClick:P,onFocus:F,onKeyDown:B,onKeyUp:O,placeholder:j,readOnly:E,renderSuffix:z,rows:M,slotProps:S={},slots:R={},startAdornment:N,type:K="text",value:G}=s,ge=U(s,KD),se=p.value!=null?p.value:G,{current:oe}=b.useRef(se!=null),Z=b.useRef(),Ue=b.useCallback(le=>{},[]),aa=Qe(Z,g,p.ref,Ue),[Ie,ot]=b.useState(!1),ae=kr(),H=Dr({props:s,muiFormControl:ae,states:["color","disabled","error","hiddenLabel","size","required","filled"]});H.focused=ae?ae.focused:Ie,b.useEffect(()=>{!ae&&_&&Ie&&(ot(!1),C&&C())},[ae,_,Ie,C]);const pe=ae&&ae.onFilled,ye=ae&&ae.onEmpty,Je=b.useCallback(le=>{Hn(le)?pe&&pe():ye&&ye()},[pe,ye]);Wa(()=>{oe&&Je({value:se})},[se,Je,oe]);const lt=le=>{if(H.disabled){le.stopPropagation();return}F&&F(le),p.onFocus&&p.onFocus(le),ae&&ae.onFocus?ae.onFocus(le):ot(!0)},de=le=>{C&&C(le),p.onBlur&&p.onBlur(le),ae&&ae.onBlur?ae.onBlur(le):ot(!1)},Et=(le,...W)=>{if(!oe){const $=le.target||Z.current;if($==null)throw new Error($a(1));Je({value:$.value})}p.onChange&&p.onChange(le,...W),I&&I(le,...W)};b.useEffect(()=>{Je(Z.current)},[]);const _a=le=>{Z.current&&le.currentTarget===le.target&&Z.current.focus(),P&&!H.disabled&&P(le)};let He=m,Oe=p;k&&He==="input"&&(M?Oe=D({type:void 0,minRows:M,maxRows:M},Oe):Oe=D({type:void 0,maxRows:w,minRows:q},Oe),He=jx);const Ft=le=>{Je(le.animationName==="mui-auto-fill-cancel"?Z.current:{value:"x"})};b.useEffect(()=>{ae&&ae.setAdornedStart(!!N)},[ae,N]);const be=D({},s,{color:H.color||"primary",disabled:H.disabled,endAdornment:h,error:H.error,focused:H.focused,formControl:ae,fullWidth:c,hiddenLabel:H.hiddenLabel,multiline:k,size:H.size,startAdornment:N,type:K}),ia=GD(be),Nt=R.root||u.Root||Jo,sa=S.root||f.root||{},va=R.input||u.Input||Yo;return Oe=D({},Oe,(i=S.input)!=null?i:f.input),v.jsxs(b.Fragment,{children:[!d&&XD,v.jsxs(Nt,D({},sa,!fr(Nt)&&{ownerState:D({},be,sa.ownerState)},{ref:a,onClick:_a},ge,{className:X(ia.root,sa.className,l,E&&"MuiInputBase-readOnly"),children:[N,v.jsx(pc.Provider,{value:null,children:v.jsx(va,D({ownerState:be,"aria-invalid":H.error,"aria-describedby":r,autoComplete:n,autoFocus:o,defaultValue:y,disabled:H.disabled,id:x,onAnimationStart:Ft,name:T,placeholder:j,readOnly:E,required:H.required,rows:M,value:se,onKeyDown:B,onKeyUp:O,type:K},Oe,!fr(va)&&{as:He,ownerState:D({},be,Oe.ownerState)},{ref:aa,className:X(ia.input,Oe.className,E&&"MuiInputBase-readOnly"),onBlur:de,onChange:Et,onFocus:lt}))}),h,z?z(D({},H,{startAdornment:N})):null]}))]})}),_c=QD;function JD(e){return Ae("MuiInput",e)}const YD=D({},ss,De("MuiInput",["root","underline","input"])),Ds=YD,ZD=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],ek=e=>{const{classes:t,disableUnderline:a}=e,s=Ne({root:["root",!a&&"underline"],input:["input"]},JD,t);return D({},t,s)},tk=V(Jo,{shouldForwardProp:e=>ta(e)||e==="classes",name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[...Xo(e,t),!a.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{let i=e.palette.mode==="light"?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(i=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),D({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${(e.vars||e).palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${Ds.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${Ds.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${i}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${Ds.disabled}, .${Ds.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${i}`}},[`&.${Ds.disabled}:before`]:{borderBottomStyle:"dotted"}})}),ak=V(Yo,{name:"MuiInput",slot:"Input",overridesResolver:Qo})({}),sy=b.forwardRef(function(t,a){var i,s,r,n;const o=Le({props:t,name:"MuiInput"}),{disableUnderline:l,components:u={},componentsProps:f,fullWidth:y=!1,inputComponent:_="input",multiline:d=!1,slotProps:h,slots:c={},type:x="text"}=o,m=U(o,ZD),p=ek(o),w={root:{ownerState:{disableUnderline:l}}},q=h??f?At(h??f,w):w,k=(i=(s=c.root)!=null?s:u.Root)!=null?i:tk,T=(r=(n=c.input)!=null?n:u.Input)!=null?r:ak;return v.jsx(_c,D({slots:{root:k,input:T},slotProps:q,fullWidth:y,inputComponent:_,multiline:d,ref:a,type:x},m,{classes:p}))});sy.muiName="Input";const ik=sy;function sk(e){return Ae("MuiFilledInput",e)}const rk=D({},ss,De("MuiFilledInput",["root","underline","input"])),Xa=rk,nk=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],ok=e=>{const{classes:t,disableUnderline:a}=e,s=Ne({root:["root",!a&&"underline"],input:["input"]},sk,t);return D({},t,s)},lk=V(Jo,{shouldForwardProp:e=>ta(e)||e==="classes",name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[...Xo(e,t),!a.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{var a;const i=e.palette.mode==="light",s=i?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=i?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",n=i?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",o=i?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return D({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:n,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r}},[`&.${Xa.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r},[`&.${Xa.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:o}},!t.disableUnderline&&{"&:after":{borderBottom:`2px solid ${(a=(e.vars||e).palette[t.color||"primary"])==null?void 0:a.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${Xa.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${Xa.error}`]:{"&:before, &:after":{borderBottomColor:(e.vars||e).palette.error.main}},"&:before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:s}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${Xa.disabled}, .${Xa.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${Xa.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&D({padding:"25px 12px 8px"},t.size==="small"&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17}))}),uk=V(Yo,{name:"MuiFilledInput",slot:"Input",overridesResolver:Qo})(({theme:e,ownerState:t})=>D({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:e.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:e.palette.mode==="light"?null:"#fff",caretColor:e.palette.mode==="light"?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},t.size==="small"&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&t.size==="small"&&{paddingTop:8,paddingBottom:9})),ry=b.forwardRef(function(t,a){var i,s,r,n;const o=Le({props:t,name:"MuiFilledInput"}),{components:l={},componentsProps:u,fullWidth:f=!1,inputComponent:y="input",multiline:_=!1,slotProps:d,slots:h={},type:c="text"}=o,x=U(o,nk),m=D({},o,{fullWidth:f,inputComponent:y,multiline:_,type:c}),p=ok(o),g={root:{ownerState:m},input:{ownerState:m}},w=d??u?At(d??u,g):g,q=(i=(s=h.root)!=null?s:l.Root)!=null?i:lk,k=(r=(n=h.input)!=null?n:l.Input)!=null?r:uk;return v.jsx(_c,D({slots:{root:q,input:k},componentsProps:w,fullWidth:f,inputComponent:y,multiline:_,ref:a,type:c},x,{classes:p}))});ry.muiName="Input";const dk=ry;var Rf;const ck=["children","classes","className","label","notched"],pk=V("fieldset")({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),fk=V("legend")(({ownerState:e,theme:t})=>D({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&D({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})));function mk(e){const{className:t,label:a,notched:i}=e,s=U(e,ck),r=a!=null&&a!=="",n=D({},e,{notched:i,withLabel:r});return v.jsx(pk,D({"aria-hidden":!0,className:t,ownerState:n},s,{children:v.jsx(fk,{ownerState:n,children:r?v.jsx("span",{children:a}):Rf||(Rf=v.jsx("span",{className:"notranslate",children:"​"}))})}))}function hk(e){return Ae("MuiOutlinedInput",e)}const gk=D({},ss,De("MuiOutlinedInput",["root","notchedOutline","input"])),wa=gk,yk=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],_k=e=>{const{classes:t}=e,i=Ne({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},hk,t);return D({},t,i)},vk=V(Jo,{shouldForwardProp:e=>ta(e)||e==="classes",name:"MuiOutlinedInput",slot:"Root",overridesResolver:Xo})(({theme:e,ownerState:t})=>{const a=e.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return D({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${wa.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${wa.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:a}},[`&.${wa.focused} .${wa.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${wa.error} .${wa.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${wa.disabled} .${wa.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&D({padding:"16.5px 14px"},t.size==="small"&&{padding:"8.5px 14px"}))}),bk=V(mk,{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})(({theme:e})=>{const t=e.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}}),wk=V(Yo,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:Qo})(({theme:e,ownerState:t})=>D({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:e.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:e.palette.mode==="light"?null:"#fff",caretColor:e.palette.mode==="light"?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},t.size==="small"&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0})),ny=b.forwardRef(function(t,a){var i,s,r,n,o;const l=Le({props:t,name:"MuiOutlinedInput"}),{components:u={},fullWidth:f=!1,inputComponent:y="input",label:_,multiline:d=!1,notched:h,slots:c={},type:x="text"}=l,m=U(l,yk),p=_k(l),g=kr(),w=Dr({props:l,muiFormControl:g,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),q=D({},l,{color:w.color||"primary",disabled:w.disabled,error:w.error,focused:w.focused,formControl:g,fullWidth:f,hiddenLabel:w.hiddenLabel,multiline:d,size:w.size,type:x}),k=(i=(s=c.root)!=null?s:u.Root)!=null?i:vk,T=(r=(n=c.input)!=null?n:u.Input)!=null?r:wk;return v.jsx(_c,D({slots:{root:k,input:T},renderSuffix:C=>v.jsx(bk,{ownerState:q,className:p.notchedOutline,label:_!=null&&_!==""&&w.required?o||(o=v.jsxs(b.Fragment,{children:[_," ","*"]})):_,notched:typeof h<"u"?h:!!(C.startAdornment||C.filled||C.focused)}),fullWidth:f,inputComponent:y,multiline:d,ref:a,type:x},m,{classes:D({},p,{notchedOutline:null})}))});ny.muiName="Input";const Tk=ny,qk=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],xk=e=>{const{classes:t}=e;return t},vc={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>ta(e)&&e!=="variant",slot:"Root"},Dk=V(ik,vc)(""),kk=V(Tk,vc)(""),Ck=V(dk,vc)(""),oy=b.forwardRef(function(t,a){const i=Le({name:"MuiSelect",props:t}),{autoWidth:s=!1,children:r,classes:n={},className:o,defaultOpen:l=!1,displayEmpty:u=!1,IconComponent:f=WD,id:y,input:_,inputProps:d,label:h,labelId:c,MenuProps:x,multiple:m=!1,native:p=!1,onClose:g,onOpen:w,open:q,renderValue:k,SelectDisplayProps:T,variant:C="outlined"}=i,I=U(i,qk),P=p?SD:OD,F=kr(),B=Dr({props:i,muiFormControl:F,states:["variant","error"]}),O=B.variant||C,j=D({},i,{variant:O,classes:n}),E=xk(j),z=_||{standard:v.jsx(Dk,{ownerState:j}),outlined:v.jsx(kk,{label:h,ownerState:j}),filled:v.jsx(Ck,{ownerState:j})}[O],M=Qe(a,z.ref);return v.jsx(b.Fragment,{children:b.cloneElement(z,D({inputComponent:P,inputProps:D({children:r,error:B.error,IconComponent:f,variant:O,type:void 0,multiple:m},p?{id:y}:{autoWidth:s,defaultOpen:l,displayEmpty:u,labelId:c,MenuProps:x,onClose:g,onOpen:w,open:q,renderValue:k,SelectDisplayProps:D({id:y},T)},d,{classes:d?At(E,d.classes):E},_?_.props.inputProps:{})},m&&p&&O==="outlined"?{notched:!0}:{},{ref:M,className:X(z.props.className,o)},!_&&{variant:O},I))})});oy.muiName="Select";const Sk=oy;var bc={},ly={exports:{}};(function(e){function t(a){return a&&a.__esModule?a:{default:a}}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports})(ly);var Pk=ly.exports,jl={};const Ak={configure:e=>{Qd.configure(e)}},Ik=Object.freeze(Object.defineProperty({__proto__:null,capitalize:qe,createChainedFunction:Nu,createSvgIcon:iy,debounce:To,deprecatedPropType:cw,isMuiElement:on,ownerDocument:mt,ownerWindow:ea,requirePropFactory:pw,setRef:zn,unstable_ClassNameGenerator:Ak,unstable_useEnhancedEffect:Wa,unstable_useId:hw,unsupportedProp:gw,useControlled:Lu,useEventCallback:ri,useForkRef:Qe,useIsFocusVisible:vg},Symbol.toStringTag,{value:"Module"})),Rk=Ry(Ik);var jf;function jk(){return jf||(jf=1,function(e){"use client";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.createSvgIcon}});var t=Rk}(jl)),jl}var Ek=Pk;Object.defineProperty(bc,"__esModule",{value:!0});var uy=bc.default=void 0,Fk=Ek(jk()),Nk=v,Lk=(0,Fk.default)((0,Nk.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckCircle");uy=bc.default=Lk;const Ok=_i.globalsummary,cn=_i.plugins,Ef=_i.status_dict,Mk=Object.keys(cn).length,Bk="/aiida-registry/pr-preview/pr-253/";function zk(){const[e,t]=b.useState("alpha"),[a,i]=b.useState(cn);document.documentElement.style.scrollBehavior="auto";function s(){var n=window.scrollY;window.onscroll=function(){var o=window.scrollY;n>o?document.querySelector("header").style.top="0":n>150&&(document.querySelector("header").style.top="-155px"),n=o}}s();const r=n=>{t(n);let o;if(n==="commits"){const l=Object.entries(cn);l.sort(([,u],[,f])=>f.commits_count-u.commits_count),o=Object.fromEntries(l)}else n=="alpha"&&(o=cn);i(o)};return v.jsxs("main",{className:"fade-enter",children:[v.jsxs("h2",{children:["Registered plugin packages: ",Mk]}),v.jsx("div",{className:"globalsummary-box",children:v.jsx("div",{style:{display:"table"},children:Ok.map(n=>v.jsxs("span",{className:"badge",style:{display:"table-row",lineHeight:2},children:[v.jsx("span",{style:{display:"table-cell",float:"none",textAlign:"right"},children:v.jsxs("span",{className:`badge-left ${n.colorclass} tooltip`,style:{float:"none",display:"inline",textAlign:"right",border:"none"},children:[n.name,n.tooltip&&v.jsx("span",{className:"tooltiptext",children:n.tooltip})]})}),v.jsx("span",{style:{display:"table-cell",float:"none",textAlign:"left"},children:v.jsxs("span",{className:"badge-right",style:{float:"none",display:"inline",textAlign:"left",border:"none"},children:[n.total_num," plugin",n.total_num!==1?"s":""," in ",n.num_entries," package",n.num_entries!==1?"s":""]})})]},n.name))})}),v.jsxs("div",{id:"entrylist",children:[v.jsx("h1",{style:{display:"inline"},children:"Package list"}),v.jsx(NT,{sx:{minWidth:120},style:{display:"inline",padding:"20px"},children:v.jsxs(Kq,{style:{width:"25%"},children:[v.jsx(JT,{id:"demo-simple-select-label",children:"Sort"}),v.jsxs(Sk,{value:e,label:"Sort",onChange:n=>r(n.target.value),children:[v.jsx(vf,{value:"alpha",children:"Alphabetical"}),v.jsx(vf,{value:"commits",children:"Commits Count"})]})]})}),Object.entries(a).map(([n,o])=>v.jsxs("div",{className:"submenu-entry",children:[v.jsx(Fu,{to:`/${n}`,children:v.jsxs("h2",{style:{display:"inline"},children:[n," "]})}),o.is_installable==="True"&&v.jsxs("div",{className:"classbox",style:{backgroundColor:"transparent"},children:[v.jsx(uy,{style:{color:"green",marginBottom:"-5"}}),v.jsx("span",{className:"tooltiptext",children:"Plugin successfully installed"})]}),v.jsxs("p",{className:"currentstate",children:[v.jsx("img",{className:"svg-badge",src:`${Bk}${Ef[o.development_status][1]}`,title:Ef[o.development_status][0]})," ",o.aiida_version&&v.jsx("img",{className:"svg-badge",title:`Compatible with aiida-core ${o.aiida_version}`,src:`https://img.shields.io/badge/AiiDA-${o.aiida_version}-007ec6.svg?logo=${gg}`}),e==="commits"&&v.jsx("img",{className:"svg-badge",style:{padding:"3px"},src:`https://img.shields.io/badge/Yearly%20Commits-${o.commits_count}-007ec6.svg`})]}),v.jsx("p",{children:o.metadata.description}),v.jsxs("ul",{className:"plugin-info",children:[v.jsx("li",{children:v.jsx("a",{href:o.code_home,children:"Source Code"})}),o.documentation_url&&v.jsx("li",{children:v.jsx("a",{href:o.documentation_url,children:"Documentation"})}),v.jsx("li",{children:v.jsx(Fu,{to:`/${n}`,children:"Plugin details"})})]}),o.summaryinfo&&v.jsx(v.Fragment,{children:v.jsx("p",{className:"summaryinfo",children:o.summaryinfo.map(l=>v.jsxs("span",{className:"badge",children:[v.jsx("span",{className:`badge-left ${l.colorclass}`,children:l.text}),v.jsx("span",{className:"badge-right",children:l.count})]},l.text))})})]},n))]})]})}function ti(){return ti=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},ti.apply(this,arguments)}const $k=["children","options"],Ff=["allowFullScreen","allowTransparency","autoComplete","autoFocus","autoPlay","cellPadding","cellSpacing","charSet","className","classId","colSpan","contentEditable","contextMenu","crossOrigin","encType","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","hrefLang","inputMode","keyParams","keyType","marginHeight","marginWidth","maxLength","mediaGroup","minLength","noValidate","radioGroup","readOnly","rowSpan","spellCheck","srcDoc","srcLang","srcSet","tabIndex","useMap"].reduce((e,t)=>(e[t.toLowerCase()]=t,e),{for:"htmlFor"}),Nf={amp:"&",apos:"'",gt:">",lt:"<",nbsp:" ",quot:"“"},Wk=["style","script"],Uk=/([-A-Z0-9_:]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|(?:\{((?:\\.|{[^}]*?}|[^}])*)\})))?/gi,Hk=/mailto:/i,Vk=/\n{2,}$/,dy=/^( *>[^\n]+(\n[^\n]+)*\n*)+\n{2,}/,Kk=/^ *> ?/gm,Gk=/^ {2,}\n/,Xk=/^(?:( *[-*_])){3,} *(?:\n *)+\n/,cy=/^\s*(`{3,}|~{3,}) *(\S+)?([^\n]*?)?\n([\s\S]+?)\s*\1 *(?:\n *)*\n?/,py=/^(?: {4}[^\n]+\n*)+(?:\n *)+\n?/,Qk=/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,Jk=/^(?:\n *)*\n/,Yk=/\r\n?/g,Zk=/^\[\^([^\]]+)](:.*)\n/,eC=/^\[\^([^\]]+)]/,tC=/\f/g,aC=/^\s*?\[(x|\s)\]/,fy=/^ *(#{1,6}) *([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,my=/^ *(#{1,6}) +([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,hy=/^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/,Gu=/^ *(?!<[a-z][^ >/]* ?\/>)<([a-z][^ >/]*) ?([^>]*)\/{0}>\n?(\s*(?:<\1[^>]*?>[\s\S]*?<\/\1>|(?!<\1)[\s\S])*?)<\/\1>\n*/i,iC=/&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,gy=/^<!--[\s\S]*?(?:-->)/,sC=/^(data|aria|x)-[a-z_][a-z\d_.-]*$/,Xu=/^ *<([a-z][a-z0-9:]*)(?:\s+((?:<.*?>|[^>])*))?\/?>(?!<\/\1>)(\s*\n)?/i,rC=/^\{.*\}$/,nC=/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,oC=/^<([^ >]+@[^ >]+)>/,lC=/^<([^ >]+:\/[^ >]+)>/,uC=/-([a-z])?/gi,yy=/^(.*\|?.*)\n *(\|? *[-:]+ *\|[-| :]*)\n((?:.*\|.*\n)*)\n?/,dC=/^\[([^\]]*)\]:\s+<?([^\s>]+)>?\s*("([^"]*)")?/,cC=/^!\[([^\]]*)\] ?\[([^\]]*)\]/,pC=/^\[([^\]]*)\] ?\[([^\]]*)\]/,fC=/(\[|\])/g,mC=/(\n|^[-*]\s|^#|^ {2,}|^-{2,}|^>\s)/,hC=/\t/g,gC=/^ *\| */,yC=/(^ *\||\| *$)/g,_C=/ *$/,vC=/^ *:-+: *$/,bC=/^ *:-+ *$/,wC=/^ *-+: *$/,TC=/^([*_])\1((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1\1(?!\1)/,qC=/^([*_])((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1(?!\1|\w)/,xC=/^==((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/,DC=/^~~((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,kC=/^\\([^0-9A-Za-z\s])/,CC=/^[\s\S]+?(?=[^0-9A-Z\s\u00c0-\uffff&#;.()'"]|\d+\.|\n\n| {2,}\n|\w+:\S|$)/i,SC=/^\n+/,PC=/^([ \t]*)/,AC=/\\([^\\])/g,Lf=/ *\n+$/,IC=/(?:^|\n)( *)$/,wc="(?:\\d+\\.)",Tc="(?:[*+-])";function _y(e){return"( *)("+(e===1?wc:Tc)+") +"}const vy=_y(1),by=_y(2);function wy(e){return new RegExp("^"+(e===1?vy:by))}const RC=wy(1),jC=wy(2);function Ty(e){return new RegExp("^"+(e===1?vy:by)+"[^\\n]*(?:\\n(?!\\1"+(e===1?wc:Tc)+" )[^\\n]*)*(\\n|$)","gm")}const qy=Ty(1),xy=Ty(2);function Dy(e){const t=e===1?wc:Tc;return new RegExp("^( *)("+t+") [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1"+t+" (?!"+t+" ))\\n*|\\s*\\n*$)")}const ky=Dy(1),Cy=Dy(2);function Of(e,t){const a=t===1,i=a?ky:Cy,s=a?qy:xy,r=a?RC:jC;return{t(n,o,l){const u=IC.exec(l);return u&&(o.o||!o._&&!o.u)?i.exec(n=u[1]+n):null},i:J.HIGH,l(n,o,l){const u=a?+n[2]:void 0,f=n[0].replace(Vk,`
`).match(s);let y=!1;return{p:f.map(function(_,d){const h=r.exec(_)[0].length,c=new RegExp("^ {1,"+h+"}","gm"),x=_.replace(c,"").replace(r,""),m=d===f.length-1,p=x.indexOf(`

`)!==-1||m&&y;y=p;const g=l._,w=l.o;let q;l.o=!0,p?(l._=!1,q=x.replace(Lf,`

`)):(l._=!0,q=x.replace(Lf,""));const k=o(q,l);return l._=g,l.o=w,k}),m:a,g:u}},h:(n,o,l)=>e(n.m?"ol":"ul",{key:l.k,start:n.g},n.p.map(function(u,f){return e("li",{key:f},o(u,l))}))}}const EC=/^\[([^\]]*)]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/,FC=/^!\[([^\]]*)]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/,Sy=[dy,cy,py,fy,hy,my,gy,yy,qy,ky,xy,Cy],NC=[...Sy,/^[^\n]+(?:  \n|\n{2,})/,Gu,Xu];function LC(e){return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g,"a").replace(/[çÇ]/g,"c").replace(/[ðÐ]/g,"d").replace(/[ÈÉÊËéèêë]/g,"e").replace(/[ÏïÎîÍíÌì]/g,"i").replace(/[Ññ]/g,"n").replace(/[øØœŒÕõÔôÓóÒò]/g,"o").replace(/[ÜüÛûÚúÙù]/g,"u").replace(/[ŸÿÝý]/g,"y").replace(/[^a-z0-9- ]/gi,"").replace(/ /gi,"-").toLowerCase()}function OC(e){return wC.test(e)?"right":vC.test(e)?"center":bC.test(e)?"left":null}function Mf(e,t,a){const i=a.$;a.$=!0;const s=t(e.trim(),a);a.$=i;let r=[[]];return s.forEach(function(n,o){n.type==="tableSeparator"?o!==0&&o!==s.length-1&&r.push([]):(n.type!=="text"||s[o+1]!=null&&s[o+1].type!=="tableSeparator"||(n.v=n.v.replace(_C,"")),r[r.length-1].push(n))}),r}function MC(e,t,a){a._=!0;const i=Mf(e[1],t,a),s=e[2].replace(yC,"").split("|").map(OC),r=function(n,o,l){return n.trim().split(`
`).map(function(u){return Mf(u,o,l)})}(e[3],t,a);return a._=!1,{S:s,A:r,L:i,type:"table"}}function Bf(e,t){return e.S[t]==null?{}:{textAlign:e.S[t]}}function Ta(e){return function(t,a){return a._?e.exec(t):null}}function qa(e){return function(t,a){return a._||a.u?e.exec(t):null}}function ra(e){return function(t,a){return a._||a.u?null:e.exec(t)}}function ks(e){return function(t){return e.exec(t)}}function BC(e,t,a){if(t._||t.u||a&&!a.endsWith(`
`))return null;let i="";e.split(`
`).every(r=>!Sy.some(n=>n.test(r))&&(i+=r+`
`,r.trim()));const s=i.trimEnd();return s==""?null:[i,s]}function ki(e){try{if(decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g,"").match(/^\s*(javascript|vbscript|data(?!:image)):/i))return}catch{return null}return e}function zf(e){return e.replace(AC,"$1")}function pn(e,t,a){const i=a._||!1,s=a.u||!1;a._=!0,a.u=!0;const r=e(t,a);return a._=i,a.u=s,r}function zC(e,t,a){const i=a._||!1,s=a.u||!1;a._=!1,a.u=!0;const r=e(t,a);return a._=i,a.u=s,r}function $C(e,t,a){return a._=!1,e(t,a)}const El=(e,t,a)=>({v:pn(t,e[1],a)});function Fl(){return{}}function Nl(){return null}function WC(...e){return e.filter(Boolean).join(" ")}function Ll(e,t,a){let i=e;const s=t.split(".");for(;s.length&&(i=i[s[0]],i!==void 0);)s.shift();return i||a}var J;function UC(e,t={}){t.overrides=t.overrides||{},t.slugify=t.slugify||LC,t.namedCodesToUnicode=t.namedCodesToUnicode?ti({},Nf,t.namedCodesToUnicode):Nf;const a=t.createElement||b.createElement;function i(d,h,...c){const x=Ll(t.overrides,`${d}.props`,{});return a(function(m,p){const g=Ll(p,m);return g?typeof g=="function"||typeof g=="object"&&"render"in g?g:Ll(p,`${m}.component`,m):m}(d,t.overrides),ti({},h,x,{className:WC(h==null?void 0:h.className,x.className)||void 0}),...c)}function s(d){let h=!1;t.forceInline?h=!0:t.forceBlock||(h=mC.test(d)===!1);const c=f(u(h?d:`${d.trimEnd().replace(SC,"")}

`,{_:h}));for(;typeof c[c.length-1]=="string"&&!c[c.length-1].trim();)c.pop();if(t.wrapper===null)return c;const x=t.wrapper||(h?"span":"div");let m;if(c.length>1||t.forceWrapper)m=c;else{if(c.length===1)return m=c[0],typeof m=="string"?i("span",{key:"outer"},m):m;m=null}return b.createElement(x,{key:"outer"},m)}function r(d){const h=d.match(Uk);return h?h.reduce(function(c,x,m){const p=x.indexOf("=");if(p!==-1){const g=function(T){return T.indexOf("-")!==-1&&T.match(sC)===null&&(T=T.replace(uC,function(C,I){return I.toUpperCase()})),T}(x.slice(0,p)).trim(),w=function(T){const C=T[0];return(C==='"'||C==="'")&&T.length>=2&&T[T.length-1]===C?T.slice(1,-1):T}(x.slice(p+1).trim()),q=Ff[g]||g,k=c[q]=function(T,C){return T==="style"?C.split(/;\s?/).reduce(function(I,P){const F=P.slice(0,P.indexOf(":"));return I[F.replace(/(-[a-z])/g,B=>B[1].toUpperCase())]=P.slice(F.length+1).trim(),I},{}):T==="href"?ki(C):(C.match(rC)&&(C=C.slice(1,C.length-1)),C==="true"||C!=="false"&&C)}(g,w);typeof k=="string"&&(Gu.test(k)||Xu.test(k))&&(c[q]=b.cloneElement(s(k.trim()),{key:m}))}else x!=="style"&&(c[Ff[x]||x]=!0);return c},{}):null}const n=[],o={},l={blockQuote:{t:ra(dy),i:J.HIGH,l:(d,h,c)=>({v:h(d[0].replace(Kk,""),c)}),h:(d,h,c)=>i("blockquote",{key:c.k},h(d.v,c))},breakLine:{t:ks(Gk),i:J.HIGH,l:Fl,h:(d,h,c)=>i("br",{key:c.k})},breakThematic:{t:ra(Xk),i:J.HIGH,l:Fl,h:(d,h,c)=>i("hr",{key:c.k})},codeBlock:{t:ra(py),i:J.MAX,l:d=>({v:d[0].replace(/^ {4}/gm,"").replace(/\n+$/,""),M:void 0}),h:(d,h,c)=>i("pre",{key:c.k},i("code",ti({},d.O,{className:d.M?`lang-${d.M}`:""}),d.v))},codeFenced:{t:ra(cy),i:J.MAX,l:d=>({O:r(d[3]||""),v:d[4],M:d[2]||void 0,type:"codeBlock"})},codeInline:{t:qa(Qk),i:J.LOW,l:d=>({v:d[2]}),h:(d,h,c)=>i("code",{key:c.k},d.v)},footnote:{t:ra(Zk),i:J.MAX,l:d=>(n.push({I:d[2],j:d[1]}),{}),h:Nl},footnoteReference:{t:Ta(eC),i:J.HIGH,l:d=>({v:d[1],B:`#${t.slugify(d[1])}`}),h:(d,h,c)=>i("a",{key:c.k,href:ki(d.B)},i("sup",{key:c.k},d.v))},gfmTask:{t:Ta(aC),i:J.HIGH,l:d=>({R:d[1].toLowerCase()==="x"}),h:(d,h,c)=>i("input",{checked:d.R,key:c.k,readOnly:!0,type:"checkbox"})},heading:{t:ra(t.enforceAtxHeadings?my:fy),i:J.HIGH,l:(d,h,c)=>({v:pn(h,d[2],c),T:t.slugify(d[2]),C:d[1].length}),h:(d,h,c)=>i(`h${d.C}`,{id:d.T,key:c.k},h(d.v,c))},headingSetext:{t:ra(hy),i:J.MAX,l:(d,h,c)=>({v:pn(h,d[1],c),C:d[2]==="="?1:2,type:"heading"})},htmlComment:{t:ks(gy),i:J.HIGH,l:()=>({}),h:Nl},image:{t:qa(FC),i:J.HIGH,l:d=>({D:d[1],B:zf(d[2]),F:d[3]}),h:(d,h,c)=>i("img",{key:c.k,alt:d.D||void 0,title:d.F||void 0,src:ki(d.B)})},link:{t:Ta(EC),i:J.LOW,l:(d,h,c)=>({v:zC(h,d[1],c),B:zf(d[2]),F:d[3]}),h:(d,h,c)=>i("a",{key:c.k,href:ki(d.B),title:d.F},h(d.v,c))},linkAngleBraceStyleDetector:{t:Ta(lC),i:J.MAX,l:d=>({v:[{v:d[1],type:"text"}],B:d[1],type:"link"})},linkBareUrlDetector:{t:(d,h)=>h.N?null:Ta(nC)(d,h),i:J.MAX,l:d=>({v:[{v:d[1],type:"text"}],B:d[1],F:void 0,type:"link"})},linkMailtoDetector:{t:Ta(oC),i:J.MAX,l(d){let h=d[1],c=d[1];return Hk.test(c)||(c="mailto:"+c),{v:[{v:h.replace("mailto:",""),type:"text"}],B:c,type:"link"}}},orderedList:Of(i,1),unorderedList:Of(i,2),newlineCoalescer:{t:ra(Jk),i:J.LOW,l:Fl,h:()=>`
`},paragraph:{t:BC,i:J.LOW,l:El,h:(d,h,c)=>i("p",{key:c.k},h(d.v,c))},ref:{t:Ta(dC),i:J.MAX,l:d=>(o[d[1]]={B:d[2],F:d[4]},{}),h:Nl},refImage:{t:qa(cC),i:J.MAX,l:d=>({D:d[1]||void 0,P:d[2]}),h:(d,h,c)=>i("img",{key:c.k,alt:d.D,src:ki(o[d.P].B),title:o[d.P].F})},refLink:{t:Ta(pC),i:J.MAX,l:(d,h,c)=>({v:h(d[1],c),Z:h(d[0].replace(fC,"\\$1"),c),P:d[2]}),h:(d,h,c)=>o[d.P]?i("a",{key:c.k,href:ki(o[d.P].B),title:o[d.P].F},h(d.v,c)):i("span",{key:c.k},h(d.Z,c))},table:{t:ra(yy),i:J.HIGH,l:MC,h:(d,h,c)=>i("table",{key:c.k},i("thead",null,i("tr",null,d.L.map(function(x,m){return i("th",{key:m,style:Bf(d,m)},h(x,c))}))),i("tbody",null,d.A.map(function(x,m){return i("tr",{key:m},x.map(function(p,g){return i("td",{key:g,style:Bf(d,g)},h(p,c))}))})))},tableSeparator:{t:function(d,h){return h.$?(h._=!0,gC.exec(d)):null},i:J.HIGH,l:function(){return{type:"tableSeparator"}},h:()=>" | "},text:{t:ks(CC),i:J.MIN,l:d=>({v:d[0].replace(iC,(h,c)=>t.namedCodesToUnicode[c]?t.namedCodesToUnicode[c]:h)}),h:d=>d.v},textBolded:{t:qa(TC),i:J.MED,l:(d,h,c)=>({v:h(d[2],c)}),h:(d,h,c)=>i("strong",{key:c.k},h(d.v,c))},textEmphasized:{t:qa(qC),i:J.LOW,l:(d,h,c)=>({v:h(d[2],c)}),h:(d,h,c)=>i("em",{key:c.k},h(d.v,c))},textEscaped:{t:qa(kC),i:J.HIGH,l:d=>({v:d[1],type:"text"})},textMarked:{t:qa(xC),i:J.LOW,l:El,h:(d,h,c)=>i("mark",{key:c.k},h(d.v,c))},textStrikethroughed:{t:qa(DC),i:J.LOW,l:El,h:(d,h,c)=>i("del",{key:c.k},h(d.v,c))}};t.disableParsingRawHTML!==!0&&(l.htmlBlock={t:ks(Gu),i:J.HIGH,l(d,h,c){const[,x]=d[3].match(PC),m=new RegExp(`^${x}`,"gm"),p=d[3].replace(m,""),g=(w=p,NC.some(C=>C.test(w))?$C:pn);var w;const q=d[1].toLowerCase(),k=Wk.indexOf(q)!==-1;c.N=c.N||q==="a";const T=k?d[3]:g(h,p,c);return c.N=!1,{O:r(d[2]),v:T,G:k,H:k?q:d[1]}},h:(d,h,c)=>i(d.H,ti({key:c.k},d.O),d.G?d.v:h(d.v,c))},l.htmlSelfClosing={t:ks(Xu),i:J.HIGH,l:d=>({O:r(d[2]||""),H:d[1]}),h:(d,h,c)=>i(d.H,ti({},d.O,{key:c.k}))});const u=function(d){let h=Object.keys(d);function c(x,m){let p=[],g="";for(;x;){let w=0;for(;w<h.length;){const q=h[w],k=d[q],T=k.t(x,m,g);if(T){const C=T[0];x=x.substring(C.length);const I=k.l(T,c,m);I.type==null&&(I.type=q),p.push(I),g=C;break}w++}}return p}return h.sort(function(x,m){let p=d[x].i,g=d[m].i;return p!==g?p-g:x<m?-1:1}),function(x,m){return c(function(p){return p.replace(Yk,`
`).replace(tC,"").replace(hC,"    ")}(x),m)}}(l),f=(y=function(d){return function(h,c,x){return d[h.type].h(h,c,x)}}(l),function d(h,c={}){if(Array.isArray(h)){const x=c.k,m=[];let p=!1;for(let g=0;g<h.length;g++){c.k=g;const w=d(h[g],c),q=typeof w=="string";q&&p?m[m.length-1]+=w:w!==null&&m.push(w),p=q}return c.k=x,m}return y(h,d,c)});var y;const _=s(e);return n.length?i("div",null,_,i("footer",{key:"footer"},n.map(function(d){return i("div",{id:t.slugify(d.j),key:d.j},d.j,f(u(d.I,{_:!0})))}))):_}(function(e){e[e.MAX=0]="MAX",e[e.HIGH=1]="HIGH",e[e.MED=2]="MED",e[e.LOW=3]="LOW",e[e.MIN=4]="MIN"})(J||(J={}));const Qu=e=>{let{children:t,options:a}=e,i=function(s,r){if(s==null)return{};var n,o,l={},u=Object.keys(s);for(o=0;o<u.length;o++)r.indexOf(n=u[o])>=0||(l[n]=s[n]);return l}(e,$k);return b.cloneElement(UC(t,a),i)},$f=_i.entrypointtypes,HC=_i.plugins,Wf=_i.status_dict,VC="/aiida-registry/pr-preview/pr-253/";function KC({pluginKey:e}){const t=HC[e];return window.scrollTo(0,0),document.documentElement.style.scrollBehavior="smooth",v.jsx(v.Fragment,{children:v.jsxs("div",{id:"details",className:"fade-enter",children:[v.jsxs("h1",{className:"plugin-header",children:['AiiDA plugin package "',v.jsx("a",{href:t.code_home,children:t.name}),'"']}),v.jsx(Fu,{to:"/",children:v.jsx("p",{style:{display:"inline"},children:"< back to the registry index"})}),v.jsx("h2",{id:"general.information",children:"General information"}),v.jsxs("div",{children:[v.jsxs("p",{children:[v.jsx("strong",{children:"Current state: "}),v.jsx("img",{className:"svg-badge",src:`${VC}${Wf[t.development_status][1]}`,title:Wf[t.development_status][0]})]}),t.metadata.description&&v.jsxs("p",{children:[v.jsx("strong",{children:"Short description"}),": ",t.metadata.description]}),t.pip_url&&v.jsxs("p",{children:[v.jsx("strong",{children:"How to install"}),": ",v.jsx("code",{children:t.pip_install_cmd})]}),v.jsxs("p",{children:[v.jsx("strong",{children:"Source code"}),": ",v.jsx("a",{href:t.code_home,target:"_blank",children:"Go to the source code repository"})]}),t.documentation_url?v.jsxs("p",{children:[v.jsx("strong",{children:"Documentation"}),": ",v.jsx("a",{href:t.documentation_url,target:"_blank",children:"Go to plugin documentation"})]}):v.jsxs("p",{children:[v.jsx("strong",{children:"Documentation"}),": No documentation provided by the package author"]})]}),v.jsx("h2",{id:"detailed.information",children:"Detailed information"}),Object.keys(t.metadata).length!==0?v.jsxs(v.Fragment,{children:[v.jsxs("p",{children:[v.jsx("strong",{children:"Author(s)"}),": ",t.metadata.author]}),t.metadata.author_email&&v.jsxs("p",{children:[v.jsx("strong",{children:"Contact"}),":"," ",v.jsx("a",{href:`mailto:${t.metadata.author_email}`,children:t.metadata.author_email})]}),v.jsxs("p",{children:[v.jsx("strong",{children:"How to use from python"}),":"," ",v.jsxs("code",{children:["import ",t.package_name]})]}),v.jsxs("p",{children:[v.jsx("strong",{children:"Most recent version"}),": ",t.metadata.version]}),t.aiida_version&&v.jsxs("p",{children:[v.jsx("strong",{children:"Compatibility: "}),v.jsx("img",{className:"svg-badge",src:`https://img.shields.io/badge/AiiDA-${t.aiida_version}-007ec6.svg?logo=${gg}`})]}),t.summaryinfo.length!==0&&v.jsxs(v.Fragment,{children:[v.jsx("h3",{id:"plugins",children:"Plugins provided by the package"}),t.summaryinfo.map(a=>v.jsxs("span",{className:"badge",children:[v.jsx("span",{className:`badge-left ${a.colorclass}`,children:a.text}),v.jsx("span",{className:"badge-right",children:a.count})]},a.text))]}),t.entry_points?Object.entries(t.entry_points).map(([a,i])=>v.jsx(v.Fragment,{children:v.jsxs("div",{children:[v.jsx("h2",{style:{color:"black"},id:a,children:a in $f?v.jsxs(v.Fragment,{children:[$f[a]," ",v.jsxs("span",{className:"entrypointraw",children:["(",a,")"]})]}):a}),v.jsx("ul",{children:Object.entries(i).map(([s,r])=>v.jsxs("li",{children:[v.jsx("h2",{style:{color:"black"},id:`${a}.${s}`,children:s}),typeof r=="string"?v.jsxs("div",{className:"classbox",children:["class",v.jsxs("span",{className:"tooltiptext",children:[" ",r]})]}):v.jsx(GC,{entryPoints:r})]},s))})]},a)})):v.jsx("p",{children:"No entry points defined for this plugin."})]}):v.jsx("div",{id:"description",children:v.jsxs("p",{children:["Detailed information for this package could not be obtained. Ask the plugin author to add a ",v.jsx("code",{children:"setup.json"})," file to the plugin source code."]})})]})})}const GC=({entryPoints:e})=>v.jsxs("div",{style:{overflow:"auto"},children:[v.jsx("table",{children:v.jsx("tbody",{children:v.jsxs("tr",{children:[v.jsx("th",{children:"Class"}),v.jsx("td",{children:v.jsx("code",{children:e.class})})]})})}),v.jsxs("table",{children:[v.jsx("tr",{children:v.jsx("th",{children:"Description"})}),e.description.map(t=>v.jsx("tr",{className:"ep_description",children:v.jsx(Qu,{children:t.trim()})}))]}),v.jsxs("table",{children:[v.jsxs("tr",{children:[v.jsx("th",{children:"Inputs"}),v.jsx("th",{children:"Required"}),v.jsx("th",{children:"Valid Types"}),v.jsx("th",{children:"Description"})]}),v.jsx(Uf,{spec:e.spec.inputs}),v.jsxs("tr",{children:[v.jsx("th",{children:"Outputs"}),v.jsx("th",{children:"Required"}),v.jsx("th",{children:"Valid Types"}),v.jsx("th",{children:"Description"})]}),v.jsx(Uf,{spec:e.spec.outputs})]}),v.jsxs("table",{children:[v.jsx("tr",{children:v.jsx("th",{children:"Exit Codes"})}),v.jsxs("tr",{children:[v.jsx("th",{children:"Status"}),v.jsx("th",{children:"Message"})]}),e.spec.exit_codes.map(t=>v.jsxs("tr",{className:"ep_description",children:[v.jsx("td",{children:t.status}),v.jsx(Qu,{children:t.message})]}))]})]}),Uf=({spec:e})=>v.jsx(v.Fragment,{children:e.map(t=>v.jsxs("tr",{className:"ep_description",children:[v.jsx("td",{children:t.name}),v.jsx("td",{children:t.required.toString()}),v.jsx("td",{children:t.valid_types}),v.jsx(Qu,{children:t.info})]}))}),XC=["addEndListener","appear","children","container","direction","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function QC(e,t,a){const i=t.getBoundingClientRect(),s=a&&a.getBoundingClientRect(),r=ea(t);let n;if(t.fakeTransform)n=t.fakeTransform;else{const u=r.getComputedStyle(t);n=u.getPropertyValue("-webkit-transform")||u.getPropertyValue("transform")}let o=0,l=0;if(n&&n!=="none"&&typeof n=="string"){const u=n.split("(")[1].split(")")[0].split(",");o=parseInt(u[4],10),l=parseInt(u[5],10)}return e==="left"?s?`translateX(${s.right+o-i.left}px)`:`translateX(${r.innerWidth+o-i.left}px)`:e==="right"?s?`translateX(-${i.right-s.left-o}px)`:`translateX(-${i.left+i.width-o}px)`:e==="up"?s?`translateY(${s.bottom+l-i.top}px)`:`translateY(${r.innerHeight+l-i.top}px)`:s?`translateY(-${i.top-s.top+i.height-l}px)`:`translateY(-${i.top+i.height-l}px)`}function JC(e){return typeof e=="function"?e():e}function Kr(e,t,a){const i=JC(a),s=QC(e,t,i);s&&(t.style.webkitTransform=s,t.style.transform=s)}const YC=b.forwardRef(function(t,a){const i=xr(),s={enter:i.transitions.easing.easeOut,exit:i.transitions.easing.sharp},r={enter:i.transitions.duration.enteringScreen,exit:i.transitions.duration.leavingScreen},{addEndListener:n,appear:o=!0,children:l,container:u,direction:f="down",easing:y=s,in:_,onEnter:d,onEntered:h,onEntering:c,onExit:x,onExited:m,onExiting:p,style:g,timeout:w=r,TransitionComponent:q=fc}=t,k=U(t,XC),T=b.useRef(null),C=Qe(l.ref,T,a),I=S=>R=>{S&&(R===void 0?S(T.current):S(T.current,R))},P=I((S,R)=>{Kr(f,S,u),gc(S),d&&d(S,R)}),F=I((S,R)=>{const N=is({timeout:w,style:g,easing:y},{mode:"enter"});S.style.webkitTransition=i.transitions.create("-webkit-transform",D({},N)),S.style.transition=i.transitions.create("transform",D({},N)),S.style.webkitTransform="none",S.style.transform="none",c&&c(S,R)}),B=I(h),O=I(p),j=I(S=>{const R=is({timeout:w,style:g,easing:y},{mode:"exit"});S.style.webkitTransition=i.transitions.create("-webkit-transform",R),S.style.transition=i.transitions.create("transform",R),Kr(f,S,u),x&&x(S)}),E=I(S=>{S.style.webkitTransition="",S.style.transition="",m&&m(S)}),z=S=>{n&&n(T.current,S)},M=b.useCallback(()=>{T.current&&Kr(f,T.current,u)},[f,u]);return b.useEffect(()=>{if(_||f==="down"||f==="right")return;const S=To(()=>{T.current&&Kr(f,T.current,u)}),R=ea(T.current);return R.addEventListener("resize",S),()=>{S.clear(),R.removeEventListener("resize",S)}},[f,_,u]),b.useEffect(()=>{_||M()},[_,M]),v.jsx(q,D({nodeRef:T,onEnter:P,onEntered:B,onEntering:F,onExit:j,onExited:E,onExiting:O,addEndListener:z,appear:o,in:_,timeout:w},k,{children:(S,R)=>b.cloneElement(l,D({ref:C,style:D({visibility:S==="exited"&&!_?"hidden":void 0},g,l.props.style)},R))}))}),ZC=YC;function eS(e){return Ae("MuiDrawer",e)}De("MuiDrawer",["root","docked","paper","paperAnchorLeft","paperAnchorRight","paperAnchorTop","paperAnchorBottom","paperAnchorDockedLeft","paperAnchorDockedRight","paperAnchorDockedTop","paperAnchorDockedBottom","modal"]);const tS=["BackdropProps"],aS=["anchor","BackdropProps","children","className","elevation","hideBackdrop","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"],Py=(e,t)=>{const{ownerState:a}=e;return[t.root,(a.variant==="permanent"||a.variant==="persistent")&&t.docked,t.modal]},iS=e=>{const{classes:t,anchor:a,variant:i}=e,s={root:["root"],docked:[(i==="permanent"||i==="persistent")&&"docked"],modal:["modal"],paper:["paper",`paperAnchor${qe(a)}`,i!=="temporary"&&`paperAnchorDocked${qe(a)}`]};return Ne(s,eS,t)},sS=V(Jg,{name:"MuiDrawer",slot:"Root",overridesResolver:Py})(({theme:e})=>({zIndex:(e.vars||e).zIndex.drawer})),Hf=V("div",{shouldForwardProp:ta,name:"MuiDrawer",slot:"Docked",skipVariantsResolver:!1,overridesResolver:Py})({flex:"0 0 auto"}),rS=V(Yg,{name:"MuiDrawer",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.paper,t[`paperAnchor${qe(a.anchor)}`],a.variant!=="temporary"&&t[`paperAnchorDocked${qe(a.anchor)}`]]}})(({theme:e,ownerState:t})=>D({overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:(e.vars||e).zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},t.anchor==="left"&&{left:0},t.anchor==="top"&&{top:0,left:0,right:0,height:"auto",maxHeight:"100%"},t.anchor==="right"&&{right:0},t.anchor==="bottom"&&{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},t.anchor==="left"&&t.variant!=="temporary"&&{borderRight:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="top"&&t.variant!=="temporary"&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="right"&&t.variant!=="temporary"&&{borderLeft:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="bottom"&&t.variant!=="temporary"&&{borderTop:`1px solid ${(e.vars||e).palette.divider}`})),Ay={left:"right",right:"left",top:"down",bottom:"up"};function nS(e){return["left","right"].indexOf(e)!==-1}function oS(e,t){return e.direction==="rtl"&&nS(t)?Ay[t]:t}const lS=b.forwardRef(function(t,a){const i=Le({props:t,name:"MuiDrawer"}),s=xr(),r={enter:s.transitions.duration.enteringScreen,exit:s.transitions.duration.leavingScreen},{anchor:n="left",BackdropProps:o,children:l,className:u,elevation:f=16,hideBackdrop:y=!1,ModalProps:{BackdropProps:_}={},onClose:d,open:h=!1,PaperProps:c={},SlideProps:x,TransitionComponent:m=ZC,transitionDuration:p=r,variant:g="temporary"}=i,w=U(i.ModalProps,tS),q=U(i,aS),k=b.useRef(!1);b.useEffect(()=>{k.current=!0},[]);const T=oS(s,n),I=D({},i,{anchor:n,elevation:f,open:h,variant:g},q),P=iS(I),F=v.jsx(rS,D({elevation:g==="temporary"?f:0,square:!0},c,{className:X(P.paper,c.className),ownerState:I,children:l}));if(g==="permanent")return v.jsx(Hf,D({className:X(P.root,P.docked,u),ownerState:I,ref:a},q,{children:F}));const B=v.jsx(m,D({in:h,direction:Ay[T],timeout:p,appear:k.current},x,{children:F}));return g==="persistent"?v.jsx(Hf,D({className:X(P.root,P.docked,u),ownerState:I,ref:a},q,{children:B})):v.jsx(sS,D({BackdropProps:D({},o,_,{transitionDuration:p}),className:X(P.root,P.modal,u),open:h,ownerState:I,onClose:d,hideBackdrop:y,ref:a},q,w,{children:B}))}),uS=lS,dS=_i.plugins;function cS({pluginKey:e}){const t=dS[e];function a(){function s(){document.querySelector("header").style.top="-155px",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="0"}setTimeout(s,800)}const i=v.jsxs("div",{style:{paddingLeft:"10px"},children:[v.jsx("h1",{children:"Plugin content"}),v.jsx(gf,{}),v.jsx("p",{children:v.jsx("a",{style:{color:"black"},href:"#general.information",onClick:a,children:"General Information"})}),v.jsx("p",{children:v.jsx("a",{style:{color:"black"},href:"#detailed.information",onClick:a,children:"Detailed Information"})}),v.jsx("p",{children:v.jsx("a",{style:{color:"black"},href:"#plugins",onClick:a,children:"Plugins provided by the package"})}),t.entry_points&&Object.entries(t.entry_points).map(([s,r])=>v.jsx(v.Fragment,{children:v.jsx("ul",{children:v.jsxs("li",{children:[v.jsx("a",{style:{color:"black"},href:`#${s}`,onClick:a,children:s}),Object.entries(r).map(([n,o])=>v.jsx("ul",{children:v.jsx("li",{children:v.jsx("a",{style:{color:"black"},href:`#${s}.${n}`,onClick:a,children:n})})},n))]})})})),v.jsx(gf,{})]});return v.jsx(uS,{variant:"permanent",id:"sidebar",anchor:"right",sx:{display:{xs:"none",sm:"block"}},open:!0,children:i})}function pS(){return v.jsxs(v.Fragment,{children:[v.jsx(fS,{}),v.jsx("div",{style:{marginTop:"155px"},children:v.jsxs(Vb,{children:[v.jsx(Ru,{path:"/",element:v.jsx(zk,{})}),v.jsx(Ru,{path:"/:key",element:v.jsx(hS,{})})]})}),v.jsx(mS,{})]})}function fS(){return v.jsx("header",{children:v.jsxs("div",{style:{paddingLeft:"20px"},children:[v.jsx("h1",{children:v.jsx("a",{href:"http://aiidateam.github.io/aiida-registry",children:v.jsx("img",{src:aw,height:"70px"})})}),v.jsx("p",{style:{fontSize:"90%"},children:v.jsx("a",{href:"http://github.com/aiidateam/aiida-registry",style:{color:"#999"},children:"[View on GitHub/register your package]"})})]})})}function mS(){return v.jsxs("footer",{className:"footer",children:[v.jsx("hr",{}),"The official ",v.jsx("a",{href:"http://aiidateam.github.io/aiida-registry",children:"registry"})," of ",v.jsx("a",{href:"http://www.aiida.net",children:"AiiDA"})," plugins.",v.jsx("br",{}),"This work is supported by the ",v.jsx("a",{href:"http://nccr-marvel.ch",target:"_blank",children:"MARVEL National Centre for Competence in Research"})," funded by the ",v.jsx("a",{href:"http://www.snf.ch/en",target:"_blank",children:"Swiss National Science Foundation"}),", as well as by the ",v.jsx("a",{href:"http://www.max-centre.eu",target:"_blank",children:"MaX European Centre of Excellence"})," funded by the Horizon 2020 EINFRA-5 program, Grant No. 676598.",v.jsx("br",{}),v.jsx("br",{}),v.jsxs("div",{style:{textAlign:"center"},children:[v.jsx("img",{src:iw,height:"70px"}),"    ",v.jsx("img",{src:sw,height:"70px"})]})]})}function hS(){const{key:e}=Rb();b.useEffect(()=>(document.querySelector("footer").style.width="calc(100% - 380px)",()=>{document.querySelector("footer").style.width="calc(100% - 64px)"}),[]);function t(){var a=window.scrollY;window.onscroll=function(){var i=window.scrollY;a>i?(document.querySelector("header").style.top="0",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="155px"):a>150&&(document.querySelector("header").style.top="-155px",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="0"),a=i}}return t(),v.jsx(v.Fragment,{children:v.jsxs("div",{id:"detailsContainer",children:[v.jsx(KC,{pluginKey:e}),v.jsx(cS,{pluginKey:e})]})})}const gS="/aiida-registry/pr-preview/pr-253/";Ol.createRoot(document.getElementById("root")).render(v.jsx(zt.StrictMode,{children:v.jsx(Yb,{basename:gS,children:v.jsx(pS,{})})}));
