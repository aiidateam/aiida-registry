function o0(e,t){for(var a=0;a<t.length;a++){const i=t[a];if(typeof i!="string"&&!Array.isArray(i)){for(const n in i)if(n!=="default"&&!(n in e)){const r=Object.getOwnPropertyDescriptor(i,n);r&&Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:()=>i[n]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))i(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const s of r.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&i(s)}).observe(document,{childList:!0,subtree:!0});function a(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(n){if(n.ep)return;n.ep=!0;const r=a(n);fetch(n.href,r)}})();var pt=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Tc(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Fa(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var a=function i(){return this instanceof i?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};a.prototype=t.prototype}else a={};return Object.defineProperty(a,"__esModule",{value:!0}),Object.keys(e).forEach(function(i){var n=Object.getOwnPropertyDescriptor(e,i);Object.defineProperty(a,i,n.get?n:{enumerable:!0,get:function(){return e[i]}})}),a}var qg={exports:{}},Vo={},Cg={exports:{}},Z={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Xr=Symbol.for("react.element"),l0=Symbol.for("react.portal"),d0=Symbol.for("react.fragment"),u0=Symbol.for("react.strict_mode"),c0=Symbol.for("react.profiler"),p0=Symbol.for("react.provider"),f0=Symbol.for("react.context"),m0=Symbol.for("react.forward_ref"),h0=Symbol.for("react.suspense"),g0=Symbol.for("react.memo"),y0=Symbol.for("react.lazy"),wf=Symbol.iterator;function _0(e){return e===null||typeof e!="object"?null:(e=wf&&e[wf]||e["@@iterator"],typeof e=="function"?e:null)}var Sg={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Pg=Object.assign,Rg={};function In(e,t,a){this.props=e,this.context=t,this.refs=Rg,this.updater=a||Sg}In.prototype.isReactComponent={};In.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};In.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Ag(){}Ag.prototype=In.prototype;function xc(e,t,a){this.props=e,this.context=t,this.refs=Rg,this.updater=a||Sg}var Dc=xc.prototype=new Ag;Dc.constructor=xc;Pg(Dc,In.prototype);Dc.isPureReactComponent=!0;var kf=Array.isArray,Ig=Object.prototype.hasOwnProperty,qc={current:null},Eg={key:!0,ref:!0,__self:!0,__source:!0};function Ng(e,t,a){var i,n={},r=null,s=null;if(t!=null)for(i in t.ref!==void 0&&(s=t.ref),t.key!==void 0&&(r=""+t.key),t)Ig.call(t,i)&&!Eg.hasOwnProperty(i)&&(n[i]=t[i]);var o=arguments.length-2;if(o===1)n.children=a;else if(1<o){for(var l=Array(o),d=0;d<o;d++)l[d]=arguments[d+2];n.children=l}if(e&&e.defaultProps)for(i in o=e.defaultProps,o)n[i]===void 0&&(n[i]=o[i]);return{$$typeof:Xr,type:e,key:r,ref:s,props:n,_owner:qc.current}}function v0(e,t){return{$$typeof:Xr,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Cc(e){return typeof e=="object"&&e!==null&&e.$$typeof===Xr}function b0(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(a){return t[a]})}var Tf=/\/+/g;function nd(e,t){return typeof e=="object"&&e!==null&&e.key!=null?b0(""+e.key):t.toString(36)}function $s(e,t,a,i,n){var r=typeof e;(r==="undefined"||r==="boolean")&&(e=null);var s=!1;if(e===null)s=!0;else switch(r){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case Xr:case l0:s=!0}}if(s)return s=e,n=n(s),e=i===""?"."+nd(s,0):i,kf(n)?(a="",e!=null&&(a=e.replace(Tf,"$&/")+"/"),$s(n,t,a,"",function(d){return d})):n!=null&&(Cc(n)&&(n=v0(n,a+(!n.key||s&&s.key===n.key?"":(""+n.key).replace(Tf,"$&/")+"/")+e)),t.push(n)),1;if(s=0,i=i===""?".":i+":",kf(e))for(var o=0;o<e.length;o++){r=e[o];var l=i+nd(r,o);s+=$s(r,t,a,l,n)}else if(l=_0(e),typeof l=="function")for(e=l.call(e),o=0;!(r=e.next()).done;)r=r.value,l=i+nd(r,o++),s+=$s(r,t,a,l,n);else if(r==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function hs(e,t,a){if(e==null)return e;var i=[],n=0;return $s(e,i,"","",function(r){return t.call(a,r,n++)}),i}function w0(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(a){(e._status===0||e._status===-1)&&(e._status=1,e._result=a)},function(a){(e._status===0||e._status===-1)&&(e._status=2,e._result=a)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var st={current:null},Us={transition:null},k0={ReactCurrentDispatcher:st,ReactCurrentBatchConfig:Us,ReactCurrentOwner:qc};function jg(){throw Error("act(...) is not supported in production builds of React.")}Z.Children={map:hs,forEach:function(e,t,a){hs(e,function(){t.apply(this,arguments)},a)},count:function(e){var t=0;return hs(e,function(){t++}),t},toArray:function(e){return hs(e,function(t){return t})||[]},only:function(e){if(!Cc(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};Z.Component=In;Z.Fragment=d0;Z.Profiler=c0;Z.PureComponent=xc;Z.StrictMode=u0;Z.Suspense=h0;Z.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=k0;Z.act=jg;Z.cloneElement=function(e,t,a){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=Pg({},e.props),n=e.key,r=e.ref,s=e._owner;if(t!=null){if(t.ref!==void 0&&(r=t.ref,s=qc.current),t.key!==void 0&&(n=""+t.key),e.type&&e.type.defaultProps)var o=e.type.defaultProps;for(l in t)Ig.call(t,l)&&!Eg.hasOwnProperty(l)&&(i[l]=t[l]===void 0&&o!==void 0?o[l]:t[l])}var l=arguments.length-2;if(l===1)i.children=a;else if(1<l){o=Array(l);for(var d=0;d<l;d++)o[d]=arguments[d+2];i.children=o}return{$$typeof:Xr,type:e.type,key:n,ref:r,props:i,_owner:s}};Z.createContext=function(e){return e={$$typeof:f0,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:p0,_context:e},e.Consumer=e};Z.createElement=Ng;Z.createFactory=function(e){var t=Ng.bind(null,e);return t.type=e,t};Z.createRef=function(){return{current:null}};Z.forwardRef=function(e){return{$$typeof:m0,render:e}};Z.isValidElement=Cc;Z.lazy=function(e){return{$$typeof:y0,_payload:{_status:-1,_result:e},_init:w0}};Z.memo=function(e,t){return{$$typeof:g0,type:e,compare:t===void 0?null:t}};Z.startTransition=function(e){var t=Us.transition;Us.transition={};try{e()}finally{Us.transition=t}};Z.unstable_act=jg;Z.useCallback=function(e,t){return st.current.useCallback(e,t)};Z.useContext=function(e){return st.current.useContext(e)};Z.useDebugValue=function(){};Z.useDeferredValue=function(e){return st.current.useDeferredValue(e)};Z.useEffect=function(e,t){return st.current.useEffect(e,t)};Z.useId=function(){return st.current.useId()};Z.useImperativeHandle=function(e,t,a){return st.current.useImperativeHandle(e,t,a)};Z.useInsertionEffect=function(e,t){return st.current.useInsertionEffect(e,t)};Z.useLayoutEffect=function(e,t){return st.current.useLayoutEffect(e,t)};Z.useMemo=function(e,t){return st.current.useMemo(e,t)};Z.useReducer=function(e,t,a){return st.current.useReducer(e,t,a)};Z.useRef=function(e){return st.current.useRef(e)};Z.useState=function(e){return st.current.useState(e)};Z.useSyncExternalStore=function(e,t,a){return st.current.useSyncExternalStore(e,t,a)};Z.useTransition=function(){return st.current.useTransition()};Z.version="18.3.1";Cg.exports=Z;var b=Cg.exports;const Zt=Tc(b),lo=o0({__proto__:null,default:Zt},[b]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var T0=b,x0=Symbol.for("react.element"),D0=Symbol.for("react.fragment"),q0=Object.prototype.hasOwnProperty,C0=T0.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,S0={key:!0,ref:!0,__self:!0,__source:!0};function Fg(e,t,a){var i,n={},r=null,s=null;a!==void 0&&(r=""+a),t.key!==void 0&&(r=""+t.key),t.ref!==void 0&&(s=t.ref);for(i in t)q0.call(t,i)&&!S0.hasOwnProperty(i)&&(n[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps,t)n[i]===void 0&&(n[i]=t[i]);return{$$typeof:x0,type:e,key:r,ref:s,props:n,_owner:C0.current}}Vo.Fragment=D0;Vo.jsx=Fg;Vo.jsxs=Fg;qg.exports=Vo;var h=qg.exports,eu={},Og={exports:{}},St={},Mg={exports:{}},Lg={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(C,F){var B=C.length;C.push(F);e:for(;0<B;){var Y=B-1>>>1,V=C[Y];if(0<n(V,F))C[Y]=F,C[B]=V,B=Y;else break e}}function a(C){return C.length===0?null:C[0]}function i(C){if(C.length===0)return null;var F=C[0],B=C.pop();if(B!==F){C[0]=B;e:for(var Y=0,V=C.length,ae=V>>>1;Y<ae;){var X=2*(Y+1)-1,ue=C[X],ie=X+1,Be=C[ie];if(0>n(ue,B))ie<V&&0>n(Be,ue)?(C[Y]=Be,C[ie]=B,Y=ie):(C[Y]=ue,C[X]=B,Y=X);else if(ie<V&&0>n(Be,B))C[Y]=Be,C[ie]=B,Y=ie;else break e}}return F}function n(C,F){var B=C.sortIndex-F.sortIndex;return B!==0?B:C.id-F.id}if(typeof performance=="object"&&typeof performance.now=="function"){var r=performance;e.unstable_now=function(){return r.now()}}else{var s=Date,o=s.now();e.unstable_now=function(){return s.now()-o}}var l=[],d=[],c=1,f=null,g=3,w=!1,v=!1,y=!1,T=typeof setTimeout=="function"?setTimeout:null,u=typeof clearTimeout=="function"?clearTimeout:null,m=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function p(C){for(var F=a(d);F!==null;){if(F.callback===null)i(d);else if(F.startTime<=C)i(d),F.sortIndex=F.expirationTime,t(l,F);else break;F=a(d)}}function _(C){if(y=!1,p(C),!v)if(a(l)!==null)v=!0,M(k);else{var F=a(d);F!==null&&L(_,F.startTime-C)}}function k(C,F){v=!1,y&&(y=!1,u(S),S=-1),w=!0;var B=g;try{for(p(F),f=a(l);f!==null&&(!(f.expirationTime>F)||C&&!A());){var Y=f.callback;if(typeof Y=="function"){f.callback=null,g=f.priorityLevel;var V=Y(f.expirationTime<=F);F=e.unstable_now(),typeof V=="function"?f.callback=V:f===a(l)&&i(l),p(F)}else i(l);f=a(l)}if(f!==null)var ae=!0;else{var X=a(d);X!==null&&L(_,X.startTime-F),ae=!1}return ae}finally{f=null,g=B,w=!1}}var D=!1,x=null,S=-1,R=5,P=-1;function A(){return!(e.unstable_now()-P<R)}function I(){if(x!==null){var C=e.unstable_now();P=C;var F=!0;try{F=x(!0,C)}finally{F?E():(D=!1,x=null)}}else D=!1}var E;if(typeof m=="function")E=function(){m(I)};else if(typeof MessageChannel<"u"){var j=new MessageChannel,O=j.port2;j.port1.onmessage=I,E=function(){O.postMessage(null)}}else E=function(){T(I,0)};function M(C){x=C,D||(D=!0,E())}function L(C,F){S=T(function(){C(e.unstable_now())},F)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(C){C.callback=null},e.unstable_continueExecution=function(){v||w||(v=!0,M(k))},e.unstable_forceFrameRate=function(C){0>C||125<C?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):R=0<C?Math.floor(1e3/C):5},e.unstable_getCurrentPriorityLevel=function(){return g},e.unstable_getFirstCallbackNode=function(){return a(l)},e.unstable_next=function(C){switch(g){case 1:case 2:case 3:var F=3;break;default:F=g}var B=g;g=F;try{return C()}finally{g=B}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(C,F){switch(C){case 1:case 2:case 3:case 4:case 5:break;default:C=3}var B=g;g=C;try{return F()}finally{g=B}},e.unstable_scheduleCallback=function(C,F,B){var Y=e.unstable_now();switch(typeof B=="object"&&B!==null?(B=B.delay,B=typeof B=="number"&&0<B?Y+B:Y):B=Y,C){case 1:var V=-1;break;case 2:V=250;break;case 5:V=1073741823;break;case 4:V=1e4;break;default:V=5e3}return V=B+V,C={id:c++,callback:F,priorityLevel:C,startTime:B,expirationTime:V,sortIndex:-1},B>Y?(C.sortIndex=B,t(d,C),a(l)===null&&C===a(d)&&(y?(u(S),S=-1):y=!0,L(_,B-Y))):(C.sortIndex=V,t(l,C),v||w||(v=!0,M(k))),C},e.unstable_shouldYield=A,e.unstable_wrapCallback=function(C){var F=g;return function(){var B=g;g=F;try{return C.apply(this,arguments)}finally{g=B}}}})(Lg);Mg.exports=Lg;var P0=Mg.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var R0=b,Ct=P0;function N(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,a=1;a<arguments.length;a++)t+="&args[]="+encodeURIComponent(arguments[a]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Bg=new Set,Dr={};function Li(e,t){bn(e,t),bn(e+"Capture",t)}function bn(e,t){for(Dr[e]=t,e=0;e<t.length;e++)Bg.add(t[e])}var Sa=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),tu=Object.prototype.hasOwnProperty,A0=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,xf={},Df={};function I0(e){return tu.call(Df,e)?!0:tu.call(xf,e)?!1:A0.test(e)?Df[e]=!0:(xf[e]=!0,!1)}function E0(e,t,a,i){if(a!==null&&a.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return i?!1:a!==null?!a.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function N0(e,t,a,i){if(t===null||typeof t>"u"||E0(e,t,a,i))return!0;if(i)return!1;if(a!==null)switch(a.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function ot(e,t,a,i,n,r,s){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=i,this.attributeNamespace=n,this.mustUseProperty=a,this.propertyName=e,this.type=t,this.sanitizeURL=r,this.removeEmptyString=s}var Ye={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Ye[e]=new ot(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Ye[t]=new ot(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){Ye[e]=new ot(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Ye[e]=new ot(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Ye[e]=new ot(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){Ye[e]=new ot(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){Ye[e]=new ot(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){Ye[e]=new ot(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){Ye[e]=new ot(e,5,!1,e.toLowerCase(),null,!1,!1)});var Sc=/[\-:]([a-z])/g;function Pc(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Sc,Pc);Ye[t]=new ot(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Sc,Pc);Ye[t]=new ot(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Sc,Pc);Ye[t]=new ot(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){Ye[e]=new ot(e,1,!1,e.toLowerCase(),null,!1,!1)});Ye.xlinkHref=new ot("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){Ye[e]=new ot(e,1,!1,e.toLowerCase(),null,!0,!0)});function Rc(e,t,a,i){var n=Ye.hasOwnProperty(t)?Ye[t]:null;(n!==null?n.type!==0:i||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(N0(t,a,n,i)&&(a=null),i||n===null?I0(t)&&(a===null?e.removeAttribute(t):e.setAttribute(t,""+a)):n.mustUseProperty?e[n.propertyName]=a===null?n.type===3?!1:"":a:(t=n.attributeName,i=n.attributeNamespace,a===null?e.removeAttribute(t):(n=n.type,a=n===3||n===4&&a===!0?"":""+a,i?e.setAttributeNS(i,t,a):e.setAttribute(t,a))))}var Oa=R0.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,gs=Symbol.for("react.element"),Qi=Symbol.for("react.portal"),Zi=Symbol.for("react.fragment"),Ac=Symbol.for("react.strict_mode"),au=Symbol.for("react.profiler"),Wg=Symbol.for("react.provider"),zg=Symbol.for("react.context"),Ic=Symbol.for("react.forward_ref"),iu=Symbol.for("react.suspense"),nu=Symbol.for("react.suspense_list"),Ec=Symbol.for("react.memo"),Ka=Symbol.for("react.lazy"),$g=Symbol.for("react.offscreen"),qf=Symbol.iterator;function $n(e){return e===null||typeof e!="object"?null:(e=qf&&e[qf]||e["@@iterator"],typeof e=="function"?e:null)}var Pe=Object.assign,rd;function rr(e){if(rd===void 0)try{throw Error()}catch(a){var t=a.stack.trim().match(/\n( *(at )?)/);rd=t&&t[1]||""}return`
`+rd+e}var sd=!1;function od(e,t){if(!e||sd)return"";sd=!0;var a=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(d){var i=d}Reflect.construct(e,[],t)}else{try{t.call()}catch(d){i=d}e.call(t.prototype)}else{try{throw Error()}catch(d){i=d}e()}}catch(d){if(d&&i&&typeof d.stack=="string"){for(var n=d.stack.split(`
`),r=i.stack.split(`
`),s=n.length-1,o=r.length-1;1<=s&&0<=o&&n[s]!==r[o];)o--;for(;1<=s&&0<=o;s--,o--)if(n[s]!==r[o]){if(s!==1||o!==1)do if(s--,o--,0>o||n[s]!==r[o]){var l=`
`+n[s].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=s&&0<=o);break}}}finally{sd=!1,Error.prepareStackTrace=a}return(e=e?e.displayName||e.name:"")?rr(e):""}function j0(e){switch(e.tag){case 5:return rr(e.type);case 16:return rr("Lazy");case 13:return rr("Suspense");case 19:return rr("SuspenseList");case 0:case 2:case 15:return e=od(e.type,!1),e;case 11:return e=od(e.type.render,!1),e;case 1:return e=od(e.type,!0),e;default:return""}}function ru(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Zi:return"Fragment";case Qi:return"Portal";case au:return"Profiler";case Ac:return"StrictMode";case iu:return"Suspense";case nu:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case zg:return(e.displayName||"Context")+".Consumer";case Wg:return(e._context.displayName||"Context")+".Provider";case Ic:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Ec:return t=e.displayName||null,t!==null?t:ru(e.type)||"Memo";case Ka:t=e._payload,e=e._init;try{return ru(e(t))}catch{}}return null}function F0(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return ru(t);case 8:return t===Ac?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function di(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function Ug(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function O0(e){var t=Ug(e)?"checked":"value",a=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&typeof a<"u"&&typeof a.get=="function"&&typeof a.set=="function"){var n=a.get,r=a.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.call(this)},set:function(s){i=""+s,r.call(this,s)}}),Object.defineProperty(e,t,{enumerable:a.enumerable}),{getValue:function(){return i},setValue:function(s){i=""+s},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function ys(e){e._valueTracker||(e._valueTracker=O0(e))}function Kg(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var a=t.getValue(),i="";return e&&(i=Ug(e)?e.checked?"true":"false":e.value),e=i,e!==a?(t.setValue(e),!0):!1}function uo(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function su(e,t){var a=t.checked;return Pe({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:a??e._wrapperState.initialChecked})}function Cf(e,t){var a=t.defaultValue==null?"":t.defaultValue,i=t.checked!=null?t.checked:t.defaultChecked;a=di(t.value!=null?t.value:a),e._wrapperState={initialChecked:i,initialValue:a,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function Vg(e,t){t=t.checked,t!=null&&Rc(e,"checked",t,!1)}function ou(e,t){Vg(e,t);var a=di(t.value),i=t.type;if(a!=null)i==="number"?(a===0&&e.value===""||e.value!=a)&&(e.value=""+a):e.value!==""+a&&(e.value=""+a);else if(i==="submit"||i==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?lu(e,t.type,a):t.hasOwnProperty("defaultValue")&&lu(e,t.type,di(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Sf(e,t,a){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!(i!=="submit"&&i!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,a||t===e.value||(e.value=t),e.defaultValue=t}a=e.name,a!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,a!==""&&(e.name=a)}function lu(e,t,a){(t!=="number"||uo(e.ownerDocument)!==e)&&(a==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+a&&(e.defaultValue=""+a))}var sr=Array.isArray;function pn(e,t,a,i){if(e=e.options,t){t={};for(var n=0;n<a.length;n++)t["$"+a[n]]=!0;for(a=0;a<e.length;a++)n=t.hasOwnProperty("$"+e[a].value),e[a].selected!==n&&(e[a].selected=n),n&&i&&(e[a].defaultSelected=!0)}else{for(a=""+di(a),t=null,n=0;n<e.length;n++){if(e[n].value===a){e[n].selected=!0,i&&(e[n].defaultSelected=!0);return}t!==null||e[n].disabled||(t=e[n])}t!==null&&(t.selected=!0)}}function du(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(N(91));return Pe({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Pf(e,t){var a=t.value;if(a==null){if(a=t.children,t=t.defaultValue,a!=null){if(t!=null)throw Error(N(92));if(sr(a)){if(1<a.length)throw Error(N(93));a=a[0]}t=a}t==null&&(t=""),a=t}e._wrapperState={initialValue:di(a)}}function Gg(e,t){var a=di(t.value),i=di(t.defaultValue);a!=null&&(a=""+a,a!==e.value&&(e.value=a),t.defaultValue==null&&e.defaultValue!==a&&(e.defaultValue=a)),i!=null&&(e.defaultValue=""+i)}function Rf(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Hg(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function uu(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Hg(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var _s,Xg=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,a,i,n){MSApp.execUnsafeLocalFunction(function(){return e(t,a,i,n)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(_s=_s||document.createElement("div"),_s.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=_s.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function qr(e,t){if(t){var a=e.firstChild;if(a&&a===e.lastChild&&a.nodeType===3){a.nodeValue=t;return}}e.textContent=t}var cr={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},M0=["Webkit","ms","Moz","O"];Object.keys(cr).forEach(function(e){M0.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),cr[t]=cr[e]})});function Jg(e,t,a){return t==null||typeof t=="boolean"||t===""?"":a||typeof t!="number"||t===0||cr.hasOwnProperty(e)&&cr[e]?(""+t).trim():t+"px"}function Yg(e,t){e=e.style;for(var a in t)if(t.hasOwnProperty(a)){var i=a.indexOf("--")===0,n=Jg(a,t[a],i);a==="float"&&(a="cssFloat"),i?e.setProperty(a,n):e[a]=n}}var L0=Pe({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function cu(e,t){if(t){if(L0[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(N(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(N(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(N(61))}if(t.style!=null&&typeof t.style!="object")throw Error(N(62))}}function pu(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var fu=null;function Nc(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var mu=null,fn=null,mn=null;function Af(e){if(e=Qr(e)){if(typeof mu!="function")throw Error(N(280));var t=e.stateNode;t&&(t=Yo(t),mu(e.stateNode,e.type,t))}}function Qg(e){fn?mn?mn.push(e):mn=[e]:fn=e}function Zg(){if(fn){var e=fn,t=mn;if(mn=fn=null,Af(e),t)for(e=0;e<t.length;e++)Af(t[e])}}function ey(e,t){return e(t)}function ty(){}var ld=!1;function ay(e,t,a){if(ld)return e(t,a);ld=!0;try{return ey(e,t,a)}finally{ld=!1,(fn!==null||mn!==null)&&(ty(),Zg())}}function Cr(e,t){var a=e.stateNode;if(a===null)return null;var i=Yo(a);if(i===null)return null;a=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(e=e.type,i=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!i;break e;default:e=!1}if(e)return null;if(a&&typeof a!="function")throw Error(N(231,t,typeof a));return a}var hu=!1;if(Sa)try{var Un={};Object.defineProperty(Un,"passive",{get:function(){hu=!0}}),window.addEventListener("test",Un,Un),window.removeEventListener("test",Un,Un)}catch{hu=!1}function B0(e,t,a,i,n,r,s,o,l){var d=Array.prototype.slice.call(arguments,3);try{t.apply(a,d)}catch(c){this.onError(c)}}var pr=!1,co=null,po=!1,gu=null,W0={onError:function(e){pr=!0,co=e}};function z0(e,t,a,i,n,r,s,o,l){pr=!1,co=null,B0.apply(W0,arguments)}function $0(e,t,a,i,n,r,s,o,l){if(z0.apply(this,arguments),pr){if(pr){var d=co;pr=!1,co=null}else throw Error(N(198));po||(po=!0,gu=d)}}function Bi(e){var t=e,a=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(a=t.return),e=t.return;while(e)}return t.tag===3?a:null}function iy(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function If(e){if(Bi(e)!==e)throw Error(N(188))}function U0(e){var t=e.alternate;if(!t){if(t=Bi(e),t===null)throw Error(N(188));return t!==e?null:e}for(var a=e,i=t;;){var n=a.return;if(n===null)break;var r=n.alternate;if(r===null){if(i=n.return,i!==null){a=i;continue}break}if(n.child===r.child){for(r=n.child;r;){if(r===a)return If(n),e;if(r===i)return If(n),t;r=r.sibling}throw Error(N(188))}if(a.return!==i.return)a=n,i=r;else{for(var s=!1,o=n.child;o;){if(o===a){s=!0,a=n,i=r;break}if(o===i){s=!0,i=n,a=r;break}o=o.sibling}if(!s){for(o=r.child;o;){if(o===a){s=!0,a=r,i=n;break}if(o===i){s=!0,i=r,a=n;break}o=o.sibling}if(!s)throw Error(N(189))}}if(a.alternate!==i)throw Error(N(190))}if(a.tag!==3)throw Error(N(188));return a.stateNode.current===a?e:t}function ny(e){return e=U0(e),e!==null?ry(e):null}function ry(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=ry(e);if(t!==null)return t;e=e.sibling}return null}var sy=Ct.unstable_scheduleCallback,Ef=Ct.unstable_cancelCallback,K0=Ct.unstable_shouldYield,V0=Ct.unstable_requestPaint,Ne=Ct.unstable_now,G0=Ct.unstable_getCurrentPriorityLevel,jc=Ct.unstable_ImmediatePriority,oy=Ct.unstable_UserBlockingPriority,fo=Ct.unstable_NormalPriority,H0=Ct.unstable_LowPriority,ly=Ct.unstable_IdlePriority,Go=null,pa=null;function X0(e){if(pa&&typeof pa.onCommitFiberRoot=="function")try{pa.onCommitFiberRoot(Go,e,void 0,(e.current.flags&128)===128)}catch{}}var ea=Math.clz32?Math.clz32:Q0,J0=Math.log,Y0=Math.LN2;function Q0(e){return e>>>=0,e===0?32:31-(J0(e)/Y0|0)|0}var vs=64,bs=4194304;function or(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function mo(e,t){var a=e.pendingLanes;if(a===0)return 0;var i=0,n=e.suspendedLanes,r=e.pingedLanes,s=a&268435455;if(s!==0){var o=s&~n;o!==0?i=or(o):(r&=s,r!==0&&(i=or(r)))}else s=a&~n,s!==0?i=or(s):r!==0&&(i=or(r));if(i===0)return 0;if(t!==0&&t!==i&&!(t&n)&&(n=i&-i,r=t&-t,n>=r||n===16&&(r&4194240)!==0))return t;if(i&4&&(i|=a&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=i;0<t;)a=31-ea(t),n=1<<a,i|=e[a],t&=~n;return i}function Z0(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function ew(e,t){for(var a=e.suspendedLanes,i=e.pingedLanes,n=e.expirationTimes,r=e.pendingLanes;0<r;){var s=31-ea(r),o=1<<s,l=n[s];l===-1?(!(o&a)||o&i)&&(n[s]=Z0(o,t)):l<=t&&(e.expiredLanes|=o),r&=~o}}function yu(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function dy(){var e=vs;return vs<<=1,!(vs&4194240)&&(vs=64),e}function dd(e){for(var t=[],a=0;31>a;a++)t.push(e);return t}function Jr(e,t,a){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-ea(t),e[t]=a}function tw(e,t){var a=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var i=e.eventTimes;for(e=e.expirationTimes;0<a;){var n=31-ea(a),r=1<<n;t[n]=0,i[n]=-1,e[n]=-1,a&=~r}}function Fc(e,t){var a=e.entangledLanes|=t;for(e=e.entanglements;a;){var i=31-ea(a),n=1<<i;n&t|e[i]&t&&(e[i]|=t),a&=~n}}var le=0;function uy(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var cy,Oc,py,fy,my,_u=!1,ws=[],ei=null,ti=null,ai=null,Sr=new Map,Pr=new Map,Ga=[],aw="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nf(e,t){switch(e){case"focusin":case"focusout":ei=null;break;case"dragenter":case"dragleave":ti=null;break;case"mouseover":case"mouseout":ai=null;break;case"pointerover":case"pointerout":Sr.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pr.delete(t.pointerId)}}function Kn(e,t,a,i,n,r){return e===null||e.nativeEvent!==r?(e={blockedOn:t,domEventName:a,eventSystemFlags:i,nativeEvent:r,targetContainers:[n]},t!==null&&(t=Qr(t),t!==null&&Oc(t)),e):(e.eventSystemFlags|=i,t=e.targetContainers,n!==null&&t.indexOf(n)===-1&&t.push(n),e)}function iw(e,t,a,i,n){switch(t){case"focusin":return ei=Kn(ei,e,t,a,i,n),!0;case"dragenter":return ti=Kn(ti,e,t,a,i,n),!0;case"mouseover":return ai=Kn(ai,e,t,a,i,n),!0;case"pointerover":var r=n.pointerId;return Sr.set(r,Kn(Sr.get(r)||null,e,t,a,i,n)),!0;case"gotpointercapture":return r=n.pointerId,Pr.set(r,Kn(Pr.get(r)||null,e,t,a,i,n)),!0}return!1}function hy(e){var t=qi(e.target);if(t!==null){var a=Bi(t);if(a!==null){if(t=a.tag,t===13){if(t=iy(a),t!==null){e.blockedOn=t,my(e.priority,function(){py(a)});return}}else if(t===3&&a.stateNode.current.memoizedState.isDehydrated){e.blockedOn=a.tag===3?a.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Ks(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var a=vu(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(a===null){a=e.nativeEvent;var i=new a.constructor(a.type,a);fu=i,a.target.dispatchEvent(i),fu=null}else return t=Qr(a),t!==null&&Oc(t),e.blockedOn=a,!1;t.shift()}return!0}function jf(e,t,a){Ks(e)&&a.delete(t)}function nw(){_u=!1,ei!==null&&Ks(ei)&&(ei=null),ti!==null&&Ks(ti)&&(ti=null),ai!==null&&Ks(ai)&&(ai=null),Sr.forEach(jf),Pr.forEach(jf)}function Vn(e,t){e.blockedOn===t&&(e.blockedOn=null,_u||(_u=!0,Ct.unstable_scheduleCallback(Ct.unstable_NormalPriority,nw)))}function Rr(e){function t(n){return Vn(n,e)}if(0<ws.length){Vn(ws[0],e);for(var a=1;a<ws.length;a++){var i=ws[a];i.blockedOn===e&&(i.blockedOn=null)}}for(ei!==null&&Vn(ei,e),ti!==null&&Vn(ti,e),ai!==null&&Vn(ai,e),Sr.forEach(t),Pr.forEach(t),a=0;a<Ga.length;a++)i=Ga[a],i.blockedOn===e&&(i.blockedOn=null);for(;0<Ga.length&&(a=Ga[0],a.blockedOn===null);)hy(a),a.blockedOn===null&&Ga.shift()}var hn=Oa.ReactCurrentBatchConfig,ho=!0;function rw(e,t,a,i){var n=le,r=hn.transition;hn.transition=null;try{le=1,Mc(e,t,a,i)}finally{le=n,hn.transition=r}}function sw(e,t,a,i){var n=le,r=hn.transition;hn.transition=null;try{le=4,Mc(e,t,a,i)}finally{le=n,hn.transition=r}}function Mc(e,t,a,i){if(ho){var n=vu(e,t,a,i);if(n===null)vd(e,t,i,go,a),Nf(e,i);else if(iw(n,e,t,a,i))i.stopPropagation();else if(Nf(e,i),t&4&&-1<aw.indexOf(e)){for(;n!==null;){var r=Qr(n);if(r!==null&&cy(r),r=vu(e,t,a,i),r===null&&vd(e,t,i,go,a),r===n)break;n=r}n!==null&&i.stopPropagation()}else vd(e,t,i,null,a)}}var go=null;function vu(e,t,a,i){if(go=null,e=Nc(i),e=qi(e),e!==null)if(t=Bi(e),t===null)e=null;else if(a=t.tag,a===13){if(e=iy(t),e!==null)return e;e=null}else if(a===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return go=e,null}function gy(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(G0()){case jc:return 1;case oy:return 4;case fo:case H0:return 16;case ly:return 536870912;default:return 16}default:return 16}}var Ja=null,Lc=null,Vs=null;function yy(){if(Vs)return Vs;var e,t=Lc,a=t.length,i,n="value"in Ja?Ja.value:Ja.textContent,r=n.length;for(e=0;e<a&&t[e]===n[e];e++);var s=a-e;for(i=1;i<=s&&t[a-i]===n[r-i];i++);return Vs=n.slice(e,1<i?1-i:void 0)}function Gs(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function ks(){return!0}function Ff(){return!1}function Pt(e){function t(a,i,n,r,s){this._reactName=a,this._targetInst=n,this.type=i,this.nativeEvent=r,this.target=s,this.currentTarget=null;for(var o in e)e.hasOwnProperty(o)&&(a=e[o],this[o]=a?a(r):r[o]);return this.isDefaultPrevented=(r.defaultPrevented!=null?r.defaultPrevented:r.returnValue===!1)?ks:Ff,this.isPropagationStopped=Ff,this}return Pe(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():typeof a.returnValue!="unknown"&&(a.returnValue=!1),this.isDefaultPrevented=ks)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():typeof a.cancelBubble!="unknown"&&(a.cancelBubble=!0),this.isPropagationStopped=ks)},persist:function(){},isPersistent:ks}),t}var En={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Bc=Pt(En),Yr=Pe({},En,{view:0,detail:0}),ow=Pt(Yr),ud,cd,Gn,Ho=Pe({},Yr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Wc,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Gn&&(Gn&&e.type==="mousemove"?(ud=e.screenX-Gn.screenX,cd=e.screenY-Gn.screenY):cd=ud=0,Gn=e),ud)},movementY:function(e){return"movementY"in e?e.movementY:cd}}),Of=Pt(Ho),lw=Pe({},Ho,{dataTransfer:0}),dw=Pt(lw),uw=Pe({},Yr,{relatedTarget:0}),pd=Pt(uw),cw=Pe({},En,{animationName:0,elapsedTime:0,pseudoElement:0}),pw=Pt(cw),fw=Pe({},En,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),mw=Pt(fw),hw=Pe({},En,{data:0}),Mf=Pt(hw),gw={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},yw={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_w={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function vw(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=_w[e])?!!t[e]:!1}function Wc(){return vw}var bw=Pe({},Yr,{key:function(e){if(e.key){var t=gw[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Gs(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?yw[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Wc,charCode:function(e){return e.type==="keypress"?Gs(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Gs(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),ww=Pt(bw),kw=Pe({},Ho,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Lf=Pt(kw),Tw=Pe({},Yr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Wc}),xw=Pt(Tw),Dw=Pe({},En,{propertyName:0,elapsedTime:0,pseudoElement:0}),qw=Pt(Dw),Cw=Pe({},Ho,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Sw=Pt(Cw),Pw=[9,13,27,32],zc=Sa&&"CompositionEvent"in window,fr=null;Sa&&"documentMode"in document&&(fr=document.documentMode);var Rw=Sa&&"TextEvent"in window&&!fr,_y=Sa&&(!zc||fr&&8<fr&&11>=fr),Bf=String.fromCharCode(32),Wf=!1;function vy(e,t){switch(e){case"keyup":return Pw.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function by(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var en=!1;function Aw(e,t){switch(e){case"compositionend":return by(t);case"keypress":return t.which!==32?null:(Wf=!0,Bf);case"textInput":return e=t.data,e===Bf&&Wf?null:e;default:return null}}function Iw(e,t){if(en)return e==="compositionend"||!zc&&vy(e,t)?(e=yy(),Vs=Lc=Ja=null,en=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return _y&&t.locale!=="ko"?null:t.data;default:return null}}var Ew={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zf(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!Ew[e.type]:t==="textarea"}function wy(e,t,a,i){Qg(i),t=yo(t,"onChange"),0<t.length&&(a=new Bc("onChange","change",null,a,i),e.push({event:a,listeners:t}))}var mr=null,Ar=null;function Nw(e){Iy(e,0)}function Xo(e){var t=nn(e);if(Kg(t))return e}function jw(e,t){if(e==="change")return t}var ky=!1;if(Sa){var fd;if(Sa){var md="oninput"in document;if(!md){var $f=document.createElement("div");$f.setAttribute("oninput","return;"),md=typeof $f.oninput=="function"}fd=md}else fd=!1;ky=fd&&(!document.documentMode||9<document.documentMode)}function Uf(){mr&&(mr.detachEvent("onpropertychange",Ty),Ar=mr=null)}function Ty(e){if(e.propertyName==="value"&&Xo(Ar)){var t=[];wy(t,Ar,e,Nc(e)),ay(Nw,t)}}function Fw(e,t,a){e==="focusin"?(Uf(),mr=t,Ar=a,mr.attachEvent("onpropertychange",Ty)):e==="focusout"&&Uf()}function Ow(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Xo(Ar)}function Mw(e,t){if(e==="click")return Xo(t)}function Lw(e,t){if(e==="input"||e==="change")return Xo(t)}function Bw(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var aa=typeof Object.is=="function"?Object.is:Bw;function Ir(e,t){if(aa(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var a=Object.keys(e),i=Object.keys(t);if(a.length!==i.length)return!1;for(i=0;i<a.length;i++){var n=a[i];if(!tu.call(t,n)||!aa(e[n],t[n]))return!1}return!0}function Kf(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Vf(e,t){var a=Kf(e);e=0;for(var i;a;){if(a.nodeType===3){if(i=e+a.textContent.length,e<=t&&i>=t)return{node:a,offset:t-e};e=i}e:{for(;a;){if(a.nextSibling){a=a.nextSibling;break e}a=a.parentNode}a=void 0}a=Kf(a)}}function xy(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?xy(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Dy(){for(var e=window,t=uo();t instanceof e.HTMLIFrameElement;){try{var a=typeof t.contentWindow.location.href=="string"}catch{a=!1}if(a)e=t.contentWindow;else break;t=uo(e.document)}return t}function $c(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function Ww(e){var t=Dy(),a=e.focusedElem,i=e.selectionRange;if(t!==a&&a&&a.ownerDocument&&xy(a.ownerDocument.documentElement,a)){if(i!==null&&$c(a)){if(t=i.start,e=i.end,e===void 0&&(e=t),"selectionStart"in a)a.selectionStart=t,a.selectionEnd=Math.min(e,a.value.length);else if(e=(t=a.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var n=a.textContent.length,r=Math.min(i.start,n);i=i.end===void 0?r:Math.min(i.end,n),!e.extend&&r>i&&(n=i,i=r,r=n),n=Vf(a,r);var s=Vf(a,i);n&&s&&(e.rangeCount!==1||e.anchorNode!==n.node||e.anchorOffset!==n.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&(t=t.createRange(),t.setStart(n.node,n.offset),e.removeAllRanges(),r>i?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}}for(t=[],e=a;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof a.focus=="function"&&a.focus(),a=0;a<t.length;a++)e=t[a],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var zw=Sa&&"documentMode"in document&&11>=document.documentMode,tn=null,bu=null,hr=null,wu=!1;function Gf(e,t,a){var i=a.window===a?a.document:a.nodeType===9?a:a.ownerDocument;wu||tn==null||tn!==uo(i)||(i=tn,"selectionStart"in i&&$c(i)?i={start:i.selectionStart,end:i.selectionEnd}:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection(),i={anchorNode:i.anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset}),hr&&Ir(hr,i)||(hr=i,i=yo(bu,"onSelect"),0<i.length&&(t=new Bc("onSelect","select",null,t,a),e.push({event:t,listeners:i}),t.target=tn)))}function Ts(e,t){var a={};return a[e.toLowerCase()]=t.toLowerCase(),a["Webkit"+e]="webkit"+t,a["Moz"+e]="moz"+t,a}var an={animationend:Ts("Animation","AnimationEnd"),animationiteration:Ts("Animation","AnimationIteration"),animationstart:Ts("Animation","AnimationStart"),transitionend:Ts("Transition","TransitionEnd")},hd={},qy={};Sa&&(qy=document.createElement("div").style,"AnimationEvent"in window||(delete an.animationend.animation,delete an.animationiteration.animation,delete an.animationstart.animation),"TransitionEvent"in window||delete an.transitionend.transition);function Jo(e){if(hd[e])return hd[e];if(!an[e])return e;var t=an[e],a;for(a in t)if(t.hasOwnProperty(a)&&a in qy)return hd[e]=t[a];return e}var Cy=Jo("animationend"),Sy=Jo("animationiteration"),Py=Jo("animationstart"),Ry=Jo("transitionend"),Ay=new Map,Hf="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function ci(e,t){Ay.set(e,t),Li(t,[e])}for(var gd=0;gd<Hf.length;gd++){var yd=Hf[gd],$w=yd.toLowerCase(),Uw=yd[0].toUpperCase()+yd.slice(1);ci($w,"on"+Uw)}ci(Cy,"onAnimationEnd");ci(Sy,"onAnimationIteration");ci(Py,"onAnimationStart");ci("dblclick","onDoubleClick");ci("focusin","onFocus");ci("focusout","onBlur");ci(Ry,"onTransitionEnd");bn("onMouseEnter",["mouseout","mouseover"]);bn("onMouseLeave",["mouseout","mouseover"]);bn("onPointerEnter",["pointerout","pointerover"]);bn("onPointerLeave",["pointerout","pointerover"]);Li("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Li("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Li("onBeforeInput",["compositionend","keypress","textInput","paste"]);Li("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Li("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Li("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Kw=new Set("cancel close invalid load scroll toggle".split(" ").concat(lr));function Xf(e,t,a){var i=e.type||"unknown-event";e.currentTarget=a,$0(i,t,void 0,e),e.currentTarget=null}function Iy(e,t){t=(t&4)!==0;for(var a=0;a<e.length;a++){var i=e[a],n=i.event;i=i.listeners;e:{var r=void 0;if(t)for(var s=i.length-1;0<=s;s--){var o=i[s],l=o.instance,d=o.currentTarget;if(o=o.listener,l!==r&&n.isPropagationStopped())break e;Xf(n,o,d),r=l}else for(s=0;s<i.length;s++){if(o=i[s],l=o.instance,d=o.currentTarget,o=o.listener,l!==r&&n.isPropagationStopped())break e;Xf(n,o,d),r=l}}}if(po)throw e=gu,po=!1,gu=null,e}function ve(e,t){var a=t[qu];a===void 0&&(a=t[qu]=new Set);var i=e+"__bubble";a.has(i)||(Ey(t,e,2,!1),a.add(i))}function _d(e,t,a){var i=0;t&&(i|=4),Ey(a,e,i,t)}var xs="_reactListening"+Math.random().toString(36).slice(2);function Er(e){if(!e[xs]){e[xs]=!0,Bg.forEach(function(a){a!=="selectionchange"&&(Kw.has(a)||_d(a,!1,e),_d(a,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[xs]||(t[xs]=!0,_d("selectionchange",!1,t))}}function Ey(e,t,a,i){switch(gy(t)){case 1:var n=rw;break;case 4:n=sw;break;default:n=Mc}a=n.bind(null,t,a,e),n=void 0,!hu||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(n=!0),i?n!==void 0?e.addEventListener(t,a,{capture:!0,passive:n}):e.addEventListener(t,a,!0):n!==void 0?e.addEventListener(t,a,{passive:n}):e.addEventListener(t,a,!1)}function vd(e,t,a,i,n){var r=i;if(!(t&1)&&!(t&2)&&i!==null)e:for(;;){if(i===null)return;var s=i.tag;if(s===3||s===4){var o=i.stateNode.containerInfo;if(o===n||o.nodeType===8&&o.parentNode===n)break;if(s===4)for(s=i.return;s!==null;){var l=s.tag;if((l===3||l===4)&&(l=s.stateNode.containerInfo,l===n||l.nodeType===8&&l.parentNode===n))return;s=s.return}for(;o!==null;){if(s=qi(o),s===null)return;if(l=s.tag,l===5||l===6){i=r=s;continue e}o=o.parentNode}}i=i.return}ay(function(){var d=r,c=Nc(a),f=[];e:{var g=Ay.get(e);if(g!==void 0){var w=Bc,v=e;switch(e){case"keypress":if(Gs(a)===0)break e;case"keydown":case"keyup":w=ww;break;case"focusin":v="focus",w=pd;break;case"focusout":v="blur",w=pd;break;case"beforeblur":case"afterblur":w=pd;break;case"click":if(a.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":w=Of;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":w=dw;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":w=xw;break;case Cy:case Sy:case Py:w=pw;break;case Ry:w=qw;break;case"scroll":w=ow;break;case"wheel":w=Sw;break;case"copy":case"cut":case"paste":w=mw;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":w=Lf}var y=(t&4)!==0,T=!y&&e==="scroll",u=y?g!==null?g+"Capture":null:g;y=[];for(var m=d,p;m!==null;){p=m;var _=p.stateNode;if(p.tag===5&&_!==null&&(p=_,u!==null&&(_=Cr(m,u),_!=null&&y.push(Nr(m,_,p)))),T)break;m=m.return}0<y.length&&(g=new w(g,v,null,a,c),f.push({event:g,listeners:y}))}}if(!(t&7)){e:{if(g=e==="mouseover"||e==="pointerover",w=e==="mouseout"||e==="pointerout",g&&a!==fu&&(v=a.relatedTarget||a.fromElement)&&(qi(v)||v[Pa]))break e;if((w||g)&&(g=c.window===c?c:(g=c.ownerDocument)?g.defaultView||g.parentWindow:window,w?(v=a.relatedTarget||a.toElement,w=d,v=v?qi(v):null,v!==null&&(T=Bi(v),v!==T||v.tag!==5&&v.tag!==6)&&(v=null)):(w=null,v=d),w!==v)){if(y=Of,_="onMouseLeave",u="onMouseEnter",m="mouse",(e==="pointerout"||e==="pointerover")&&(y=Lf,_="onPointerLeave",u="onPointerEnter",m="pointer"),T=w==null?g:nn(w),p=v==null?g:nn(v),g=new y(_,m+"leave",w,a,c),g.target=T,g.relatedTarget=p,_=null,qi(c)===d&&(y=new y(u,m+"enter",v,a,c),y.target=p,y.relatedTarget=T,_=y),T=_,w&&v)t:{for(y=w,u=v,m=0,p=y;p;p=Ui(p))m++;for(p=0,_=u;_;_=Ui(_))p++;for(;0<m-p;)y=Ui(y),m--;for(;0<p-m;)u=Ui(u),p--;for(;m--;){if(y===u||u!==null&&y===u.alternate)break t;y=Ui(y),u=Ui(u)}y=null}else y=null;w!==null&&Jf(f,g,w,y,!1),v!==null&&T!==null&&Jf(f,T,v,y,!0)}}e:{if(g=d?nn(d):window,w=g.nodeName&&g.nodeName.toLowerCase(),w==="select"||w==="input"&&g.type==="file")var k=jw;else if(zf(g))if(ky)k=Lw;else{k=Ow;var D=Fw}else(w=g.nodeName)&&w.toLowerCase()==="input"&&(g.type==="checkbox"||g.type==="radio")&&(k=Mw);if(k&&(k=k(e,d))){wy(f,k,a,c);break e}D&&D(e,g,d),e==="focusout"&&(D=g._wrapperState)&&D.controlled&&g.type==="number"&&lu(g,"number",g.value)}switch(D=d?nn(d):window,e){case"focusin":(zf(D)||D.contentEditable==="true")&&(tn=D,bu=d,hr=null);break;case"focusout":hr=bu=tn=null;break;case"mousedown":wu=!0;break;case"contextmenu":case"mouseup":case"dragend":wu=!1,Gf(f,a,c);break;case"selectionchange":if(zw)break;case"keydown":case"keyup":Gf(f,a,c)}var x;if(zc)e:{switch(e){case"compositionstart":var S="onCompositionStart";break e;case"compositionend":S="onCompositionEnd";break e;case"compositionupdate":S="onCompositionUpdate";break e}S=void 0}else en?vy(e,a)&&(S="onCompositionEnd"):e==="keydown"&&a.keyCode===229&&(S="onCompositionStart");S&&(_y&&a.locale!=="ko"&&(en||S!=="onCompositionStart"?S==="onCompositionEnd"&&en&&(x=yy()):(Ja=c,Lc="value"in Ja?Ja.value:Ja.textContent,en=!0)),D=yo(d,S),0<D.length&&(S=new Mf(S,e,null,a,c),f.push({event:S,listeners:D}),x?S.data=x:(x=by(a),x!==null&&(S.data=x)))),(x=Rw?Aw(e,a):Iw(e,a))&&(d=yo(d,"onBeforeInput"),0<d.length&&(c=new Mf("onBeforeInput","beforeinput",null,a,c),f.push({event:c,listeners:d}),c.data=x))}Iy(f,t)})}function Nr(e,t,a){return{instance:e,listener:t,currentTarget:a}}function yo(e,t){for(var a=t+"Capture",i=[];e!==null;){var n=e,r=n.stateNode;n.tag===5&&r!==null&&(n=r,r=Cr(e,a),r!=null&&i.unshift(Nr(e,r,n)),r=Cr(e,t),r!=null&&i.push(Nr(e,r,n))),e=e.return}return i}function Ui(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function Jf(e,t,a,i,n){for(var r=t._reactName,s=[];a!==null&&a!==i;){var o=a,l=o.alternate,d=o.stateNode;if(l!==null&&l===i)break;o.tag===5&&d!==null&&(o=d,n?(l=Cr(a,r),l!=null&&s.unshift(Nr(a,l,o))):n||(l=Cr(a,r),l!=null&&s.push(Nr(a,l,o)))),a=a.return}s.length!==0&&e.push({event:t,listeners:s})}var Vw=/\r\n?/g,Gw=/\u0000|\uFFFD/g;function Yf(e){return(typeof e=="string"?e:""+e).replace(Vw,`
`).replace(Gw,"")}function Ds(e,t,a){if(t=Yf(t),Yf(e)!==t&&a)throw Error(N(425))}function _o(){}var ku=null,Tu=null;function xu(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Du=typeof setTimeout=="function"?setTimeout:void 0,Hw=typeof clearTimeout=="function"?clearTimeout:void 0,Qf=typeof Promise=="function"?Promise:void 0,Xw=typeof queueMicrotask=="function"?queueMicrotask:typeof Qf<"u"?function(e){return Qf.resolve(null).then(e).catch(Jw)}:Du;function Jw(e){setTimeout(function(){throw e})}function bd(e,t){var a=t,i=0;do{var n=a.nextSibling;if(e.removeChild(a),n&&n.nodeType===8)if(a=n.data,a==="/$"){if(i===0){e.removeChild(n),Rr(t);return}i--}else a!=="$"&&a!=="$?"&&a!=="$!"||i++;a=n}while(a);Rr(t)}function ii(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function Zf(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var a=e.data;if(a==="$"||a==="$!"||a==="$?"){if(t===0)return e;t--}else a==="/$"&&t++}e=e.previousSibling}return null}var Nn=Math.random().toString(36).slice(2),ua="__reactFiber$"+Nn,jr="__reactProps$"+Nn,Pa="__reactContainer$"+Nn,qu="__reactEvents$"+Nn,Yw="__reactListeners$"+Nn,Qw="__reactHandles$"+Nn;function qi(e){var t=e[ua];if(t)return t;for(var a=e.parentNode;a;){if(t=a[Pa]||a[ua]){if(a=t.alternate,t.child!==null||a!==null&&a.child!==null)for(e=Zf(e);e!==null;){if(a=e[ua])return a;e=Zf(e)}return t}e=a,a=e.parentNode}return null}function Qr(e){return e=e[ua]||e[Pa],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function nn(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(N(33))}function Yo(e){return e[jr]||null}var Cu=[],rn=-1;function pi(e){return{current:e}}function be(e){0>rn||(e.current=Cu[rn],Cu[rn]=null,rn--)}function ye(e,t){rn++,Cu[rn]=e.current,e.current=t}var ui={},it=pi(ui),mt=pi(!1),Ii=ui;function wn(e,t){var a=e.type.contextTypes;if(!a)return ui;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var n={},r;for(r in a)n[r]=t[r];return i&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n),n}function ht(e){return e=e.childContextTypes,e!=null}function vo(){be(mt),be(it)}function em(e,t,a){if(it.current!==ui)throw Error(N(168));ye(it,t),ye(mt,a)}function Ny(e,t,a){var i=e.stateNode;if(t=t.childContextTypes,typeof i.getChildContext!="function")return a;i=i.getChildContext();for(var n in i)if(!(n in t))throw Error(N(108,F0(e)||"Unknown",n));return Pe({},a,i)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ui,Ii=it.current,ye(it,e),ye(mt,mt.current),!0}function tm(e,t,a){var i=e.stateNode;if(!i)throw Error(N(169));a?(e=Ny(e,t,Ii),i.__reactInternalMemoizedMergedChildContext=e,be(mt),be(it),ye(it,e)):be(mt),ye(mt,a)}var Ta=null,Qo=!1,wd=!1;function jy(e){Ta===null?Ta=[e]:Ta.push(e)}function Zw(e){Qo=!0,jy(e)}function fi(){if(!wd&&Ta!==null){wd=!0;var e=0,t=le;try{var a=Ta;for(le=1;e<a.length;e++){var i=a[e];do i=i(!0);while(i!==null)}Ta=null,Qo=!1}catch(n){throw Ta!==null&&(Ta=Ta.slice(e+1)),sy(jc,fi),n}finally{le=t,wd=!1}}return null}var sn=[],on=0,wo=null,ko=0,Mt=[],Lt=0,Ei=null,xa=1,Da="";function vi(e,t){sn[on++]=ko,sn[on++]=wo,wo=e,ko=t}function Fy(e,t,a){Mt[Lt++]=xa,Mt[Lt++]=Da,Mt[Lt++]=Ei,Ei=e;var i=xa;e=Da;var n=32-ea(i)-1;i&=~(1<<n),a+=1;var r=32-ea(t)+n;if(30<r){var s=n-n%5;r=(i&(1<<s)-1).toString(32),i>>=s,n-=s,xa=1<<32-ea(t)+n|a<<n|i,Da=r+e}else xa=1<<r|a<<n|i,Da=e}function Uc(e){e.return!==null&&(vi(e,1),Fy(e,1,0))}function Kc(e){for(;e===wo;)wo=sn[--on],sn[on]=null,ko=sn[--on],sn[on]=null;for(;e===Ei;)Ei=Mt[--Lt],Mt[Lt]=null,Da=Mt[--Lt],Mt[Lt]=null,xa=Mt[--Lt],Mt[Lt]=null}var xt=null,Tt=null,xe=!1,Qt=null;function Oy(e,t){var a=Wt(5,null,null,0);a.elementType="DELETED",a.stateNode=t,a.return=e,t=e.deletions,t===null?(e.deletions=[a],e.flags|=16):t.push(a)}function am(e,t){switch(e.tag){case 5:var a=e.type;return t=t.nodeType!==1||a.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,xt=e,Tt=ii(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,xt=e,Tt=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(a=Ei!==null?{id:xa,overflow:Da}:null,e.memoizedState={dehydrated:t,treeContext:a,retryLane:1073741824},a=Wt(18,null,null,0),a.stateNode=t,a.return=e,e.child=a,xt=e,Tt=null,!0):!1;default:return!1}}function Su(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Pu(e){if(xe){var t=Tt;if(t){var a=t;if(!am(e,t)){if(Su(e))throw Error(N(418));t=ii(a.nextSibling);var i=xt;t&&am(e,t)?Oy(i,a):(e.flags=e.flags&-4097|2,xe=!1,xt=e)}}else{if(Su(e))throw Error(N(418));e.flags=e.flags&-4097|2,xe=!1,xt=e}}}function im(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;xt=e}function qs(e){if(e!==xt)return!1;if(!xe)return im(e),xe=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!xu(e.type,e.memoizedProps)),t&&(t=Tt)){if(Su(e))throw My(),Error(N(418));for(;t;)Oy(e,t),t=ii(t.nextSibling)}if(im(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(N(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var a=e.data;if(a==="/$"){if(t===0){Tt=ii(e.nextSibling);break e}t--}else a!=="$"&&a!=="$!"&&a!=="$?"||t++}e=e.nextSibling}Tt=null}}else Tt=xt?ii(e.stateNode.nextSibling):null;return!0}function My(){for(var e=Tt;e;)e=ii(e.nextSibling)}function kn(){Tt=xt=null,xe=!1}function Vc(e){Qt===null?Qt=[e]:Qt.push(e)}var e1=Oa.ReactCurrentBatchConfig;function Hn(e,t,a){if(e=a.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(a._owner){if(a=a._owner,a){if(a.tag!==1)throw Error(N(309));var i=a.stateNode}if(!i)throw Error(N(147,e));var n=i,r=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===r?t.ref:(t=function(s){var o=n.refs;s===null?delete o[r]:o[r]=s},t._stringRef=r,t)}if(typeof e!="string")throw Error(N(284));if(!a._owner)throw Error(N(290,e))}return e}function Cs(e,t){throw e=Object.prototype.toString.call(t),Error(N(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function nm(e){var t=e._init;return t(e._payload)}function Ly(e){function t(u,m){if(e){var p=u.deletions;p===null?(u.deletions=[m],u.flags|=16):p.push(m)}}function a(u,m){if(!e)return null;for(;m!==null;)t(u,m),m=m.sibling;return null}function i(u,m){for(u=new Map;m!==null;)m.key!==null?u.set(m.key,m):u.set(m.index,m),m=m.sibling;return u}function n(u,m){return u=oi(u,m),u.index=0,u.sibling=null,u}function r(u,m,p){return u.index=p,e?(p=u.alternate,p!==null?(p=p.index,p<m?(u.flags|=2,m):p):(u.flags|=2,m)):(u.flags|=1048576,m)}function s(u){return e&&u.alternate===null&&(u.flags|=2),u}function o(u,m,p,_){return m===null||m.tag!==6?(m=Sd(p,u.mode,_),m.return=u,m):(m=n(m,p),m.return=u,m)}function l(u,m,p,_){var k=p.type;return k===Zi?c(u,m,p.props.children,_,p.key):m!==null&&(m.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===Ka&&nm(k)===m.type)?(_=n(m,p.props),_.ref=Hn(u,m,p),_.return=u,_):(_=eo(p.type,p.key,p.props,null,u.mode,_),_.ref=Hn(u,m,p),_.return=u,_)}function d(u,m,p,_){return m===null||m.tag!==4||m.stateNode.containerInfo!==p.containerInfo||m.stateNode.implementation!==p.implementation?(m=Pd(p,u.mode,_),m.return=u,m):(m=n(m,p.children||[]),m.return=u,m)}function c(u,m,p,_,k){return m===null||m.tag!==7?(m=Ai(p,u.mode,_,k),m.return=u,m):(m=n(m,p),m.return=u,m)}function f(u,m,p){if(typeof m=="string"&&m!==""||typeof m=="number")return m=Sd(""+m,u.mode,p),m.return=u,m;if(typeof m=="object"&&m!==null){switch(m.$$typeof){case gs:return p=eo(m.type,m.key,m.props,null,u.mode,p),p.ref=Hn(u,null,m),p.return=u,p;case Qi:return m=Pd(m,u.mode,p),m.return=u,m;case Ka:var _=m._init;return f(u,_(m._payload),p)}if(sr(m)||$n(m))return m=Ai(m,u.mode,p,null),m.return=u,m;Cs(u,m)}return null}function g(u,m,p,_){var k=m!==null?m.key:null;if(typeof p=="string"&&p!==""||typeof p=="number")return k!==null?null:o(u,m,""+p,_);if(typeof p=="object"&&p!==null){switch(p.$$typeof){case gs:return p.key===k?l(u,m,p,_):null;case Qi:return p.key===k?d(u,m,p,_):null;case Ka:return k=p._init,g(u,m,k(p._payload),_)}if(sr(p)||$n(p))return k!==null?null:c(u,m,p,_,null);Cs(u,p)}return null}function w(u,m,p,_,k){if(typeof _=="string"&&_!==""||typeof _=="number")return u=u.get(p)||null,o(m,u,""+_,k);if(typeof _=="object"&&_!==null){switch(_.$$typeof){case gs:return u=u.get(_.key===null?p:_.key)||null,l(m,u,_,k);case Qi:return u=u.get(_.key===null?p:_.key)||null,d(m,u,_,k);case Ka:var D=_._init;return w(u,m,p,D(_._payload),k)}if(sr(_)||$n(_))return u=u.get(p)||null,c(m,u,_,k,null);Cs(m,_)}return null}function v(u,m,p,_){for(var k=null,D=null,x=m,S=m=0,R=null;x!==null&&S<p.length;S++){x.index>S?(R=x,x=null):R=x.sibling;var P=g(u,x,p[S],_);if(P===null){x===null&&(x=R);break}e&&x&&P.alternate===null&&t(u,x),m=r(P,m,S),D===null?k=P:D.sibling=P,D=P,x=R}if(S===p.length)return a(u,x),xe&&vi(u,S),k;if(x===null){for(;S<p.length;S++)x=f(u,p[S],_),x!==null&&(m=r(x,m,S),D===null?k=x:D.sibling=x,D=x);return xe&&vi(u,S),k}for(x=i(u,x);S<p.length;S++)R=w(x,u,S,p[S],_),R!==null&&(e&&R.alternate!==null&&x.delete(R.key===null?S:R.key),m=r(R,m,S),D===null?k=R:D.sibling=R,D=R);return e&&x.forEach(function(A){return t(u,A)}),xe&&vi(u,S),k}function y(u,m,p,_){var k=$n(p);if(typeof k!="function")throw Error(N(150));if(p=k.call(p),p==null)throw Error(N(151));for(var D=k=null,x=m,S=m=0,R=null,P=p.next();x!==null&&!P.done;S++,P=p.next()){x.index>S?(R=x,x=null):R=x.sibling;var A=g(u,x,P.value,_);if(A===null){x===null&&(x=R);break}e&&x&&A.alternate===null&&t(u,x),m=r(A,m,S),D===null?k=A:D.sibling=A,D=A,x=R}if(P.done)return a(u,x),xe&&vi(u,S),k;if(x===null){for(;!P.done;S++,P=p.next())P=f(u,P.value,_),P!==null&&(m=r(P,m,S),D===null?k=P:D.sibling=P,D=P);return xe&&vi(u,S),k}for(x=i(u,x);!P.done;S++,P=p.next())P=w(x,u,S,P.value,_),P!==null&&(e&&P.alternate!==null&&x.delete(P.key===null?S:P.key),m=r(P,m,S),D===null?k=P:D.sibling=P,D=P);return e&&x.forEach(function(I){return t(u,I)}),xe&&vi(u,S),k}function T(u,m,p,_){if(typeof p=="object"&&p!==null&&p.type===Zi&&p.key===null&&(p=p.props.children),typeof p=="object"&&p!==null){switch(p.$$typeof){case gs:e:{for(var k=p.key,D=m;D!==null;){if(D.key===k){if(k=p.type,k===Zi){if(D.tag===7){a(u,D.sibling),m=n(D,p.props.children),m.return=u,u=m;break e}}else if(D.elementType===k||typeof k=="object"&&k!==null&&k.$$typeof===Ka&&nm(k)===D.type){a(u,D.sibling),m=n(D,p.props),m.ref=Hn(u,D,p),m.return=u,u=m;break e}a(u,D);break}else t(u,D);D=D.sibling}p.type===Zi?(m=Ai(p.props.children,u.mode,_,p.key),m.return=u,u=m):(_=eo(p.type,p.key,p.props,null,u.mode,_),_.ref=Hn(u,m,p),_.return=u,u=_)}return s(u);case Qi:e:{for(D=p.key;m!==null;){if(m.key===D)if(m.tag===4&&m.stateNode.containerInfo===p.containerInfo&&m.stateNode.implementation===p.implementation){a(u,m.sibling),m=n(m,p.children||[]),m.return=u,u=m;break e}else{a(u,m);break}else t(u,m);m=m.sibling}m=Pd(p,u.mode,_),m.return=u,u=m}return s(u);case Ka:return D=p._init,T(u,m,D(p._payload),_)}if(sr(p))return v(u,m,p,_);if($n(p))return y(u,m,p,_);Cs(u,p)}return typeof p=="string"&&p!==""||typeof p=="number"?(p=""+p,m!==null&&m.tag===6?(a(u,m.sibling),m=n(m,p),m.return=u,u=m):(a(u,m),m=Sd(p,u.mode,_),m.return=u,u=m),s(u)):a(u,m)}return T}var Tn=Ly(!0),By=Ly(!1),To=pi(null),xo=null,ln=null,Gc=null;function Hc(){Gc=ln=xo=null}function Xc(e){var t=To.current;be(To),e._currentValue=t}function Ru(e,t,a){for(;e!==null;){var i=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,i!==null&&(i.childLanes|=t)):i!==null&&(i.childLanes&t)!==t&&(i.childLanes|=t),e===a)break;e=e.return}}function gn(e,t){xo=e,Gc=ln=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(ft=!0),e.firstContext=null)}function $t(e){var t=e._currentValue;if(Gc!==e)if(e={context:e,memoizedValue:t,next:null},ln===null){if(xo===null)throw Error(N(308));ln=e,xo.dependencies={lanes:0,firstContext:e}}else ln=ln.next=e;return t}var Ci=null;function Jc(e){Ci===null?Ci=[e]:Ci.push(e)}function Wy(e,t,a,i){var n=t.interleaved;return n===null?(a.next=a,Jc(t)):(a.next=n.next,n.next=a),t.interleaved=a,Ra(e,i)}function Ra(e,t){e.lanes|=t;var a=e.alternate;for(a!==null&&(a.lanes|=t),a=e,e=e.return;e!==null;)e.childLanes|=t,a=e.alternate,a!==null&&(a.childLanes|=t),a=e,e=e.return;return a.tag===3?a.stateNode:null}var Va=!1;function Yc(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zy(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ca(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ni(e,t,a){var i=e.updateQueue;if(i===null)return null;if(i=i.shared,te&2){var n=i.pending;return n===null?t.next=t:(t.next=n.next,n.next=t),i.pending=t,Ra(e,a)}return n=i.interleaved,n===null?(t.next=t,Jc(i)):(t.next=n.next,n.next=t),i.interleaved=t,Ra(e,a)}function Hs(e,t,a){if(t=t.updateQueue,t!==null&&(t=t.shared,(a&4194240)!==0)){var i=t.lanes;i&=e.pendingLanes,a|=i,t.lanes=a,Fc(e,a)}}function rm(e,t){var a=e.updateQueue,i=e.alternate;if(i!==null&&(i=i.updateQueue,a===i)){var n=null,r=null;if(a=a.firstBaseUpdate,a!==null){do{var s={eventTime:a.eventTime,lane:a.lane,tag:a.tag,payload:a.payload,callback:a.callback,next:null};r===null?n=r=s:r=r.next=s,a=a.next}while(a!==null);r===null?n=r=t:r=r.next=t}else n=r=t;a={baseState:i.baseState,firstBaseUpdate:n,lastBaseUpdate:r,shared:i.shared,effects:i.effects},e.updateQueue=a;return}e=a.lastBaseUpdate,e===null?a.firstBaseUpdate=t:e.next=t,a.lastBaseUpdate=t}function Do(e,t,a,i){var n=e.updateQueue;Va=!1;var r=n.firstBaseUpdate,s=n.lastBaseUpdate,o=n.shared.pending;if(o!==null){n.shared.pending=null;var l=o,d=l.next;l.next=null,s===null?r=d:s.next=d,s=l;var c=e.alternate;c!==null&&(c=c.updateQueue,o=c.lastBaseUpdate,o!==s&&(o===null?c.firstBaseUpdate=d:o.next=d,c.lastBaseUpdate=l))}if(r!==null){var f=n.baseState;s=0,c=d=l=null,o=r;do{var g=o.lane,w=o.eventTime;if((i&g)===g){c!==null&&(c=c.next={eventTime:w,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var v=e,y=o;switch(g=t,w=a,y.tag){case 1:if(v=y.payload,typeof v=="function"){f=v.call(w,f,g);break e}f=v;break e;case 3:v.flags=v.flags&-65537|128;case 0:if(v=y.payload,g=typeof v=="function"?v.call(w,f,g):v,g==null)break e;f=Pe({},f,g);break e;case 2:Va=!0}}o.callback!==null&&o.lane!==0&&(e.flags|=64,g=n.effects,g===null?n.effects=[o]:g.push(o))}else w={eventTime:w,lane:g,tag:o.tag,payload:o.payload,callback:o.callback,next:null},c===null?(d=c=w,l=f):c=c.next=w,s|=g;if(o=o.next,o===null){if(o=n.shared.pending,o===null)break;g=o,o=g.next,g.next=null,n.lastBaseUpdate=g,n.shared.pending=null}}while(1);if(c===null&&(l=f),n.baseState=l,n.firstBaseUpdate=d,n.lastBaseUpdate=c,t=n.shared.interleaved,t!==null){n=t;do s|=n.lane,n=n.next;while(n!==t)}else r===null&&(n.shared.lanes=0);ji|=s,e.lanes=s,e.memoizedState=f}}function sm(e,t,a){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var i=e[t],n=i.callback;if(n!==null){if(i.callback=null,i=a,typeof n!="function")throw Error(N(191,n));n.call(i)}}}var Zr={},fa=pi(Zr),Fr=pi(Zr),Or=pi(Zr);function Si(e){if(e===Zr)throw Error(N(174));return e}function Qc(e,t){switch(ye(Or,t),ye(Fr,e),ye(fa,Zr),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:uu(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=uu(t,e)}be(fa),ye(fa,t)}function xn(){be(fa),be(Fr),be(Or)}function $y(e){Si(Or.current);var t=Si(fa.current),a=uu(t,e.type);t!==a&&(ye(Fr,e),ye(fa,a))}function Zc(e){Fr.current===e&&(be(fa),be(Fr))}var Ce=pi(0);function qo(e){for(var t=e;t!==null;){if(t.tag===13){var a=t.memoizedState;if(a!==null&&(a=a.dehydrated,a===null||a.data==="$?"||a.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var kd=[];function ep(){for(var e=0;e<kd.length;e++)kd[e]._workInProgressVersionPrimary=null;kd.length=0}var Xs=Oa.ReactCurrentDispatcher,Td=Oa.ReactCurrentBatchConfig,Ni=0,Se=null,We=null,$e=null,Co=!1,gr=!1,Mr=0,t1=0;function Ze(){throw Error(N(321))}function tp(e,t){if(t===null)return!1;for(var a=0;a<t.length&&a<e.length;a++)if(!aa(e[a],t[a]))return!1;return!0}function ap(e,t,a,i,n,r){if(Ni=r,Se=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Xs.current=e===null||e.memoizedState===null?r1:s1,e=a(i,n),gr){r=0;do{if(gr=!1,Mr=0,25<=r)throw Error(N(301));r+=1,$e=We=null,t.updateQueue=null,Xs.current=o1,e=a(i,n)}while(gr)}if(Xs.current=So,t=We!==null&&We.next!==null,Ni=0,$e=We=Se=null,Co=!1,t)throw Error(N(300));return e}function ip(){var e=Mr!==0;return Mr=0,e}function oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return $e===null?Se.memoizedState=$e=e:$e=$e.next=e,$e}function Ut(){if(We===null){var e=Se.alternate;e=e!==null?e.memoizedState:null}else e=We.next;var t=$e===null?Se.memoizedState:$e.next;if(t!==null)$e=t,We=e;else{if(e===null)throw Error(N(310));We=e,e={memoizedState:We.memoizedState,baseState:We.baseState,baseQueue:We.baseQueue,queue:We.queue,next:null},$e===null?Se.memoizedState=$e=e:$e=$e.next=e}return $e}function Lr(e,t){return typeof t=="function"?t(e):t}function xd(e){var t=Ut(),a=t.queue;if(a===null)throw Error(N(311));a.lastRenderedReducer=e;var i=We,n=i.baseQueue,r=a.pending;if(r!==null){if(n!==null){var s=n.next;n.next=r.next,r.next=s}i.baseQueue=n=r,a.pending=null}if(n!==null){r=n.next,i=i.baseState;var o=s=null,l=null,d=r;do{var c=d.lane;if((Ni&c)===c)l!==null&&(l=l.next={lane:0,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null}),i=d.hasEagerState?d.eagerState:e(i,d.action);else{var f={lane:c,action:d.action,hasEagerState:d.hasEagerState,eagerState:d.eagerState,next:null};l===null?(o=l=f,s=i):l=l.next=f,Se.lanes|=c,ji|=c}d=d.next}while(d!==null&&d!==r);l===null?s=i:l.next=o,aa(i,t.memoizedState)||(ft=!0),t.memoizedState=i,t.baseState=s,t.baseQueue=l,a.lastRenderedState=i}if(e=a.interleaved,e!==null){n=e;do r=n.lane,Se.lanes|=r,ji|=r,n=n.next;while(n!==e)}else n===null&&(a.lanes=0);return[t.memoizedState,a.dispatch]}function Dd(e){var t=Ut(),a=t.queue;if(a===null)throw Error(N(311));a.lastRenderedReducer=e;var i=a.dispatch,n=a.pending,r=t.memoizedState;if(n!==null){a.pending=null;var s=n=n.next;do r=e(r,s.action),s=s.next;while(s!==n);aa(r,t.memoizedState)||(ft=!0),t.memoizedState=r,t.baseQueue===null&&(t.baseState=r),a.lastRenderedState=r}return[r,i]}function Uy(){}function Ky(e,t){var a=Se,i=Ut(),n=t(),r=!aa(i.memoizedState,n);if(r&&(i.memoizedState=n,ft=!0),i=i.queue,np(Hy.bind(null,a,i,e),[e]),i.getSnapshot!==t||r||$e!==null&&$e.memoizedState.tag&1){if(a.flags|=2048,Br(9,Gy.bind(null,a,i,n,t),void 0,null),Ue===null)throw Error(N(349));Ni&30||Vy(a,t,n)}return n}function Vy(e,t,a){e.flags|=16384,e={getSnapshot:t,value:a},t=Se.updateQueue,t===null?(t={lastEffect:null,stores:null},Se.updateQueue=t,t.stores=[e]):(a=t.stores,a===null?t.stores=[e]:a.push(e))}function Gy(e,t,a,i){t.value=a,t.getSnapshot=i,Xy(t)&&Jy(e)}function Hy(e,t,a){return a(function(){Xy(t)&&Jy(e)})}function Xy(e){var t=e.getSnapshot;e=e.value;try{var a=t();return!aa(e,a)}catch{return!0}}function Jy(e){var t=Ra(e,1);t!==null&&ta(t,e,1,-1)}function om(e){var t=oa();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Lr,lastRenderedState:e},t.queue=e,e=e.dispatch=n1.bind(null,Se,e),[t.memoizedState,e]}function Br(e,t,a,i){return e={tag:e,create:t,destroy:a,deps:i,next:null},t=Se.updateQueue,t===null?(t={lastEffect:null,stores:null},Se.updateQueue=t,t.lastEffect=e.next=e):(a=t.lastEffect,a===null?t.lastEffect=e.next=e:(i=a.next,a.next=e,e.next=i,t.lastEffect=e)),e}function Yy(){return Ut().memoizedState}function Js(e,t,a,i){var n=oa();Se.flags|=e,n.memoizedState=Br(1|t,a,void 0,i===void 0?null:i)}function Zo(e,t,a,i){var n=Ut();i=i===void 0?null:i;var r=void 0;if(We!==null){var s=We.memoizedState;if(r=s.destroy,i!==null&&tp(i,s.deps)){n.memoizedState=Br(t,a,r,i);return}}Se.flags|=e,n.memoizedState=Br(1|t,a,r,i)}function lm(e,t){return Js(8390656,8,e,t)}function np(e,t){return Zo(2048,8,e,t)}function Qy(e,t){return Zo(4,2,e,t)}function Zy(e,t){return Zo(4,4,e,t)}function e_(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function t_(e,t,a){return a=a!=null?a.concat([e]):null,Zo(4,4,e_.bind(null,t,e),a)}function rp(){}function a_(e,t){var a=Ut();t=t===void 0?null:t;var i=a.memoizedState;return i!==null&&t!==null&&tp(t,i[1])?i[0]:(a.memoizedState=[e,t],e)}function i_(e,t){var a=Ut();t=t===void 0?null:t;var i=a.memoizedState;return i!==null&&t!==null&&tp(t,i[1])?i[0]:(e=e(),a.memoizedState=[e,t],e)}function n_(e,t,a){return Ni&21?(aa(a,t)||(a=dy(),Se.lanes|=a,ji|=a,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,ft=!0),e.memoizedState=a)}function a1(e,t){var a=le;le=a!==0&&4>a?a:4,e(!0);var i=Td.transition;Td.transition={};try{e(!1),t()}finally{le=a,Td.transition=i}}function r_(){return Ut().memoizedState}function i1(e,t,a){var i=si(e);if(a={lane:i,action:a,hasEagerState:!1,eagerState:null,next:null},s_(e))o_(t,a);else if(a=Wy(e,t,a,i),a!==null){var n=rt();ta(a,e,i,n),l_(a,t,i)}}function n1(e,t,a){var i=si(e),n={lane:i,action:a,hasEagerState:!1,eagerState:null,next:null};if(s_(e))o_(t,n);else{var r=e.alternate;if(e.lanes===0&&(r===null||r.lanes===0)&&(r=t.lastRenderedReducer,r!==null))try{var s=t.lastRenderedState,o=r(s,a);if(n.hasEagerState=!0,n.eagerState=o,aa(o,s)){var l=t.interleaved;l===null?(n.next=n,Jc(t)):(n.next=l.next,l.next=n),t.interleaved=n;return}}catch{}finally{}a=Wy(e,t,n,i),a!==null&&(n=rt(),ta(a,e,i,n),l_(a,t,i))}}function s_(e){var t=e.alternate;return e===Se||t!==null&&t===Se}function o_(e,t){gr=Co=!0;var a=e.pending;a===null?t.next=t:(t.next=a.next,a.next=t),e.pending=t}function l_(e,t,a){if(a&4194240){var i=t.lanes;i&=e.pendingLanes,a|=i,t.lanes=a,Fc(e,a)}}var So={readContext:$t,useCallback:Ze,useContext:Ze,useEffect:Ze,useImperativeHandle:Ze,useInsertionEffect:Ze,useLayoutEffect:Ze,useMemo:Ze,useReducer:Ze,useRef:Ze,useState:Ze,useDebugValue:Ze,useDeferredValue:Ze,useTransition:Ze,useMutableSource:Ze,useSyncExternalStore:Ze,useId:Ze,unstable_isNewReconciler:!1},r1={readContext:$t,useCallback:function(e,t){return oa().memoizedState=[e,t===void 0?null:t],e},useContext:$t,useEffect:lm,useImperativeHandle:function(e,t,a){return a=a!=null?a.concat([e]):null,Js(4194308,4,e_.bind(null,t,e),a)},useLayoutEffect:function(e,t){return Js(4194308,4,e,t)},useInsertionEffect:function(e,t){return Js(4,2,e,t)},useMemo:function(e,t){var a=oa();return t=t===void 0?null:t,e=e(),a.memoizedState=[e,t],e},useReducer:function(e,t,a){var i=oa();return t=a!==void 0?a(t):t,i.memoizedState=i.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},i.queue=e,e=e.dispatch=i1.bind(null,Se,e),[i.memoizedState,e]},useRef:function(e){var t=oa();return e={current:e},t.memoizedState=e},useState:om,useDebugValue:rp,useDeferredValue:function(e){return oa().memoizedState=e},useTransition:function(){var e=om(!1),t=e[0];return e=a1.bind(null,e[1]),oa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,a){var i=Se,n=oa();if(xe){if(a===void 0)throw Error(N(407));a=a()}else{if(a=t(),Ue===null)throw Error(N(349));Ni&30||Vy(i,t,a)}n.memoizedState=a;var r={value:a,getSnapshot:t};return n.queue=r,lm(Hy.bind(null,i,r,e),[e]),i.flags|=2048,Br(9,Gy.bind(null,i,r,a,t),void 0,null),a},useId:function(){var e=oa(),t=Ue.identifierPrefix;if(xe){var a=Da,i=xa;a=(i&~(1<<32-ea(i)-1)).toString(32)+a,t=":"+t+"R"+a,a=Mr++,0<a&&(t+="H"+a.toString(32)),t+=":"}else a=t1++,t=":"+t+"r"+a.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},s1={readContext:$t,useCallback:a_,useContext:$t,useEffect:np,useImperativeHandle:t_,useInsertionEffect:Qy,useLayoutEffect:Zy,useMemo:i_,useReducer:xd,useRef:Yy,useState:function(){return xd(Lr)},useDebugValue:rp,useDeferredValue:function(e){var t=Ut();return n_(t,We.memoizedState,e)},useTransition:function(){var e=xd(Lr)[0],t=Ut().memoizedState;return[e,t]},useMutableSource:Uy,useSyncExternalStore:Ky,useId:r_,unstable_isNewReconciler:!1},o1={readContext:$t,useCallback:a_,useContext:$t,useEffect:np,useImperativeHandle:t_,useInsertionEffect:Qy,useLayoutEffect:Zy,useMemo:i_,useReducer:Dd,useRef:Yy,useState:function(){return Dd(Lr)},useDebugValue:rp,useDeferredValue:function(e){var t=Ut();return We===null?t.memoizedState=e:n_(t,We.memoizedState,e)},useTransition:function(){var e=Dd(Lr)[0],t=Ut().memoizedState;return[e,t]},useMutableSource:Uy,useSyncExternalStore:Ky,useId:r_,unstable_isNewReconciler:!1};function Jt(e,t){if(e&&e.defaultProps){t=Pe({},t),e=e.defaultProps;for(var a in e)t[a]===void 0&&(t[a]=e[a]);return t}return t}function Au(e,t,a,i){t=e.memoizedState,a=a(i,t),a=a==null?t:Pe({},t,a),e.memoizedState=a,e.lanes===0&&(e.updateQueue.baseState=a)}var el={isMounted:function(e){return(e=e._reactInternals)?Bi(e)===e:!1},enqueueSetState:function(e,t,a){e=e._reactInternals;var i=rt(),n=si(e),r=Ca(i,n);r.payload=t,a!=null&&(r.callback=a),t=ni(e,r,n),t!==null&&(ta(t,e,n,i),Hs(t,e,n))},enqueueReplaceState:function(e,t,a){e=e._reactInternals;var i=rt(),n=si(e),r=Ca(i,n);r.tag=1,r.payload=t,a!=null&&(r.callback=a),t=ni(e,r,n),t!==null&&(ta(t,e,n,i),Hs(t,e,n))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var a=rt(),i=si(e),n=Ca(a,i);n.tag=2,t!=null&&(n.callback=t),t=ni(e,n,i),t!==null&&(ta(t,e,i,a),Hs(t,e,i))}};function dm(e,t,a,i,n,r,s){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(i,r,s):t.prototype&&t.prototype.isPureReactComponent?!Ir(a,i)||!Ir(n,r):!0}function d_(e,t,a){var i=!1,n=ui,r=t.contextType;return typeof r=="object"&&r!==null?r=$t(r):(n=ht(t)?Ii:it.current,i=t.contextTypes,r=(i=i!=null)?wn(e,n):ui),t=new t(a,r),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=el,e.stateNode=t,t._reactInternals=e,i&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=r),t}function um(e,t,a,i){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(a,i),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(a,i),t.state!==e&&el.enqueueReplaceState(t,t.state,null)}function Iu(e,t,a,i){var n=e.stateNode;n.props=a,n.state=e.memoizedState,n.refs={},Yc(e);var r=t.contextType;typeof r=="object"&&r!==null?n.context=$t(r):(r=ht(t)?Ii:it.current,n.context=wn(e,r)),n.state=e.memoizedState,r=t.getDerivedStateFromProps,typeof r=="function"&&(Au(e,t,r,a),n.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof n.getSnapshotBeforeUpdate=="function"||typeof n.UNSAFE_componentWillMount!="function"&&typeof n.componentWillMount!="function"||(t=n.state,typeof n.componentWillMount=="function"&&n.componentWillMount(),typeof n.UNSAFE_componentWillMount=="function"&&n.UNSAFE_componentWillMount(),t!==n.state&&el.enqueueReplaceState(n,n.state,null),Do(e,a,n,i),n.state=e.memoizedState),typeof n.componentDidMount=="function"&&(e.flags|=4194308)}function Dn(e,t){try{var a="",i=t;do a+=j0(i),i=i.return;while(i);var n=a}catch(r){n=`
Error generating stack: `+r.message+`
`+r.stack}return{value:e,source:t,stack:n,digest:null}}function qd(e,t,a){return{value:e,source:null,stack:a??null,digest:t??null}}function Eu(e,t){try{console.error(t.value)}catch(a){setTimeout(function(){throw a})}}var l1=typeof WeakMap=="function"?WeakMap:Map;function u_(e,t,a){a=Ca(-1,a),a.tag=3,a.payload={element:null};var i=t.value;return a.callback=function(){Ro||(Ro=!0,$u=i),Eu(e,t)},a}function c_(e,t,a){a=Ca(-1,a),a.tag=3;var i=e.type.getDerivedStateFromError;if(typeof i=="function"){var n=t.value;a.payload=function(){return i(n)},a.callback=function(){Eu(e,t)}}var r=e.stateNode;return r!==null&&typeof r.componentDidCatch=="function"&&(a.callback=function(){Eu(e,t),typeof i!="function"&&(ri===null?ri=new Set([this]):ri.add(this));var s=t.stack;this.componentDidCatch(t.value,{componentStack:s!==null?s:""})}),a}function cm(e,t,a){var i=e.pingCache;if(i===null){i=e.pingCache=new l1;var n=new Set;i.set(t,n)}else n=i.get(t),n===void 0&&(n=new Set,i.set(t,n));n.has(a)||(n.add(a),e=k1.bind(null,e,t,a),t.then(e,e))}function pm(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function fm(e,t,a,i,n){return e.mode&1?(e.flags|=65536,e.lanes=n,e):(e===t?e.flags|=65536:(e.flags|=128,a.flags|=131072,a.flags&=-52805,a.tag===1&&(a.alternate===null?a.tag=17:(t=Ca(-1,1),t.tag=2,ni(a,t,1))),a.lanes|=1),e)}var d1=Oa.ReactCurrentOwner,ft=!1;function nt(e,t,a,i){t.child=e===null?By(t,null,a,i):Tn(t,e.child,a,i)}function mm(e,t,a,i,n){a=a.render;var r=t.ref;return gn(t,n),i=ap(e,t,a,i,r,n),a=ip(),e!==null&&!ft?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n,Aa(e,t,n)):(xe&&a&&Uc(t),t.flags|=1,nt(e,t,i,n),t.child)}function hm(e,t,a,i,n){if(e===null){var r=a.type;return typeof r=="function"&&!fp(r)&&r.defaultProps===void 0&&a.compare===null&&a.defaultProps===void 0?(t.tag=15,t.type=r,p_(e,t,r,i,n)):(e=eo(a.type,null,i,t,t.mode,n),e.ref=t.ref,e.return=t,t.child=e)}if(r=e.child,!(e.lanes&n)){var s=r.memoizedProps;if(a=a.compare,a=a!==null?a:Ir,a(s,i)&&e.ref===t.ref)return Aa(e,t,n)}return t.flags|=1,e=oi(r,i),e.ref=t.ref,e.return=t,t.child=e}function p_(e,t,a,i,n){if(e!==null){var r=e.memoizedProps;if(Ir(r,i)&&e.ref===t.ref)if(ft=!1,t.pendingProps=i=r,(e.lanes&n)!==0)e.flags&131072&&(ft=!0);else return t.lanes=e.lanes,Aa(e,t,n)}return Nu(e,t,a,i,n)}function f_(e,t,a){var i=t.pendingProps,n=i.children,r=e!==null?e.memoizedState:null;if(i.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ye(un,bt),bt|=a;else{if(!(a&1073741824))return e=r!==null?r.baseLanes|a:a,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ye(un,bt),bt|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},i=r!==null?r.baseLanes:a,ye(un,bt),bt|=i}else r!==null?(i=r.baseLanes|a,t.memoizedState=null):i=a,ye(un,bt),bt|=i;return nt(e,t,n,a),t.child}function m_(e,t){var a=t.ref;(e===null&&a!==null||e!==null&&e.ref!==a)&&(t.flags|=512,t.flags|=2097152)}function Nu(e,t,a,i,n){var r=ht(a)?Ii:it.current;return r=wn(t,r),gn(t,n),a=ap(e,t,a,i,r,n),i=ip(),e!==null&&!ft?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n,Aa(e,t,n)):(xe&&i&&Uc(t),t.flags|=1,nt(e,t,a,n),t.child)}function gm(e,t,a,i,n){if(ht(a)){var r=!0;bo(t)}else r=!1;if(gn(t,n),t.stateNode===null)Ys(e,t),d_(t,a,i),Iu(t,a,i,n),i=!0;else if(e===null){var s=t.stateNode,o=t.memoizedProps;s.props=o;var l=s.context,d=a.contextType;typeof d=="object"&&d!==null?d=$t(d):(d=ht(a)?Ii:it.current,d=wn(t,d));var c=a.getDerivedStateFromProps,f=typeof c=="function"||typeof s.getSnapshotBeforeUpdate=="function";f||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(o!==i||l!==d)&&um(t,s,i,d),Va=!1;var g=t.memoizedState;s.state=g,Do(t,i,s,n),l=t.memoizedState,o!==i||g!==l||mt.current||Va?(typeof c=="function"&&(Au(t,a,c,i),l=t.memoizedState),(o=Va||dm(t,a,o,i,g,l,d))?(f||typeof s.UNSAFE_componentWillMount!="function"&&typeof s.componentWillMount!="function"||(typeof s.componentWillMount=="function"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount=="function"&&s.UNSAFE_componentWillMount()),typeof s.componentDidMount=="function"&&(t.flags|=4194308)):(typeof s.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=i,t.memoizedState=l),s.props=i,s.state=l,s.context=d,i=o):(typeof s.componentDidMount=="function"&&(t.flags|=4194308),i=!1)}else{s=t.stateNode,zy(e,t),o=t.memoizedProps,d=t.type===t.elementType?o:Jt(t.type,o),s.props=d,f=t.pendingProps,g=s.context,l=a.contextType,typeof l=="object"&&l!==null?l=$t(l):(l=ht(a)?Ii:it.current,l=wn(t,l));var w=a.getDerivedStateFromProps;(c=typeof w=="function"||typeof s.getSnapshotBeforeUpdate=="function")||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(o!==f||g!==l)&&um(t,s,i,l),Va=!1,g=t.memoizedState,s.state=g,Do(t,i,s,n);var v=t.memoizedState;o!==f||g!==v||mt.current||Va?(typeof w=="function"&&(Au(t,a,w,i),v=t.memoizedState),(d=Va||dm(t,a,d,i,g,v,l)||!1)?(c||typeof s.UNSAFE_componentWillUpdate!="function"&&typeof s.componentWillUpdate!="function"||(typeof s.componentWillUpdate=="function"&&s.componentWillUpdate(i,v,l),typeof s.UNSAFE_componentWillUpdate=="function"&&s.UNSAFE_componentWillUpdate(i,v,l)),typeof s.componentDidUpdate=="function"&&(t.flags|=4),typeof s.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof s.componentDidUpdate!="function"||o===e.memoizedProps&&g===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||o===e.memoizedProps&&g===e.memoizedState||(t.flags|=1024),t.memoizedProps=i,t.memoizedState=v),s.props=i,s.state=v,s.context=l,i=d):(typeof s.componentDidUpdate!="function"||o===e.memoizedProps&&g===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||o===e.memoizedProps&&g===e.memoizedState||(t.flags|=1024),i=!1)}return ju(e,t,a,i,r,n)}function ju(e,t,a,i,n,r){m_(e,t);var s=(t.flags&128)!==0;if(!i&&!s)return n&&tm(t,a,!1),Aa(e,t,r);i=t.stateNode,d1.current=t;var o=s&&typeof a.getDerivedStateFromError!="function"?null:i.render();return t.flags|=1,e!==null&&s?(t.child=Tn(t,e.child,null,r),t.child=Tn(t,null,o,r)):nt(e,t,o,r),t.memoizedState=i.state,n&&tm(t,a,!0),t.child}function h_(e){var t=e.stateNode;t.pendingContext?em(e,t.pendingContext,t.pendingContext!==t.context):t.context&&em(e,t.context,!1),Qc(e,t.containerInfo)}function ym(e,t,a,i,n){return kn(),Vc(n),t.flags|=256,nt(e,t,a,i),t.child}var Fu={dehydrated:null,treeContext:null,retryLane:0};function Ou(e){return{baseLanes:e,cachePool:null,transitions:null}}function g_(e,t,a){var i=t.pendingProps,n=Ce.current,r=!1,s=(t.flags&128)!==0,o;if((o=s)||(o=e!==null&&e.memoizedState===null?!1:(n&2)!==0),o?(r=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(n|=1),ye(Ce,n&1),e===null)return Pu(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=i.children,e=i.fallback,r?(i=t.mode,r=t.child,s={mode:"hidden",children:s},!(i&1)&&r!==null?(r.childLanes=0,r.pendingProps=s):r=il(s,i,0,null),e=Ai(e,i,a,null),r.return=t,e.return=t,r.sibling=e,t.child=r,t.child.memoizedState=Ou(a),t.memoizedState=Fu,e):sp(t,s));if(n=e.memoizedState,n!==null&&(o=n.dehydrated,o!==null))return u1(e,t,s,i,o,n,a);if(r){r=i.fallback,s=t.mode,n=e.child,o=n.sibling;var l={mode:"hidden",children:i.children};return!(s&1)&&t.child!==n?(i=t.child,i.childLanes=0,i.pendingProps=l,t.deletions=null):(i=oi(n,l),i.subtreeFlags=n.subtreeFlags&14680064),o!==null?r=oi(o,r):(r=Ai(r,s,a,null),r.flags|=2),r.return=t,i.return=t,i.sibling=r,t.child=i,i=r,r=t.child,s=e.child.memoizedState,s=s===null?Ou(a):{baseLanes:s.baseLanes|a,cachePool:null,transitions:s.transitions},r.memoizedState=s,r.childLanes=e.childLanes&~a,t.memoizedState=Fu,i}return r=e.child,e=r.sibling,i=oi(r,{mode:"visible",children:i.children}),!(t.mode&1)&&(i.lanes=a),i.return=t,i.sibling=null,e!==null&&(a=t.deletions,a===null?(t.deletions=[e],t.flags|=16):a.push(e)),t.child=i,t.memoizedState=null,i}function sp(e,t){return t=il({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Ss(e,t,a,i){return i!==null&&Vc(i),Tn(t,e.child,null,a),e=sp(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function u1(e,t,a,i,n,r,s){if(a)return t.flags&256?(t.flags&=-257,i=qd(Error(N(422))),Ss(e,t,s,i)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(r=i.fallback,n=t.mode,i=il({mode:"visible",children:i.children},n,0,null),r=Ai(r,n,s,null),r.flags|=2,i.return=t,r.return=t,i.sibling=r,t.child=i,t.mode&1&&Tn(t,e.child,null,s),t.child.memoizedState=Ou(s),t.memoizedState=Fu,r);if(!(t.mode&1))return Ss(e,t,s,null);if(n.data==="$!"){if(i=n.nextSibling&&n.nextSibling.dataset,i)var o=i.dgst;return i=o,r=Error(N(419)),i=qd(r,i,void 0),Ss(e,t,s,i)}if(o=(s&e.childLanes)!==0,ft||o){if(i=Ue,i!==null){switch(s&-s){case 4:n=2;break;case 16:n=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:n=32;break;case 536870912:n=268435456;break;default:n=0}n=n&(i.suspendedLanes|s)?0:n,n!==0&&n!==r.retryLane&&(r.retryLane=n,Ra(e,n),ta(i,e,n,-1))}return pp(),i=qd(Error(N(421))),Ss(e,t,s,i)}return n.data==="$?"?(t.flags|=128,t.child=e.child,t=T1.bind(null,e),n._reactRetry=t,null):(e=r.treeContext,Tt=ii(n.nextSibling),xt=t,xe=!0,Qt=null,e!==null&&(Mt[Lt++]=xa,Mt[Lt++]=Da,Mt[Lt++]=Ei,xa=e.id,Da=e.overflow,Ei=t),t=sp(t,i.children),t.flags|=4096,t)}function _m(e,t,a){e.lanes|=t;var i=e.alternate;i!==null&&(i.lanes|=t),Ru(e.return,t,a)}function Cd(e,t,a,i,n){var r=e.memoizedState;r===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:i,tail:a,tailMode:n}:(r.isBackwards=t,r.rendering=null,r.renderingStartTime=0,r.last=i,r.tail=a,r.tailMode=n)}function y_(e,t,a){var i=t.pendingProps,n=i.revealOrder,r=i.tail;if(nt(e,t,i.children,a),i=Ce.current,i&2)i=i&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&_m(e,a,t);else if(e.tag===19)_m(e,a,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}i&=1}if(ye(Ce,i),!(t.mode&1))t.memoizedState=null;else switch(n){case"forwards":for(a=t.child,n=null;a!==null;)e=a.alternate,e!==null&&qo(e)===null&&(n=a),a=a.sibling;a=n,a===null?(n=t.child,t.child=null):(n=a.sibling,a.sibling=null),Cd(t,!1,n,a,r);break;case"backwards":for(a=null,n=t.child,t.child=null;n!==null;){if(e=n.alternate,e!==null&&qo(e)===null){t.child=n;break}e=n.sibling,n.sibling=a,a=n,n=e}Cd(t,!0,a,null,r);break;case"together":Cd(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ys(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Aa(e,t,a){if(e!==null&&(t.dependencies=e.dependencies),ji|=t.lanes,!(a&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(N(153));if(t.child!==null){for(e=t.child,a=oi(e,e.pendingProps),t.child=a,a.return=t;e.sibling!==null;)e=e.sibling,a=a.sibling=oi(e,e.pendingProps),a.return=t;a.sibling=null}return t.child}function c1(e,t,a){switch(t.tag){case 3:h_(t),kn();break;case 5:$y(t);break;case 1:ht(t.type)&&bo(t);break;case 4:Qc(t,t.stateNode.containerInfo);break;case 10:var i=t.type._context,n=t.memoizedProps.value;ye(To,i._currentValue),i._currentValue=n;break;case 13:if(i=t.memoizedState,i!==null)return i.dehydrated!==null?(ye(Ce,Ce.current&1),t.flags|=128,null):a&t.child.childLanes?g_(e,t,a):(ye(Ce,Ce.current&1),e=Aa(e,t,a),e!==null?e.sibling:null);ye(Ce,Ce.current&1);break;case 19:if(i=(a&t.childLanes)!==0,e.flags&128){if(i)return y_(e,t,a);t.flags|=128}if(n=t.memoizedState,n!==null&&(n.rendering=null,n.tail=null,n.lastEffect=null),ye(Ce,Ce.current),i)break;return null;case 22:case 23:return t.lanes=0,f_(e,t,a)}return Aa(e,t,a)}var __,Mu,v_,b_;__=function(e,t){for(var a=t.child;a!==null;){if(a.tag===5||a.tag===6)e.appendChild(a.stateNode);else if(a.tag!==4&&a.child!==null){a.child.return=a,a=a.child;continue}if(a===t)break;for(;a.sibling===null;){if(a.return===null||a.return===t)return;a=a.return}a.sibling.return=a.return,a=a.sibling}};Mu=function(){};v_=function(e,t,a,i){var n=e.memoizedProps;if(n!==i){e=t.stateNode,Si(fa.current);var r=null;switch(a){case"input":n=su(e,n),i=su(e,i),r=[];break;case"select":n=Pe({},n,{value:void 0}),i=Pe({},i,{value:void 0}),r=[];break;case"textarea":n=du(e,n),i=du(e,i),r=[];break;default:typeof n.onClick!="function"&&typeof i.onClick=="function"&&(e.onclick=_o)}cu(a,i);var s;a=null;for(d in n)if(!i.hasOwnProperty(d)&&n.hasOwnProperty(d)&&n[d]!=null)if(d==="style"){var o=n[d];for(s in o)o.hasOwnProperty(s)&&(a||(a={}),a[s]="")}else d!=="dangerouslySetInnerHTML"&&d!=="children"&&d!=="suppressContentEditableWarning"&&d!=="suppressHydrationWarning"&&d!=="autoFocus"&&(Dr.hasOwnProperty(d)?r||(r=[]):(r=r||[]).push(d,null));for(d in i){var l=i[d];if(o=n!=null?n[d]:void 0,i.hasOwnProperty(d)&&l!==o&&(l!=null||o!=null))if(d==="style")if(o){for(s in o)!o.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(a||(a={}),a[s]="");for(s in l)l.hasOwnProperty(s)&&o[s]!==l[s]&&(a||(a={}),a[s]=l[s])}else a||(r||(r=[]),r.push(d,a)),a=l;else d==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,o=o?o.__html:void 0,l!=null&&o!==l&&(r=r||[]).push(d,l)):d==="children"?typeof l!="string"&&typeof l!="number"||(r=r||[]).push(d,""+l):d!=="suppressContentEditableWarning"&&d!=="suppressHydrationWarning"&&(Dr.hasOwnProperty(d)?(l!=null&&d==="onScroll"&&ve("scroll",e),r||o===l||(r=[])):(r=r||[]).push(d,l))}a&&(r=r||[]).push("style",a);var d=r;(t.updateQueue=d)&&(t.flags|=4)}};b_=function(e,t,a,i){a!==i&&(t.flags|=4)};function Xn(e,t){if(!xe)switch(e.tailMode){case"hidden":t=e.tail;for(var a=null;t!==null;)t.alternate!==null&&(a=t),t=t.sibling;a===null?e.tail=null:a.sibling=null;break;case"collapsed":a=e.tail;for(var i=null;a!==null;)a.alternate!==null&&(i=a),a=a.sibling;i===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:i.sibling=null}}function et(e){var t=e.alternate!==null&&e.alternate.child===e.child,a=0,i=0;if(t)for(var n=e.child;n!==null;)a|=n.lanes|n.childLanes,i|=n.subtreeFlags&14680064,i|=n.flags&14680064,n.return=e,n=n.sibling;else for(n=e.child;n!==null;)a|=n.lanes|n.childLanes,i|=n.subtreeFlags,i|=n.flags,n.return=e,n=n.sibling;return e.subtreeFlags|=i,e.childLanes=a,t}function p1(e,t,a){var i=t.pendingProps;switch(Kc(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return et(t),null;case 1:return ht(t.type)&&vo(),et(t),null;case 3:return i=t.stateNode,xn(),be(mt),be(it),ep(),i.pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(e===null||e.child===null)&&(qs(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Qt!==null&&(Vu(Qt),Qt=null))),Mu(e,t),et(t),null;case 5:Zc(t);var n=Si(Or.current);if(a=t.type,e!==null&&t.stateNode!=null)v_(e,t,a,i,n),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!i){if(t.stateNode===null)throw Error(N(166));return et(t),null}if(e=Si(fa.current),qs(t)){i=t.stateNode,a=t.type;var r=t.memoizedProps;switch(i[ua]=t,i[jr]=r,e=(t.mode&1)!==0,a){case"dialog":ve("cancel",i),ve("close",i);break;case"iframe":case"object":case"embed":ve("load",i);break;case"video":case"audio":for(n=0;n<lr.length;n++)ve(lr[n],i);break;case"source":ve("error",i);break;case"img":case"image":case"link":ve("error",i),ve("load",i);break;case"details":ve("toggle",i);break;case"input":Cf(i,r),ve("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!r.multiple},ve("invalid",i);break;case"textarea":Pf(i,r),ve("invalid",i)}cu(a,r),n=null;for(var s in r)if(r.hasOwnProperty(s)){var o=r[s];s==="children"?typeof o=="string"?i.textContent!==o&&(r.suppressHydrationWarning!==!0&&Ds(i.textContent,o,e),n=["children",o]):typeof o=="number"&&i.textContent!==""+o&&(r.suppressHydrationWarning!==!0&&Ds(i.textContent,o,e),n=["children",""+o]):Dr.hasOwnProperty(s)&&o!=null&&s==="onScroll"&&ve("scroll",i)}switch(a){case"input":ys(i),Sf(i,r,!0);break;case"textarea":ys(i),Rf(i);break;case"select":case"option":break;default:typeof r.onClick=="function"&&(i.onclick=_o)}i=n,t.updateQueue=i,i!==null&&(t.flags|=4)}else{s=n.nodeType===9?n:n.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Hg(a)),e==="http://www.w3.org/1999/xhtml"?a==="script"?(e=s.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof i.is=="string"?e=s.createElement(a,{is:i.is}):(e=s.createElement(a),a==="select"&&(s=e,i.multiple?s.multiple=!0:i.size&&(s.size=i.size))):e=s.createElementNS(e,a),e[ua]=t,e[jr]=i,__(e,t,!1,!1),t.stateNode=e;e:{switch(s=pu(a,i),a){case"dialog":ve("cancel",e),ve("close",e),n=i;break;case"iframe":case"object":case"embed":ve("load",e),n=i;break;case"video":case"audio":for(n=0;n<lr.length;n++)ve(lr[n],e);n=i;break;case"source":ve("error",e),n=i;break;case"img":case"image":case"link":ve("error",e),ve("load",e),n=i;break;case"details":ve("toggle",e),n=i;break;case"input":Cf(e,i),n=su(e,i),ve("invalid",e);break;case"option":n=i;break;case"select":e._wrapperState={wasMultiple:!!i.multiple},n=Pe({},i,{value:void 0}),ve("invalid",e);break;case"textarea":Pf(e,i),n=du(e,i),ve("invalid",e);break;default:n=i}cu(a,n),o=n;for(r in o)if(o.hasOwnProperty(r)){var l=o[r];r==="style"?Yg(e,l):r==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&Xg(e,l)):r==="children"?typeof l=="string"?(a!=="textarea"||l!=="")&&qr(e,l):typeof l=="number"&&qr(e,""+l):r!=="suppressContentEditableWarning"&&r!=="suppressHydrationWarning"&&r!=="autoFocus"&&(Dr.hasOwnProperty(r)?l!=null&&r==="onScroll"&&ve("scroll",e):l!=null&&Rc(e,r,l,s))}switch(a){case"input":ys(e),Sf(e,i,!1);break;case"textarea":ys(e),Rf(e);break;case"option":i.value!=null&&e.setAttribute("value",""+di(i.value));break;case"select":e.multiple=!!i.multiple,r=i.value,r!=null?pn(e,!!i.multiple,r,!1):i.defaultValue!=null&&pn(e,!!i.multiple,i.defaultValue,!0);break;default:typeof n.onClick=="function"&&(e.onclick=_o)}switch(a){case"button":case"input":case"select":case"textarea":i=!!i.autoFocus;break e;case"img":i=!0;break e;default:i=!1}}i&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return et(t),null;case 6:if(e&&t.stateNode!=null)b_(e,t,e.memoizedProps,i);else{if(typeof i!="string"&&t.stateNode===null)throw Error(N(166));if(a=Si(Or.current),Si(fa.current),qs(t)){if(i=t.stateNode,a=t.memoizedProps,i[ua]=t,(r=i.nodeValue!==a)&&(e=xt,e!==null))switch(e.tag){case 3:Ds(i.nodeValue,a,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Ds(i.nodeValue,a,(e.mode&1)!==0)}r&&(t.flags|=4)}else i=(a.nodeType===9?a:a.ownerDocument).createTextNode(i),i[ua]=t,t.stateNode=i}return et(t),null;case 13:if(be(Ce),i=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(xe&&Tt!==null&&t.mode&1&&!(t.flags&128))My(),kn(),t.flags|=98560,r=!1;else if(r=qs(t),i!==null&&i.dehydrated!==null){if(e===null){if(!r)throw Error(N(318));if(r=t.memoizedState,r=r!==null?r.dehydrated:null,!r)throw Error(N(317));r[ua]=t}else kn(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;et(t),r=!1}else Qt!==null&&(Vu(Qt),Qt=null),r=!0;if(!r)return t.flags&65536?t:null}return t.flags&128?(t.lanes=a,t):(i=i!==null,i!==(e!==null&&e.memoizedState!==null)&&i&&(t.child.flags|=8192,t.mode&1&&(e===null||Ce.current&1?ze===0&&(ze=3):pp())),t.updateQueue!==null&&(t.flags|=4),et(t),null);case 4:return xn(),Mu(e,t),e===null&&Er(t.stateNode.containerInfo),et(t),null;case 10:return Xc(t.type._context),et(t),null;case 17:return ht(t.type)&&vo(),et(t),null;case 19:if(be(Ce),r=t.memoizedState,r===null)return et(t),null;if(i=(t.flags&128)!==0,s=r.rendering,s===null)if(i)Xn(r,!1);else{if(ze!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(s=qo(e),s!==null){for(t.flags|=128,Xn(r,!1),i=s.updateQueue,i!==null&&(t.updateQueue=i,t.flags|=4),t.subtreeFlags=0,i=a,a=t.child;a!==null;)r=a,e=i,r.flags&=14680066,s=r.alternate,s===null?(r.childLanes=0,r.lanes=e,r.child=null,r.subtreeFlags=0,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null,r.stateNode=null):(r.childLanes=s.childLanes,r.lanes=s.lanes,r.child=s.child,r.subtreeFlags=0,r.deletions=null,r.memoizedProps=s.memoizedProps,r.memoizedState=s.memoizedState,r.updateQueue=s.updateQueue,r.type=s.type,e=s.dependencies,r.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),a=a.sibling;return ye(Ce,Ce.current&1|2),t.child}e=e.sibling}r.tail!==null&&Ne()>qn&&(t.flags|=128,i=!0,Xn(r,!1),t.lanes=4194304)}else{if(!i)if(e=qo(s),e!==null){if(t.flags|=128,i=!0,a=e.updateQueue,a!==null&&(t.updateQueue=a,t.flags|=4),Xn(r,!0),r.tail===null&&r.tailMode==="hidden"&&!s.alternate&&!xe)return et(t),null}else 2*Ne()-r.renderingStartTime>qn&&a!==1073741824&&(t.flags|=128,i=!0,Xn(r,!1),t.lanes=4194304);r.isBackwards?(s.sibling=t.child,t.child=s):(a=r.last,a!==null?a.sibling=s:t.child=s,r.last=s)}return r.tail!==null?(t=r.tail,r.rendering=t,r.tail=t.sibling,r.renderingStartTime=Ne(),t.sibling=null,a=Ce.current,ye(Ce,i?a&1|2:a&1),t):(et(t),null);case 22:case 23:return cp(),i=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==i&&(t.flags|=8192),i&&t.mode&1?bt&1073741824&&(et(t),t.subtreeFlags&6&&(t.flags|=8192)):et(t),null;case 24:return null;case 25:return null}throw Error(N(156,t.tag))}function f1(e,t){switch(Kc(t),t.tag){case 1:return ht(t.type)&&vo(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return xn(),be(mt),be(it),ep(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return Zc(t),null;case 13:if(be(Ce),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(N(340));kn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return be(Ce),null;case 4:return xn(),null;case 10:return Xc(t.type._context),null;case 22:case 23:return cp(),null;case 24:return null;default:return null}}var Ps=!1,at=!1,m1=typeof WeakSet=="function"?WeakSet:Set,W=null;function dn(e,t){var a=e.ref;if(a!==null)if(typeof a=="function")try{a(null)}catch(i){Ie(e,t,i)}else a.current=null}function Lu(e,t,a){try{a()}catch(i){Ie(e,t,i)}}var vm=!1;function h1(e,t){if(ku=ho,e=Dy(),$c(e)){if("selectionStart"in e)var a={start:e.selectionStart,end:e.selectionEnd};else e:{a=(a=e.ownerDocument)&&a.defaultView||window;var i=a.getSelection&&a.getSelection();if(i&&i.rangeCount!==0){a=i.anchorNode;var n=i.anchorOffset,r=i.focusNode;i=i.focusOffset;try{a.nodeType,r.nodeType}catch{a=null;break e}var s=0,o=-1,l=-1,d=0,c=0,f=e,g=null;t:for(;;){for(var w;f!==a||n!==0&&f.nodeType!==3||(o=s+n),f!==r||i!==0&&f.nodeType!==3||(l=s+i),f.nodeType===3&&(s+=f.nodeValue.length),(w=f.firstChild)!==null;)g=f,f=w;for(;;){if(f===e)break t;if(g===a&&++d===n&&(o=s),g===r&&++c===i&&(l=s),(w=f.nextSibling)!==null)break;f=g,g=f.parentNode}f=w}a=o===-1||l===-1?null:{start:o,end:l}}else a=null}a=a||{start:0,end:0}}else a=null;for(Tu={focusedElem:e,selectionRange:a},ho=!1,W=t;W!==null;)if(t=W,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,W=e;else for(;W!==null;){t=W;try{var v=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(v!==null){var y=v.memoizedProps,T=v.memoizedState,u=t.stateNode,m=u.getSnapshotBeforeUpdate(t.elementType===t.type?y:Jt(t.type,y),T);u.__reactInternalSnapshotBeforeUpdate=m}break;case 3:var p=t.stateNode.containerInfo;p.nodeType===1?p.textContent="":p.nodeType===9&&p.documentElement&&p.removeChild(p.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(N(163))}}catch(_){Ie(t,t.return,_)}if(e=t.sibling,e!==null){e.return=t.return,W=e;break}W=t.return}return v=vm,vm=!1,v}function yr(e,t,a){var i=t.updateQueue;if(i=i!==null?i.lastEffect:null,i!==null){var n=i=i.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,r!==void 0&&Lu(t,a,r)}n=n.next}while(n!==i)}}function tl(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var a=t=t.next;do{if((a.tag&e)===e){var i=a.create;a.destroy=i()}a=a.next}while(a!==t)}}function Bu(e){var t=e.ref;if(t!==null){var a=e.stateNode;switch(e.tag){case 5:e=a;break;default:e=a}typeof t=="function"?t(e):t.current=e}}function w_(e){var t=e.alternate;t!==null&&(e.alternate=null,w_(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[ua],delete t[jr],delete t[qu],delete t[Yw],delete t[Qw])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function k_(e){return e.tag===5||e.tag===3||e.tag===4}function bm(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||k_(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Wu(e,t,a){var i=e.tag;if(i===5||i===6)e=e.stateNode,t?a.nodeType===8?a.parentNode.insertBefore(e,t):a.insertBefore(e,t):(a.nodeType===8?(t=a.parentNode,t.insertBefore(e,a)):(t=a,t.appendChild(e)),a=a._reactRootContainer,a!=null||t.onclick!==null||(t.onclick=_o));else if(i!==4&&(e=e.child,e!==null))for(Wu(e,t,a),e=e.sibling;e!==null;)Wu(e,t,a),e=e.sibling}function zu(e,t,a){var i=e.tag;if(i===5||i===6)e=e.stateNode,t?a.insertBefore(e,t):a.appendChild(e);else if(i!==4&&(e=e.child,e!==null))for(zu(e,t,a),e=e.sibling;e!==null;)zu(e,t,a),e=e.sibling}var He=null,Yt=!1;function Wa(e,t,a){for(a=a.child;a!==null;)T_(e,t,a),a=a.sibling}function T_(e,t,a){if(pa&&typeof pa.onCommitFiberUnmount=="function")try{pa.onCommitFiberUnmount(Go,a)}catch{}switch(a.tag){case 5:at||dn(a,t);case 6:var i=He,n=Yt;He=null,Wa(e,t,a),He=i,Yt=n,He!==null&&(Yt?(e=He,a=a.stateNode,e.nodeType===8?e.parentNode.removeChild(a):e.removeChild(a)):He.removeChild(a.stateNode));break;case 18:He!==null&&(Yt?(e=He,a=a.stateNode,e.nodeType===8?bd(e.parentNode,a):e.nodeType===1&&bd(e,a),Rr(e)):bd(He,a.stateNode));break;case 4:i=He,n=Yt,He=a.stateNode.containerInfo,Yt=!0,Wa(e,t,a),He=i,Yt=n;break;case 0:case 11:case 14:case 15:if(!at&&(i=a.updateQueue,i!==null&&(i=i.lastEffect,i!==null))){n=i=i.next;do{var r=n,s=r.destroy;r=r.tag,s!==void 0&&(r&2||r&4)&&Lu(a,t,s),n=n.next}while(n!==i)}Wa(e,t,a);break;case 1:if(!at&&(dn(a,t),i=a.stateNode,typeof i.componentWillUnmount=="function"))try{i.props=a.memoizedProps,i.state=a.memoizedState,i.componentWillUnmount()}catch(o){Ie(a,t,o)}Wa(e,t,a);break;case 21:Wa(e,t,a);break;case 22:a.mode&1?(at=(i=at)||a.memoizedState!==null,Wa(e,t,a),at=i):Wa(e,t,a);break;default:Wa(e,t,a)}}function wm(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var a=e.stateNode;a===null&&(a=e.stateNode=new m1),t.forEach(function(i){var n=x1.bind(null,e,i);a.has(i)||(a.add(i),i.then(n,n))})}}function Xt(e,t){var a=t.deletions;if(a!==null)for(var i=0;i<a.length;i++){var n=a[i];try{var r=e,s=t,o=s;e:for(;o!==null;){switch(o.tag){case 5:He=o.stateNode,Yt=!1;break e;case 3:He=o.stateNode.containerInfo,Yt=!0;break e;case 4:He=o.stateNode.containerInfo,Yt=!0;break e}o=o.return}if(He===null)throw Error(N(160));T_(r,s,n),He=null,Yt=!1;var l=n.alternate;l!==null&&(l.return=null),n.return=null}catch(d){Ie(n,t,d)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)x_(t,e),t=t.sibling}function x_(e,t){var a=e.alternate,i=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Xt(t,e),ra(e),i&4){try{yr(3,e,e.return),tl(3,e)}catch(y){Ie(e,e.return,y)}try{yr(5,e,e.return)}catch(y){Ie(e,e.return,y)}}break;case 1:Xt(t,e),ra(e),i&512&&a!==null&&dn(a,a.return);break;case 5:if(Xt(t,e),ra(e),i&512&&a!==null&&dn(a,a.return),e.flags&32){var n=e.stateNode;try{qr(n,"")}catch(y){Ie(e,e.return,y)}}if(i&4&&(n=e.stateNode,n!=null)){var r=e.memoizedProps,s=a!==null?a.memoizedProps:r,o=e.type,l=e.updateQueue;if(e.updateQueue=null,l!==null)try{o==="input"&&r.type==="radio"&&r.name!=null&&Vg(n,r),pu(o,s);var d=pu(o,r);for(s=0;s<l.length;s+=2){var c=l[s],f=l[s+1];c==="style"?Yg(n,f):c==="dangerouslySetInnerHTML"?Xg(n,f):c==="children"?qr(n,f):Rc(n,c,f,d)}switch(o){case"input":ou(n,r);break;case"textarea":Gg(n,r);break;case"select":var g=n._wrapperState.wasMultiple;n._wrapperState.wasMultiple=!!r.multiple;var w=r.value;w!=null?pn(n,!!r.multiple,w,!1):g!==!!r.multiple&&(r.defaultValue!=null?pn(n,!!r.multiple,r.defaultValue,!0):pn(n,!!r.multiple,r.multiple?[]:"",!1))}n[jr]=r}catch(y){Ie(e,e.return,y)}}break;case 6:if(Xt(t,e),ra(e),i&4){if(e.stateNode===null)throw Error(N(162));n=e.stateNode,r=e.memoizedProps;try{n.nodeValue=r}catch(y){Ie(e,e.return,y)}}break;case 3:if(Xt(t,e),ra(e),i&4&&a!==null&&a.memoizedState.isDehydrated)try{Rr(t.containerInfo)}catch(y){Ie(e,e.return,y)}break;case 4:Xt(t,e),ra(e);break;case 13:Xt(t,e),ra(e),n=e.child,n.flags&8192&&(r=n.memoizedState!==null,n.stateNode.isHidden=r,!r||n.alternate!==null&&n.alternate.memoizedState!==null||(dp=Ne())),i&4&&wm(e);break;case 22:if(c=a!==null&&a.memoizedState!==null,e.mode&1?(at=(d=at)||c,Xt(t,e),at=d):Xt(t,e),ra(e),i&8192){if(d=e.memoizedState!==null,(e.stateNode.isHidden=d)&&!c&&e.mode&1)for(W=e,c=e.child;c!==null;){for(f=W=c;W!==null;){switch(g=W,w=g.child,g.tag){case 0:case 11:case 14:case 15:yr(4,g,g.return);break;case 1:dn(g,g.return);var v=g.stateNode;if(typeof v.componentWillUnmount=="function"){i=g,a=g.return;try{t=i,v.props=t.memoizedProps,v.state=t.memoizedState,v.componentWillUnmount()}catch(y){Ie(i,a,y)}}break;case 5:dn(g,g.return);break;case 22:if(g.memoizedState!==null){Tm(f);continue}}w!==null?(w.return=g,W=w):Tm(f)}c=c.sibling}e:for(c=null,f=e;;){if(f.tag===5){if(c===null){c=f;try{n=f.stateNode,d?(r=n.style,typeof r.setProperty=="function"?r.setProperty("display","none","important"):r.display="none"):(o=f.stateNode,l=f.memoizedProps.style,s=l!=null&&l.hasOwnProperty("display")?l.display:null,o.style.display=Jg("display",s))}catch(y){Ie(e,e.return,y)}}}else if(f.tag===6){if(c===null)try{f.stateNode.nodeValue=d?"":f.memoizedProps}catch(y){Ie(e,e.return,y)}}else if((f.tag!==22&&f.tag!==23||f.memoizedState===null||f===e)&&f.child!==null){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;f.sibling===null;){if(f.return===null||f.return===e)break e;c===f&&(c=null),f=f.return}c===f&&(c=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:Xt(t,e),ra(e),i&4&&wm(e);break;case 21:break;default:Xt(t,e),ra(e)}}function ra(e){var t=e.flags;if(t&2){try{e:{for(var a=e.return;a!==null;){if(k_(a)){var i=a;break e}a=a.return}throw Error(N(160))}switch(i.tag){case 5:var n=i.stateNode;i.flags&32&&(qr(n,""),i.flags&=-33);var r=bm(e);zu(e,r,n);break;case 3:case 4:var s=i.stateNode.containerInfo,o=bm(e);Wu(e,o,s);break;default:throw Error(N(161))}}catch(l){Ie(e,e.return,l)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function g1(e,t,a){W=e,D_(e)}function D_(e,t,a){for(var i=(e.mode&1)!==0;W!==null;){var n=W,r=n.child;if(n.tag===22&&i){var s=n.memoizedState!==null||Ps;if(!s){var o=n.alternate,l=o!==null&&o.memoizedState!==null||at;o=Ps;var d=at;if(Ps=s,(at=l)&&!d)for(W=n;W!==null;)s=W,l=s.child,s.tag===22&&s.memoizedState!==null?xm(n):l!==null?(l.return=s,W=l):xm(n);for(;r!==null;)W=r,D_(r),r=r.sibling;W=n,Ps=o,at=d}km(e)}else n.subtreeFlags&8772&&r!==null?(r.return=n,W=r):km(e)}}function km(e){for(;W!==null;){var t=W;if(t.flags&8772){var a=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:at||tl(5,t);break;case 1:var i=t.stateNode;if(t.flags&4&&!at)if(a===null)i.componentDidMount();else{var n=t.elementType===t.type?a.memoizedProps:Jt(t.type,a.memoizedProps);i.componentDidUpdate(n,a.memoizedState,i.__reactInternalSnapshotBeforeUpdate)}var r=t.updateQueue;r!==null&&sm(t,r,i);break;case 3:var s=t.updateQueue;if(s!==null){if(a=null,t.child!==null)switch(t.child.tag){case 5:a=t.child.stateNode;break;case 1:a=t.child.stateNode}sm(t,s,a)}break;case 5:var o=t.stateNode;if(a===null&&t.flags&4){a=o;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&a.focus();break;case"img":l.src&&(a.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var d=t.alternate;if(d!==null){var c=d.memoizedState;if(c!==null){var f=c.dehydrated;f!==null&&Rr(f)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(N(163))}at||t.flags&512&&Bu(t)}catch(g){Ie(t,t.return,g)}}if(t===e){W=null;break}if(a=t.sibling,a!==null){a.return=t.return,W=a;break}W=t.return}}function Tm(e){for(;W!==null;){var t=W;if(t===e){W=null;break}var a=t.sibling;if(a!==null){a.return=t.return,W=a;break}W=t.return}}function xm(e){for(;W!==null;){var t=W;try{switch(t.tag){case 0:case 11:case 15:var a=t.return;try{tl(4,t)}catch(l){Ie(t,a,l)}break;case 1:var i=t.stateNode;if(typeof i.componentDidMount=="function"){var n=t.return;try{i.componentDidMount()}catch(l){Ie(t,n,l)}}var r=t.return;try{Bu(t)}catch(l){Ie(t,r,l)}break;case 5:var s=t.return;try{Bu(t)}catch(l){Ie(t,s,l)}}}catch(l){Ie(t,t.return,l)}if(t===e){W=null;break}var o=t.sibling;if(o!==null){o.return=t.return,W=o;break}W=t.return}}var y1=Math.ceil,Po=Oa.ReactCurrentDispatcher,op=Oa.ReactCurrentOwner,zt=Oa.ReactCurrentBatchConfig,te=0,Ue=null,Me=null,Je=0,bt=0,un=pi(0),ze=0,Wr=null,ji=0,al=0,lp=0,_r=null,ct=null,dp=0,qn=1/0,ka=null,Ro=!1,$u=null,ri=null,Rs=!1,Ya=null,Ao=0,vr=0,Uu=null,Qs=-1,Zs=0;function rt(){return te&6?Ne():Qs!==-1?Qs:Qs=Ne()}function si(e){return e.mode&1?te&2&&Je!==0?Je&-Je:e1.transition!==null?(Zs===0&&(Zs=dy()),Zs):(e=le,e!==0||(e=window.event,e=e===void 0?16:gy(e.type)),e):1}function ta(e,t,a,i){if(50<vr)throw vr=0,Uu=null,Error(N(185));Jr(e,a,i),(!(te&2)||e!==Ue)&&(e===Ue&&(!(te&2)&&(al|=a),ze===4&&Ha(e,Je)),gt(e,i),a===1&&te===0&&!(t.mode&1)&&(qn=Ne()+500,Qo&&fi()))}function gt(e,t){var a=e.callbackNode;ew(e,t);var i=mo(e,e===Ue?Je:0);if(i===0)a!==null&&Ef(a),e.callbackNode=null,e.callbackPriority=0;else if(t=i&-i,e.callbackPriority!==t){if(a!=null&&Ef(a),t===1)e.tag===0?Zw(Dm.bind(null,e)):jy(Dm.bind(null,e)),Xw(function(){!(te&6)&&fi()}),a=null;else{switch(uy(i)){case 1:a=jc;break;case 4:a=oy;break;case 16:a=fo;break;case 536870912:a=ly;break;default:a=fo}a=E_(a,q_.bind(null,e))}e.callbackPriority=t,e.callbackNode=a}}function q_(e,t){if(Qs=-1,Zs=0,te&6)throw Error(N(327));var a=e.callbackNode;if(yn()&&e.callbackNode!==a)return null;var i=mo(e,e===Ue?Je:0);if(i===0)return null;if(i&30||i&e.expiredLanes||t)t=Io(e,i);else{t=i;var n=te;te|=2;var r=S_();(Ue!==e||Je!==t)&&(ka=null,qn=Ne()+500,Ri(e,t));do try{b1();break}catch(o){C_(e,o)}while(1);Hc(),Po.current=r,te=n,Me!==null?t=0:(Ue=null,Je=0,t=ze)}if(t!==0){if(t===2&&(n=yu(e),n!==0&&(i=n,t=Ku(e,n))),t===1)throw a=Wr,Ri(e,0),Ha(e,i),gt(e,Ne()),a;if(t===6)Ha(e,i);else{if(n=e.current.alternate,!(i&30)&&!_1(n)&&(t=Io(e,i),t===2&&(r=yu(e),r!==0&&(i=r,t=Ku(e,r))),t===1))throw a=Wr,Ri(e,0),Ha(e,i),gt(e,Ne()),a;switch(e.finishedWork=n,e.finishedLanes=i,t){case 0:case 1:throw Error(N(345));case 2:bi(e,ct,ka);break;case 3:if(Ha(e,i),(i&130023424)===i&&(t=dp+500-Ne(),10<t)){if(mo(e,0)!==0)break;if(n=e.suspendedLanes,(n&i)!==i){rt(),e.pingedLanes|=e.suspendedLanes&n;break}e.timeoutHandle=Du(bi.bind(null,e,ct,ka),t);break}bi(e,ct,ka);break;case 4:if(Ha(e,i),(i&4194240)===i)break;for(t=e.eventTimes,n=-1;0<i;){var s=31-ea(i);r=1<<s,s=t[s],s>n&&(n=s),i&=~r}if(i=n,i=Ne()-i,i=(120>i?120:480>i?480:1080>i?1080:1920>i?1920:3e3>i?3e3:4320>i?4320:1960*y1(i/1960))-i,10<i){e.timeoutHandle=Du(bi.bind(null,e,ct,ka),i);break}bi(e,ct,ka);break;case 5:bi(e,ct,ka);break;default:throw Error(N(329))}}}return gt(e,Ne()),e.callbackNode===a?q_.bind(null,e):null}function Ku(e,t){var a=_r;return e.current.memoizedState.isDehydrated&&(Ri(e,t).flags|=256),e=Io(e,t),e!==2&&(t=ct,ct=a,t!==null&&Vu(t)),e}function Vu(e){ct===null?ct=e:ct.push.apply(ct,e)}function _1(e){for(var t=e;;){if(t.flags&16384){var a=t.updateQueue;if(a!==null&&(a=a.stores,a!==null))for(var i=0;i<a.length;i++){var n=a[i],r=n.getSnapshot;n=n.value;try{if(!aa(r(),n))return!1}catch{return!1}}}if(a=t.child,t.subtreeFlags&16384&&a!==null)a.return=t,t=a;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Ha(e,t){for(t&=~lp,t&=~al,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var a=31-ea(t),i=1<<a;e[a]=-1,t&=~i}}function Dm(e){if(te&6)throw Error(N(327));yn();var t=mo(e,0);if(!(t&1))return gt(e,Ne()),null;var a=Io(e,t);if(e.tag!==0&&a===2){var i=yu(e);i!==0&&(t=i,a=Ku(e,i))}if(a===1)throw a=Wr,Ri(e,0),Ha(e,t),gt(e,Ne()),a;if(a===6)throw Error(N(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,bi(e,ct,ka),gt(e,Ne()),null}function up(e,t){var a=te;te|=1;try{return e(t)}finally{te=a,te===0&&(qn=Ne()+500,Qo&&fi())}}function Fi(e){Ya!==null&&Ya.tag===0&&!(te&6)&&yn();var t=te;te|=1;var a=zt.transition,i=le;try{if(zt.transition=null,le=1,e)return e()}finally{le=i,zt.transition=a,te=t,!(te&6)&&fi()}}function cp(){bt=un.current,be(un)}function Ri(e,t){e.finishedWork=null,e.finishedLanes=0;var a=e.timeoutHandle;if(a!==-1&&(e.timeoutHandle=-1,Hw(a)),Me!==null)for(a=Me.return;a!==null;){var i=a;switch(Kc(i),i.tag){case 1:i=i.type.childContextTypes,i!=null&&vo();break;case 3:xn(),be(mt),be(it),ep();break;case 5:Zc(i);break;case 4:xn();break;case 13:be(Ce);break;case 19:be(Ce);break;case 10:Xc(i.type._context);break;case 22:case 23:cp()}a=a.return}if(Ue=e,Me=e=oi(e.current,null),Je=bt=t,ze=0,Wr=null,lp=al=ji=0,ct=_r=null,Ci!==null){for(t=0;t<Ci.length;t++)if(a=Ci[t],i=a.interleaved,i!==null){a.interleaved=null;var n=i.next,r=a.pending;if(r!==null){var s=r.next;r.next=n,i.next=s}a.pending=i}Ci=null}return e}function C_(e,t){do{var a=Me;try{if(Hc(),Xs.current=So,Co){for(var i=Se.memoizedState;i!==null;){var n=i.queue;n!==null&&(n.pending=null),i=i.next}Co=!1}if(Ni=0,$e=We=Se=null,gr=!1,Mr=0,op.current=null,a===null||a.return===null){ze=1,Wr=t,Me=null;break}e:{var r=e,s=a.return,o=a,l=t;if(t=Je,o.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var d=l,c=o,f=c.tag;if(!(c.mode&1)&&(f===0||f===11||f===15)){var g=c.alternate;g?(c.updateQueue=g.updateQueue,c.memoizedState=g.memoizedState,c.lanes=g.lanes):(c.updateQueue=null,c.memoizedState=null)}var w=pm(s);if(w!==null){w.flags&=-257,fm(w,s,o,r,t),w.mode&1&&cm(r,d,t),t=w,l=d;var v=t.updateQueue;if(v===null){var y=new Set;y.add(l),t.updateQueue=y}else v.add(l);break e}else{if(!(t&1)){cm(r,d,t),pp();break e}l=Error(N(426))}}else if(xe&&o.mode&1){var T=pm(s);if(T!==null){!(T.flags&65536)&&(T.flags|=256),fm(T,s,o,r,t),Vc(Dn(l,o));break e}}r=l=Dn(l,o),ze!==4&&(ze=2),_r===null?_r=[r]:_r.push(r),r=s;do{switch(r.tag){case 3:r.flags|=65536,t&=-t,r.lanes|=t;var u=u_(r,l,t);rm(r,u);break e;case 1:o=l;var m=r.type,p=r.stateNode;if(!(r.flags&128)&&(typeof m.getDerivedStateFromError=="function"||p!==null&&typeof p.componentDidCatch=="function"&&(ri===null||!ri.has(p)))){r.flags|=65536,t&=-t,r.lanes|=t;var _=c_(r,o,t);rm(r,_);break e}}r=r.return}while(r!==null)}R_(a)}catch(k){t=k,Me===a&&a!==null&&(Me=a=a.return);continue}break}while(1)}function S_(){var e=Po.current;return Po.current=So,e===null?So:e}function pp(){(ze===0||ze===3||ze===2)&&(ze=4),Ue===null||!(ji&268435455)&&!(al&268435455)||Ha(Ue,Je)}function Io(e,t){var a=te;te|=2;var i=S_();(Ue!==e||Je!==t)&&(ka=null,Ri(e,t));do try{v1();break}catch(n){C_(e,n)}while(1);if(Hc(),te=a,Po.current=i,Me!==null)throw Error(N(261));return Ue=null,Je=0,ze}function v1(){for(;Me!==null;)P_(Me)}function b1(){for(;Me!==null&&!K0();)P_(Me)}function P_(e){var t=I_(e.alternate,e,bt);e.memoizedProps=e.pendingProps,t===null?R_(e):Me=t,op.current=null}function R_(e){var t=e;do{var a=t.alternate;if(e=t.return,t.flags&32768){if(a=f1(a,t),a!==null){a.flags&=32767,Me=a;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{ze=6,Me=null;return}}else if(a=p1(a,t,bt),a!==null){Me=a;return}if(t=t.sibling,t!==null){Me=t;return}Me=t=e}while(t!==null);ze===0&&(ze=5)}function bi(e,t,a){var i=le,n=zt.transition;try{zt.transition=null,le=1,w1(e,t,a,i)}finally{zt.transition=n,le=i}return null}function w1(e,t,a,i){do yn();while(Ya!==null);if(te&6)throw Error(N(327));a=e.finishedWork;var n=e.finishedLanes;if(a===null)return null;if(e.finishedWork=null,e.finishedLanes=0,a===e.current)throw Error(N(177));e.callbackNode=null,e.callbackPriority=0;var r=a.lanes|a.childLanes;if(tw(e,r),e===Ue&&(Me=Ue=null,Je=0),!(a.subtreeFlags&2064)&&!(a.flags&2064)||Rs||(Rs=!0,E_(fo,function(){return yn(),null})),r=(a.flags&15990)!==0,a.subtreeFlags&15990||r){r=zt.transition,zt.transition=null;var s=le;le=1;var o=te;te|=4,op.current=null,h1(e,a),x_(a,e),Ww(Tu),ho=!!ku,Tu=ku=null,e.current=a,g1(a),V0(),te=o,le=s,zt.transition=r}else e.current=a;if(Rs&&(Rs=!1,Ya=e,Ao=n),r=e.pendingLanes,r===0&&(ri=null),X0(a.stateNode),gt(e,Ne()),t!==null)for(i=e.onRecoverableError,a=0;a<t.length;a++)n=t[a],i(n.value,{componentStack:n.stack,digest:n.digest});if(Ro)throw Ro=!1,e=$u,$u=null,e;return Ao&1&&e.tag!==0&&yn(),r=e.pendingLanes,r&1?e===Uu?vr++:(vr=0,Uu=e):vr=0,fi(),null}function yn(){if(Ya!==null){var e=uy(Ao),t=zt.transition,a=le;try{if(zt.transition=null,le=16>e?16:e,Ya===null)var i=!1;else{if(e=Ya,Ya=null,Ao=0,te&6)throw Error(N(331));var n=te;for(te|=4,W=e.current;W!==null;){var r=W,s=r.child;if(W.flags&16){var o=r.deletions;if(o!==null){for(var l=0;l<o.length;l++){var d=o[l];for(W=d;W!==null;){var c=W;switch(c.tag){case 0:case 11:case 15:yr(8,c,r)}var f=c.child;if(f!==null)f.return=c,W=f;else for(;W!==null;){c=W;var g=c.sibling,w=c.return;if(w_(c),c===d){W=null;break}if(g!==null){g.return=w,W=g;break}W=w}}}var v=r.alternate;if(v!==null){var y=v.child;if(y!==null){v.child=null;do{var T=y.sibling;y.sibling=null,y=T}while(y!==null)}}W=r}}if(r.subtreeFlags&2064&&s!==null)s.return=r,W=s;else e:for(;W!==null;){if(r=W,r.flags&2048)switch(r.tag){case 0:case 11:case 15:yr(9,r,r.return)}var u=r.sibling;if(u!==null){u.return=r.return,W=u;break e}W=r.return}}var m=e.current;for(W=m;W!==null;){s=W;var p=s.child;if(s.subtreeFlags&2064&&p!==null)p.return=s,W=p;else e:for(s=m;W!==null;){if(o=W,o.flags&2048)try{switch(o.tag){case 0:case 11:case 15:tl(9,o)}}catch(k){Ie(o,o.return,k)}if(o===s){W=null;break e}var _=o.sibling;if(_!==null){_.return=o.return,W=_;break e}W=o.return}}if(te=n,fi(),pa&&typeof pa.onPostCommitFiberRoot=="function")try{pa.onPostCommitFiberRoot(Go,e)}catch{}i=!0}return i}finally{le=a,zt.transition=t}}return!1}function qm(e,t,a){t=Dn(a,t),t=u_(e,t,1),e=ni(e,t,1),t=rt(),e!==null&&(Jr(e,1,t),gt(e,t))}function Ie(e,t,a){if(e.tag===3)qm(e,e,a);else for(;t!==null;){if(t.tag===3){qm(t,e,a);break}else if(t.tag===1){var i=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof i.componentDidCatch=="function"&&(ri===null||!ri.has(i))){e=Dn(a,e),e=c_(t,e,1),t=ni(t,e,1),e=rt(),t!==null&&(Jr(t,1,e),gt(t,e));break}}t=t.return}}function k1(e,t,a){var i=e.pingCache;i!==null&&i.delete(t),t=rt(),e.pingedLanes|=e.suspendedLanes&a,Ue===e&&(Je&a)===a&&(ze===4||ze===3&&(Je&130023424)===Je&&500>Ne()-dp?Ri(e,0):lp|=a),gt(e,t)}function A_(e,t){t===0&&(e.mode&1?(t=bs,bs<<=1,!(bs&130023424)&&(bs=4194304)):t=1);var a=rt();e=Ra(e,t),e!==null&&(Jr(e,t,a),gt(e,a))}function T1(e){var t=e.memoizedState,a=0;t!==null&&(a=t.retryLane),A_(e,a)}function x1(e,t){var a=0;switch(e.tag){case 13:var i=e.stateNode,n=e.memoizedState;n!==null&&(a=n.retryLane);break;case 19:i=e.stateNode;break;default:throw Error(N(314))}i!==null&&i.delete(t),A_(e,a)}var I_;I_=function(e,t,a){if(e!==null)if(e.memoizedProps!==t.pendingProps||mt.current)ft=!0;else{if(!(e.lanes&a)&&!(t.flags&128))return ft=!1,c1(e,t,a);ft=!!(e.flags&131072)}else ft=!1,xe&&t.flags&1048576&&Fy(t,ko,t.index);switch(t.lanes=0,t.tag){case 2:var i=t.type;Ys(e,t),e=t.pendingProps;var n=wn(t,it.current);gn(t,a),n=ap(null,t,i,e,n,a);var r=ip();return t.flags|=1,typeof n=="object"&&n!==null&&typeof n.render=="function"&&n.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ht(i)?(r=!0,bo(t)):r=!1,t.memoizedState=n.state!==null&&n.state!==void 0?n.state:null,Yc(t),n.updater=el,t.stateNode=n,n._reactInternals=t,Iu(t,i,e,a),t=ju(null,t,i,!0,r,a)):(t.tag=0,xe&&r&&Uc(t),nt(null,t,n,a),t=t.child),t;case 16:i=t.elementType;e:{switch(Ys(e,t),e=t.pendingProps,n=i._init,i=n(i._payload),t.type=i,n=t.tag=q1(i),e=Jt(i,e),n){case 0:t=Nu(null,t,i,e,a);break e;case 1:t=gm(null,t,i,e,a);break e;case 11:t=mm(null,t,i,e,a);break e;case 14:t=hm(null,t,i,Jt(i.type,e),a);break e}throw Error(N(306,i,""))}return t;case 0:return i=t.type,n=t.pendingProps,n=t.elementType===i?n:Jt(i,n),Nu(e,t,i,n,a);case 1:return i=t.type,n=t.pendingProps,n=t.elementType===i?n:Jt(i,n),gm(e,t,i,n,a);case 3:e:{if(h_(t),e===null)throw Error(N(387));i=t.pendingProps,r=t.memoizedState,n=r.element,zy(e,t),Do(t,i,null,a);var s=t.memoizedState;if(i=s.element,r.isDehydrated)if(r={element:i,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=r,t.memoizedState=r,t.flags&256){n=Dn(Error(N(423)),t),t=ym(e,t,i,a,n);break e}else if(i!==n){n=Dn(Error(N(424)),t),t=ym(e,t,i,a,n);break e}else for(Tt=ii(t.stateNode.containerInfo.firstChild),xt=t,xe=!0,Qt=null,a=By(t,null,i,a),t.child=a;a;)a.flags=a.flags&-3|4096,a=a.sibling;else{if(kn(),i===n){t=Aa(e,t,a);break e}nt(e,t,i,a)}t=t.child}return t;case 5:return $y(t),e===null&&Pu(t),i=t.type,n=t.pendingProps,r=e!==null?e.memoizedProps:null,s=n.children,xu(i,n)?s=null:r!==null&&xu(i,r)&&(t.flags|=32),m_(e,t),nt(e,t,s,a),t.child;case 6:return e===null&&Pu(t),null;case 13:return g_(e,t,a);case 4:return Qc(t,t.stateNode.containerInfo),i=t.pendingProps,e===null?t.child=Tn(t,null,i,a):nt(e,t,i,a),t.child;case 11:return i=t.type,n=t.pendingProps,n=t.elementType===i?n:Jt(i,n),mm(e,t,i,n,a);case 7:return nt(e,t,t.pendingProps,a),t.child;case 8:return nt(e,t,t.pendingProps.children,a),t.child;case 12:return nt(e,t,t.pendingProps.children,a),t.child;case 10:e:{if(i=t.type._context,n=t.pendingProps,r=t.memoizedProps,s=n.value,ye(To,i._currentValue),i._currentValue=s,r!==null)if(aa(r.value,s)){if(r.children===n.children&&!mt.current){t=Aa(e,t,a);break e}}else for(r=t.child,r!==null&&(r.return=t);r!==null;){var o=r.dependencies;if(o!==null){s=r.child;for(var l=o.firstContext;l!==null;){if(l.context===i){if(r.tag===1){l=Ca(-1,a&-a),l.tag=2;var d=r.updateQueue;if(d!==null){d=d.shared;var c=d.pending;c===null?l.next=l:(l.next=c.next,c.next=l),d.pending=l}}r.lanes|=a,l=r.alternate,l!==null&&(l.lanes|=a),Ru(r.return,a,t),o.lanes|=a;break}l=l.next}}else if(r.tag===10)s=r.type===t.type?null:r.child;else if(r.tag===18){if(s=r.return,s===null)throw Error(N(341));s.lanes|=a,o=s.alternate,o!==null&&(o.lanes|=a),Ru(s,a,t),s=r.sibling}else s=r.child;if(s!==null)s.return=r;else for(s=r;s!==null;){if(s===t){s=null;break}if(r=s.sibling,r!==null){r.return=s.return,s=r;break}s=s.return}r=s}nt(e,t,n.children,a),t=t.child}return t;case 9:return n=t.type,i=t.pendingProps.children,gn(t,a),n=$t(n),i=i(n),t.flags|=1,nt(e,t,i,a),t.child;case 14:return i=t.type,n=Jt(i,t.pendingProps),n=Jt(i.type,n),hm(e,t,i,n,a);case 15:return p_(e,t,t.type,t.pendingProps,a);case 17:return i=t.type,n=t.pendingProps,n=t.elementType===i?n:Jt(i,n),Ys(e,t),t.tag=1,ht(i)?(e=!0,bo(t)):e=!1,gn(t,a),d_(t,i,n),Iu(t,i,n,a),ju(null,t,i,!0,e,a);case 19:return y_(e,t,a);case 22:return f_(e,t,a)}throw Error(N(156,t.tag))};function E_(e,t){return sy(e,t)}function D1(e,t,a,i){this.tag=e,this.key=a,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Wt(e,t,a,i){return new D1(e,t,a,i)}function fp(e){return e=e.prototype,!(!e||!e.isReactComponent)}function q1(e){if(typeof e=="function")return fp(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Ic)return 11;if(e===Ec)return 14}return 2}function oi(e,t){var a=e.alternate;return a===null?(a=Wt(e.tag,t,e.key,e.mode),a.elementType=e.elementType,a.type=e.type,a.stateNode=e.stateNode,a.alternate=e,e.alternate=a):(a.pendingProps=t,a.type=e.type,a.flags=0,a.subtreeFlags=0,a.deletions=null),a.flags=e.flags&14680064,a.childLanes=e.childLanes,a.lanes=e.lanes,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,t=e.dependencies,a.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},a.sibling=e.sibling,a.index=e.index,a.ref=e.ref,a}function eo(e,t,a,i,n,r){var s=2;if(i=e,typeof e=="function")fp(e)&&(s=1);else if(typeof e=="string")s=5;else e:switch(e){case Zi:return Ai(a.children,n,r,t);case Ac:s=8,n|=8;break;case au:return e=Wt(12,a,t,n|2),e.elementType=au,e.lanes=r,e;case iu:return e=Wt(13,a,t,n),e.elementType=iu,e.lanes=r,e;case nu:return e=Wt(19,a,t,n),e.elementType=nu,e.lanes=r,e;case $g:return il(a,n,r,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Wg:s=10;break e;case zg:s=9;break e;case Ic:s=11;break e;case Ec:s=14;break e;case Ka:s=16,i=null;break e}throw Error(N(130,e==null?e:typeof e,""))}return t=Wt(s,a,t,n),t.elementType=e,t.type=i,t.lanes=r,t}function Ai(e,t,a,i){return e=Wt(7,e,i,t),e.lanes=a,e}function il(e,t,a,i){return e=Wt(22,e,i,t),e.elementType=$g,e.lanes=a,e.stateNode={isHidden:!1},e}function Sd(e,t,a){return e=Wt(6,e,null,t),e.lanes=a,e}function Pd(e,t,a){return t=Wt(4,e.children!==null?e.children:[],e.key,t),t.lanes=a,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function C1(e,t,a,i,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=dd(0),this.expirationTimes=dd(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=dd(0),this.identifierPrefix=i,this.onRecoverableError=n,this.mutableSourceEagerHydrationData=null}function mp(e,t,a,i,n,r,s,o,l){return e=new C1(e,t,a,o,l),t===1?(t=1,r===!0&&(t|=8)):t=0,r=Wt(3,null,null,t),e.current=r,r.stateNode=e,r.memoizedState={element:i,isDehydrated:a,cache:null,transitions:null,pendingSuspenseBoundaries:null},Yc(r),e}function S1(e,t,a){var i=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Qi,key:i==null?null:""+i,children:e,containerInfo:t,implementation:a}}function N_(e){if(!e)return ui;e=e._reactInternals;e:{if(Bi(e)!==e||e.tag!==1)throw Error(N(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ht(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(N(171))}if(e.tag===1){var a=e.type;if(ht(a))return Ny(e,a,t)}return t}function j_(e,t,a,i,n,r,s,o,l){return e=mp(a,i,!0,e,n,r,s,o,l),e.context=N_(null),a=e.current,i=rt(),n=si(a),r=Ca(i,n),r.callback=t??null,ni(a,r,n),e.current.lanes=n,Jr(e,n,i),gt(e,i),e}function nl(e,t,a,i){var n=t.current,r=rt(),s=si(n);return a=N_(a),t.context===null?t.context=a:t.pendingContext=a,t=Ca(r,s),t.payload={element:e},i=i===void 0?null:i,i!==null&&(t.callback=i),e=ni(n,t,s),e!==null&&(ta(e,n,s,r),Hs(e,n,s)),s}function Eo(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function Cm(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var a=e.retryLane;e.retryLane=a!==0&&a<t?a:t}}function hp(e,t){Cm(e,t),(e=e.alternate)&&Cm(e,t)}function P1(){return null}var F_=typeof reportError=="function"?reportError:function(e){console.error(e)};function gp(e){this._internalRoot=e}rl.prototype.render=gp.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(N(409));nl(e,t,null,null)};rl.prototype.unmount=gp.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;Fi(function(){nl(null,e,null,null)}),t[Pa]=null}};function rl(e){this._internalRoot=e}rl.prototype.unstable_scheduleHydration=function(e){if(e){var t=fy();e={blockedOn:null,target:e,priority:t};for(var a=0;a<Ga.length&&t!==0&&t<Ga[a].priority;a++);Ga.splice(a,0,e),a===0&&hy(e)}};function yp(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function sl(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function Sm(){}function R1(e,t,a,i,n){if(n){if(typeof i=="function"){var r=i;i=function(){var d=Eo(s);r.call(d)}}var s=j_(t,i,e,0,null,!1,!1,"",Sm);return e._reactRootContainer=s,e[Pa]=s.current,Er(e.nodeType===8?e.parentNode:e),Fi(),s}for(;n=e.lastChild;)e.removeChild(n);if(typeof i=="function"){var o=i;i=function(){var d=Eo(l);o.call(d)}}var l=mp(e,0,!1,null,null,!1,!1,"",Sm);return e._reactRootContainer=l,e[Pa]=l.current,Er(e.nodeType===8?e.parentNode:e),Fi(function(){nl(t,l,a,i)}),l}function ol(e,t,a,i,n){var r=a._reactRootContainer;if(r){var s=r;if(typeof n=="function"){var o=n;n=function(){var l=Eo(s);o.call(l)}}nl(t,s,e,n)}else s=R1(a,t,e,n,i);return Eo(s)}cy=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var a=or(t.pendingLanes);a!==0&&(Fc(t,a|1),gt(t,Ne()),!(te&6)&&(qn=Ne()+500,fi()))}break;case 13:Fi(function(){var i=Ra(e,1);if(i!==null){var n=rt();ta(i,e,1,n)}}),hp(e,1)}};Oc=function(e){if(e.tag===13){var t=Ra(e,134217728);if(t!==null){var a=rt();ta(t,e,134217728,a)}hp(e,134217728)}};py=function(e){if(e.tag===13){var t=si(e),a=Ra(e,t);if(a!==null){var i=rt();ta(a,e,t,i)}hp(e,t)}};fy=function(){return le};my=function(e,t){var a=le;try{return le=e,t()}finally{le=a}};mu=function(e,t,a){switch(t){case"input":if(ou(e,a),t=a.name,a.type==="radio"&&t!=null){for(a=e;a.parentNode;)a=a.parentNode;for(a=a.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<a.length;t++){var i=a[t];if(i!==e&&i.form===e.form){var n=Yo(i);if(!n)throw Error(N(90));Kg(i),ou(i,n)}}}break;case"textarea":Gg(e,a);break;case"select":t=a.value,t!=null&&pn(e,!!a.multiple,t,!1)}};ey=up;ty=Fi;var A1={usingClientEntryPoint:!1,Events:[Qr,nn,Yo,Qg,Zg,up]},Jn={findFiberByHostInstance:qi,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},I1={bundleType:Jn.bundleType,version:Jn.version,rendererPackageName:Jn.rendererPackageName,rendererConfig:Jn.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Oa.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=ny(e),e===null?null:e.stateNode},findFiberByHostInstance:Jn.findFiberByHostInstance||P1,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var As=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!As.isDisabled&&As.supportsFiber)try{Go=As.inject(I1),pa=As}catch{}}St.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A1;St.createPortal=function(e,t){var a=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!yp(t))throw Error(N(200));return S1(e,t,null,a)};St.createRoot=function(e,t){if(!yp(e))throw Error(N(299));var a=!1,i="",n=F_;return t!=null&&(t.unstable_strictMode===!0&&(a=!0),t.identifierPrefix!==void 0&&(i=t.identifierPrefix),t.onRecoverableError!==void 0&&(n=t.onRecoverableError)),t=mp(e,1,!1,null,null,a,!1,i,n),e[Pa]=t.current,Er(e.nodeType===8?e.parentNode:e),new gp(t)};St.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(N(188)):(e=Object.keys(e).join(","),Error(N(268,e)));return e=ny(t),e=e===null?null:e.stateNode,e};St.flushSync=function(e){return Fi(e)};St.hydrate=function(e,t,a){if(!sl(t))throw Error(N(200));return ol(null,e,t,!0,a)};St.hydrateRoot=function(e,t,a){if(!yp(e))throw Error(N(405));var i=a!=null&&a.hydratedSources||null,n=!1,r="",s=F_;if(a!=null&&(a.unstable_strictMode===!0&&(n=!0),a.identifierPrefix!==void 0&&(r=a.identifierPrefix),a.onRecoverableError!==void 0&&(s=a.onRecoverableError)),t=j_(t,null,e,1,a??null,n,!1,r,s),e[Pa]=t.current,Er(e),i)for(e=0;e<i.length;e++)a=i[e],n=a._getVersion,n=n(a._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[a,n]:t.mutableSourceEagerHydrationData.push(a,n);return new rl(t)};St.render=function(e,t,a){if(!sl(t))throw Error(N(200));return ol(null,e,t,!1,a)};St.unmountComponentAtNode=function(e){if(!sl(e))throw Error(N(40));return e._reactRootContainer?(Fi(function(){ol(null,null,e,!1,function(){e._reactRootContainer=null,e[Pa]=null})}),!0):!1};St.unstable_batchedUpdates=up;St.unstable_renderSubtreeIntoContainer=function(e,t,a,i){if(!sl(a))throw Error(N(200));if(e==null||e._reactInternals===void 0)throw Error(N(38));return ol(e,t,a,!1,i)};St.version="18.3.1-next-f1338f8080-20240426";function O_(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(O_)}catch(e){console.error(e)}}O_(),Og.exports=St;var _p=Og.exports;const Is=Tc(_p);var Pm=_p;eu.createRoot=Pm.createRoot,eu.hydrateRoot=Pm.hydrateRoot;/**
 * @remix-run/router v1.23.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function zr(){return zr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},zr.apply(this,arguments)}var Qa;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(Qa||(Qa={}));const Rm="popstate";function E1(e){e===void 0&&(e={});function t(i,n){let{pathname:r,search:s,hash:o}=i.location;return Gu("",{pathname:r,search:s,hash:o},n.state&&n.state.usr||null,n.state&&n.state.key||"default")}function a(i,n){return typeof n=="string"?n:No(n)}return j1(t,a,null,e)}function Le(e,t){if(e===!1||e===null||typeof e>"u")throw new Error(t)}function M_(e,t){if(!e){typeof console<"u"&&console.warn(t);try{throw new Error(t)}catch{}}}function N1(){return Math.random().toString(36).substr(2,8)}function Am(e,t){return{usr:e.state,key:e.key,idx:t}}function Gu(e,t,a,i){return a===void 0&&(a=null),zr({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof t=="string"?jn(t):t,{state:a,key:t&&t.key||i||N1()})}function No(e){let{pathname:t="/",search:a="",hash:i=""}=e;return a&&a!=="?"&&(t+=a.charAt(0)==="?"?a:"?"+a),i&&i!=="#"&&(t+=i.charAt(0)==="#"?i:"#"+i),t}function jn(e){let t={};if(e){let a=e.indexOf("#");a>=0&&(t.hash=e.substr(a),e=e.substr(0,a));let i=e.indexOf("?");i>=0&&(t.search=e.substr(i),e=e.substr(0,i)),e&&(t.pathname=e)}return t}function j1(e,t,a,i){i===void 0&&(i={});let{window:n=document.defaultView,v5Compat:r=!1}=i,s=n.history,o=Qa.Pop,l=null,d=c();d==null&&(d=0,s.replaceState(zr({},s.state,{idx:d}),""));function c(){return(s.state||{idx:null}).idx}function f(){o=Qa.Pop;let T=c(),u=T==null?null:T-d;d=T,l&&l({action:o,location:y.location,delta:u})}function g(T,u){o=Qa.Push;let m=Gu(y.location,T,u);a&&a(m,T),d=c()+1;let p=Am(m,d),_=y.createHref(m);try{s.pushState(p,"",_)}catch(k){if(k instanceof DOMException&&k.name==="DataCloneError")throw k;n.location.assign(_)}r&&l&&l({action:o,location:y.location,delta:1})}function w(T,u){o=Qa.Replace;let m=Gu(y.location,T,u);a&&a(m,T),d=c();let p=Am(m,d),_=y.createHref(m);s.replaceState(p,"",_),r&&l&&l({action:o,location:y.location,delta:0})}function v(T){let u=n.location.origin!=="null"?n.location.origin:n.location.href,m=typeof T=="string"?T:No(T);return m=m.replace(/ $/,"%20"),Le(u,"No window.location.(origin|href) available to create URL for href: "+m),new URL(m,u)}let y={get action(){return o},get location(){return e(n,s)},listen(T){if(l)throw new Error("A history only accepts one active listener");return n.addEventListener(Rm,f),l=T,()=>{n.removeEventListener(Rm,f),l=null}},createHref(T){return t(n,T)},createURL:v,encodeLocation(T){let u=v(T);return{pathname:u.pathname,search:u.search,hash:u.hash}},push:g,replace:w,go(T){return s.go(T)}};return y}var Im;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(Im||(Im={}));function F1(e,t,a){return a===void 0&&(a="/"),O1(e,t,a,!1)}function O1(e,t,a,i){let n=typeof t=="string"?jn(t):t,r=vp(n.pathname||"/",a);if(r==null)return null;let s=L_(e);M1(s);let o=null;for(let l=0;o==null&&l<s.length;++l){let d=X1(r);o=G1(s[l],d,i)}return o}function L_(e,t,a,i){t===void 0&&(t=[]),a===void 0&&(a=[]),i===void 0&&(i="");let n=(r,s,o)=>{let l={relativePath:o===void 0?r.path||"":o,caseSensitive:r.caseSensitive===!0,childrenIndex:s,route:r};l.relativePath.startsWith("/")&&(Le(l.relativePath.startsWith(i),'Absolute route path "'+l.relativePath+'" nested under path '+('"'+i+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),l.relativePath=l.relativePath.slice(i.length));let d=li([i,l.relativePath]),c=a.concat(l);r.children&&r.children.length>0&&(Le(r.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+d+'".')),L_(r.children,t,c,d)),!(r.path==null&&!r.index)&&t.push({path:d,score:K1(d,r.index),routesMeta:c})};return e.forEach((r,s)=>{var o;if(r.path===""||!((o=r.path)!=null&&o.includes("?")))n(r,s);else for(let l of B_(r.path))n(r,s,l)}),t}function B_(e){let t=e.split("/");if(t.length===0)return[];let[a,...i]=t,n=a.endsWith("?"),r=a.replace(/\?$/,"");if(i.length===0)return n?[r,""]:[r];let s=B_(i.join("/")),o=[];return o.push(...s.map(l=>l===""?r:[r,l].join("/"))),n&&o.push(...s),o.map(l=>e.startsWith("/")&&l===""?"/":l)}function M1(e){e.sort((t,a)=>t.score!==a.score?a.score-t.score:V1(t.routesMeta.map(i=>i.childrenIndex),a.routesMeta.map(i=>i.childrenIndex)))}const L1=/^:[\w-]+$/,B1=3,W1=2,z1=1,$1=10,U1=-2,Em=e=>e==="*";function K1(e,t){let a=e.split("/"),i=a.length;return a.some(Em)&&(i+=U1),t&&(i+=W1),a.filter(n=>!Em(n)).reduce((n,r)=>n+(L1.test(r)?B1:r===""?z1:$1),i)}function V1(e,t){return e.length===t.length&&e.slice(0,-1).every((i,n)=>i===t[n])?e[e.length-1]-t[t.length-1]:0}function G1(e,t,a){a===void 0&&(a=!1);let{routesMeta:i}=e,n={},r="/",s=[];for(let o=0;o<i.length;++o){let l=i[o],d=o===i.length-1,c=r==="/"?t:t.slice(r.length)||"/",f=Nm({path:l.relativePath,caseSensitive:l.caseSensitive,end:d},c),g=l.route;if(!f&&d&&a&&!i[i.length-1].route.index&&(f=Nm({path:l.relativePath,caseSensitive:l.caseSensitive,end:!1},c)),!f)return null;Object.assign(n,f.params),s.push({params:n,pathname:li([r,f.pathname]),pathnameBase:Z1(li([r,f.pathnameBase])),route:g}),f.pathnameBase!=="/"&&(r=li([r,f.pathnameBase]))}return s}function Nm(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[a,i]=H1(e.path,e.caseSensitive,e.end),n=t.match(a);if(!n)return null;let r=n[0],s=r.replace(/(.)\/+$/,"$1"),o=n.slice(1);return{params:i.reduce((d,c,f)=>{let{paramName:g,isOptional:w}=c;if(g==="*"){let y=o[f]||"";s=r.slice(0,r.length-y.length).replace(/(.)\/+$/,"$1")}const v=o[f];return w&&!v?d[g]=void 0:d[g]=(v||"").replace(/%2F/g,"/"),d},{}),pathname:r,pathnameBase:s,pattern:e}}function H1(e,t,a){t===void 0&&(t=!1),a===void 0&&(a=!0),M_(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let i=[],n="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(s,o,l)=>(i.push({paramName:o,isOptional:l!=null}),l?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(i.push({paramName:"*"}),n+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):a?n+="\\/*$":e!==""&&e!=="/"&&(n+="(?:(?=\\/|$))"),[new RegExp(n,t?void 0:"i"),i]}function X1(e){try{return e.split("/").map(t=>decodeURIComponent(t).replace(/\//g,"%2F")).join("/")}catch(t){return M_(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+t+").")),e}}function vp(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let a=t.endsWith("/")?t.length-1:t.length,i=e.charAt(a);return i&&i!=="/"?null:e.slice(a)||"/"}function J1(e,t){t===void 0&&(t="/");let{pathname:a,search:i="",hash:n=""}=typeof e=="string"?jn(e):e;return{pathname:a?a.startsWith("/")?a:Y1(a,t):t,search:ek(i),hash:tk(n)}}function Y1(e,t){let a=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(n=>{n===".."?a.length>1&&a.pop():n!=="."&&a.push(n)}),a.length>1?a.join("/"):"/"}function Rd(e,t,a,i){return"Cannot include a '"+e+"' character in a manually specified "+("`to."+t+"` field ["+JSON.stringify(i)+"].  Please separate it out to the ")+("`to."+a+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function Q1(e){return e.filter((t,a)=>a===0||t.route.path&&t.route.path.length>0)}function W_(e,t){let a=Q1(e);return t?a.map((i,n)=>n===a.length-1?i.pathname:i.pathnameBase):a.map(i=>i.pathnameBase)}function z_(e,t,a,i){i===void 0&&(i=!1);let n;typeof e=="string"?n=jn(e):(n=zr({},e),Le(!n.pathname||!n.pathname.includes("?"),Rd("?","pathname","search",n)),Le(!n.pathname||!n.pathname.includes("#"),Rd("#","pathname","hash",n)),Le(!n.search||!n.search.includes("#"),Rd("#","search","hash",n)));let r=e===""||n.pathname==="",s=r?"/":n.pathname,o;if(s==null)o=a;else{let f=t.length-1;if(!i&&s.startsWith("..")){let g=s.split("/");for(;g[0]==="..";)g.shift(),f-=1;n.pathname=g.join("/")}o=f>=0?t[f]:"/"}let l=J1(n,o),d=s&&s!=="/"&&s.endsWith("/"),c=(r||s===".")&&a.endsWith("/");return!l.pathname.endsWith("/")&&(d||c)&&(l.pathname+="/"),l}const li=e=>e.join("/").replace(/\/\/+/g,"/"),Z1=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),ek=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,tk=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;function ak(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const $_=["post","put","patch","delete"];new Set($_);const ik=["get",...$_];new Set(ik);/**
 * React Router v6.30.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function $r(){return $r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},$r.apply(this,arguments)}const bp=b.createContext(null),nk=b.createContext(null),Wi=b.createContext(null),ll=b.createContext(null),mi=b.createContext({outlet:null,matches:[],isDataRoute:!1}),U_=b.createContext(null);function rk(e,t){let{relative:a}=t===void 0?{}:t;es()||Le(!1);let{basename:i,navigator:n}=b.useContext(Wi),{hash:r,pathname:s,search:o}=V_(e,{relative:a}),l=s;return i!=="/"&&(l=s==="/"?i:li([i,s])),n.createHref({pathname:l,search:o,hash:r})}function es(){return b.useContext(ll)!=null}function dl(){return es()||Le(!1),b.useContext(ll).location}function K_(e){b.useContext(Wi).static||b.useLayoutEffect(e)}function sk(){let{isDataRoute:e}=b.useContext(mi);return e?bk():ok()}function ok(){es()||Le(!1);let e=b.useContext(bp),{basename:t,future:a,navigator:i}=b.useContext(Wi),{matches:n}=b.useContext(mi),{pathname:r}=dl(),s=JSON.stringify(W_(n,a.v7_relativeSplatPath)),o=b.useRef(!1);return K_(()=>{o.current=!0}),b.useCallback(function(d,c){if(c===void 0&&(c={}),!o.current)return;if(typeof d=="number"){i.go(d);return}let f=z_(d,JSON.parse(s),r,c.relative==="path");e==null&&t!=="/"&&(f.pathname=f.pathname==="/"?t:li([t,f.pathname])),(c.replace?i.replace:i.push)(f,c.state,c)},[t,i,s,r,e])}function lk(){let{matches:e}=b.useContext(mi),t=e[e.length-1];return t?t.params:{}}function V_(e,t){let{relative:a}=t===void 0?{}:t,{future:i}=b.useContext(Wi),{matches:n}=b.useContext(mi),{pathname:r}=dl(),s=JSON.stringify(W_(n,i.v7_relativeSplatPath));return b.useMemo(()=>z_(e,JSON.parse(s),r,a==="path"),[e,s,r,a])}function dk(e,t){return uk(e,t)}function uk(e,t,a,i){es()||Le(!1);let{navigator:n}=b.useContext(Wi),{matches:r}=b.useContext(mi),s=r[r.length-1],o=s?s.params:{};s&&s.pathname;let l=s?s.pathnameBase:"/";s&&s.route;let d=dl(),c;if(t){var f;let T=typeof t=="string"?jn(t):t;l==="/"||(f=T.pathname)!=null&&f.startsWith(l)||Le(!1),c=T}else c=d;let g=c.pathname||"/",w=g;if(l!=="/"){let T=l.replace(/^\//,"").split("/");w="/"+g.replace(/^\//,"").split("/").slice(T.length).join("/")}let v=F1(e,{pathname:w}),y=hk(v&&v.map(T=>Object.assign({},T,{params:Object.assign({},o,T.params),pathname:li([l,n.encodeLocation?n.encodeLocation(T.pathname).pathname:T.pathname]),pathnameBase:T.pathnameBase==="/"?l:li([l,n.encodeLocation?n.encodeLocation(T.pathnameBase).pathname:T.pathnameBase])})),r,a,i);return t&&y?b.createElement(ll.Provider,{value:{location:$r({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:Qa.Pop}},y):y}function ck(){let e=vk(),t=ak(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),a=e instanceof Error?e.stack:null,n={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"},r=null;return b.createElement(b.Fragment,null,b.createElement("h2",null,"Unexpected Application Error!"),b.createElement("h3",{style:{fontStyle:"italic"}},t),a?b.createElement("pre",{style:n},a):null,r)}const pk=b.createElement(ck,null);class fk extends b.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,a){return a.location!==t.location||a.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:a.error,location:a.location,revalidation:t.revalidation||a.revalidation}}componentDidCatch(t,a){console.error("React Router caught the following error during render",t,a)}render(){return this.state.error!==void 0?b.createElement(mi.Provider,{value:this.props.routeContext},b.createElement(U_.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function mk(e){let{routeContext:t,match:a,children:i}=e,n=b.useContext(bp);return n&&n.static&&n.staticContext&&(a.route.errorElement||a.route.ErrorBoundary)&&(n.staticContext._deepestRenderedBoundaryId=a.route.id),b.createElement(mi.Provider,{value:t},i)}function hk(e,t,a,i){var n;if(t===void 0&&(t=[]),a===void 0&&(a=null),i===void 0&&(i=null),e==null){var r;if(!a)return null;if(a.errors)e=a.matches;else if((r=i)!=null&&r.v7_partialHydration&&t.length===0&&!a.initialized&&a.matches.length>0)e=a.matches;else return null}let s=e,o=(n=a)==null?void 0:n.errors;if(o!=null){let c=s.findIndex(f=>f.route.id&&(o==null?void 0:o[f.route.id])!==void 0);c>=0||Le(!1),s=s.slice(0,Math.min(s.length,c+1))}let l=!1,d=-1;if(a&&i&&i.v7_partialHydration)for(let c=0;c<s.length;c++){let f=s[c];if((f.route.HydrateFallback||f.route.hydrateFallbackElement)&&(d=c),f.route.id){let{loaderData:g,errors:w}=a,v=f.route.loader&&g[f.route.id]===void 0&&(!w||w[f.route.id]===void 0);if(f.route.lazy||v){l=!0,d>=0?s=s.slice(0,d+1):s=[s[0]];break}}}return s.reduceRight((c,f,g)=>{let w,v=!1,y=null,T=null;a&&(w=o&&f.route.id?o[f.route.id]:void 0,y=f.route.errorElement||pk,l&&(d<0&&g===0?(wk("route-fallback",!1),v=!0,T=null):d===g&&(v=!0,T=f.route.hydrateFallbackElement||null)));let u=t.concat(s.slice(0,g+1)),m=()=>{let p;return w?p=y:v?p=T:f.route.Component?p=b.createElement(f.route.Component,null):f.route.element?p=f.route.element:p=c,b.createElement(mk,{match:f,routeContext:{outlet:c,matches:u,isDataRoute:a!=null},children:p})};return a&&(f.route.ErrorBoundary||f.route.errorElement||g===0)?b.createElement(fk,{location:a.location,revalidation:a.revalidation,component:y,error:w,children:m(),routeContext:{outlet:null,matches:u,isDataRoute:!0}}):m()},null)}var G_=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(G_||{}),jo=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(jo||{});function gk(e){let t=b.useContext(bp);return t||Le(!1),t}function yk(e){let t=b.useContext(nk);return t||Le(!1),t}function _k(e){let t=b.useContext(mi);return t||Le(!1),t}function H_(e){let t=_k(),a=t.matches[t.matches.length-1];return a.route.id||Le(!1),a.route.id}function vk(){var e;let t=b.useContext(U_),a=yk(jo.UseRouteError),i=H_(jo.UseRouteError);return t!==void 0?t:(e=a.errors)==null?void 0:e[i]}function bk(){let{router:e}=gk(G_.UseNavigateStable),t=H_(jo.UseNavigateStable),a=b.useRef(!1);return K_(()=>{a.current=!0}),b.useCallback(function(n,r){r===void 0&&(r={}),a.current&&(typeof n=="number"?e.navigate(n):e.navigate(n,$r({fromRouteId:t},r)))},[e,t])}const jm={};function wk(e,t,a){!t&&!jm[e]&&(jm[e]=!0)}function kk(e,t){e==null||e.v7_startTransition,(e==null?void 0:e.v7_relativeSplatPath)===void 0&&(!t||t.v7_relativeSplatPath),t&&(t.v7_fetcherPersist,t.v7_normalizeFormMethod,t.v7_partialHydration,t.v7_skipActionErrorRevalidation)}function Hu(e){Le(!1)}function Tk(e){let{basename:t="/",children:a=null,location:i,navigationType:n=Qa.Pop,navigator:r,static:s=!1,future:o}=e;es()&&Le(!1);let l=t.replace(/^\/*/,"/"),d=b.useMemo(()=>({basename:l,navigator:r,static:s,future:$r({v7_relativeSplatPath:!1},o)}),[l,o,r,s]);typeof i=="string"&&(i=jn(i));let{pathname:c="/",search:f="",hash:g="",state:w=null,key:v="default"}=i,y=b.useMemo(()=>{let T=vp(c,l);return T==null?null:{location:{pathname:T,search:f,hash:g,state:w,key:v},navigationType:n}},[l,c,f,g,w,v,n]);return y==null?null:b.createElement(Wi.Provider,{value:d},b.createElement(ll.Provider,{children:a,value:y}))}function xk(e){let{children:t,location:a}=e;return dk(Xu(t),a)}new Promise(()=>{});function Xu(e,t){t===void 0&&(t=[]);let a=[];return b.Children.forEach(e,(i,n)=>{if(!b.isValidElement(i))return;let r=[...t,n];if(i.type===b.Fragment){a.push.apply(a,Xu(i.props.children,r));return}i.type!==Hu&&Le(!1),!i.props.index||!i.props.children||Le(!1);let s={id:i.props.id||r.join("-"),caseSensitive:i.props.caseSensitive,element:i.props.element,Component:i.props.Component,index:i.props.index,path:i.props.path,loader:i.props.loader,action:i.props.action,errorElement:i.props.errorElement,ErrorBoundary:i.props.ErrorBoundary,hasErrorBoundary:i.props.ErrorBoundary!=null||i.props.errorElement!=null,shouldRevalidate:i.props.shouldRevalidate,handle:i.props.handle,lazy:i.props.lazy};i.props.children&&(s.children=Xu(i.props.children,r)),a.push(s)}),a}/**
 * React Router DOM v6.30.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Ju(){return Ju=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},Ju.apply(this,arguments)}function Dk(e,t){if(e==null)return{};var a={},i=Object.keys(e),n,r;for(r=0;r<i.length;r++)n=i[r],!(t.indexOf(n)>=0)&&(a[n]=e[n]);return a}function qk(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function Ck(e,t){return e.button===0&&(!t||t==="_self")&&!qk(e)}const Sk=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","viewTransition"],Pk="6";try{window.__reactRouterVersion=Pk}catch{}const Rk="startTransition",Fm=lo[Rk];function Ak(e){let{basename:t,children:a,future:i,window:n}=e,r=b.useRef();r.current==null&&(r.current=E1({window:n,v5Compat:!0}));let s=r.current,[o,l]=b.useState({action:s.action,location:s.location}),{v7_startTransition:d}=i||{},c=b.useCallback(f=>{d&&Fm?Fm(()=>l(f)):l(f)},[l,d]);return b.useLayoutEffect(()=>s.listen(c),[s,c]),b.useEffect(()=>kk(i),[i]),b.createElement(Tk,{basename:t,children:a,location:o.location,navigationType:o.action,navigator:s,future:i})}const Ik=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",Ek=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Oi=b.forwardRef(function(t,a){let{onClick:i,relative:n,reloadDocument:r,replace:s,state:o,target:l,to:d,preventScrollReset:c,viewTransition:f}=t,g=Dk(t,Sk),{basename:w}=b.useContext(Wi),v,y=!1;if(typeof d=="string"&&Ek.test(d)&&(v=d,Ik))try{let p=new URL(window.location.href),_=d.startsWith("//")?new URL(p.protocol+d):new URL(d),k=vp(_.pathname,w);_.origin===p.origin&&k!=null?d=k+_.search+_.hash:y=!0}catch{}let T=rk(d,{relative:n}),u=Nk(d,{replace:s,state:o,target:l,preventScrollReset:c,relative:n,viewTransition:f});function m(p){i&&i(p),p.defaultPrevented||u(p)}return b.createElement("a",Ju({},g,{href:v||T,onClick:y||r?i:m,ref:a,target:l}))});var Om;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Om||(Om={}));var Mm;(function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(Mm||(Mm={}));function Nk(e,t){let{target:a,replace:i,state:n,preventScrollReset:r,relative:s,viewTransition:o}=t===void 0?{}:t,l=sk(),d=dl(),c=V_(e,{relative:s});return b.useCallback(f=>{if(Ck(f,a)){f.preventDefault();let g=i!==void 0?i:No(d)===No(c);l(e,{replace:g,state:n,preventScrollReset:r,relative:s,viewTransition:o})}},[d,l,c,i,n,a,e,r,s,o])}const jk="/aiida-registry/assets/logo-white-text-16948862.svg",Fk="/aiida-registry/assets/MARVEL-32e738c9.png",Ok="/aiida-registry/assets/MaX-099f261c.png";const Mk={"aiida-QECpWorkChain":{code_home:"https://github.com/rikigigi/aiida-QECpWorkChain",development_status:"beta",entry_point_prefix:"qecpworkchain",pip_url:"git+https://github.com/rikigigi/aiida-QECpWorkChain",name:"aiida-QECpWorkChain",package_name:"aiida_QECpWorkChain",hosted_on:"github.com",metadata:{author:"Riccardo Bertossa",author_email:"rbertoss@sissa.it",version:"0.2.0a0",description:"Car-Parrinello Work Chain with Quantum Espresso. This workchain does a full CP simulation, from the choice of the electronic mass and the timestep, to the choice of the best parallelization options, and then it does the NPT equilibration and a final NVE simulation at the prescribed P and T. Automates as much as possible.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: GNU General Public License v3 (GPLv3)","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.workflows":{"qecpworkchain.cp":{description:["No description available"],spec:{inputs:[{name:"cp_code",required:!0,valid_types:"Code",info:""},{name:"cp_resources_cg_list",required:!0,valid_types:"List",info:"Same as cp_resources_cp_list but when doing a CG. The CG uses a different amount of resource and can use no band or task group parallelization."},{name:"cp_resources_cp_list",required:!0,valid_types:"List",info:`List of dictionary like the following:
{
 'resources' : {
   'num_machines' : 2,
   'num_mpiprocs_per_machine' : 48,
 },
 'wallclock' : 3600,
 'queue' : 'queue_name',
 'account': 'account_name',
}
c,porturrently only the first element of the list is used.
'wallclock' is the maximum time that can be requested to the scheduler. This code can decide to ask for less.
`},{name:"ecutwfc",required:!0,valid_types:"Float",info:"wavefunction cutoff (Ry), like in the QE input"},{name:"pseudo_family",required:!0,valid_types:"Str",info:"pseudopotential family to use, as in usual aiida operations"},{name:"pw_code",required:!0,valid_types:"Code",info:"input pw code (used to calculate force ratio)"},{name:"pw_resources_list",required:!0,valid_types:"List",info:"Same as cp_resources_cp_list but for pw.x code."},{name:"structure",required:!0,valid_types:"StructureData, TrajectoryData",info:"Input structure. If a trajectory is given, the workchain will use its last step to start the CG. If velocities are present, they will be used to initialize the simulation. Note that if you use a trajectory, usually kind information (like mass) are not included, so default values will be used. If you want to include kind information or override those provided with the input structure, use the input structure_kinds"},{name:"thermobarostat_points",required:!0,valid_types:"List",info:'List of dicts, each with the format [ { "temperature_K": 1000, "pressure_KBar": 10 , "equilibration_time_ps": 5.0, "thermostat_time_ps": 5.0} ]. The simulation will loop over this list of dictionaries, in the same order, equilibrating for the specified time at the given P,T point. Every point is repeated if the average T and P are not within the specified ranges'},{name:"additional_parameters_cp",required:!1,valid_types:"Dict",info:"parameters that will be included in the settings input of the QE CP plugin. These settings will be added on top of the default one. Same format as plugin input"},{name:"adjust_ionic_mass",required:!1,valid_types:"Bool",info:"Multiply the mass of the ions by the corresponding force ration between the cp forces and pw forces -- that is less than 1. Note that averages of static properties do not depend on the ionic masses."},{name:"benchmark_emass_dt_walltime_s",required:!1,valid_types:"Float",info:"same as benchmark_parallel_walltime_s but for dermining the best electronic mass and timestep."},{name:"benchmark_parallel_walltime_s",required:!1,valid_types:"Float",info:"time requested to the scheduler during the test for finding the best parallelization parameters."},{name:"cmdline_cp",required:!1,valid_types:"List, NoneType",info:"additional command line parameters of the cp verlet caclulations only (for example parallelization options)"},{name:"default_nose_frequency",required:!1,valid_types:"Float",info:"default nose frequency when a frequency cannot be estimated from the vibrational spectrum"},{name:"dt",required:!1,valid_types:"Float, NoneType",info:"timestep in atomic units, if not automatically chosen."},{name:"dt_start_stop_step",required:!1,valid_types:"List",info:"list of timesteps to try. Timesteps are changed to better integrate the equation of motion. When a new electronic mass is selected by this workchain timesteps are automatically adjusted."},{name:"emass",required:!1,valid_types:"Float, NoneType",info:"electronic mass, atomic mass units, if not automatically chosen"},{name:"emass_list",required:!1,valid_types:"List",info:"list of electronic masses to try. The emass is selected in order to satisfy the requested CP/DFT force ratio."},{name:"initial_atomic_velocities_A_ps",required:!1,valid_types:"ArrayData, NoneType",info:"optional input initial velocities in angstrom over picoseconds"},{name:"max_slope_const",required:!1,valid_types:"Float",info:"max slope in K/ps of the constant of motion linear fit."},{name:"max_slope_ekinc",required:!1,valid_types:"Float",info:"max slope in K/ps of the ekinc linear fit. If not satisfied try to change emass"},{name:"max_slope_min_emass",required:!1,valid_types:"Float",info:"minimum possible value of electronic mass that can be set by the max_slope correction routine. Will not go lower than that."},{name:"max_slope_min_ps",required:!1,valid_types:"Float",info:"minimum required lenght in ps of the last trajectory to do the linear fit on ekinc and const of motion"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"min_traj_steps_vdos",required:!1,valid_types:"Int",info:"minimum number of steps to consider the calculated vibrational spectrum maximum valid, to set the thermostat frequency"},{name:"minimum_nose_frequency",required:!1,valid_types:"Float",info:"minimum nose frequency: if the frequency estimated from the vibrational spectrum is lower than this value, this value is used"},{name:"nstep_initial_cg",required:!1,valid_types:"Int",info:"At the beginning of the simulation the CP algorithm is not used. This is the number of steps to do using Born-Oppenheimer molecular dynamics algorithm with a conjugate gradient minimization of the electronic ground state."},{name:"nstep_parallel_test",required:!1,valid_types:"Int",info:"the benchmark simulations will be that long, if performed"},{name:"number_of_pw_per_trajectory",required:!1,valid_types:"Int",info:"Number of pw submitted for every trajectory during calculation of force ratio."},{name:"nve_required_picoseconds",required:!1,valid_types:"Float",info:"The equilibrated NVE simulation will last at least this number of picoseconds. How much picoseconds do you want?"},{name:"pressure_tolerance",required:!1,valid_types:"Float",info:"Pressure tolerance in kBar used to say if the npt is equilibrated. If not setted, use the standard deviation of the P time series"},{name:"skip_emass_dt_test",required:!1,valid_types:"Bool",info:""},{name:"skip_parallel_test",required:!1,valid_types:"Bool",info:"do not run run benchmarks to discover a good internal Quantum Espresso parallelization scheme for the current system"},{name:"skip_thermobarostat",required:!1,valid_types:"Bool",info:""},{name:"structure_kinds",required:!1,valid_types:"List, NoneType",info:'These kinds will be used to override or set the masses of the various atomic types. Note that the workflow, if skip_emass_dt_test is True, will calculate the ratio between cp forces and pw forces and adjust the provided masses automatically according to this ratio. So if you provide this input, make sure to set skip_emass_dt_test to True and set also the inputs emass and dt, or "bad things can happen"'},{name:"target_force_ratio",required:!1,valid_types:"Float",info:"The forces calculated by the Car-Parrinello method are affected by two types of error: one is due to the oscillations of the electrons around the DFT energy minimum, and the second is due to the finite mass of the electronic fluid that produces a _sistematic_ error in the forces, as if the electrons add mass to the ionic core. This second kind of error is can be controlled by this parameter, that tries to adjust the electronic mass to obtain the desidered ratio between CP forces and true DFT forces. Then you may want to modify the ionic mass to correct the leading factor of this error."},{name:"temperature_tolerance",required:!1,valid_types:"Float",info:"Temperature tolerance in K used to say if the npt is equilibrated. If not setted, use the standard deviation of the T time series"},{name:"tempw_initial_random",required:!1,valid_types:"Float, NoneType",info:"If provided, sets the initial temperature when randomly initializing the starting velocities."}],outputs:[{name:"dt",required:!0,valid_types:"Float",info:"The best integration timestep found"},{name:"emass",required:!0,valid_types:"Float",info:"The best electronic mass found"},{name:"full_traj",required:!0,valid_types:"TrajectoryData",info:"The full merged trajectory of all the simulations"},{name:"nve_prod_traj",required:!0,valid_types:"TrajectoryData",info:"The trajectory of the last NVE simulation"},{name:"cmdline_cp",required:!1,valid_types:"List",info:"The best command line parameters for the cp code"},{name:"kinds",required:!1,valid_types:"List",info:"The kinds for the structure with the modified ionic masses"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The initial cg steps failed. I cannot start to work."},{status:402,message:"Nose-Hoover thermostat failed."},{status:403,message:"Final cg after Nose-Hoover failed."},{status:404,message:"Error in the NVE simulation"},{status:405,message:"The simulations are calculating very expensive random numbers. There is something wrong (cutoff? metal? boo?)"},{status:406,message:"Wrong input parameters"},{status:407,message:"Parallel test was not succesful, maybe there is something more wrong."},{status:408,message:"Multiple errors in the simulation that cannot fix."},{status:409,message:"This is a bug in the workchain."},{status:410,message:"The initial simulation failed. I cannot start to work. Probably the configuration is not suitable for a molecular dynamics run or the trial integration timestep is too big"}]},class:"aiida_QECpWorkChain.workflow:CpWorkChain"}}},commits_count:6,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/rikigigi/aiida-QECpWorkChain",is_installable:"True"},"aiida-abacus":{code_home:"https://github.com/MCresearch/aiida-abacus",entry_point_prefix:"abacus",name:"aiida-abacus",package_name:"aiida_abacus",hosted_on:"github.com",metadata:{description:"AiiDA plugin for ABACUS",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"aiida-abacus team"},aiida_version:">=2.5,<3",entry_points:{"aiida.data":{abacus:"aiida_abacus.data:DiffParameters"},"aiida.calculations":{abacus:"aiida_abacus.calculations:DiffCalculation"},"aiida.parsers":{abacus:"aiida_abacus.parsers:DiffParser"},"aiida.cmdline.data":{abacus:"aiida_abacus.cli:data_cli"}},commits_count:82,development_status:"alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"See source code repository."},"aiida-abinit":{code_home:"https://github.com/sponce24/aiida-abinit",entry_point_prefix:"abinit",pip_url:"aiida-abinit",plugin_info:"https://raw.github.com/sponce24/aiida-abinit/master/setup.json",name:"aiida-abinit",package_name:"aiida_abinit",hosted_on:"github.com",metadata:{release_date:"2023-10-04",description:"The AiiDA plugin for ABINIT.",author_email:"Samuel Ponce <samuel.pon@gmail.com>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"0.5.0"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{abinit:{description:["AiiDA calculation plugin wrapping the abinit executable."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"The k-point mesh or path"},{name:"parameters",required:!0,valid_types:"Dict",info:"The ABINIT input parameters."},{name:"pseudos",required:!0,valid_types:"Psp8Data, JthXmlData",info:"The pseudopotentials."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder used for restarts."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Various special settings."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Various output quantities."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Final electronic bands if present."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Final structure of the calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:"Trajectory of various output quantities over the calculation if present."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"Calculation did not produce all expected output files."},{status:101,message:"Calculation did not produce the expected `[prefix]o_GSR.nc` output file."},{status:102,message:"Calculation did not produce the expected `[prefix]o_HIST.nc` output file."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the `stdout` output file."},{status:301,message:"The `stdout` output file could not be read."},{status:302,message:"The `stdout` output file could not be parsed."},{status:303,message:"The `abipy` `EventsParser` reports that the runw as not completed."},{status:304,message:"The output file contains one or more error messages."},{status:305,message:"The output file contains one or more warning messages."},{status:312,message:"The output structure could not be parsed."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:500,message:"The SCF minimization cycle did not converge."},{status:501,message:"The ionic minimization cycle did not converge."}]},class:"aiida_abinit.calculations:AbinitCalculation"}},"aiida.parsers":{abinit:"aiida_abinit.parsers:AbinitParser"},"aiida.workflows":{"abinit.base":{description:["Base Abinit Workchain to perform a DFT calculation. Validates parameters and restart."],spec:{inputs:[{name:"abinit",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"An explicit k-points mesh or list. Either this or `kpoints_distance` must be provided."},{name:"kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"The minimum desired distance in 1/Å between k-points in reciprocal space. The explicit k-point mesh will be generated automatically by a calculation function based on the input structure."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Various output quantities."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Final electronic bands if present."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Final structure of the calculation if present."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:"Trajectory of various output quantities over the calculation if present."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"`pseudos` could not be used to get the necessary pseudos."},{status:202,message:"Neither the `kpoints` nor the `kpoints_distance` input was specified."},{status:203,message:"Neither the `options` nor `automatic_parallelization` input was specified."},{status:204,message:"The `metadata.options` did not specify both `resources.num_machines` and `max_wallclock_seconds`."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_abinit.workflows.base:AbinitBaseWorkChain"}}},commits_count:1,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-abinit",is_installable:"True"},"aiida-aenet":{code_home:"https://gitlab.com/lattice737/aiida-aenet",development_status:"planning",entry_point_prefix:"aenet",pip_url:"https://gitlab.com/lattice737/aiida-aenet",name:"aiida-aenet",package_name:"aiida_aenet",hosted_on:"gitlab.com",metadata:{author:"Nicholas Martinez",author_email:"nicholasmartinez@my.unt.edu",version:"0.1.0",description:"AiiDA plugin to construct machine-learning potentials using aenet",classifiers:["Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Development Status :: 0 - Alpha"]},aiida_version:"~=1.2",entry_points:{"aiida.data":{"aenet.algorithm":"aiida_aenet.data.algorithm:AenetAlgorithm","aenet.potential":"aiida_aenet.data.potentials:AenetPotential"},"aiida.calculations":{"aenet.cur":"aiida_aenet.calculations.cur:CurCalculation","aenet.generate":"aiida_aenet.calculations.generate:AenetGenerateCalculation","aenet.predict":"aiida_aenet.calculations.predict:AenetPredictCalculation","aenet.simulate":"aiida_aenet.calculations.simulate:AenetLammpsMdCalculation","aenet.train":"aiida_aenet.calculations.train:AenetTrainCalculation","aenet.transform":"aiida_aenet.calculations.transform:TransformCalculation"},"aiida.parsers":{"aenet.generate":"aiida_aenet.parsers.generate:AenetGenerateParser","aenet.predict":"aiida_aenet.parsers.predict:AenetPredictParser","aenet.simulate":"aiida_aenet.parsers.simulate:AenetLammpsMdParser","aenet.train":"aiida_aenet.parsers.train:AenetTrainParser"},"aiida.workflows":{"aenet.build_reference":"aiida_aenet.workflows.build_reference:BuildReferenceWorkChain","aenet.compare_simulations":"aiida_aenet.workflows.compare_simulations:CompareSimulationsWorkChain","aenet.make_potential":"aiida_aenet.workflows.make_potential:MakePotentialWorkChain","aenet.make_structures":"aiida_aenet.workflows.make_structures:MakeStructuresWorkChain"},"aenet.potentials":{"lammps.ann":"aiida_aenet.data.potentials.lammps:ANN"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:6},{colorclass:"brown",text:"Parsers",count:4},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:4},{colorclass:"orange",text:"Other (Aenet potentials)",count:1}],pip_install_cmd:"pip install https://gitlab.com/lattice737/aiida-aenet"},"aiida-aimall":{entry_point_prefix:"aimall",code_home:"https://github.com/kmlefran/aiida-aimall",pip_url:"aiida-aimall",documentation_url:"https://aiida-aimall.readthedocs.io/en/latest/",plugin_info:"https://raw.githubusercontent.com/kmlefran/aiida-aimall/main/pyproject.toml",version_file:"https://raw.githubusercontent.com/kmlefran/aiida-aimall/main/aiida_aimall/__init__.py",name:"aiida-aimall",package_name:"aiida_aimall",hosted_on:"github.com",metadata:{release_date:"2024-09-12",description:"A plugin to interface AIMAll with AiiDA",author_email:"Kevin Lefrancois-Gagnon <kgagnon@lakeheadu.ca>",classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11"],version:"1.0.1"},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{"aimall.aimqb":{description:["AiiDA calculation plugin wrapping the aimqb executable.","","    Attributes:","        parameters (AimqbParameters): command line parameters for the AimqbCalculation","        file (aiida.orm.SinglefileData): the wfx, wfn, or fchk file to be run","        code (aiida.orm.Code): code of the AIMQB executable","        attached_atom_int (aiida.orm.Int): optional integer label of the atom that is attached to the rest of the molecule","        group_atoms (aiida.orm.List): optional integer list of ids of atoms comprising the group for AimqbGroupParser","","    Example:","        ::","","            code = orm.load_code('aimall@localhost')",'            AimqbParameters = DataFactory("aimall.aimqb")','            aim_params = AimqbParameters(parameter_dict={"naat": 2, "nproc": 2, "atlaprhocps": True})','            file = SinglefileData("/absolute/path/to/file")',"            # Alternatively, if you have the file as a string, you can build the file with:","            # file=SinglefileData(io.BytesIO(file_string.encode()))",'            AimqbCalculation = CalculationFactory("aimall.aimqb")',"            builder  = AimqbCalculation.get_builder()","            builder.parameters = aim_params","            builder.file = file","            builder.code = code",'            builder.metadata.options.resources = {"num_machines": 1, "num_mpiprocs_per_machine": 2}',"            builder.submit()","","    Note:","        By default, the AimqbBaseParser is used, getting atomic, BCP, and (if applicable) LapRhoCps.","            You can opt to use the AimqbGroupParser, which also returns the integrated group properties","            of a group, as well as the atomic graph descriptor of the group. In doing so, you can also","            define the atoms included in the group, which, by convention, defaults to all atoms except atom 2.","            You can further specify which atom of the group is the one bonded to the substrate, which defaults to","            atom 1.  This is done by providing this to the builder:","","        ::","",'            builder.metadata.options.parser_name = "aimall.group"',"            builder.attached_atom_int = Int(1)","            builder.group_atoms = List([1,3,4,5,6])"],spec:{inputs:[{name:"file",required:!0,valid_types:"SinglefileData",info:"fchk, wfn, or wfx to run AimQB on"},{name:"parameters",required:!0,valid_types:"AimqbParameters",info:"Command line parameters for aimqb"},{name:"attached_atom_int",required:!1,valid_types:"Int",info:"id # of attached atom for graph descriptor. Defaults to atom 1"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"group_atoms",required:!1,valid_types:"List",info:"Integer ids of atoms in groups to include. e.g. [1,3,4]. Defaults to all atoms in molecule except atom 2"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The computed parameters of an AIMAll calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:210,message:"The retrieved folder did not contain the output file."}]},class:"aiida_aimall.calculations:AimqbCalculation"}},"aiida.data":{"aimall.aimqb":"aiida_aimall.data:AimqbParameters"},"aiida.parsers":{"aimall.base":"aiida_aimall.parsers:AimqbBaseParser","aimall.group":"aiida_aimall.parsers:AimqbGroupParser"},"aiida.workflows":{"aimall.aimreor":"aiida_aimall.workchains.param_parts:AIMAllReorWorkChain","aimall.gausstoaim":"aiida_aimall.workchains.qc_programs:GaussianToAIMWorkChain","aimall.qmtoaim":"aiida_aimall.workchains.qc_programs:QMToAIMWorkChain","aimall.smitogauss":"aiida_aimall.workchains.param_parts:SmilesToGaussianWorkChain","aimall.subparam":"aiida_aimall.workchains.subparam:SubstituentParameterWorkChain","aimall.wfxtoaim":"aiida_aimall.workchains.qc_programs:GenerateWFXToAIMWorkChain"}},commits_count:47,development_status:"alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:6}],pip_install_cmd:"pip install aiida-aimall",is_installable:"True"},"aiida-alloy":{code_home:"https://github.com/DanielMarchand/aiida-alloy",development_status:"beta",entry_point_prefix:"alloy",pip_url:"git+https://github.com/DanielMarchand/aiida-alloy",name:"aiida-alloy",package_name:"aiida_alloy",hosted_on:"github.com",metadata:{author:"The AiiDA developers group",author_email:"",version:"0.1.0a0",description:"Aiida Workflows for Elastic Constants using Quantum Espresso",classifiers:["Programming Language :: Python"]},aiida_version:">=1.0.0a0",entry_points:{"aiida.workflows":{elastic:"aiida_alloy.workflows.ElasticWorkChain:ElasticWorkChain"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-alloy<pre>Collecting git+https://github.com/DanielMarchand/aiida-alloy
  Cloning https://github.com/DanielMarchand/aiida-alloy to /tmp/pip-req-build-9povvf_v
  Running command git clone --filter=blob:none --quiet https://github.com/DanielMarchand/aiida-alloy /tmp/pip-req-build-9povvf_v
  Resolved https://github.com/DanielMarchand/aiida-alloy to commit dfae54b29291dfe94d4a5ca136738020f447bc1e
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py egg_info did not run successfully.
  │ exit code: 1
  ╰─> [6 lines of output]
      Traceback (most recent call last):
        File "<string>", line 2, in <module>
        File "<pip-setuptools-caller>", line 34, in <module>
        File "/tmp/pip-req-build-9povvf_v/setup.py", line 20, in <module>
          long_description=open('README.md').read(),
      FileNotFoundError: [Errno 2] No such file or directory: 'README.md'
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'elastic' does not start with prefix 'alloy.'"],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/DanielMarchand/aiida-alloy",is_installable:"False"},"aiida-amber":{code_home:"https://github.com/PSDI-UK/aiida-amber",entry_point_prefix:"amber",pip_url:"git+https://github.com/PSDI-UK/aiida-amber",name:"aiida-amber",package_name:"aiida_amber",hosted_on:"github.com",metadata:{description:"AiiDA plugin that wraps amber molecular dynamics executables",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"Jas Kalayan",author_email:"jas.kalayan@stfc.ac.uk"},aiida_version:">=2.4.0,<3",entry_points:{"aiida.data":{"amber.sander":"aiida_amber.data.sander:SanderParameters","amber.tleap":"aiida_amber.data.tleap:TleapParameters","amber.tleap_input":"aiida_amber.data.tleap_input:TleapInputData","amber.antechamber":"aiida_amber.data.antechamber:AntechamberParameters","amber.pdb4amber":"aiida_amber.data.pdb4amber:Pdb4amberParameters","amber.parmed":"aiida_amber.data.parmed:ParmedParameters","amber.parmed_input":"aiida_amber.data.parmed_input:ParmedInputData"},"aiida.calculations":{"amber.sander":{description:["AiiDA calculation plugin wrapping the sander executable.","","    AiiDA plugin wrapper for the amber 'sander' command."],spec:{inputs:[{name:"inpcrd",required:!0,valid_types:"SinglefileData",info:"input initial coordinates and (optionally) velocities and periodic box size."},{name:"mdin",required:!0,valid_types:"SinglefileData",info:"input control data for the min/md run."},{name:"parameters",required:!0,valid_types:"SanderParameters",info:"Command line parameters for sander"},{name:"prmtop",required:!0,valid_types:"SinglefileData",info:"input molecular topology, force field, periodic box type, atom and residue names."},{name:"cein",required:!1,valid_types:"SinglefileData, NoneType",info:"input redox state definitions."},{name:"cerestrt",required:!1,valid_types:"SinglefileData, NoneType",info:"redox state definitions, final redox states for restart (same format as cein)."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"cpin",required:!1,valid_types:"SinglefileData, NoneType",info:"input protonation state definitions."},{name:"cprestrt",required:!1,valid_types:"SinglefileData, NoneType",info:"protonation state definitions, final protonation states for restart (same format as cpin)."},{name:"evbin",required:!1,valid_types:"SinglefileData, NoneType",info:"input input for EVB potentials."},{name:"inpdip",required:!1,valid_types:"SinglefileData, NoneType",info:"input polarizable dipole file, when indmeth=3."},{name:"inptraj",required:!1,valid_types:"SinglefileData, NoneType",info:"input coordinate sets in trajectory format, when imin=5 or 6."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"mtmd",required:!1,valid_types:"SinglefileData, NoneType",info:"input (optional) containing list of files and parameters for targeted MD to multiple targets."},{name:"refc",required:!1,valid_types:"SinglefileData, NoneType",info:"input (optional) reference coords for position restraints; also used for targeted MD."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"mdinfo",required:!0,valid_types:"SinglefileData",info:"output latest mdout-format energy info."},{name:"mdout",required:!0,valid_types:"SinglefileData",info:"output user readable state info and diagnostics -o stdout will send output to stdout (to the terminal) instead of to a file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"ceout",required:!1,valid_types:"SinglefileData",info:"output redox state data saved over trajectory."},{name:"cpout",required:!1,valid_types:"SinglefileData",info:"output protonation state data saved over trajectory."},{name:"mdcrd",required:!1,valid_types:"SinglefileData",info:"output coordinate sets saved over trajectory."},{name:"mden",required:!1,valid_types:"SinglefileData",info:"output extensive energy data over trajectory (not synchronized with mdcrd or mdvel)."},{name:"mdfrc",required:!1,valid_types:"SinglefileData",info:"output force sets saved over trajectory."},{name:"mdvel",required:!1,valid_types:"SinglefileData",info:"output velocity sets saved over trajectory."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"restrt",required:!1,valid_types:"SinglefileData",info:"output final coordinates, velocity, and box dimensions if any - for restarting run."},{name:"rstdip",required:!1,valid_types:"SinglefileData",info:"output polarizable dipole file, when indmeth=3."},{name:"suffix",required:!1,valid_types:"str",info:"output this string will be added to all unspecified output files that are printed (for multisander runs, it will append this suffix to all output files)."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_amber.calculations.sander:SanderCalculation"},"amber.tleap":{description:["AiiDA calculation plugin wrapping the tleap executable.","","    AiiDA plugin wrapper for the amber 'tleap' command."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"TleapParameters",info:"Command line parameters for tleap"},{name:"tleapscript",required:!0,valid_types:"SinglefileData",info:"input file for tleap commands"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"dirs",required:!1,valid_types:"FolderData",info:"path to directory where custom leaprc are"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"tleap_dirs",required:!1,valid_types:"FolderData",info:"path to directory where inputs referenced in tleap input file are"},{name:"tleap_inpfiles",required:!1,valid_types:"SinglefileData",info:"inputs referenced in tleap input file"},{name:"tleap_outfiles",required:!1,valid_types:"List, NoneType",info:"List of tleap output file names."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_amber.calculations.tleap:TleapCalculation"},"amber.antechamber":{description:["AiiDA calculation plugin wrapping the antechamber executable.","","    AiiDA plugin wrapper for the amber 'antechamber' command."],spec:{inputs:[{name:"input_file",required:!0,valid_types:"SinglefileData",info:"input structure file for antechamber"},{name:"parameters",required:!0,valid_types:"AntechamberParameters",info:"Command line parameters for antechamber"},{name:"additional_file",required:!1,valid_types:"SinglefileData, NoneType",info:"additional file"},{name:"antechamber_outfiles",required:!1,valid_types:"List, NoneType",info:"List of antechamber output file names."},{name:"charge_file",required:!1,valid_types:"SinglefileData, NoneType",info:"charge file"},{name:"check_file",required:!1,valid_types:"SinglefileData, NoneType",info:"check file for gaussian"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"esp_file",required:!1,valid_types:"SinglefileData, NoneType",info:"gaussian esp file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"res_top_file",required:!1,valid_types:"SinglefileData, NoneType",info:"residue toplogy file"}],outputs:[{name:"output_file",required:!0,valid_types:"SinglefileData",info:"output file"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_amber.calculations.antechamber:AntechamberCalculation"},"amber.pdb4amber":{description:["AiiDA calculation plugin wrapping the pdb4amber executable.","","    AiiDA plugin wrapper for the amber 'pdb4amber' command."],spec:{inputs:[{name:"input_file",required:!0,valid_types:"SinglefileData",info:"input pdb file for pdb4amber"},{name:"parameters",required:!0,valid_types:"Pdb4amberParameters",info:"Command line parameters for pdb4amber"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"pdb4amber_outfiles",required:!1,valid_types:"List, NoneType",info:"List of pdb4amber output file names."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"output_file",required:!0,valid_types:"SinglefileData",info:"outputted pdb file"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_amber.calculations.pdb4amber:Pdb4amberCalculation"},"amber.parmed":{description:["AiiDA calculation plugin wrapping the parmed executable.","","    AiiDA plugin wrapper for the amber 'parmed' command."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"ParmedParameters",info:"Command line parameters for parmed"},{name:"parmed_script",required:!0,valid_types:"SinglefileData",info:"input file for parmed commands"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"inpcrd_files",required:!1,valid_types:"SinglefileData",info:"List of inpcrd files to load into ParmEd"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parmed_dirs",required:!1,valid_types:"FolderData",info:"path to directory where inputs referenced in parmed input file are"},{name:"parmed_inpfiles",required:!1,valid_types:"SinglefileData",info:"inputs referenced in parmed input script"},{name:"parmed_outfiles",required:!1,valid_types:"List, NoneType",info:"List of parmed output file names."},{name:"prmtop_files",required:!1,valid_types:"SinglefileData",info:"List of topology files to load into ParmEd"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_amber.calculations.parmed:ParmedCalculation"}},"aiida.parsers":{"amber.sander":"aiida_amber.parsers.sander:SanderParser","amber.tleap":"aiida_amber.parsers.tleap:TleapParser","amber.antechamber":"aiida_amber.parsers.antechamber:AntechamberParser","amber.pdb4amber":"aiida_amber.parsers.pdb4amber:Pdb4amberParser","amber.parmed":"aiida_amber.parsers.parmed:ParmedParser"}},commits_count:44,development_status:"alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:5},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:7}],pip_install_cmd:"pip install git+https://github.com/PSDI-UK/aiida-amber",is_installable:"True"},"aiida-ase":{code_home:"https://github.com/aiidateam/aiida-ase",documentation_url:"https://aiida-ase.readthedocs.io/",entry_point_prefix:"ase",pip_url:"aiida-ase",plugin_info:"https://raw.github.com/aiidateam/aiida-ase/master/setup.json",name:"aiida-ase",package_name:"aiida_ase",hosted_on:"github.com",metadata:{release_date:"2023-10-04",description:"The official AiiDA plugin for ASE.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"3.0.0"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"ase.ase":{description:["`CalcJob` implementation that can be used to wrap around the ASE calculators."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the namelists."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"The k-points to use for the calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional settings that control the plugin."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"array",required:!1,valid_types:"ArrayData",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:""},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"One of the expected output files was missing."},{status:301,message:"The log file from the DFT code was not written out."},{status:302,message:"Relaxation did not complete."},{status:303,message:"SCF Failed."},{status:305,message:"Cannot identify what went wrong."},{status:306,message:"gpaw could not find the PAW potentials."},{status:307,message:"Attribute Error found in the stderr file."},{status:308,message:"Fermi level is infinite."},{status:400,message:"The calculation ran out of walltime."}]},class:"aiida_ase.calculations.ase:AseCalculation"}},"aiida.parsers":{"ase.ase":"aiida_ase.parsers.ase:AseParser","ase.gpaw":"aiida_ase.parsers.gpaw:GpawParser"},"aiida.workflows":{"ase.gpaw.base":{description:["Workchain to run a GPAW calculation with automated error handling and restarts."],spec:{inputs:[{name:"gpaw",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"k-points to use for the calculation."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"array",required:!1,valid_types:"ArrayData",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:""},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_ase.workflows.base:GpawBaseWorkChain"}}},commits_count:1,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-ase",is_installable:"True"},"aiida-autocas":{entry_point_prefix:"autocas",code_home:"https://github.com/microsoft/aiida-autocas",version_file:"https://raw.githubusercontent.com/microsoft/aiida-autocas/main/aiida_autocas/__init__.py",pip_url:"git+https://github.com/microsoft/aiida-autocas",name:"aiida-autocas",package_name:"aiida_autocas",hosted_on:"github.com",metadata:{version:"0.1.0",description:"AiiDA AutoCAS Plugin",classifiers:[]},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{autocas:"aiida_autocas.calculations:AutoCASCalculation"},"aiida.parsers":{autocas:"aiida_autocas.parsers:AutoCASParser"}},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/microsoft/aiida-autocas"},"aiida-bader":{entry_point_prefix:"bader",pip_url:"aiida-bader",code_home:"https://github.com/superstar54/aiida-bader",documentation_url:"https://aiida-bader.readthedocs.io/en/latest/",name:"aiida-bader",package_name:"aiida_bader",hosted_on:"github.com",metadata:{release_date:"2025-04-08",description:"Collections of node-based workflow created using aiida-workgraph.",author_email:"Xing Wang <xingwang1991@gmail.com>",classifiers:["Development Status :: 1 - Planning","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"0.1.8"},aiida_version:"*",entry_points:{"aiida.calculations":{"bader.bader":"aiida_bader.calculations:BaderCalculation"},"aiida.parsers":{"bader.bader":"aiida_bader.parsers:BaderParser"},"aiida.workflows":{"bader.qe":"aiida_bader.workchains:QeBaderWorkChain"},"aiidalab_qe.properties":{bader:"aiida_bader.qeapp:bader"}},commits_count:28,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1},{colorclass:"orange",text:"Other (Aiidalab qe properties)",count:1}],pip_install_cmd:"pip install aiida-bader"},"aiida-bands-inspect":{code_home:"https://github.com/greschd/aiida-bands-inspect",documentation_url:"https://aiida-bands-inspect.readthedocs.io",entry_point_prefix:"bands_inspect",pip_url:"aiida-bands-inspect",name:"aiida-bands-inspect",package_name:"aiida_bands_inspect",hosted_on:"github.com",metadata:{release_date:"2020-03-26",description:"AiiDA Plugin for running bands_inspect",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-bands-inspect.readthedocs.io",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.4.0"},aiida_version:null,entry_points:{"aiida.calculations":{"bands_inspect.align":"aiida_bands_inspect.calculations.align:AlignCalculation","bands_inspect.difference":"aiida_bands_inspect.calculations.difference:DifferenceCalculation","bands_inspect.plot":"aiida_bands_inspect.calculations.plot:PlotCalculation"},"aiida.parsers":{"bands_inspect.bands":"aiida_bands_inspect.parsers.bands:BandsParser","bands_inspect.difference":"aiida_bands_inspect.parsers.difference:DifferenceParser","bands_inspect.align":"aiida_bands_inspect.parsers.align:AlignParser","bands_inspect.plot":"aiida_bands_inspect.parsers.plot:PlotParser"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E002'>E002</a>: Failed to import package aiida_bands_inspect<pre>Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/opt/conda/lib/python3.10/site-packages/aiida_bands_inspect/__init__.py", line 8, in <module>
    from . import calculations
  File "/opt/conda/lib/python3.10/site-packages/aiida_bands_inspect/calculations/__init__.py", line 9, in <module>
    from . import difference
  File "/opt/conda/lib/python3.10/site-packages/aiida_bands_inspect/calculations/difference.py", line 11, in <module>
    from aiida.orm import JobCalculation, DataFactory
ImportError: cannot import name 'JobCalculation' from 'aiida.orm' (/opt/conda/lib/python3.10/site-packages/aiida/orm/__init__.py)
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:4}],pip_install_cmd:"pip install aiida-bands-inspect",is_installable:"True"},"aiida-bigdft":{code_home:"https://github.com/BigDFT-group/aiida-bigdft-plugin",development_status:"beta",entry_point_prefix:"bigdft",pip_url:"aiida-bigdft",plugin_info:"https://raw.github.com/BigDFT-group/aiida-bigdft-plugin/master/setup.json",name:"aiida-bigdft",package_name:"aiida_bigdft",hosted_on:"github.com",metadata:{release_date:"2024-01-10",description:"Translation layer for AiiDA-PyBigDFT",author_email:"Louis Beal <louis.j.beal@gmail.com>",classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.3.0"},aiida_version:">=1.6.3,<3",entry_points:{"aiida.calculations":{bigdft:{description:["AiiDA plugin wrapping a BigDFT calculation","","    requires a valid BigDFT install and a copy of `bigdft.py` on the target machine."],spec:{inputs:[{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure (AiiDA format)"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"extra_files_recv",required:!1,valid_types:"List",info:"Extra files to retrieve from calculation"},{name:"extra_files_send",required:!1,valid_types:"List",info:"Extra files to send with calculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"BigDFTParameters",info:"BigDFT Inputfile parameters, as Dict"},{name:"params_fname",required:!1,valid_types:"Str",info:"Name override for parameters file"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"structure_fname",required:!1,valid_types:"Str",info:"Name override for structure file"}],outputs:[{name:"energy",required:!0,valid_types:"Float",info:"Final energy estimate taken from logfile"},{name:"logfile",required:!0,valid_types:"BigDFTLogfile",info:"BigDFT calculation Logfile"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"timefile",required:!0,valid_types:"BigDFTFile",info:"BigDFT calculation time log"},{name:"ttotal",required:!0,valid_types:"Float",info:"Estimated total run time (excluding queue)"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:100,message:"Calculation did not produce all expected output files."},{status:101,message:"Calculation did not produce all expected output files."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:400,message:"Calculation did not finish because of a walltime issue."},{status:401,message:"Calculation did not finish because of memory limit"}]},class:"aiida_bigdft.calculations:BigDFTCalculation"}},"aiida.cmdline.data":{bigdft:"aiida_bigdft.cli:data_cli"},"aiida.data":{bigdft:"aiida_bigdft.data.BigDFTParameters:BigDFTParameters",bigdftfile:"aiida_bigdft.data.BigDFTFile:BigDFTFile",bigdftlogfile:"aiida_bigdft.data.BigDFTFile:BigDFTLogfile"},"aiida.parsers":{bigdft:"aiida_bigdft.parsers:BigDFTParser"},"aiida.workflows":{bigdft:{description:["Base workchain for running a BigDFT Calculation"],spec:{inputs:[{name:"BigDFT",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"energy",required:!0,valid_types:"Float",info:"Final energy estimate taken from logfile"},{name:"logfile",required:!0,valid_types:"BigDFTLogfile",info:"BigDFT calculation Logfile"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"timefile",required:!0,valid_types:"BigDFTFile",info:"BigDFT calculation time log"},{name:"ttotal",required:!0,valid_types:"Float",info:"Estimated total run time (excluding queue)"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation encountered an unrecoverable error"},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_bigdft.workflows.base:BigDFTBaseWorkChain"},"bigdft.relax":"aiida_bigdft.workflows.relax:BigDFTRelaxWorkChain"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (alpha) does not match development_status in metadata (beta)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:3},{colorclass:"green",text:"Workflows",count:2},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-bigdft",is_installable:"True"},"aiida-castep":{code_home:"https://gitlab.com/bz1/aiida-castep",development_status:"stable",documentation_url:"https://aiida-castep.readthedocs.io/",entry_point_prefix:"castep",pip_url:"aiida-castep",plugin_info:"https://gitlab.com/bz1/aiida-castep/raw/master/setup.json",name:"aiida-castep",package_name:"aiida_castep",hosted_on:"gitlab.com",metadata:{release_date:"2022-05-26",description:"AiiDA plugin for CASTEP",author:"Bonan Zhu",author_email:"zhubonan@outlook.com",license:"MIT License",home_page:"https://github.com/zhubonan/aiida-castep",classifiers:["Framework :: AiiDA","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.1"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"castep.castep":{description:["Class representing a generic CASTEP calculation -","    This class should work for all types of calculations."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"A node that defines the input parameters"},{name:"pseudos",required:!0,valid_types:"",info:"Use nodes for the pseudopotentails of one ofthe element in the structure. You should pass aa dictionary specifying the pseudpotential node foreach kind such as {O: <PsudoNode>}"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: bandstructure"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"elnes_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: elnes"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Use a node defining the kpoints for the calculation"},{name:"magres_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: magres"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optics_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: optics"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"phonon_fine_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"phonon_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"A node for additional settings"},{name:"spectral_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: spectral"},{name:"supercell_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Parsed results in a dictionary format."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation terminated gracefully, end found"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"SCF Cycles failed to reach convergence"},{status:103,message:"Stopped execuation due to detection of 'stop ' keyword in param file."},{status:104,message:"CASTEP generate error files. Check them for details"},{status:105,message:"Cannot find the end of calculation"},{status:106,message:"No output .castep files found"},{status:107,message:"Calculation self-terminated due to time limit"},{status:108,message:"No retrieve folder is found"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"UNKOWN ERROR"},{status:501,message:"At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."}]},class:"aiida_castep.calculations.castep:CastepCalculation"},"castep.ts":{description:["CASTEP calculation for transition state search. Use an extra input product structure."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"A node that defines the input parameters"},{name:"product_structure",required:!0,valid_types:"StructureData",info:"Product structure for transition state search."},{name:"pseudos",required:!0,valid_types:"",info:"Use nodes for the pseudopotentails of one ofthe element in the structure. You should pass aa dictionary specifying the pseudpotential node foreach kind such as {O: <PsudoNode>}"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: bandstructure"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"elnes_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: elnes"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Use a node defining the kpoints for the calculation"},{name:"magres_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: magres"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optics_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: optics"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"phonon_fine_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"phonon_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon, phonon+efield"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"A node for additional settings"},{name:"spectral_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: spectral"},{name:"supercell_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Extra kpoints input for task: phonon"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Parsed results in a dictionary format."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation terminated gracefully, end found"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"SCF Cycles failed to reach convergence"},{status:103,message:"Stopped execuation due to detection of 'stop ' keyword in param file."},{status:104,message:"CASTEP generate error files. Check them for details"},{status:105,message:"Cannot find the end of calculation"},{status:106,message:"No output .castep files found"},{status:107,message:"Calculation self-terminated due to time limit"},{status:108,message:"No retrieve folder is found"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"UNKOWN ERROR"},{status:501,message:"At least one kpoints/spin has no empty bands - please rerun with increased nextra_bands."}]},class:"aiida_castep.calculations.castep:CastepTSCalculation"}},"aiida.cmdline.data":{"castep-helper":"aiida_castep.cmdline.helper_cmd:helper_cmd","castep-pseudos":"aiida_castep.cmdline.otfg_cmd:pseudos_cmd"},"aiida.data":{"castep.otfgdata":"aiida_castep.data.otfg:OTFGData","castep.uspdata":"aiida_castep.data.usp:UspData"},"aiida.groups":{"castep.otfg":"aiida_castep.data.otfg:OTFGGroup"},"aiida.parsers":{"castep.castep":"aiida_castep.parsers.castep:CastepParser"},"aiida.tests":{"castep.calculation":"aiida_castep.tests.dbtests.dbtestcalculation"},"aiida.tools.calculations":{"castep.castep":"aiida_castep.calculations.tools:CastepCalcTools"},"aiida.workflows":{"castep.altrelax":{description:["A relaxation workflow that alternates between fixed cell and unfixed cell","    This is meidate the problem in CASTEP where if the cell is partially constraints","    the convergence would be very slow.","","    To overcome this problem, the structure should be relaxed with cell constraints","    then restart with fixed cell and repeat.","","    Following fields can be used in ``relax_options``","","    :var_cell_iter_max: Maximum iterations in variable cell relaxation, default to 10","","    :fix_cell_iter_max: Maximum iterations in fixed cell relaxation, default to 20"],spec:{inputs:[{name:"base",required:!0,valid_types:"Data",info:""},{name:"calc",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for relaxation."},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations at the end of the workchain. The default is not performing any cleaning."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax_options",required:!1,valid_types:"Dict, NoneType",info:"Options for relaxation."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed structure."},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"Subprocess lauched has failed in the relax stage"},{status:102,message:"Geometry optimisation is not converged but the maximum iteration is exceeded."},{status:201,message:"NO cell_constraints find in the input"}]},class:"aiida_castep.workflows.relax:CastepAlterRelaxWorkChain"},"castep.bands":{description:["Workchain for running bands calculation.","","    This workchain does the following:","","    1. Relax the structure if requested (eg. inputs passed to the relax namespace).","    2. Optionally: Do a SCF singlepoint calculation","    3. Do combined SCF + non-SCF calculation for bands and dos.","","    Inputs must be passed for the SCF calculation (dispatched to bands and DOS),","    others are optional.","","    Input for bands and dos calculations are optional. However, if they are needed, the full list of inputs must","    be passed. For the `parameters` node, one may choose to only specify those fields that need to be updated."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:"Inputs for SCF workchain, mandatory. Used as template for bands/dos if not supplied separately"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bands",required:!1,valid_types:"Data",info:"Inputs for bands calculation, if needed"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints for the bands"},{name:"bands_kpoints_distance",required:!1,valid_types:"Float, NoneType",info:"Spacing for band distances, used by seekpath"},{name:"clean_children_workdir",required:!1,valid_types:"Str, NoneType",info:"What part of the called children to clean"},{name:"dos",required:!1,valid_types:"Data",info:"Inputs for DOS calculation, if needed"},{name:"dos_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Kpoints for running DOS calculations"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"only_dos",required:!1,valid_types:"",info:"Flag for running only DOS calculations"},{name:"options",required:!1,valid_types:"",info:"Options for this workchain. Supported keywords: dos_smearing, dos_npoints."},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for Relaxation workchain, if needed"},{name:"run_separate_scf",required:!1,valid_types:"",info:"Flag for running a separate SCF calculation, default to False"}],outputs:[{name:"band_structure",required:!0,valid_types:"",info:"Computed band structure with labels"},{name:"dos_bands",required:!1,valid_types:"",info:"Bands from the DOS calculation"},{name:"primitive_structure",required:!1,valid_types:"",info:"Primitive structure used for band structure calculations"},{name:"seekpath_parameters",required:!1,valid_types:"",info:"Parameters used by seekpath"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:501,message:"Relaxation workchain failed"},{status:502,message:"SCF workchain failed"},{status:503,message:"Band structure workchain failed"},{status:504,message:"DOS workchain failed"}]},class:"aiida_castep.workflows.bands:CastepBandsWorkChain"},"castep.base":{description:["A basic workchain for generic CASTEP calculations.","    We try to handle erros such as walltime exceeded or SCF not converged"],spec:{inputs:[{name:"calc",required:!0,valid_types:"Data",info:""},{name:"calc_options",required:!1,valid_types:"Dict, NoneType",info:"Options to be passed to calculations's metadata.options"},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations or not, the default is not clean."},{name:"continuation_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."},{name:"ensure_gamma_centering",required:!1,valid_types:"Bool, NoneType",info:"Ensure the kpoint grid is gamma centred."},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Kpoint spacing"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of restarts"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Options specific to the workchain.Avaliable options: queue_wallclock_limit, use_castep_bin"},{name:"pseudos_family",required:!1,valid_types:"Str, NoneType",info:"Pseudopotential family to be used"},{name:"reuse_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder as the parent folder. Useful for restarts."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The maximum number of iterations has been exceeded"},{status:201,message:"The maximum length of the wallclocks has been exceeded"},{status:301,message:"CASTEP generated error files and is not recoverable"},{status:302,message:"Cannot reach SCF convergence despite restart efforts"},{status:400,message:"The stop flag has been put in the .param file to request termination of the calculation."},{status:900,message:"Input validate is failed"},{status:901,message:"Completed one iteration but found not calculation returned"},{status:1e3,message:"Error is not known"}]},class:"aiida_castep.workflows.base:CastepBaseWorkChain"},"castep.relax":{description:["WorkChain to relax structures.","    Restart the relaxation calculation until the structure is fully relaxed.","    Each CASTEP relaxation may finish without error with not fully relaxed structure","    if the number of iteration is exceeded (*geom_max_iter*).","    This workchain try to restart such calculations (wrapped in CastepBaseWorkChain)","    until the structure is fully relaxed","","    ``relax_options`` is a Dict of the options avaliable fields are:","","    - restart_mode: mode of restart, choose from ``reuse`` (default), ``structure``,","      ``continuation``.","    - bypass: Bypass relaxation control - e.g. no checking of the convergence.","      Can be used for doing singlepoint calculation."],spec:{inputs:[{name:"base",required:!0,valid_types:"Data",info:""},{name:"calc",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure to be used for relaxation."},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:"Wether to clean the workdir of the calculations at the end of the workchain. The default is not performing any cleaning."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax_options",required:!1,valid_types:"Dict, NoneType",info:"Options for relaxation."}],outputs:[{name:"output_bands",required:!0,valid_types:"BandsData",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"output_array",required:!1,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed structure."},{name:"output_trajectory",required:!1,valid_types:"ArrayData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"Subprocess lauched has failed in the relax stage"},{status:102,message:"Geometry optimisation is not converged but the maximum iteration is exceeded."}]},class:"aiida_castep.workflows.relax:CastepRelaxWorkChain"}},console_scripts:{"castep.mock":"aiida_castep.cmdline.mock_castep:mock_castep"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:4},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Groups, Tests, ...)",count:5}],pip_install_cmd:"pip install aiida-castep",is_installable:"True"},"aiida-catmap":{code_home:"https://github.com/sudarshanv01/aiida-catmap",entry_point_prefix:"catmap",name:"aiida-catmap",package_name:"aiida_catmap",hosted_on:"github.com",metadata:{author:"Sudarshan Vijay",author_email:"vijays@fysik.dtu.dk",version:"0.2.0a0",description:"AiiDA package that interfaces with Kinetic modelling code CatMAP",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.1.0,<2.0.0",entry_points:{"aiida.calculations":{catmap:"aiida_catmap.calculations.catmap:CatMAPCalculation"},"aiida.parsers":{catmap:"aiida_catmap.parsers.catmap:CatMAPParser"}},commits_count:0,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"See source code repository."},"aiida-catmat":{code_home:"https://github.com/pzarabadip/aiida-catmat",entry_point_prefix:"catmat",development_status:"beta",documentation_url:"https://aiida-catmat.readthedocs.io/",pip_url:"aiida-catmat",name:"aiida-catmat",package_name:"aiida_catmat",hosted_on:"github.com",metadata:{release_date:"2022-07-21",description:"Collection of AiiDA WorkChains Developed in Morgan Group",author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",license:"MIT License",home_page:"https://github.com/pzarabadip/aiida-catmat",classifiers:["Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"1.0.0b0"},aiida_version:null,entry_points:{"aiida.parsers":{vasp_base_parser:"aiida_catmat.parsers:VaspBaseParser"},"aiida.workflows":{"vasp.base":"aiida_catmat.workchains:VaspBaseWorkChain","catmat.vasp_multistage":"aiida_catmat.workchains:VaspMultiStageWorkChain","catmat.vasp_converge":"aiida_catmat.workchains:VaspConvergeWorkChain","catmat.vasp_catmat":"aiida_catmat.workchains:VaspCatMatWorkChain","catmat.vasp_multistage_ddec":"aiida_catmat.workchains:VaspMultiStageDdecWorkChain"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-catmat<pre>Collecting aiida-catmat
  Downloading aiida-catmat-1.0.0b0.tar.gz (27 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
ERROR: Packages installed from PyPI cannot depend on packages which are not also hosted on PyPI.
aiida-catmat depends on aiida-vasp@ git+https://github.com/aiida-vasp/aiida-vasp.git@14771c14ac5ccb08ac521d5936eb0c4ec5b9337f
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'vasp_base_parser' does not start with prefix 'catmat.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'vasp.base' does not start with prefix 'catmat.'"],summaryinfo:[{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:5}],pip_install_cmd:"pip install --pre aiida-catmat",is_installable:"False"},"aiida-ce":{code_home:"https://github.com/unkcpz/aiida-ce",development_status:"beta",entry_point_prefix:"ce",pip_url:"git+https://github.com/unkcpz/aiida-ce",name:"aiida-ce",package_name:"aiida_ce",hosted_on:"github.com",metadata:{author:"unkcpz",author_email:"morty.yu@yahoo.com",version:"0.1.0a0",description:"AiiDA plugin for running cluster expansion using icet.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.0.0,<2.0.0",entry_points:{"aiida.data":{ce:"aiida_ce.data:DiffParameters","ce.structures":"aiida_ce.data.structure_set:StructureSet","ce.cluster":"aiida_ce.data.cluster:ClusterSpaceData"},"aiida.calculations":{"ce.genenum":"aiida_ce.calculations.genenum:EnumCalculation","ce.gensqs":"aiida_ce.calculations.gensqs:SqsCalculation","ce.train":"aiida_ce.calculations.train:TrainCalculation"},"aiida.parsers":{"ce.genenum":"aiida_ce.parsers.genenum:EnumParser","ce.gensqs":"aiida_ce.parsers.gensqs:SqsParser","ce.train":"aiida_ce.parsers.train:TrainParser"},"aiida.cmdline.data":{ce:"aiida_ce.cli:data_cli"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-ce<pre>Collecting git+https://github.com/unkcpz/aiida-ce
  Cloning https://github.com/unkcpz/aiida-ce to /tmp/pip-req-build-cpe3e15c
  Running command git clone --filter=blob:none --quiet https://github.com/unkcpz/aiida-ce /tmp/pip-req-build-cpe3e15c
  Resolved https://github.com/unkcpz/aiida-ce to commit 84cbc7c1e14af3cac5530e092e529bc84cfcfe6d
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-ce to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-ce==0.1.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-ce 0.1.0 depends on aiida-core<2.0.0 and >=1.5.0
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"red",text:"Data",count:3},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/unkcpz/aiida-ce",is_installable:"False"},"aiida-champ":{code_home:"https://github.com/TREX-CoE/aiida-champ",development_status:"beta",documentation_url:"http://aiida-champ.readthedocs.io/",entry_point_prefix:"champ",pip_url:"aiida-champ",name:"aiida-champ",package_name:"aiida_champ",hosted_on:"github.com",metadata:{release_date:"2021-12-27",description:"AiiDA plugin that wraps the vmc executable of CHAMP code for computing the total energy and much more stuff.",author:"Ravindra Shinde",author_email:"r.l.shinde@utwente.nl",license:"MIT",home_page:"https://github.com/neelravi/aiida-champ",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"1.2.6"},aiida_version:null,entry_points:{"aiida.data":{CHAMP:"aiida_champ.data:CHAMPParameters"},"aiida.calculations":{CHAMP:"aiida_champ.calculations:CHAMPCalculation"},"aiida.parsers":{CHAMP:"aiida_champ.parsers:CHAMPParser"},"aiida.cmdline.data":{CHAMP:"aiida_champ.cli:data_cli"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-champ<pre>Collecting aiida-champ
  Downloading aiida-champ-1.2.6.tar.gz (10 kB)
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-champ to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-champ==1.2.6 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-champ 1.2.6 depends on aiida-core<2.0.0 and >=1.1.0
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'CHAMP' does not start with prefix 'champ.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'CHAMP' does not start with prefix 'champ.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'CHAMP' does not start with prefix 'champ.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'CHAMP' does not start with prefix 'champ.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-champ",is_installable:"False"},"aiida-codtools":{code_home:"https://github.com/aiidateam/aiida-codtools",documentation_url:"https://aiida-codtools.readthedocs.io/",entry_point_prefix:"codtools",pip_url:"aiida-codtools",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-codtools/master/setup.json",name:"aiida-codtools",package_name:"aiida_codtools",hosted_on:"github.com",metadata:{release_date:"2023-02-02",description:"The Official AiiDA plugin for the cod-tools package.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"3.1.0"},aiida_version:">=2.1,<3.0",entry_points:{"aiida.calculations":{"codtools.cif_base":{description:["Generic `CalcJob` implementation that can easily be extended to work with any of the `cod-tools` scripts."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_base:CifBaseCalculation"},"codtools.cif_cell_contents":{description:["CalcJob plugin for the `cif_cell_contents` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"formulae",required:!0,valid_types:"Dict",info:"A dictionary of formulae present in the CIF."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cell_contents:CifCellContentsCalculation"},"codtools.cif_cod_check":{description:["CalcJob plugin for the `cif_cod_check` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"messages",required:!0,valid_types:"Dict",info:"Warning and error messages returned by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cod_check:CifCodCheckCalculation"},"codtools.cif_cod_deposit":{description:["CalcJob plugin for the `cif_cod_deposit` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:300,message:"The deposition failed for unknown reasons."},{status:310,message:"The deposition failed because the input was invalid."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."},{status:410,message:"The deposition failed because one or more CIFs already exist in the COD."},{status:420,message:"The structure is unchanged and so deposition is unnecessary."}]},class:"aiida_codtools.calculations.cif_cod_deposit:CifCodDepositCalculation"},"codtools.cif_cod_numbers":{description:["CalcJob plugin for the `cif_cod_numbers` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"numbers",required:!0,valid_types:"Dict",info:"Mapping of COD IDs found with their formula and count."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_cod_numbers:CifCodNumbersCalculation"},"codtools.cif_filter":{description:["CalcJob plugin for the `cif_filter` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_filter:CifFilterCalculation"},"codtools.cif_select":{description:["CalcJob plugin for the `cif_select` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_select:CifSelectCalculation"},"codtools.cif_split_primitive":{description:["CalcJob plugin for the `cif_split_primitive` script of the `cod-tools` package."],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CIF to be processed."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Command line parameters."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"cifs",required:!0,valid_types:"CifData",info:"The CIFs produced by the script."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"messages",required:!1,valid_types:"Dict",info:"Warning and error messages returned by script."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Neither the output for the error file could be read from the retrieved folder."},{status:311,message:"The output file could not be read from the retrieved folder."},{status:312,message:"The error file could not be read from the retrieved folder."},{status:313,message:"The output file is empty."},{status:320,message:"Invalid command line option passed."},{status:400,message:"The output file could not be parsed."},{status:410,message:"The output file could not be parsed into a CifData object."}]},class:"aiida_codtools.calculations.cif_split_primitive:CifSplitPrimitiveCalculation"},"codtools.primitive_structure_from_cif":{description:["Attempt to parse the given `CifData` and create a `StructureData` from it.","","    First the raw CIF file is parsed with the given `parse_engine`. The resulting `StructureData` is then passed through","    SeeKpath to try and get the primitive cell. If that is successful, important structural parameters as determined by","    SeeKpath will be set as extras on the structure node which is then returned as output.","","    :param cif: the `CifData` node","    :param parse_engine: the parsing engine, supported libraries 'ase' and 'pymatgen'","    :param symprec: a `Float` node with symmetry precision for determining primitive cell in SeeKpath","    :param site_tolerance: a `Float` node with the fractional coordinate distance tolerance for finding overlapping","        sites. This will only be used if the parse_engine is pymatgen","    :return: the primitive `StructureData` as determined by SeeKpath"],spec:{inputs:[{name:"cif",required:!0,valid_types:"Data",info:"the `CifData` node"},{name:"parse_engine",required:!0,valid_types:"Data",info:"the parsing engine, supported libraries 'ase' and 'pymatgen'"},{name:"site_tolerance",required:!0,valid_types:"Data",info:"a `Float` node with the fractional coordinate distance tolerance for finding overlapping\nsites. This will only be used if the parse_engine is pymatgen"},{name:"symprec",required:!0,valid_types:"Data",info:"a `Float` node with symmetry precision for determining primitive cell in SeeKpath"},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_codtools.calculations.functions.primitive_structure_from_cif:primitive_structure_from_cif"}},"aiida.parsers":{"codtools.cif_base":"aiida_codtools.parsers.cif_base:CifBaseParser","codtools.cif_cell_contents":"aiida_codtools.parsers.cif_cell_contents:CifCellContentsParser","codtools.cif_cod_check":"aiida_codtools.parsers.cif_cod_check:CifCodCheckParser","codtools.cif_cod_deposit":"aiida_codtools.parsers.cif_cod_deposit:CifCodDepositParser","codtools.cif_cod_numbers":"aiida_codtools.parsers.cif_cod_numbers:CifCodNumbersParser","codtools.cif_split_primitive":"aiida_codtools.parsers.cif_split_primitive:CifSplitPrimitiveParser"},"aiida.workflows":{"codtools.cif_clean":{description:["WorkChain to clean a `CifData` node using the `cif_filter` and `cif_select` scripts of `cod-tools`.","","    It will first run `cif_filter` to correct syntax errors, followed by `cif_select` which will canonicalize the tags.","    If a group is passed for the `group_structure` input, the atomic structure library defined by the `engine` input","    will be used to parse the final cleaned `CifData` to construct a `StructureData` object, which will then be passed","    to the `SeeKpath` library to analyze it and return the primitive structure"],spec:{inputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The CifData node that is to be cleaned."},{name:"cif_filter",required:!0,valid_types:"Data",info:""},{name:"cif_select",required:!0,valid_types:"Data",info:""},{name:"group_cif",required:!1,valid_types:"Group, NoneType",info:"An optional Group to which the final cleaned CifData node will be added."},{name:"group_structure",required:!1,valid_types:"Group, NoneType",info:"An optional Group to which the final reduced StructureData node will be added."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"parse_engine",required:!1,valid_types:"Str",info:"The atomic structure engine to parse the cif and create the structure."},{name:"site_tolerance",required:!1,valid_types:"Float",info:"The fractional coordinate distance tolerance for finding overlapping sites (pymatgen only)."},{name:"symprec",required:!1,valid_types:"Float",info:"The symmetry precision used by SeeKpath for crystal symmetry refinement."}],outputs:[{name:"cif",required:!0,valid_types:"CifData",info:"The cleaned CifData node."},{name:"structure",required:!1,valid_types:"StructureData",info:"The primitive cell structure created with SeeKpath from the cleaned CifData."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"The CifFilterCalculation step failed."},{status:402,message:"The CifSelectCalculation step failed."},{status:410,message:"The cleaned CifData contains sites with unknown species."},{status:411,message:"The cleaned CifData defines no atomic sites."},{status:412,message:"The cleaned CifData defines sites with attached hydrogens with incomplete positional data."},{status:413,message:"The cleaned CifData defines sites with invalid atomic occupancies."},{status:414,message:"Failed to parse a StructureData from the cleaned CifData."},{status:420,message:"SeeKpath failed to determine the primitive structure."},{status:421,message:"SeeKpath detected inconsistent symmetry operations."}]},class:"aiida_codtools.workflows.cif_clean:CifCleanWorkChain"}},console_scripts:{"aiida-codtools":"aiida_codtools.cli:cmd_root"}},commits_count:0,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:9},{colorclass:"brown",text:"Parsers",count:6},{colorclass:"green",text:"Workflows",count:1},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-codtools",is_installable:"True"},"aiida-core":{code_home:"https://github.com/aiidateam/aiida-core",development_status:"stable",documentation_url:"https://aiida-core.readthedocs.io/",entry_point_prefix:"",package_name:"aiida",pip_url:"aiida-core",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-core/master/setup.json",name:"aiida-core",hosted_on:"github.com",metadata:{release_date:"2025-06-24",description:"AiiDA is a workflow manager for computational science with a strong focus on provenance, performance and extensibility.",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.13","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"2.7.0"},aiida_version:"==2.7.0",entry_points:{"aiida.brokers":{"core.rabbitmq":"aiida.brokers.rabbitmq.broker:RabbitmqBroker"},"aiida.calculations":{"core.arithmetic.add":{description:["`CalcJob` implementation to add two numbers using bash for testing and demonstration purposes."],spec:{inputs:[{name:"x",required:!0,valid_types:"Int, Float",info:"The left operand."},{name:"y",required:!0,valid_types:"Int, Float",info:"The right operand."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"sum",required:!0,valid_types:"Int, Float",info:"The sum of the left and right operand."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:310,message:"The output file could not be read."},{status:320,message:"The output file contains invalid output."},{status:410,message:"The sum of the operands is a negative number."}]},class:"aiida.calculations.arithmetic.add:ArithmeticAddCalculation"},"core.stash":"aiida.calculations.stash:StashCalculation","core.templatereplacer":"aiida.calculations.templatereplacer:TemplatereplacerCalculation","core.transfer":"aiida.calculations.transfer:TransferCalculation"},"aiida.calculations.importers":{"core.arithmetic.add":"aiida.calculations.importers.arithmetic.add:ArithmeticAddCalculationImporter"},"aiida.calculations.monitors":{"core.always_kill":"aiida.calculations.monitors.base:always_kill"},"aiida.cmdline.computer.configure":{"core.local":"aiida.transports.plugins.local:CONFIGURE_LOCAL_CMD","core.ssh":"aiida.transports.plugins.ssh:CONFIGURE_SSH_CMD"},"aiida.cmdline.data":{"core.array":"aiida.cmdline.commands.cmd_data.cmd_array:array","core.bands":"aiida.cmdline.commands.cmd_data.cmd_bands:bands","core.cif":"aiida.cmdline.commands.cmd_data.cmd_cif:cif","core.dict":"aiida.cmdline.commands.cmd_data.cmd_dict:dictionary","core.remote":"aiida.cmdline.commands.cmd_data.cmd_remote:remote","core.singlefile":"aiida.cmdline.commands.cmd_data.cmd_singlefile:singlefile","core.structure":"aiida.cmdline.commands.cmd_data.cmd_structure:structure","core.trajectory":"aiida.cmdline.commands.cmd_data.cmd_trajectory:trajectory","core.upf":"aiida.cmdline.commands.cmd_data.cmd_upf:upf"},"aiida.cmdline.data.structure.import":{},"aiida.data":{"core.array":"aiida.orm.nodes.data.array.array:ArrayData","core.array.bands":"aiida.orm.nodes.data.array.bands:BandsData","core.array.kpoints":"aiida.orm.nodes.data.array.kpoints:KpointsData","core.array.projection":"aiida.orm.nodes.data.array.projection:ProjectionData","core.array.trajectory":"aiida.orm.nodes.data.array.trajectory:TrajectoryData","core.array.xy":"aiida.orm.nodes.data.array.xy:XyData","core.base":"aiida.orm.nodes.data:BaseType","core.bool":"aiida.orm.nodes.data.bool:Bool","core.cif":"aiida.orm.nodes.data.cif:CifData","core.code":"aiida.orm.nodes.data.code.legacy:Code","core.code.abstract":"aiida.orm.nodes.data.code.abstract:AbstractCode","core.code.containerized":"aiida.orm.nodes.data.code.containerized:ContainerizedCode","core.code.installed":"aiida.orm.nodes.data.code.installed:InstalledCode","core.code.portable":"aiida.orm.nodes.data.code.portable:PortableCode","core.dict":"aiida.orm.nodes.data.dict:Dict","core.enum":"aiida.orm.nodes.data.enum:EnumData","core.float":"aiida.orm.nodes.data.float:Float","core.folder":"aiida.orm.nodes.data.folder:FolderData","core.int":"aiida.orm.nodes.data.int:Int","core.jsonable":"aiida.orm.nodes.data.jsonable:JsonableData","core.list":"aiida.orm.nodes.data.list:List","core.numeric":"aiida.orm.nodes.data.numeric:NumericType","core.orbital":"aiida.orm.nodes.data.orbital:OrbitalData","core.remote":"aiida.orm.nodes.data.remote.base:RemoteData","core.remote.stash":"aiida.orm.nodes.data.remote.stash.base:RemoteStashData","core.remote.stash.compress":"aiida.orm.nodes.data.remote.stash.compress:RemoteStashCompressedData","core.remote.stash.folder":"aiida.orm.nodes.data.remote.stash.folder:RemoteStashFolderData","core.singlefile":"aiida.orm.nodes.data.singlefile:SinglefileData","core.str":"aiida.orm.nodes.data.str:Str","core.structure":"aiida.orm.nodes.data.structure:StructureData","core.upf":"aiida.orm.nodes.data.upf:UpfData"},"aiida.groups":{core:"aiida.orm.groups:Group","core.auto":"aiida.orm.groups:AutoGroup","core.import":"aiida.orm.groups:ImportGroup","core.upf":"aiida.orm.groups:UpfFamily"},"aiida.node":{data:"aiida.orm.nodes.data.data:Data",process:"aiida.orm.nodes.process.process:ProcessNode","process.calculation":"aiida.orm.nodes.process.calculation.calculation:CalculationNode","process.calculation.calcfunction":"aiida.orm.nodes.process.calculation.calcfunction:CalcFunctionNode","process.calculation.calcjob":"aiida.orm.nodes.process.calculation.calcjob:CalcJobNode","process.workflow":"aiida.orm.nodes.process.workflow.workflow:WorkflowNode","process.workflow.workchain":"aiida.orm.nodes.process.workflow.workchain:WorkChainNode","process.workflow.workfunction":"aiida.orm.nodes.process.workflow.workfunction:WorkFunctionNode"},"aiida.orm":{"core.auth_info":"aiida.orm.authinfos:AuthInfo","core.comment":"aiida.orm.comments:Comment","core.computer":"aiida.orm.computers:Computer","core.data":"aiida.orm.nodes.data.data:Data","core.entity":"aiida.orm.entities:Entity","core.group":"aiida.orm.groups:Group","core.log":"aiida.orm.logs:Log","core.node":"aiida.orm.nodes.node:Node","core.user":"aiida.orm.users:User"},"aiida.parsers":{"core.arithmetic.add":"aiida.parsers.plugins.arithmetic.add:ArithmeticAddParser","core.templatereplacer":"aiida.parsers.plugins.templatereplacer.parser:TemplatereplacerParser"},"aiida.schedulers":{"core.direct":"aiida.schedulers.plugins.direct:DirectScheduler","core.lsf":"aiida.schedulers.plugins.lsf:LsfScheduler","core.pbspro":"aiida.schedulers.plugins.pbspro:PbsproScheduler","core.sge":"aiida.schedulers.plugins.sge:SgeScheduler","core.slurm":"aiida.schedulers.plugins.slurm:SlurmScheduler","core.torque":"aiida.schedulers.plugins.torque:TorqueScheduler"},"aiida.storage":{"core.psql_dos":"aiida.storage.psql_dos.backend:PsqlDosBackend","core.sqlite_dos":"aiida.storage.sqlite_dos.backend:SqliteDosStorage","core.sqlite_temp":"aiida.storage.sqlite_temp.backend:SqliteTempBackend","core.sqlite_zip":"aiida.storage.sqlite_zip.backend:SqliteZipBackend"},"aiida.tools.calculations":{},"aiida.tools.data.orbitals":{"core.orbital":"aiida.tools.data.orbital.orbital:Orbital","core.realhydrogen":"aiida.tools.data.orbital.realhydrogen:RealhydrogenOrbital"},"aiida.tools.dbexporters":{},"aiida.tools.dbimporters":{"core.cod":"aiida.tools.dbimporters.plugins.cod:CodDbImporter","core.icsd":"aiida.tools.dbimporters.plugins.icsd:IcsdDbImporter","core.materialsproject":"aiida.tools.dbimporters.plugins.materialsproject:MaterialsProjectImporter","core.mpds":"aiida.tools.dbimporters.plugins.mpds:MpdsDbImporter","core.mpod":"aiida.tools.dbimporters.plugins.mpod:MpodDbImporter","core.nninc":"aiida.tools.dbimporters.plugins.nninc:NnincDbImporter","core.oqmd":"aiida.tools.dbimporters.plugins.oqmd:OqmdDbImporter","core.pcod":"aiida.tools.dbimporters.plugins.pcod:PcodDbImporter","core.tcod":"aiida.tools.dbimporters.plugins.tcod:TcodDbImporter"},"aiida.transports":{"core.local":"aiida.transports.plugins.local:LocalTransport","core.ssh":"aiida.transports.plugins.ssh:SshTransport","core.ssh_async":"aiida.transports.plugins.ssh_async:AsyncSshTransport"},"aiida.workflows":{"core.arithmetic.add_multiply":{description:["Add two numbers and multiply it with a third."],spec:{inputs:[{name:"x",required:!0,valid_types:"Data",info:""},{name:"y",required:!0,valid_types:"Data",info:""},{name:"z",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida.workflows.arithmetic.add_multiply:add_multiply"},"core.arithmetic.multiply_add":{description:["WorkChain to multiply two numbers and add a third, for testing and demonstration purposes."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode",info:""},{name:"x",required:!0,valid_types:"Int",info:""},{name:"y",required:!0,valid_types:"Int",info:""},{name:"z",required:!0,valid_types:"Int",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"result",required:!0,valid_types:"Int",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"The result is a negative number."}]},class:"aiida.workflows.arithmetic.multiply_add:MultiplyAddWorkChain"}},console_scripts:{runaiida:"aiida.cmdline.commands.cmd_run:run",verdi:"aiida.cmdline.commands.cmd_verdi:verdi"}},commits_count:165,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:31},{colorclass:"green",text:"Workflows",count:2},{colorclass:"purple",text:"Console scripts",count:2},{colorclass:"orange",text:"Other (Brokers, Calculations importers, Calculations monitors, ...)",count:59}],pip_install_cmd:"pip install aiida-core",is_installable:"True"},"aiida-cp2k":{code_home:"https://github.com/cp2k/aiida-cp2k",entry_point_prefix:"cp2k",pip_url:"aiida-cp2k",plugin_info:"https://raw.githubusercontent.com/cp2k/aiida-cp2k/master/setup.json",name:"aiida-cp2k",package_name:"aiida_cp2k",hosted_on:"github.com",metadata:{release_date:"2025-02-04",description:"The official AiiDA plugin for CP2K.",author:"The AiiDA team",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3"],version:"2.1.1"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{cp2k:{description:["This is a Cp2kCalculation, subclass of JobCalculation, to prepare input for an ab-initio CP2K calculation.","","    For information on CP2K, refer to: https://www.cp2k.org."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"The input parameters."},{name:"pseudos_upf",required:!0,valid_types:"UpfData",info:"A mapping of `UpfData` nodes onto the kind name to which they should apply."},{name:"basissets",required:!1,valid_types:"",info:"A dictionary of basissets to be used in the calculations: key is the atomic symbol, value is either a single basisset or a list of basissets. If multiple basissets for a single symbol are passed, it is mandatory to specify a KIND section with a BASIS_SET keyword matching the names (or aliases) of the basissets."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"file",required:!1,valid_types:"SinglefileData, StructureData",info:"Additional input files."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoint mesh."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Working directory of a previously ran calculation to restart from."},{name:"pseudos",required:!1,valid_types:"",info:"A dictionary of pseudopotentials to be used in the calculations: key is the atomic symbol, value is either a single pseudopotential or a list of pseudopotentials. If multiple pseudos for a single symbol are passed, it is mandatory to specify a KIND section with a PSEUDOPOTENTIAL keyword matching the names (or aliases) of the pseudopotentials."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional input parameters."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"The main input structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData, NoneType",info:"Input trajectory for a REFTRAJ simulation."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The output dictionary containing results of the calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Computed electronic band structure."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required output file."},{status:301,message:"The output file could not be read."},{status:302,message:"The output file could not be parsed."},{status:303,message:"The output file was incomplete."},{status:304,message:'The output file contains the word "ABORT".'},{status:312,message:"The output structure could not be parsed."},{status:321,message:"The coordinates trajectory file could not be read."},{status:323,message:"The forces trajectory file could not be read."},{status:325,message:"The cells trajectory file could not be read."},{status:350,message:"The parser raised an unexpected exception."},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:450,message:"SCF cycle did not converge for the given threshold."},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."},{status:501,message:"The maximum number of optimization steps reached."}]},class:"aiida_cp2k.calculations:Cp2kCalculation"}},"aiida.parsers":{cp2k_advanced_parser:"aiida_cp2k.parsers:Cp2kAdvancedParser",cp2k_base_parser:"aiida_cp2k.parsers:Cp2kBaseParser",cp2k_tools_parser:"aiida_cp2k.parsers:Cp2kToolsParser"},"aiida.workflows":{"cp2k.base":{description:["Workchain to run a CP2K calculation with automated error handling and restarts."],spec:{inputs:[{name:"cp2k",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The output dictionary containing results of the calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"final_input_parameters",required:!1,valid_types:"Dict",info:"The input parameters used for the final calculation."},{name:"output_bands",required:!1,valid_types:"BandsData",info:"Computed electronic band structure."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unidentified unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:310,message:"The calculation failed with a known unrecoverable error."},{status:400,message:"The calculation didn't produce any data to restart from."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_cp2k.workchains:Cp2kBaseWorkChain"}}},commits_count:9,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-cp2k",is_installable:"True"},"aiida-crystal-dft":{code_home:"https://github.com/tilde-lab/aiida-crystal-dft",development_status:"beta",documentation_url:"https://github.com/tilde-lab/aiida-crystal-dft",entry_point_prefix:"crystal_dft",pip_url:"git+https://github.com/tilde-lab/aiida-crystal-dft",name:"aiida-crystal-dft",package_name:"aiida_crystal_dft",hosted_on:"github.com",metadata:{description:`Yet another AiiDA plugin for CRYSTAL code, mainly intended for use with the cloud infrastructures
(currently, MPDS)`,classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Intended Audience :: Science/Research","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Topic :: Scientific/Engineering","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Information Analysis"],author:"Andrey Sobolev, based on aiida-crystal17 plugin by Chris Sewell",author_email:"as@tilde.pro"},aiida_version:">=2.0.2",entry_points:{"aiida.data":{"crystal_dft.basis":"aiida_crystal_dft.data.basis:CrystalBasisData","crystal_dft.basis_family":"aiida_crystal_dft.data.basis_family:CrystalBasisFamilyData"},"aiida.calculations":{"crystal_dft.serial":{description:["No description available"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"basis",required:!1,valid_types:"CrystalBasisData",info:""},{name:"basis_family",required:!1,valid_types:"CrystalBasisFamilyData, NoneType",info:""},{name:"guess_oxistates",required:!1,valid_types:"Bool, NoneType",info:""},{name:"high_spin_preferred",required:!1,valid_types:"Bool, NoneType",info:""},{name:"is_magnetic",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"spinlock_steps",required:!1,valid_types:"Int, NoneType",info:""},{name:"use_oxistates",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"oxidation_states",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"SCF calculation not converged"},{status:301,message:"Geometry optimization failed"},{status:302,message:"Unit cell not neutral"},{status:303,message:"Basis set linearly dependent"},{status:304,message:"Neighbour list too large"},{status:305,message:"No G-vectors left"},{status:306,message:"Collapsed geometry"},{status:307,message:"Closed shell run - spin polarization not allowed"},{status:308,message:"Parameters for model hessian not defined"},{status:309,message:"Fermi energy not in interval"},{status:310,message:"Insufficient indices for Madelung sums"},{status:350,message:"Internal memory error"},{status:360,message:"Inadequate elastic calculation: additional optimization needed"},{status:400,message:"Unknown error"},{status:401,message:"The retrieved folder data node could not be accessed"}]},class:"aiida_crystal_dft.calculations.serial:CrystalSerialCalculation"},"crystal_dft.parallel":{description:["No description available"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"basis",required:!1,valid_types:"CrystalBasisData",info:""},{name:"basis_family",required:!1,valid_types:"CrystalBasisFamilyData, NoneType",info:""},{name:"guess_oxistates",required:!1,valid_types:"Bool, NoneType",info:""},{name:"high_spin_preferred",required:!1,valid_types:"Bool, NoneType",info:""},{name:"is_magnetic",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"spinlock_steps",required:!1,valid_types:"Int, NoneType",info:""},{name:"use_oxistates",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"oxidation_states",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"SCF calculation not converged"},{status:301,message:"Geometry optimization failed"},{status:302,message:"Unit cell not neutral"},{status:303,message:"Basis set linearly dependent"},{status:304,message:"Neighbour list too large"},{status:305,message:"No G-vectors left"},{status:306,message:"Collapsed geometry"},{status:307,message:"Closed shell run - spin polarization not allowed"},{status:308,message:"Parameters for model hessian not defined"},{status:309,message:"Fermi energy not in interval"},{status:310,message:"Insufficient indices for Madelung sums"},{status:350,message:"Internal memory error"},{status:360,message:"Inadequate elastic calculation: additional optimization needed"},{status:400,message:"Unknown error"},{status:401,message:"The retrieved folder data node could not be accessed"}]},class:"aiida_crystal_dft.calculations.parallel:CrystalParallelCalculation"},"crystal_dft.properties":{description:["AiiDA calculation plugin wrapping the properties executable."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"wavefunction",required:!0,valid_types:"SinglefileData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_bands",required:!1,valid_types:"BandsData",info:""},{name:"output_bands_down",required:!1,valid_types:"BandsData",info:""},{name:"output_dos",required:!1,valid_types:"ArrayData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_crystal_dft.calculations.properties:PropertiesCalculation"}},"aiida.parsers":{crystal_dft:"aiida_crystal_dft.parsers.cry_pycrystal:CrystalParser","crystal_dft.properties":"aiida_crystal_dft.parsers.properties:PropertiesParser"},"aiida.workflows":{"crystal_dft.base":{description:["Run CRYSTAL calculation"],spec:{inputs:[{name:"basis_family",required:!0,valid_types:"CrystalBasisFamilyData",info:""},{name:"code",required:!0,valid_types:"Code",info:""},{name:"options",required:!0,valid_types:"Dict",info:"Calculation options"},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_params",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:""},{name:"output_trajectory",required:!1,valid_types:"TrajectoryData",info:""},{name:"output_wavefunction",required:!1,valid_types:"SinglefileData",info:""},{name:"oxidation_states",required:!1,valid_types:"Dict",info:""},{name:"primitive_structure",required:!1,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"CRYSTAL error"},{status:400,message:"Unknown error"}]},class:"aiida_crystal_dft.workflows.base:BaseCrystalWorkChain"}},"aiida.cmdline.data":{crystal_dft:"aiida_crystal_dft.cli.basis:basis_set"}},commits_count:7,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/tilde-lab/aiida-crystal-dft",is_installable:"True"},"aiida-crystal17":{code_home:"https://github.com/aiidaplugins/aiida-crystal17",development_status:"beta",documentation_url:"https://aiida-crystal17.readthedocs.io",entry_point_prefix:"crystal17",pip_url:"aiida-crystal17",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-crystal17/master/setup.json",name:"aiida-crystal17",package_name:"aiida_crystal17",hosted_on:"github.com",metadata:{release_date:"2020-09-29",description:"AiiDA plugin for running the CRYSTAL17 code",author:"Chris Sewell",author_email:"chrisj_sewell@hotmail.com",license:"MIT",home_page:"https://github.com/chrisjsewell/aiida-crystal17",classifiers:["Framework :: AiiDA","Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.6","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"0.11.0"},aiida_version:">=1.4.0,<2.0.0",entry_points:{"aiida.calculations":{"crystal17.basic":"aiida_crystal17.calculations.cry_basic:CryBasicCalculation","crystal17.doss":"aiida_crystal17.calculations.prop_doss:CryDossCalculation","crystal17.ech3":"aiida_crystal17.calculations.prop_ech3:CryEch3Calculation","crystal17.main":"aiida_crystal17.calculations.cry_main:CryMainCalculation","crystal17.newk":"aiida_crystal17.calculations.prop_newk:CryNewkCalculation","crystal17.ppan":"aiida_crystal17.calculations.prop_ppan:CryPpanCalculation"},"aiida.cmdline.data":{"crystal17.basis":"aiida_crystal17.cmndline.basis_set:basisset","crystal17.parse":"aiida_crystal17.cmndline.cmd_parser:parse","crystal17.symmetry":"aiida_crystal17.cmndline.symmetry:symmetry"},"aiida.data":{"crystal17.basisset":"aiida_crystal17.data.basis_set:BasisSetData","crystal17.gcube":"aiida_crystal17.data.gcube:GaussianCube","crystal17.kinds":"aiida_crystal17.data.kinds:KindData","crystal17.parameters":"aiida_crystal17.data.input_params:CryInputParamsData","crystal17.symmetry":"aiida_crystal17.data.symmetry:SymmetryData"},"aiida.groups":{"crystal17.basisset":"aiida_crystal17.data.basis_set:BasisSetFamily"},"aiida.parsers":{"crystal17.doss":"aiida_crystal17.parsers.cry_doss:CryDossParser","crystal17.ech3":"aiida_crystal17.parsers.cry_ech3:CryEch3Parser","crystal17.main":"aiida_crystal17.parsers.cry_main:CryMainParser","crystal17.newk":"aiida_crystal17.parsers.cry_newk:CryNewkParser","crystal17.ppan":"aiida_crystal17.parsers.cry_ppan:CryPpanParser"},"aiida.workflows":{"crystal17.main.base":"aiida_crystal17.workflows.crystal_main.base:CryMainBaseWorkChain","crystal17.properties":"aiida_crystal17.workflows.crystal_props.base:CryPropertiesWorkChain","crystal17.sym3d":"aiida_crystal17.workflows.symmetrise_3d_struct:Symmetrise3DStructure"},console_scripts:{mock_crystal17:"aiida_crystal17.tests.mock_crystal17:main",mock_properties17:"aiida_crystal17.tests.mock_properties17:main"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-crystal17<pre>Collecting aiida-crystal17
  Downloading aiida_crystal17-0.11.0-py3-none-any.whl.metadata (5.8 kB)
INFO: pip is looking at multiple versions of aiida-crystal17 to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida-crystal17-0.4.0.tar.gz (120 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 120.8/120.8 kB 8.2 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
ERROR: Cannot install aiida-crystal17==0.11.0 and aiida-crystal17==0.4.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-crystal17 0.11.0 depends on aiida-core<2.0.0 and >=1.4.0
    aiida-crystal17 0.4.0 depends on aiida-core==0.12.2
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:6},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:5},{colorclass:"green",text:"Workflows",count:3},{colorclass:"purple",text:"Console scripts",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:4}],pip_install_cmd:"pip install aiida-crystal17",is_installable:"False"},"aiida-cusp":{code_home:"https://github.com/aiida-cusp/aiida-cusp",documentation_url:"https://aiida-cusp.readthedocs.io",entry_point_prefix:"cusp",pip_url:"https://pypi.org/project/aiida-cusp",name:"aiida-cusp",package_name:"aiida_cusp",hosted_on:"github.com",metadata:{author:"Andreas Stamminger",author_email:"stammingera@gmail.com",version:"0.1.0b2",description:"Custodian based VASP Plugin for AiiDA",classifiers:["Development Status :: 4 - Beta","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Chemistry","Environment :: Plugins","Framework :: AiiDA"]},aiida_version:">=1.3.0,<2.0.0",entry_points:{"aiida.data":{"cusp.kpoints":"aiida_cusp.data.inputs.vasp_kpoint:VaspKpointData","cusp.poscar":"aiida_cusp.data.inputs.vasp_poscar:VaspPoscarData","cusp.incar":"aiida_cusp.data.inputs.vasp_incar:VaspIncarData","cusp.potcar":"aiida_cusp.data.inputs.vasp_potcar:VaspPotcarData","cusp.vasprun":"aiida_cusp.data.outputs.vasp_vasprun:VaspVasprunData","cusp.outcar":"aiida_cusp.data.outputs.vasp_outcar:VaspOutcarData","cusp.contcar":"aiida_cusp.data.outputs.vasp_contcar:VaspContcarData","cusp.chgcar":"aiida_cusp.data.outputs.vasp_chgcar:VaspChgcarData","cusp.wavecar":"aiida_cusp.data.outputs.vasp_wavecar:VaspWavecarData","cusp.generic":"aiida_cusp.data.outputs.vasp_generic:VaspGenericData","cusp.potcarfile":"aiida_cusp.data.inputs.vasp_potcar:VaspPotcarFile"},"aiida.calculations":{"cusp.vasp":"aiida_cusp.calculators.vasp_calculation:VaspCalculation"},"aiida.parsers":{"cusp.default":"aiida_cusp.parsers.vasp_file_parser:VaspFileParser"},"aiida.cmdline.data":{potcar:"aiida_cusp.cli.potcar_cmd:potcar"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-cusp<pre>Collecting https://pypi.org/project/aiida-cusp
  Downloading https://pypi.org/project/aiida-cusp
     - 3.1 kB ? 0:00:00
  ERROR: Cannot unpack file /tmp/pip-unpack-cmmbhxd8/aiida-cusp (downloaded from /tmp/pip-req-build-2p3eocv_, content-type: text/html; charset=utf-8); cannot detect archive format
ERROR: Cannot determine archive format of /tmp/pip-req-build-2p3eocv_
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'potcar' does not start with prefix 'cusp.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:11},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install https://pypi.org/project/aiida-cusp",is_installable:"False"},"aiida-dataframe":{entry_point_prefix:"dataframe",plugin_info:"https://raw.github.com/janssenhenning/aiida-dataframe/main/pyproject.toml",code_home:"https://github.com/janssenhenning/aiida-dataframe",version_file:"https://raw.githubusercontent.com/janssenhenning/aiida-dataframe/main/aiida_dataframe/__init__.py",pip_url:"aiida-dataframe",documentation_url:"https://aiida-dataframe.readthedocs.io/en/latest/",name:"aiida-dataframe",package_name:"aiida_dataframe",hosted_on:"github.com",metadata:{release_date:"2023-05-05",description:"AiiDA data plugin for pandas DataFrame objects",author_email:"Henning Janßen <henning.janssen@gmx.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"0.1.3"},aiida_version:">=1.0,<3",entry_points:{"aiida.cmdline.data":{dataframe:"aiida_dataframe.cli:data_cli"},"aiida.data":{"dataframe.frame":"aiida_dataframe.data.dataframe:PandasFrameData"}},commits_count:9,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-dataframe",is_installable:"True"},"aiida-ddec":{code_home:"https://github.com/lsmo-epfl/aiida-ddec",entry_point_prefix:"ddec",pip_url:"git+https://github.com/yakutovicha/aiida-ddec",name:"aiida-ddec",package_name:"aiida_ddec",hosted_on:"github.com",metadata:{description:"AiiDA plugin for DDEC code",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11"],author:"Aliaksandr Yakutovich",author_email:"aliaksandr.yakutovich@epfl.ch"},aiida_version:"~=2.3",entry_points:{"aiida.calculations":{ddec:{description:["AiiDA plugin for the ddec code that performs density derived","    electrostatic and chemical atomic population analysis."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters such as net charge, protocol, atomic densities path, ..."},{name:"charge_density_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote folder (for restarts and similar)"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"structure_ddec",required:!0,valid_types:"CifData",info:"structure with DDEC charges"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"The retrieved folder does not contain an output file."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_ddec.calculations:DdecCalculation"}},"aiida.parsers":{ddec:"aiida_ddec.parsers:DdecParser"},"aiida.workflows":{"ddec.cp2k_ddec":{description:["A workchain that computes DDEC charges after a single-point","    DFT calculation using Cp2kBaseWorkChain"],spec:{inputs:[{name:"cp2k_base",required:!0,valid_types:"Data",info:""},{name:"ddec",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"structure_ddec",required:!0,valid_types:"CifData",info:"structure with DDEC charges"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:903,message:"Error while parsing CP2K output"},{status:904,message:"Error while parsing DDEC output"}]},class:"aiida_ddec.workchains:Cp2kDdecWorkChain"}}},commits_count:0,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/yakutovicha/aiida-ddec",is_installable:"True"},"aiida-defects":{code_home:"https://github.com/epfl-theos/aiida-defects",entry_point_prefix:"defects",pip_url:"aiida-defects",plugin_info:"https://raw.githubusercontent.com/epfl-theos/aiida-defects/master/pyproject.toml",name:"aiida-defects",package_name:"aiida_defects",hosted_on:"github.com",metadata:{release_date:"2023-03-29",description:"AiiDA-Defects is a plugin for the AiiDA computational materials science framework, and provides tools and automated workflows for the study of defects in materials.",author:"The AiiDA-Defects developers",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"1.0.1"},aiida_version:">=2.0,<3",entry_points:{"aiida.data":{"defects.array.stability":"aiida_defects.data.data:StabilityData"},"aiida.workflows":{"defects.formation_energy.chemical_potential":"aiida_defects.formation_energy.chemical_potential.chemical_potential:ChemicalPotentialWorkchain","defects.formation_energy.corrections.gaussian_countercharge":"aiida_defects.formation_energy.corrections.gaussian_countercharge.gaussian_countercharge:GaussianCounterChargeWorkchain","defects.formation_energy.corrections.gaussian_countercharge.model_potential":"aiida_defects.formation_energy.corrections.gaussian_countercharge.model_potential.model_potential:ModelPotentialWorkchain","defects.formation_energy.corrections.point_countercharge":"aiida_defects.formation_energy.corrections.point_countercharge.point_countercharge:PointCounterChargeWorkchain","defects.formation_energy.potential_alignment":"aiida_defects.formation_energy.potential_alignment.potential_alignment:PotentialAlignmentWorkchain","defects.formation_energy.qe":"aiida_defects.formation_energy.formation_energy_qe:FormationEnergyWorkchainQE","defects.formation_energy.siesta":"aiida_defects.formation_energy.formation_energy_siesta:FormatonEnergyWorkchainSiesta"}},commits_count:0,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:7}],pip_install_cmd:"pip install aiida-defects",is_installable:"True"},"aiida-diff":{code_home:"https://github.com/aiidateam/aiida-diff",development_status:"stable",documentation_url:"https://aiida-diff.readthedocs.io/",entry_point_prefix:"diff",pip_url:"git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0",name:"aiida-diff",package_name:"aiida_diff",hosted_on:"github.com",metadata:{description:"AiiDA demo plugin that wraps the `diff` executable for computing the difference between two files.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"The AiiDA Team"},aiida_version:">=2.5,<3",entry_points:{"aiida.data":{diff:"aiida_diff.data:DiffParameters"},"aiida.calculations":{diff:"aiida_diff.calculations:DiffCalculation"},"aiida.parsers":{diff:"aiida_diff.parsers:DiffParser"},"aiida.cmdline.data":{diff:"aiida_diff.cli:data_cli"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-diff<pre>Collecting aiida-diff-0.1.0a0
  Cloning https://github.com/aiidateam/aiida-diff to /tmp/pip-install-j3oe799l/aiida-diff-0-1-0a0_bbccd891480e456fae00fdbe1c1e8a3b
  Running command git clone --filter=blob:none --quiet https://github.com/aiidateam/aiida-diff /tmp/pip-install-j3oe799l/aiida-diff-0-1-0a0_bbccd891480e456fae00fdbe1c1e8a3b
  Resolved https://github.com/aiidateam/aiida-diff to commit f9b151e11634b16e6a42d5445da23735415872e0
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
  WARNING: Generating metadata for package aiida-diff-0.1.0a0 produced metadata for project name aiida-diff. Fix your #egg=aiida-diff-0.1.0a0 fragments.
Discarding git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0: Requested aiida-diff from git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0 has inconsistent name: expected 'aiida-diff-0-1-0a0', but metadata has 'aiida-diff'
ERROR: Could not find a version that satisfies the requirement aiida-diff-0-1-0a0 (unavailable) (from versions: none)
ERROR: No matching distribution found for aiida-diff-0-1-0a0 (unavailable)
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (alpha) does not match development_status in metadata (stable)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install git+https://github.com/aiidateam/aiida-diff#egg=aiida-diff-0.1.0a0",is_installable:"False"},"aiida-donothing":{code_home:"https://github.com/atztogo/aiida-donothing",entry_point_prefix:"donothing",name:"aiida-donothing",package_name:"aiida_donothing",hosted_on:"github.com",metadata:{author:"Atsushi Togo",author_email:"atz.togo@gmail.com",version:"0.1",description:"AiiDA calculation plugin for doing nothing",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.6.5,<2.0.0",entry_points:{"aiida.calculations":{"donothing.donothing":"aiida_donothing.calculations.donothing:DoNothingCalculation"},"aiida.parsers":{"donothing.donothing":"aiida_donothing.parsers.donothing:DoNothingParser"}},commits_count:0,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"See source code repository."},"aiida-dynamic-workflows":{code_home:"https://github.com/microsoft/aiida-dynamic-workflows",entry_point_prefix:"dynamic_workflows",name:"aiida-dynamic-workflows",package_name:"aiida_dynamic_workflows",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-environ":{code_home:"https://github.com/environ-developers/aiida-environ",entry_point_prefix:"environ",pip_url:"git+https://github.com/environ-developers/aiida-environ",name:"aiida-environ",package_name:"aiida_environ",hosted_on:"github.com",metadata:{version:"1.0.0",description:"AiiDA plugin for Environ",classifiers:["Development Status :: 5 - Production/Stable","Programming Language :: Python","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],author_email:"materialab@unt.edu"},aiida_version:">=1.6",entry_points:{"aiida.calculations":{"environ.pw":"aiida_environ.calculations.pw:EnvPwCalculation","environ.finite":"aiida_environ.calculations.finite:calculate_finite_differences"},"aiida.data":{"environ.charges":"aiida_environ.data.charge:EnvironChargeData"},"aiida.parsers":{"environ.pw":"aiida_environ.parsers.pw:EnvPwParser"},"aiida.workflows":{"environ.pw.base":"aiida_environ.workflows.pw.base:EnvPwBaseWorkChain","environ.pw.relax":"aiida_environ.workflows.pw.relax:EnvPwRelaxWorkChain","environ.pw.solvation":"aiida_environ.workflows.pw.solvation:PwSolvationWorkChain","environ.pw.force_test":"aiida_environ.workflows.pw.force_test:EnvPwForceTestWorkChain"}},commits_count:0,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:4}],pip_install_cmd:"pip install git+https://github.com/environ-developers/aiida-environ",is_installable:"True"},"aiida-eon":{code_home:"https://github.com/HaoZeke/aiida-eon",entry_point_prefix:"eon",name:"aiida-eon",package_name:"aiida_eon",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-eonclient":{code_home:"https://github.com/HaoZeke/aiida-eonclient",entry_point_prefix:"eonclient",name:"aiida-eonclient",package_name:"aiida_eonclient",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-fans":{entry_point_prefix:"fans",code_home:"https://github.com/ethan-shanahan/aiida-fans",documentation_url:"https://aiida-fans.readthedocs.io/en/latest/",name:"aiida-fans",package_name:"aiida_fans",hosted_on:"github.com",metadata:{description:"AiiDA plugin for FANS, an FFT-based homogenization solver.",classifiers:["Natural Language :: English","Programming Language :: Python","Operating System :: POSIX :: Linux","Intended Audience :: Science/Research","License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"Ethan Shanahan",author_email:"ethan.shanahan@gmail.com"},aiida_version:">=2.6",entry_points:{"aiida.calculations":{"fans.stashed":"aiida_fans.calculations:FansStashedCalculation","fans.fragmented":"aiida_fans.calculations:FansFragmentedCalculation"},"aiida.parsers":{fans:"aiida_fans.parsers:FansParser"}},commits_count:87,development_status:"alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"See source code repository."},"aiida-fenics":{code_home:"https://github.com/broeder-j/aiida-fenics/tree/master",entry_point_prefix:"fenics",pip_url:"git+https://github.com/broeder-j/aiida-fenics",name:"aiida-fenics",package_name:"aiida_fenics",hosted_on:"github.com",metadata:{author:"Sebastiaan P. Huber",author_email:"mail@sphuber.net",version:"0.1.0",description:"AiiDA plugin for the FEniCS computing platform for solving partial differential equations.",classifiers:["Development Status :: 2 - Pre-Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: POSIX :: Linux","Operating System :: MacOS :: MacOS X","Programming Language :: Python","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"]},aiida_version:"~=1.6",entry_points:{"aiida.workflows":{"fenics.geometry_poisson":"aiida_fenics.workflows.geometry_poisson:GeometryPoisson"}},commits_count:0,development_status:"pre-alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-fenics<pre>Collecting git+https://github.com/broeder-j/aiida-fenics
  Cloning https://github.com/broeder-j/aiida-fenics to /tmp/pip-req-build-pp0i3grh
  Running command git clone --filter=blob:none --quiet https://github.com/broeder-j/aiida-fenics /tmp/pip-req-build-pp0i3grh
  Resolved https://github.com/broeder-j/aiida-fenics to commit eae053f7c82889a15fe19c3909d303f923fcf79e
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-fenics to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-fenics==0.1.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-fenics 0.1.0 depends on aiida-core~=1.6
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:[],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/broeder-j/aiida-fenics",is_installable:"False"},"aiida-fhiaims":{entry_point_prefix:"fhiaims",code_home:"https://gitlab.com/FHI-aims-club/utilities/aiida-fhiaims",pip_url:"git+https://gitlab.com/FHI-aims-club/utilities/aiida-fhiaims",version_file:"https://gitlab.com/FHI-aims-club/utilities/aiida-fhiaims/-/raw/master/aiida_fhiaims/__init__.py",name:"aiida-fhiaims",package_name:"aiida_fhiaims",hosted_on:"gitlab.com",metadata:{description:"An AiiDA plugin for FHI-aims code",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"Andrey Sobolev",author_email:"andrey.n.sobolev@gmail.com"},aiida_version:">=2.0,<3",entry_points:{"aiida.cmdline.data":{"fhiaims.species_defaults":"aiida_fhiaims.cli.species_defaults:species_defaults"},"aiida.data":{"fhiaims.species_file":"aiida_fhiaims.data.species_file:BasisFile","fhiaims.parameters":"aiida_fhiaims.data.parameters:AimsParameters"},"aiida.groups":{"fhiaims.species_family":"aiida_fhiaims.data.species_family:BasisFamily"},"aiida.calculations":{fhiaims:{description:["AiiDA calculation plugin wrapping the aims.x executable."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"AimsParameters",info:"FHI-aims parameters dictionary"},{name:"structure",required:!0,valid_types:"StructureData",info:"Atomic structure to be calculated"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"fhiaims",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_fhiaims.calculations:AimsCalculation"}},"aiida.parsers":{"fhiaims.json":"aiida_fhiaims.parsers.aims_json:AimsJSONParser","fhiaims.out":"aiida_fhiaims.parsers.aims_out:AimsOutParser"}},commits_count:0,development_status:"alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:2}],pip_install_cmd:"pip install git+https://gitlab.com/FHI-aims-club/utilities/aiida-fhiaims",is_installable:"True"},"aiida-firecrest":{code_home:"https://github.com/aiidateam/aiida-firecrest",entry_point_prefix:"firecrest",pip_url:"aiida-firecrest",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-firecrest/main/pyproject.toml",name:"aiida-firecrest",package_name:"aiida_firecrest",hosted_on:"github.com",metadata:{release_date:"2022-01-14",description:"AiiDA Transport/Scheduler plugins for interfacing with FirecREST.",author_email:"Chris Sewell <chrisj_sewell@hotmail.com>",classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.1.0a1"},aiida_version:"<2",entry_points:{"aiida.schedulers":{firecrest:"aiida_firecrest.scheduler:FirecrestScheduler"},"aiida.transports":{firecrest:"aiida_firecrest.transport:FirecrestTransport"},console_scripts:{"aiida-firecrest-cli":"aiida_firecrest.cli:main"}},commits_count:37,development_status:"alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-firecrest<pre>Collecting aiida-firecrest
  Downloading aiida_firecrest-0.1.0a1-py3-none-any.whl.metadata (4.2 kB)
INFO: pip is looking at multiple versions of aiida-firecrest to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-firecrest==0.1.0a1 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-firecrest 0.1.0a1 depends on aiida-core<2
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:[],summaryinfo:[{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Schedulers, Transports)",count:2}],pip_install_cmd:"pip install --pre aiida-firecrest",is_installable:"False"},"aiida-fireworks-scheduler":{code_home:"https://github.com/zhubonan/aiida-fireworks-scheduler",development_status:"beta",documentation_url:"https://aiida-fireworks-scheduler.readthedocs.io",entry_point_prefix:"fireworks_scheduler",pip_url:"git+https://github.com/zhubonan/aiida-fireworks-scheduler",name:"aiida-fireworks-scheduler",package_name:"aiida_fireworks_scheduler",hosted_on:"github.com",metadata:{author:"Bonan Zhu",author_email:"zhubonan@outlook.com",version:"1.2.0",description:"AiiDA plugin to allow using `fireworks` as the execution engine for `CalcJob`.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:null,entry_points:{"aiida.schedulers":{fireworks:"aiida_fireworks_scheduler.fwscheduler:FwScheduler","fireworks_scheduler.default":"aiida_fireworks_scheduler.fwscheduler:FwScheduler","fireworks_scheduler.keepenv":"aiida_fireworks_scheduler.fwscheduler:FwSchedulerKeepEnv"},"aiida.cmdline.data":{"fireworks-scheduler":"aiida_fireworks_scheduler.cmdline:fw_cli"},console_scripts:{arlaunch:"aiida_fireworks_scheduler.scripts.arlaunch_run:arlaunch"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'fireworks' does not start with prefix 'fireworks_scheduler.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'fireworks-scheduler' does not start with prefix 'fireworks_scheduler.'"],summaryinfo:[{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Schedulers)",count:4}],pip_install_cmd:"pip install git+https://github.com/zhubonan/aiida-fireworks-scheduler",is_installable:"True"},"aiida-fleur":{code_home:"https://github.com/JuDFTteam/aiida-fleur/tree/develop",development_status:"stable",documentation_url:"https://aiida-fleur.readthedocs.io/",entry_point_prefix:"fleur",pip_url:"aiida-fleur",plugin_info:"https://raw.github.com/JuDFTteam/aiida-fleur/develop/setup.json",name:"aiida-fleur",package_name:"aiida_fleur",hosted_on:"github.com",metadata:{release_date:"2023-05-03",description:"AiiDA Plugin for running the FLEUR code and its input generator. Also includes high-level workchains and utilities",author_email:"The JuDFT team <j.broeder@fz-juelich.de>",classifiers:["Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.0.0"},aiida_version:">=2.0.1,<3.0.0",entry_points:{"aiida.calculations":{"fleur.fleur":{description:["A CalcJob class that represents FLEUR DFT calculation.","    For more information about the FLEUR-code family go to http://www.flapw.de/"],spec:{inputs:[{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:"Use a FleurinpData node that specifies the input parametersusually copy from the parent calculation, basically makesthe inp.xml file visible in the db and makes sure it has the files needed."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote or local repository folder as parent folder (also for restarts and similar). It should contain all the needed files for a Fleur calc, only edited files should be uploaded from the repository."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"error_params",required:!1,valid_types:"Dict",info:""},{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_params_complex",required:!1,valid_types:"Dict",info:""},{name:"relax_parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"No retrieved folder found."},{status:301,message:"One of the output files can not be opened."},{status:302,message:"FLEUR calculation failed for unknown reason."},{status:303,message:"XML output file was not found."},{status:304,message:"Parsing of XML output file failed."},{status:305,message:"Parsing of relax XML output file failed."},{status:310,message:"FLEUR calculation failed due to lack of memory."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:312,message:"FLEUR calculation failed due to MT overlap."},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:314,message:"Problem with cdn is suspected. Consider removing cdn"},{status:315,message:"The LDA+U density matrix contains invalid elements."},{status:316,message:"Calculation failed due to time limits."},{status:318,message:"Calculation failed due to missing dependency ({name}) for given calculation."}]},class:"aiida_fleur.calculation.fleur:FleurCalculation"},"fleur.inpgen":{description:["JobCalculationClass for the inpgen, which is a preprocessor for a FLEUR calculation.","    For more information about produced files and the FLEUR-code family, go to http://www.flapw.de/."],spec:{inputs:[{name:"structure",required:!0,valid_types:"StructureData",info:"Choose the input structure to use"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Use a node that specifies the input parameters for the namelists"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"fleurinp",required:!0,valid_types:"FleurinpData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"No retrieved folder found."},{status:301,message:"One of the output files can not be opened."},{status:306,message:"XML input file was not found."},{status:307,message:"Some required files were not retrieved."},{status:308,message:"During parsing: FleurinpData could not be initialized, see log. "},{status:309,message:"During parsing: FleurinpData failed validation."},{status:310,message:"The profile {profile} is not known to the used inpgen code"}]},class:"aiida_fleur.calculation.fleurinputgen:FleurinputgenCalculation"}},"aiida.data":{"fleur.fleurinp":"aiida_fleur.data.fleurinp:FleurinpData"},"aiida.parsers":{"fleur.fleurinpgenparser":"aiida_fleur.parsers.fleur_inputgen:Fleur_inputgenParser","fleur.fleurparser":"aiida_fleur.parsers.fleur:FleurParser"},"aiida.workflows":{"fleur.banddos":{description:["This workflow calculated a bandstructure from a Fleur calculation","","    :Params: a Fleurcalculation node","    :returns: Success, last result node, list with convergence behavior"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"banddos_calc",required:!0,valid_types:"",info:""},{name:"output_banddos_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_banddos_wc_bands",required:!1,valid_types:"BandsData",info:""},{name:"output_banddos_wc_dos",required:!1,valid_types:"XyData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"SCF calculation failed."},{status:335,message:"Found no SCF calculation remote repository."}]},class:"aiida_fleur.workflows.banddos:FleurBandDosWorkChain"},"fleur.base":{description:["Workchain to run a FLEUR calculation with automated error handling and restarts"],spec:{inputs:[{name:"options",required:!0,valid_types:"Dict",info:"Optional parameters to set up computational details."},{name:"add_comp_para",required:!1,valid_types:"Dict",info:"Gives additional control over computational parametersonly_even_MPI: set to true if you want to suppress odd number of MPI processes in parallelisation.This might speedup a calculation for machines having even number of sockets per node.max_queue_nodes: maximal number of nodes allowed on the remote machine. Used only to automatically solve some FLEUR failures.max_queue_wallclock_sec: maximal wallclock time allowed on the remote machine. Used only to automatically solve some FLEUR failures."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"description",required:!1,valid_types:"str, NoneType",info:"Calculation description."},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:"Use a FleurinpData node that specifies the input parametersusually copy from the parent calculation, basically makesthe inp.xml file visible in the db and makes sure it has the files needed."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"label",required:!1,valid_types:"str, NoneType",info:"Calculation label."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a remote or local repository folder as parent folder (also for restarts and similar). It should contain all the needed files for a Fleur calc, only edited files should be uploaded from the repository."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"This parameter data node is used to specify for some advanced features how the plugin behaves. You can add filesthe retrieve list, or add command line switches, for all available features here check the documentation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"error_params",required:!1,valid_types:"Dict",info:""},{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"output_params_complex",required:!1,valid_types:"Dict",info:""},{name:"relax_parameters",required:!1,valid_types:"Dict",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:388,message:"Computational resources are not optimal."},{status:389,message:"Computational resources are not optimal."},{status:390,message:"Computational resources are not optimal."},{status:399,message:"FleurCalculation failed and FleurBaseWorkChain has no strategy to resolve this"},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_fleur.workflows.base_fleur:FleurBaseWorkChain"},"fleur.base_relax":{description:["Workchain to run Relax WorkChain with automated error handling and restarts"],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"description",required:!1,valid_types:"str, NoneType",info:"Calculation description."},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"label",required:!1,valid_types:"str, NoneType",info:"Calculation label."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"last_scf",required:!0,valid_types:"",info:""},{name:"optimized_structure",required:!0,valid_types:"StructureData",info:""},{name:"output_relax_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:399,message:"FleurRelaxWorkChain failed and FleurBaseRelaxWorkChain has no strategy to resolve this"},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_fleur.workflows.base_relax:FleurBaseRelaxWorkChain"},"fleur.cfcoeff":{description:["Workflow for calculating rare-earth crystal field coefficients"],spec:{inputs:[{name:"metadata",required:!1,valid_types:"",info:""},{name:"orbcontrol",required:!1,valid_types:"Data",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"scf_rare_earth_analogue",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_cfcoeff_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_cfcoeff_wc_charge_densities",required:!1,valid_types:"XyData",info:""},{name:"output_cfcoeff_wc_potentials",required:!1,valid_types:"XyData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:345,message:"Convergence scf workflow failed."},{status:451,message:"Convergence orbcontrol workflow failed."},{status:452,message:"CF calculation failed."}]},class:"aiida_fleur.workflows.cfcoeff:FleurCFCoeffWorkChain"},"fleur.corehole":{description:["Turn key solution for a corehole calculation with the FLEUR code.","    Has different protocols for different core-hole types (valence, charge).","","    Calculates supercells. Extracts binding energies","    for certain corelevels from the total energy differences a the calculation with","    corehole and without.","","    Documentation:","    See help for details.","","    Two paths are possible:","","    (1) Start from a structure -> workchains run inpgen first (recommended)","    (2) Start from a Fleurinp data object","","    Also it is recommended to provide a calc parameter node for the structure","","    :param wf_parameters: Dict node, specify, resources and what should be calculated","    :param structure: structureData node, crystal structure","    :param calc_parameters: Dict node, inpgen parameters for the crystal structure","    :param fleurinp:  fleurinpData node,","    :param inpgen: Code node,","    :param fleur: Code node,","","    :return: output_corehole_wc_para Dict node,  successful=True if no error","","    :uses workchains: fleur_scf_wc, fleur_relax_wc","    :uses calcfunctions: supercell, create_corehole_result_node, prepare_struc_corehole_wf"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"inpgen",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_corehole_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:1,message:"The input resources are invalid."},{status:2,message:"The process failed with legacy failure mode."},{status:2,message:"Input resources are missing."},{status:3,message:"The code provided is invalid, or not of the right kind."},{status:4,message:"Inpgen calculation FAILED, check output"},{status:5,message:"Changing of the FLEURINP data went wrong, check log."},{status:6,message:"The FLEUR input file for the calculation did not validate."},{status:7,message:"At least one FLEUR calculation FAILED, check the output and log."},{status:8,message:"At least one FLEUR calculation did not/could not reach thedesired convergece Criteria, with the current parameters."},{status:9,message:"Something went wrong in the determiation what coreholes to calculate, probably the input format was not correct. Check log."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.corehole:FleurCoreholeWorkChain"},"fleur.create_magnetic":{description:["This workflow creates relaxed magnetic film on a substrate."],spec:{inputs:[{name:"distance_suggestion",required:!1,valid_types:"Dict, NoneType",info:""},{name:"eos",required:!1,valid_types:"Data",info:""},{name:"eos_output",required:!1,valid_types:"Dict, NoneType",info:""},{name:"interlayer_dist",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"optimized_structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"relax",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"magnetic_structure",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:380,message:"Specified substrate has to be bcc or fcc."},{status:382,message:"Relaxation calculation failed."},{status:383,message:"EOS WorkChain failed."}]},class:"aiida_fleur.workflows.create_magnetic_film:FleurCreateMagneticWorkChain"},"fleur.dmi":{description:["This workflow calculates DMI energy dispersion of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_dmi_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.dmi:FleurDMIWorkChain"},"fleur.dos":{description:["DEPRECATED: Use FleurBandDosWorkChain instead (entrypoint fleur.banddos)","    This workflow calculated a DOS from a Fleur calculation","","    :Params: a Fleurcalculation node","    :returns: Success, last result node, list with convergence behavior","","    wf_parameters: {  'tria', 'nkpts', 'sigma', 'emin', 'emax'}","    defaults : tria = True, nkpts = 800, sigma=0.005, emin= -0.3, emax = 0.8"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.dos:fleur_dos_wc"},"fleur.eos":{description:["This workflow calculates the equation of states of a structure.","    Calculates several unit cells with different volumes.","    A Birch_Murnaghan  equation of states fit determines the Bulk modulus and the","    groundstate volume of the cell.","","    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict","    :params structure: StructureData node, 'structure' crystal structure","    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen","    :params inpgen: Code node,","    :params fleur: Code node,","","","    :return output_eos_wc_para: Dict node, contains relevant output information.","                                about general succeed, fit results and so on."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_eos_wc_para",required:!0,valid_types:"Dict",info:""},{name:"output_eos_wc_structure",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:400,message:"At least one of the SCF sub processes did not finish successfully."}]},class:"aiida_fleur.workflows.eos:FleurEosWorkChain"},"fleur.init_cls":{description:["Turn key solution for the calculation of core level shift"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_initial_cls_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_fleur.workflows.initial_cls:FleurInitialCLSWorkChain"},"fleur.mae":{description:["This workflow calculates the Magnetic Anisotropy Energy of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_mae_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.mae:FleurMaeWorkChain"},"fleur.mae_conv":{description:["This workflow calculates the Magnetic Anisotropy Energy of a structure."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_mae_conv_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:343,message:"Convergence MAE calculation failed for all SQAs."},{status:344,message:"Convergence MAE calculation failed for some SQAs."}]},class:"aiida_fleur.workflows.mae_conv:FleurMaeConvWorkChain"},"fleur.orbcontrol":{description:["Workchain for determining the groundstate density matrix in an DFT+U","    calculation. This is done in 2 or 3 steps:","","        1. Converge the system without DFT+U (a converged calculation can be","           provided to skip this step)","        2. A fixed number of iterations is run with fixed density matrices","           either generated as all distinct permutations for the given occupations","           or the explicitly given configurations","        3. The system and density matrix is relaxed","","    :param wf_parameters: (Dict), Workchain Specifications","    :param scf_no_ldau: (Dict), Inputs to a FleurScfWorkChain providing the initial system","                                either converged or staring from a structure","    :param scf_with_ldau: (Dict), Inputs to a FleurScfWorkChain. Only the wf_parameters are valid","    :param fleurinp: (FleurinpData) FleurinpData to start from if no SCF should be done","    :param remote: (RemoteData) RemoteData to start from if no SCF should be done","    :param structure: (StructureData) Structure to start from if no SCF should be done","    :param calc_parameters: (Dict), Inpgen Parameters","    :param settings: (Dict), additional settings for e.g retrieving files","    :param options: (Dict), Options for the submission of the jobs","    :param inpgen: (Code)","    :param fleur: (Code)"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fixed_remotes",required:!1,valid_types:"RemoteData",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"options_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"relaxed_remotes",required:!1,valid_types:"RemoteData",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf_no_ldau",required:!1,valid_types:"Data",info:"Inputs for SCF Workchain before adding LDA+U"},{name:"scf_with_ldau",required:!1,valid_types:"Data",info:"Inputs for SCF Workchain after the LDA+U matrix was fixed"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"groundstate_scf",required:!0,valid_types:"",info:""},{name:"output_orbcontrol_wc_para",required:!0,valid_types:"Dict",info:""},{name:"groundstate_denmat",required:!1,valid_types:"SinglefileData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Input codes do not correspond to fleur or inpgen respectively."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:342,message:"Convergence LDA+U calculation failed for some Initial configurations."},{status:343,message:"Convergence LDA+U calculation failed for all Initial configurations."},{status:360,message:"Inpgen calculation failed."},{status:450,message:"Convergence workflow without LDA+U failed."}]},class:"aiida_fleur.workflows.orbcontrol:FleurOrbControlWorkChain"},"fleur.relax":{description:["This workflow performs structure optimization."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"last_scf",required:!0,valid_types:"",info:""},{name:"optimized_structure",required:!0,valid_types:"StructureData",info:""},{name:"output_relax_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"If you want to run a final scf inpgen has to be there."},{status:311,message:"FLEUR calculation failed because an atom spilled to thevacuum during relaxation"},{status:313,message:"Overlapping MT-spheres during relaxation."},{status:350,message:"Optimization cycle did not lead to convergence of forces."},{status:351,message:"SCF Workchains failed for some reason."},{status:352,message:"Found no relaxed structure info in the output of SCF"},{status:353,message:"Found no SCF output"},{status:354,message:"Force is small, switch to BFGS"}]},class:"aiida_fleur.workflows.relax:FleurRelaxWorkChain"},"fleur.relax_torque":{description:["This workflow performs spin structure optimization."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"final_scf",required:!1,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_relax_torque_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"If you want to run a final scf inpgen has to be there."},{status:350,message:"Optimization cycle did not lead to convergence."},{status:351,message:"An SCF Workchain failed for some reason."}]},class:"aiida_fleur.workflows.relax_torque:FleurRelaxTorqueWorkChain"},"fleur.scf":{description:["Workchain for converging a FLEUR calculation (SCF).","","    It converges the charge density, total energy or the largest force.","    Two paths are possible:","","    (1) Start from a structure and run the inpgen first optional with calc_parameters","    (2) Start from a Fleur calculation, with optional remoteData","","    :param wf_parameters: (Dict), Workchain Specifications","    :param structure: (StructureData), Crystal structure","    :param calc_parameters: (Dict), Inpgen Parameters","    :param fleurinp: (FleurinpData), to start with a Fleur calculation","    :param remote_data: (RemoteData), from a Fleur calculation","    :param inpgen: (Code)","    :param fleur: (Code)","","    :return: output_scf_wc_para (Dict), Information of workflow results","        like Success, last result node, list with convergence behavior"],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"inpgen",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings_inpgen",required:!1,valid_types:"Dict, NoneType",info:""},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"fleurinp",required:!0,valid_types:"FleurinpData",info:""},{name:"last_calc",required:!0,valid_types:"",info:""},{name:"output_scf_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Input codes do not correspond to fleur or inpgen respectively."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:360,message:"Inpgen calculation failed."},{status:361,message:"Fleur calculation failed."},{status:362,message:"SCF cycle did not lead to convergence."}]},class:"aiida_fleur.workflows.scf:FleurScfWorkChain"},"fleur.ssdisp":{description:["This workflow calculates spin spiral dispersion of a structure."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"fleurinp",required:!1,valid_types:"FleurinpData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"scf",required:!1,valid_types:"Data",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_ssdisp_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:231,message:"Invalid input configuration."},{status:233,message:"Invalid code node specified, check inpgen and fleur code nodes."},{status:235,message:"Input file modification failed."},{status:236,message:"Input file was corrupted after user's modifications."},{status:334,message:"Reference calculation failed."},{status:335,message:"Found no reference calculation remote repository."},{status:336,message:"Force theorem calculation failed."}]},class:"aiida_fleur.workflows.ssdisp:FleurSSDispWorkChain"},"fleur.ssdisp_conv":{description:["This workflow calculates the Spin Spiral Dispersion of a structure."],spec:{inputs:[{name:"scf",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_ssdisp_conv_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:230,message:"Invalid workchain parameters."},{status:340,message:"Convergence SSDisp calculation failed for all q-vectors."},{status:341,message:"Convergence SSDisp calculation failed for some q-vectors."}]},class:"aiida_fleur.workflows.ssdisp_conv:FleurSSDispConvWorkChain"},"fleur.strain":{description:["This workflow calculates the deformation potential a structure = -BdEg/dP = d(Eg)/d(ln(V)).","    Calculates several unit cells with different volumes.","    A Birch_Murnaghan  equation of states fit determines the Bulk modulus(B) and the","    ground-state volume of the cell.","","    :params wf_parameters: Dict node, optional 'wf_parameters', protocol specifying parameter dict","    :params structure: StructureData node, 'structure' crystal structure","    :params calc_parameters: Dict node, optional 'calc_parameters' parameters for inpgen","    :params inpgen: Code node,","    :params fleur: Code node,","","","    :return output_strain_wc_para: Dict node, contains relevant output information.","                                about general succeed, fit results and so on."],spec:{inputs:[{name:"fleur",required:!0,valid_types:"Code",info:""},{name:"inpgen",required:!0,valid_types:"Code",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"output_strain_wc_para",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:331,message:"Invalid code node specified, check inpgen and fleur code nodes."}]},class:"aiida_fleur.workflows.strain:FleurStrainWorkChain"}},console_scripts:{"aiida-fleur":"aiida_fleur.cmdline:cmd_root"}},commits_count:7,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:19},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-fleur",is_installable:"True"},"aiida-flexpart":{code_home:"https://github.com/aiidaplugins/aiida-flexpart",entry_point_prefix:"flexpart",pip_url:"git+https://github.com/aiidaplugins/aiida-flexpart",name:"aiida-flexpart",package_name:"aiida_flexpart",hosted_on:"github.com",metadata:{version:"0.2.1",description:"AiiDA plugin for the FLEXPART code (simulation of atmospheric transport processes).",classifiers:["Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA","Development Status :: 3 - Alpha","Topic :: Scientific/Engineering :: Atmospheric Science","Programming Language :: Python :: 3"],author:""},aiida_version:">=1.6.5,<3.0.0",entry_points:{"aiida.data":{"netcdf.data":"aiida_flexpart.data.nc_data:NetCdfData"},"aiida.calculations":{"flexpart.cosmo":{description:["AiiDA calculation plugin wrapping the FLEXPART executable."],spec:{inputs:[{name:"meteo_path",required:!0,valid_types:"List",info:"Path to the folder containing the meteorological input data."},{name:"model_settings",required:!0,valid_types:"",info:""},{name:"outgrid",required:!0,valid_types:"Dict",info:"Input file for the Lagrangian particle dispersion model FLEXPART."},{name:"species",required:!0,valid_types:"RemoteData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"land_use",required:!1,valid_types:"RemoteData",info:"#TODO"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"outgrid_nest",required:!1,valid_types:"Dict, NoneType",info:"Input file for the Lagrangian particle dispersion model FLEXPART. Nested output grid."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_flexpart.calculations.flexpart_cosmo:FlexpartCosmoCalculation"},"flexpart.ifs":{description:["AiiDA calculation plugin wrapping the FLEXPART IFS executable."],spec:{inputs:[{name:"meteo_path",required:!0,valid_types:"List",info:"Path to the folder containing the meteorological input data."},{name:"model_settings",required:!0,valid_types:"",info:""},{name:"outgrid",required:!0,valid_types:"Dict",info:"Input file for the Lagrangian particle dispersion model FLEXPART."},{name:"species",required:!0,valid_types:"RemoteData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"land_use",required:!1,valid_types:"RemoteData",info:"#TODO"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"outgrid_nest",required:!1,valid_types:"Dict, NoneType",info:"Input file for the Lagrangian particle dispersion model FLEXPART. Nested output grid."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Working directory of a previously ran calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_flexpart.calculations.flexpart_ifs:FlexpartIfsCalculation"},"flexpart.post":{description:["AiiDA calculation plugin for post processing."],spec:{inputs:[{name:"input_dir",required:!0,valid_types:"RemoteData",info:"main FLEXPART output dir"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"input_offline_dir",required:!1,valid_types:"RemoteData, NoneType",info:"offline-nested FLEXPART output dir"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_flexpart.calculations.flexpart_post:PostProcessingCalculation"},"collect.sensitivities":{description:["AiiDA calculation plugin for the collection of sensitivities.","       The main input are the stashed Netcdf files for the previous FLEXPART","       calculations."],spec:{inputs:[{name:"model",required:!0,valid_types:"str",info:""},{name:"outgrid",required:!0,valid_types:"str",info:""},{name:"outgrid_n",required:!0,valid_types:"bool",info:""},{name:"remote",required:!0,valid_types:"RemoteStashFolderData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"name",required:!1,valid_types:"str, NoneType",info:""},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_flexpart.calculations.collect_sens:CollectSensitivitiesCalculation"},"inversion.calc":{description:["No description available"],spec:{inputs:[{name:"chunk",required:!0,valid_types:"Str",info:"Options are 'year' and 'month'. Default is 'year'"},{name:"chunk_w",required:!0,valid_types:"Str",info:`Width of the individual inversion chunk. These can be wider than
			                 the chunking itself to allow for running average fluxes.,
                             Possible values are 'year' and '3year' for 'chunk.by=year' and,
                             'month' and '3month' for 'chunk.by=month'. Default is 'year'
                         `},{name:"end_date",required:!0,valid_types:"Str",info:"End date (yyyy-mm-dd)"},{name:"inv_params",required:!0,valid_types:"Dict",info:"File containing inversion settings, either as R source file or yaml"},{name:"observations",required:!0,valid_types:"NetCdfData",info:"Dictionary of observations as NetCDF objects"},{name:"remotes",required:!0,valid_types:"NetCdfData",info:"Dictionary of sensitivities as NetCDF objects"},{name:"start_date",required:!0,valid_types:"Str",info:"Start date (yyyy-mm-dd)"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_flexpart.calculations.inversion:Inversion"}},"aiida.parsers":{"flexpart.cosmo":"aiida_flexpart.parsers.flexpart_cosmo:FlexpartCosmoParser","flexpart.ifs":"aiida_flexpart.parsers.flexpart_ifs:FlexpartIfsParser","flexpart.post":"aiida_flexpart.parsers.flexpart_post:FlexpartPostParser","collect.sensitivities":"aiida_flexpart.parsers.collect_sens:CollectSensParser","inversion.calc":"aiida_flexpart.parsers.inversion:InvesrionParser"},"aiida.workflows":{"flexpart.multi_dates":"aiida_flexpart.workflows.multi_dates_workflow:FlexpartMultipleDatesWorkflow","flexpart.multi_workflow":"aiida_flexpart.workflows.parent_workflow:ParentWorkflow","inspect.workflow":"aiida_flexpart.workflows.inspect:InspectWorkflow","inversion.workflow":"aiida_flexpart.workflows.inversion_workflow:InversionWorkflow"}},commits_count:23,development_status:"alpha",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'netcdf.data' does not start with prefix 'flexpart.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'collect.sensitivities' does not start with prefix 'flexpart.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'inversion.calc' does not start with prefix 'flexpart.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'collect.sensitivities' does not start with prefix 'flexpart.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'inversion.calc' does not start with prefix 'flexpart.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'inspect.workflow' does not start with prefix 'flexpart.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'inversion.workflow' does not start with prefix 'flexpart.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:5},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:4}],pip_install_cmd:"pip install git+https://github.com/aiidaplugins/aiida-flexpart",is_installable:"True"},"aiida-gaussian":{code_home:"https://github.com/nanotech-empa/aiida-gaussian",entry_point_prefix:"gaussian",pip_url:"aiida-gaussian",plugin_info:"https://raw.githubusercontent.com/nanotech-empa/aiida-gaussian/master/pyproject.toml",name:"aiida-gaussian",package_name:"aiida_gaussian",hosted_on:"github.com",metadata:{release_date:"2024-09-25",description:"AiiDA plugin for the Gaussian quantum chemistry software.",author:"Kristjan Eimre, Pezhman Zarabadi-Poor, Aliaksandr Yakutovich",license:"MIT",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python :: 3","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Software Development :: Libraries :: Python Modules"],version:"2.2.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{gaussian:{description:["AiiDA calculation plugin wrapping Gaussian","","    Template:","","    parameters = Dict(dict={","        'link0_parameters': {","            '%chk':'aiida.chk',","            '%mem': '1024MB',","            '%nprocshared': '2',","        },","        'functional':'PBE1PBE',","        'basis_set':'6-31g',","        'charge': 0,","        'multiplicity': 1,","        'route_parameters': {","            'scf': {'cdiis': None}","            'nosymm': None,","            'opt': 'tight',","        },","    })"],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"the folder of a completed gaussian calculation"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"additional input parameters"},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"Input structure; will be converted to pymatgen object"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The result parameters of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"energy_ev",required:!1,valid_types:"Float",info:"Final energy in electronvolts"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Final optimized structure, if available"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the output file."},{status:211,message:"The retrieved output log could not be read."},{status:220,message:"The output file could not be parsed."},{status:301,message:"The SCF did not converge and the calculation was terminated."},{status:302,message:"The calculation was terminated due to a logic error in ASyTop."},{status:303,message:"The calculation was terminated due to an inaccurate quadrature in CalDSu."},{status:390,message:"The calculation was terminated due to an error."},{status:391,message:"The log did not contain 'Normal termination' (probably out of time)."}]},class:"aiida_gaussian.calculations:GaussianCalculation"},"gaussian.cubegen":{description:["Plugin to run the cubegen utility","","    Example:","","    parameters = {",'        "homo-5": {','            "kind": "AMO=16",','            "npts": -2,',"        },",'        "spin": {','            "kind": "Spin=SCF",','            "npts": 0,',"        },","    }","    Each key corresponds to one produced cube.","    key specifies the name of the output node","",'    In case of "npts": -1, you have to use the stencil file input:',"","        IFlag X0 Y0 Z0  # Output unit number and initial point.","        N1 X1 Y1 Z1     # Number of points and step-size in the X-direction.","        N2 X2 Y2 Z2     # Number of points and step-size in the Y-direction.","        N3 X3 Y3 Z3     # Number of points and step-size in the Z-direction.","","    See more details at https://gaussian.com/cubegen/"],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"dictionary containing entries for cubes to be printed."},{name:"parent_calc_folder",required:!0,valid_types:"RemoteData",info:"the folder of a containing the .fchk"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"gauss_memdef",required:!1,valid_types:"Int, NoneType",info:"Set the GAUSS_MEMDEF env variable to set the max memory in MB."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieve_cubes",required:!1,valid_types:"Bool, NoneType",info:"should the cubes be retrieved?"},{name:"stencil",required:!1,valid_types:"SinglefileData, NoneType",info:"In case of npts=-1, use this cube specification."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"The retrieved folder could not be accessed."},{status:301,message:"The retrieved temporary folder could not be accessed."}]},class:"aiida_gaussian.calculations:CubegenCalculation"},"gaussian.formchk":{description:["Very simple plugin to run the formchk utility"],spec:{inputs:[{name:"parent_calc_folder",required:!0,valid_types:"RemoteData",info:"the folder of a containing the .chk"},{name:"chk_name",required:!1,valid_types:"Str, NoneType",info:"name of the checkpoint file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieve_fchk",required:!1,valid_types:"Bool, NoneType",info:"retrieve the fchk file"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_gaussian.calculations:FormchkCalculation"}},"aiida.parsers":{"gaussian.advanced":"aiida_gaussian.parsers.gaussian:GaussianAdvancedParser","gaussian.base":"aiida_gaussian.parsers.gaussian:GaussianBaseParser","gaussian.cubegen_base":"aiida_gaussian.parsers.cubegen:CubegenBaseParser"},"aiida.workflows":{"gaussian.base":{description:["Workchain to run a Gaussian calculation with automated error handling and restarts."],spec:{inputs:[{name:"gaussian",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:350,message:"The calculation failed with an unrecoverable SCF convergence error."},{status:399,message:"The calculation failed with an unrecoverable error."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_gaussian.workchains:GaussianBaseWorkChain"},"gaussian.cubes":{description:["No description available"],spec:{inputs:[{name:"cubegen_code",required:!0,valid_types:"Code",info:""},{name:"formchk_code",required:!0,valid_types:"Code",info:""},{name:"gaussian_calc_folder",required:!0,valid_types:"RemoteData",info:"The gaussian calculation output folder."},{name:"gaussian_output_params",required:!0,valid_types:"Dict",info:"The gaussian calculation output parameters."},{name:"cubegen_parser_name",required:!1,valid_types:"str",info:""},{name:"cubegen_parser_params",required:!1,valid_types:"Dict, NoneType",info:"Additional parameters to cubegen parser."},{name:"dx",required:!1,valid_types:"Float, NoneType",info:"Cube file spacing [ang]."},{name:"edge_space",required:!1,valid_types:"Float, NoneType",info:"Extra cube space in addition to molecule bounding box [ang]."},{name:"generate_density",required:!1,valid_types:"Bool, NoneType",info:"Generate density cube."},{name:"generate_spin_density",required:!1,valid_types:"Bool, NoneType",info:"Generate spin density cube (if applicable)."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"natural_orbitals",required:!1,valid_types:"Bool, NoneType",info:"The cube files are natural orbitals."},{name:"orbital_index_ref",required:!1,valid_types:"Str, NoneType",info:"Reference index, possible choices: 'half_num_el', 'abs'."},{name:"orbital_indexes",required:!1,valid_types:"List, NoneType",info:"Indexes of the orbital cubes to generate."},{name:"retrieve_cubes",required:!1,valid_types:"Bool, NoneType",info:"should the cubes be retrieved?"}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:302,message:"Input options are invalid."},{status:390,message:"One or more steps of the work chain failed."}]},class:"aiida_gaussian.workchains:GaussianCubesWorkChain"}}},commits_count:4,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"green",text:"Workflows",count:2}],pip_install_cmd:"pip install aiida-gaussian",is_installable:"True"},"aiida-gaussian-datatypes":{code_home:"https://github.com/dev-zero/aiida-gaussian-datatypes",documentation_url:"https://github.com/dev-zero/aiida-gaussian-datatypes/blob/master/README.md",entry_point_prefix:"gaussian",pip_url:"aiida-gaussian-datatypes",plugin_info:"https://raw.github.com/dev-zero/aiida-gaussian-datatypes/master/setup.json",name:"aiida-gaussian-datatypes",package_name:"aiida_gaussian_datatypes",hosted_on:"github.com",metadata:{release_date:"2022-07-22",description:"AiiDA data plugin to manage gaussian datatypes (basis sets and pseudopotentials) as first-class citizens",author:"Tiziano Müller",author_email:"tiziano.mueller@chem.uzh.ch",license:"MIT License",home_page:"https://github.com/dev-zero/aiida-gaussian-datatypes",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.5.1"},aiida_version:">=1.6.2",entry_points:{"aiida.cmdline.data":{"gaussian.basisset":"aiida_gaussian_datatypes.basisset.cli:cli","gaussian.pseudo":"aiida_gaussian_datatypes.pseudopotential.cli:cli"},"aiida.data":{"gaussian.basisset":"aiida_gaussian_datatypes.basisset.data:BasisSet","gaussian.pseudo":"aiida_gaussian_datatypes.pseudopotential.data:Pseudopotential"},"aiida.groups":{"gaussian.basisset":"aiida_gaussian_datatypes.groups:BasisSetGroup","gaussian.pseudo":"aiida_gaussian_datatypes.groups:PseudopotentialGroup"}},commits_count:0,development_status:"beta",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'gaussian' does not follow naming convention."],summaryinfo:[{colorclass:"red",text:"Data",count:2},{colorclass:"orange",text:"Other (Data commands, Groups)",count:4}],pip_install_cmd:"pip install aiida-gaussian-datatypes",is_installable:"True"},"aiida-gollum":{code_home:"https://github.com/garsua/aiida-gollum/",documentation_url:"https://aiida-gollum.readthedocs.io/",entry_point_prefix:"gollum",pip_url:"git+https://github.com/garsua/aiida-gollum",name:"aiida-gollum",package_name:"aiida_gollum",hosted_on:"github.com",metadata:{author:"Victor M. Garcia-Suarez",author_email:"vm.garcia@cinn.es",version:"0.12.0",description:"A plugin for Gollum functionality within AiiDA framework.",classifiers:["License :: OSI Approved :: MIT License","Framework :: AiiDA","Programming Language :: Python :: 2.7","Development Status :: 1 - Alpha"]},aiida_version:">=0.12.0",entry_points:{"aiida.calculations":{"gollum.gollum":"aiida_gollum.calculations.gollum:GollumCalculation"},"aiida.parsers":{"gollum.parser":"aiida_gollum.parsers.gollum:GollumParser"}},commits_count:0,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/garsua/aiida-gollum"},"aiida-graphql":{code_home:"https://github.com/dev-zero/aiida-graphql",entry_point_prefix:"graphql",pip_url:"aiida-graphql",name:"aiida-graphql",package_name:"aiida_graphql",hosted_on:"github.com",metadata:{release_date:"2019-10-28",description:"Strawberry-based GraphQL API Server for AiiDA",author:"Tiziano Müller",author_email:"tiziano.mueller@chem.uzh.ch",license:"MIT",home_page:"https://github.com/dev-zero/aiida-graphql",classifiers:["Development Status :: 3 - Alpha","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Software Development :: Libraries :: Python Modules"],version:"0.0.2"},aiida_version:">=1.0.0b6,<2.0.0",entry_points:{},commits_count:0,development_status:"alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-graphql<pre>Collecting aiida-graphql
  Downloading aiida_graphql-0.0.2-py3-none-any.whl.metadata (3.3 kB)
Collecting aiida<2.0.0,>=1.0.0b6 (from aiida-graphql)
  Downloading aiida-1.0.1.tar.gz (2.8 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting strawberry-graphql<0.17.0,>=0.16.7 (from aiida-graphql)
  Downloading strawberry_graphql-0.16.10-py3-none-any.whl.metadata (4.0 kB)
Requirement already satisfied: aiida-core in /opt/conda/lib/python3.10/site-packages (from aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.5.2)
Collecting click<8.0,>=7.0 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading click-7.1.2-py2.py3-none-any.whl.metadata (2.9 kB)
Collecting graphql-core<4.0.0,>=3.0.0a0 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading graphql_core-3.3.0a9-py3-none-any.whl.metadata (11 kB)
Collecting hupper<2.0,>=1.5 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading hupper-1.12.1-py3-none-any.whl.metadata (3.7 kB)
Requirement already satisfied: pygments<3.0,>=2.3 in /opt/conda/lib/python3.10/site-packages (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql) (2.18.0)
Collecting starlette==0.12.10 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading starlette-0.12.10.tar.gz (46 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 46.3/46.3 kB 4.8 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting uvicorn==0.10.0 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading uvicorn-0.10.0.tar.gz (26 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting h11==0.8.* (from uvicorn==0.10.0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading h11-0.8.1-py2.py3-none-any.whl.metadata (8.0 kB)
Collecting websockets==8.* (from uvicorn==0.10.0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading websockets-8.1.tar.gz (58 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 58.9/58.9 kB 15.5 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting httptools==0.0.13 (from uvicorn==0.10.0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading httptools-0.0.13.tar.gz (104 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 104.2/104.2 kB 26.3 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting uvloop==0.14.0rc2 (from uvicorn==0.10.0->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading uvloop-0.14.0rc2.tar.gz (2.0 MB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.0/2.0 MB 79.4 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: alembic~=1.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (1.13.1)
Requirement already satisfied: archive-path~=0.4.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.4.2)
Requirement already satisfied: aio-pika~=6.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (6.8.1)
Requirement already satisfied: circus~=0.18.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.18.0)
Requirement already satisfied: click-spinner~=0.1.8 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.1.10)
INFO: pip is looking at multiple versions of aiida-core to determine which version is compatible with other requirements. This could take a while.
Collecting strawberry-graphql<0.17.0,>=0.16.7 (from aiida-graphql)
  Downloading strawberry_graphql-0.16.9-py3-none-any.whl.metadata (4.0 kB)
Collecting uvicorn==0.9.1 (from strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading uvicorn-0.9.1.tar.gz (25 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting uvloop==0.* (from uvicorn==0.9.1->strawberry-graphql<0.17.0,>=0.16.7->aiida-graphql)
  Downloading uvloop-0.21.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
Collecting strawberry-graphql<0.17.0,>=0.16.7 (from aiida-graphql)
  Downloading strawberry_graphql-0.16.8-py3-none-any.whl.metadata (4.0 kB)
  Downloading strawberry_graphql-0.16.7-py3-none-any.whl.metadata (4.0 kB)
Collecting aiida<2.0.0,>=1.0.0b6 (from aiida-graphql)
  Downloading aiida-1.0.0.tar.gz (1.9 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida-1.0.0b6.tar.gz (2.6 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting aiida-graphql
  Downloading aiida_graphql-0.0.1-py3-none-any.whl.metadata (3.4 kB)
Requirement already satisfied: click~=8.1 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (8.1.7)
Requirement already satisfied: disk-objectstore~=1.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (1.1.0)
Requirement already satisfied: docstring-parser in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.16)
Requirement already satisfied: graphviz~=0.19 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.20.3)
Requirement already satisfied: ipython>=7 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (8.25.0)
Requirement already satisfied: jedi<0.19 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.18.2)
Requirement already satisfied: jinja2~=3.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (3.1.4)
Requirement already satisfied: kiwipy~=0.7.7 in /opt/conda/lib/python3.10/site-packages (from kiwipy[rmq]~=0.7.7->aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.7.8)
Requirement already satisfied: importlib-metadata~=6.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (6.11.0)
Requirement already satisfied: numpy~=1.21 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (1.26.4)
Requirement already satisfied: paramiko>=2.7.2,~=2.7 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.12.0)
Requirement already satisfied: plumpy~=0.21.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.21.10)
Requirement already satisfied: pgsu~=0.2.1 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.2.4)
Requirement already satisfied: psutil~=5.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (5.9.8)
Requirement already satisfied: psycopg2-binary~=2.8 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.9.9)
Requirement already satisfied: pydantic~=2.4 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.7.3)
Requirement already satisfied: pytz~=2021.1 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2021.3)
Requirement already satisfied: pyyaml~=6.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (6.0.1)
Requirement already satisfied: requests~=2.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.32.3)
Requirement already satisfied: sqlalchemy~=2.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (2.0.30)
Requirement already satisfied: tabulate~=0.8.5 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.8.10)
Requirement already satisfied: tqdm~=4.45 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (4.66.4)
Requirement already satisfied: upf_to_json~=0.9.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (0.9.5)
Requirement already satisfied: wrapt~=1.11 in /opt/conda/lib/python3.10/site-packages (from aiida-core->aiida<2.0.0,>=1.0.0b6->aiida-graphql) (1.16.0)
INFO: pip is looking at multiple versions of strawberry-graphql to determine which version is compatible with other requirements. This could take a while.
Collecting strawberry-graphql<0.17.0,>=0.16.5 (from aiida-graphql)
  Downloading strawberry_graphql-0.16.6-py3-none-any.whl.metadata (4.0 kB)
  Downloading strawberry_graphql-0.16.5-py3-none-any.whl.metadata (4.0 kB)
Collecting aiida-core (from aiida<2.0.0,>=1.0.0b6->aiida-graphql)
  Downloading aiida_core-2.5.2-py3-none-any.whl.metadata (11 kB)
INFO: pip is still looking at multiple versions of aiida-core to determine which version is compatible with other requirements. This could take a while.
Collecting uvicorn==0.9.0 (from strawberry-graphql<0.17.0,>=0.16.5->aiida-graphql)
  Downloading uvicorn-0.9.0.tar.gz (24 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
ERROR: Cannot install aiida-graphql because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida 1.0.0 depends on aiida-core==1.0
    aiida 1.0.0b6 depends on aiida-core==1.0.0b6
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W020'>W020</a>: Unable to read wheel file from PyPI release: <pre>No entry_points.txt found in wheel</pre>","<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'"],summaryinfo:[],pip_install_cmd:"pip install aiida-graphql",is_installable:"False"},"aiida-gromacs":{code_home:"https://github.com/PSDI-UK/aiida-gromacs",documentation_url:"https://aiida-gromacs.readthedocs.io/",entry_point_prefix:"gromacs",pip_url:"aiida-gromacs",plugin_info:"https://raw.githubusercontent.com/PSDI-UK/aiida-gromacs/master/pyproject.toml",name:"aiida-gromacs",package_name:"aiida_gromacs",hosted_on:"github.com",metadata:{release_date:"2025-06-05",description:"A plugin for using GROMACS with AiiDA for molecular dymanics simulations.",author_email:"James Gebbie-Rayet <james.gebbie@stfc.ac.uk>, Jas Kalayan <jas.kalayan@stfc.ac.uk>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"2.1.0"},aiida_version:">=2.5.0,<3",entry_points:{"aiida.calculations":{"gromacs.editconf":{description:["AiiDA calculation plugin wrapping the 'gmx editconf' executable.","","    AiiDA plugin wrapper for adding a simulation box to structure file."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure file."},{name:"parameters",required:!0,valid_types:"EditconfParameters",info:"Command line parameters for gmx editconf."},{name:"bf_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Generic data file."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output file containing simulation box."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"mead_file",required:!1,valid_types:"SinglefileData",info:"Coordination file for MEAD"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.editconf:EditconfCalculation"},"gromacs.genericMD":{description:["AiiDA calculation plugin wrapping an executable with user defined","    input and output files."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"input_files",required:!1,valid_types:"SinglefileData",info:"Dictionary of input files."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"output_files",required:!1,valid_types:"List, NoneType",info:"List of output file names."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."},{status:301,message:"Specified output file not produced by command."}]},class:"aiida_gromacs.calculations.genericMD:GenericCalculation"},"gromacs.genion":{description:["AiiDA calculation plugin wrapping the 'gmx genion' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"GenionParameters",info:"Command line parameters for gmx genion"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology file."},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Input tpr file."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"instructions_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Instructions for generating index file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output gro file with ions added."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output topology with ions added."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.genion:GenionCalculation"},"gromacs.grompp":{description:["AiiDA calculation plugin wrapping the 'gmx grompp' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure"},{name:"mdpfile",required:!0,valid_types:"SinglefileData",info:"grompp run file."},{name:"parameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"e_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Energy file"},{name:"itp_dirs",required:!1,valid_types:"FolderData",info:"Forcefield descriptions"},{name:"itp_files",required:!1,valid_types:"SinglefileData",info:"Restraint files"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file"},{name:"qmi_file",required:!1,valid_types:"SinglefileData, NoneType",info:"QM input file"},{name:"r_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Structure file"},{name:"rb_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Structure file"},{name:"ref_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Full precision trajectory file"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"t_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Full precision trajectory file"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Output gro file ready for adding ions."},{name:"imd_file",required:!1,valid_types:"SinglefileData",info:"Coordinate file in Gromos-87 format"},{name:"po_file",required:!1,valid_types:"SinglefileData",info:"grompp input file with MD parameters"},{name:"pp_file",required:!1,valid_types:"SinglefileData",info:"Topology file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.grompp:GromppCalculation"},"gromacs.make_ndx":{description:["AiiDA calculation plugin wrapping the 'gmx make_ndx' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Make_ndxParameters",info:"Command line parameters for gmx make_ndx"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"grofile",required:!1,valid_types:"SinglefileData, NoneType",info:"Structure file: gro g96 pdb brk ent esp tpr"},{name:"instructions_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Instructions for generating index file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"n_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"n_file_out",required:!0,valid_types:"SinglefileData",info:"Index file"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.make_ndx:Make_ndxCalculation"},"gromacs.mdrun":{description:["AiiDA calculation plugin wrapping the 'gmx mdrun' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun"},{name:"tprfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"awh_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"cpi_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Checkpoint file"},{name:"ei_file",required:!1,valid_types:"SinglefileData, NoneType",info:"ED sampling input"},{name:"membed_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Generic data file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"mn_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Index file"},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"mp_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Topology file"},{name:"multidir_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Run directory"},{name:"plumed_dirs",required:!1,valid_types:"FolderData",info:"path to directory where inputs referenced in plumed input file are"},{name:"plumed_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Plumed file"},{name:"plumed_inpfiles",required:!1,valid_types:"SinglefileData",info:"inputs referenced in plumed input file"},{name:"plumed_outfiles",required:!1,valid_types:"List, NoneType",info:"List of plumed output file names."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"rerun_file",required:!1,valid_types:"SinglefileData, NoneType",info:"Trajectory: xtc trr cpt gro g96 pdb tng"},{name:"table_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"tableb_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"},{name:"tablep_file",required:!1,valid_types:"SinglefileData, NoneType",info:"xvgr/xmgr file"}],outputs:[{name:"enfile",required:!0,valid_types:"SinglefileData",info:"Output energy file."},{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output structure file."},{name:"logfile",required:!0,valid_types:"SinglefileData",info:"Output log file."},{name:"logfile_metadata",required:!0,valid_types:"Dict",info:"metadata extracted from gromacs logfile"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"trrfile",required:!0,valid_types:"SinglefileData",info:"Output trajectory."},{name:"cpo_file",required:!1,valid_types:"SinglefileData",info:"Checkpoint file."},{name:"dhdl_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"eo_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"field_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"if_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"mtx_file",required:!1,valid_types:"SinglefileData",info:"Hessian Matrix"},{name:"pf_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"px_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"ra_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"ro_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"rs_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"rt_file",required:!1,valid_types:"SinglefileData",info:"Log file"},{name:"swap_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"tpi_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"tpid_file",required:!1,valid_types:"SinglefileData",info:"xvgr/xmgr file"},{name:"x_file",required:!1,valid_types:"SinglefileData",info:"Compressed trajectory (tng format or portable xdr format)"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.mdrun:MdrunCalculation"},"gromacs.pdb2gmx":{description:["AiiDA calculation plugin wrapping the 'gmx pdb2gmx' executable.","","    AiiDA plugin wrapper for converting PDB files to GRO files."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Pdb2gmxParameters",info:"Command line parameters for gmx pdb2gmx"},{name:"pdbfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"itpfile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output forcefield compliant file."},{name:"n_file",required:!1,valid_types:"SinglefileData",info:"Output index file"},{name:"q_file",required:!1,valid_types:"SinglefileData",info:"Output Structure file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.pdb2gmx:Pdb2gmxCalculation"},"gromacs.solvate":{description:["AiiDA calculation plugin wrapping the 'gmx solvate' executable.","","    AiiDA plugin wrapper for solvating a molecular system."],spec:{inputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Input structure"},{name:"parameters",required:!0,valid_types:"SolvateParameters",info:"Command line parameters for gmx solvate."},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Input topology"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"command",required:!1,valid_types:"Str, NoneType",info:"The command used to execute the job."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"grofile",required:!0,valid_types:"SinglefileData",info:"Output solvated gro file."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stdout",required:!0,valid_types:"SinglefileData",info:"stdout"},{name:"topfile",required:!0,valid_types:"SinglefileData",info:"Output topology file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."}]},class:"aiida_gromacs.calculations.solvate:SolvateCalculation"}},"aiida.cmdline.data":{provenance:"aiida_gromacs.commands.provenance:provenance"},"aiida.data":{"gromacs.editconf":"aiida_gromacs.data.editconf:EditconfParameters","gromacs.genion":"aiida_gromacs.data.genion:GenionParameters","gromacs.grompp":"aiida_gromacs.data.grompp:GromppParameters","gromacs.make_ndx":"aiida_gromacs.data.make_ndx:Make_ndxParameters","gromacs.mdrun":"aiida_gromacs.data.mdrun:MdrunParameters","gromacs.pdb2gmx":"aiida_gromacs.data.pdb2gmx:Pdb2gmxParameters","gromacs.plumed_input":"aiida_gromacs.data.plumed_input:PlumedInputData","gromacs.solvate":"aiida_gromacs.data.solvate:SolvateParameters"},"aiida.parsers":{"gromacs.editconf":"aiida_gromacs.parsers.editconf:EditconfParser","gromacs.genericMD":"aiida_gromacs.parsers.genericMD:GenericParser","gromacs.genion":"aiida_gromacs.parsers.genion:GenionParser","gromacs.grompp":"aiida_gromacs.parsers.grompp:GromppParser","gromacs.make_ndx":"aiida_gromacs.parsers.make_ndx:Make_ndxParser","gromacs.mdrun":"aiida_gromacs.parsers.mdrun:MdrunParser","gromacs.pdb2gmx":"aiida_gromacs.parsers.pdb2gmx:Pdb2gmxParser","gromacs.solvate":"aiida_gromacs.parsers.solvate:SolvateParser"},"aiida.workflows":{"gromacs.setup":{description:["WorkChain for setting up a gromacs simulation automatically."],spec:{inputs:[{name:"editconfparameters",required:!0,valid_types:"EditconfParameters",info:"Command line parameters for gmx editconf"},{name:"genionparameters",required:!0,valid_types:"GenionParameters",info:"Command line parameters for gmx genion"},{name:"gromppionsparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp"},{name:"gromppminparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp minimisation run"},{name:"gromppnptparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp npt equilibration run"},{name:"gromppnvtparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp nvt equilibration run"},{name:"gromppprodparameters",required:!0,valid_types:"GromppParameters",info:"Command line parameters for gmx grompp production run"},{name:"ionsmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for adding ions."},{name:"local_code",required:!0,valid_types:"Code",info:""},{name:"mdrunparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun production run"},{name:"minimiseparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun minimisation run"},{name:"minmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for minimisation."},{name:"nptmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for NPT equilibration."},{name:"nptparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun npt equilibration run"},{name:"nvtmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for NVT equilibration."},{name:"nvtparameters",required:!0,valid_types:"MdrunParameters",info:"Command line parameters for gmx mdrun nvt equilibration run"},{name:"pdb2gmxparameters",required:!0,valid_types:"Pdb2gmxParameters",info:"Command line parameters for gmx pdb2gmx"},{name:"pdbfile",required:!0,valid_types:"SinglefileData",info:"Input structure."},{name:"prodmdp",required:!0,valid_types:"SinglefileData",info:"MD parameters for production run."},{name:"solvateparameters",required:!0,valid_types:"SolvateParameters",info:"Command line parameters for gmx solvate"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"remote_code",required:!1,valid_types:"Code, NoneType",info:""}],outputs:[{name:"result",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_gromacs.workflows.simsetup:SetupWorkChain"}},console_scripts:{createarchive:"aiida_gromacs.cli.createarchive:cli",genericMD:"aiida_gromacs.cli.genericMD:cli",gmx_editconf:"aiida_gromacs.cli.editconf:cli",gmx_genion:"aiida_gromacs.cli.genion:cli",gmx_grompp:"aiida_gromacs.cli.grompp:cli",gmx_make_ndx:"aiida_gromacs.cli.make_ndx:cli",gmx_mdrun:"aiida_gromacs.cli.mdrun:cli",gmx_pdb2gmx:"aiida_gromacs.cli.pdb2gmx:cli",gmx_solvate:"aiida_gromacs.cli.solvate:cli"}},commits_count:116,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'provenance' does not start with prefix 'gromacs.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:8},{colorclass:"brown",text:"Parsers",count:8},{colorclass:"red",text:"Data",count:8},{colorclass:"green",text:"Workflows",count:1},{colorclass:"purple",text:"Console scripts",count:9},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-gromacs",is_installable:"True"},"aiida-grouppathx":{code_home:"https://github.com/zhubonan/aiida-grouppathx",development_status:"beta",entry_point_prefix:"grouppathx",pip_url:"aiida-grouppathx",plugin_info:"https://raw.githubusercontent.com/zhubonan/aiida-grouppathx/master/pyproject.toml",name:"aiida-grouppathx",package_name:"aiida_grouppathx",hosted_on:"github.com",metadata:{release_date:"2025-05-28",description:"AiiDA plugin provides the GroupPathX class",author_email:"Bonan Zhu <zhubonan@outlook.com>",classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.6"},aiida_version:">=1.6.4,<3",entry_points:{"aiida.cmdline.data":{gpx:"aiida_grouppathx.cli:grouppathx_cli"}},commits_count:22,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (alpha) does not match development_status in metadata (beta)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'gpx' does not start with prefix 'grouppathx.'"],summaryinfo:[{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-grouppathx",is_installable:"True"},"aiida-gudhi":{code_home:"https://github.com/ltalirz/aiida-gudhi",development_status:"beta",entry_point_prefix:"gudhi",pip_url:"aiida-gudhi",plugin_info:"https://raw.github.com/ltalirz/aiida-gudhi/master/setup.json",name:"aiida-gudhi",package_name:"aiida_gudhi",hosted_on:"github.com",metadata:{release_date:"2018-06-21",description:"AiiDA plugin for the [GUDHI](http://gudhi.gforge.inria.fr/) library for topological data analysis.",author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-gudhi",classifiers:["Programming Language :: Python"],version:"0.1.0a3"},aiida_version:"*",entry_points:{"aiida.calculations":{"gudhi.rdm":"aiida_gudhi.calculations.rips:RipsDistanceMatrixCalculation"},"aiida.data":{"gudhi.rdm":"aiida_gudhi.data.rips:RipsDistanceMatrixParameters"},"aiida.parsers":{"gudhi.rdm":"aiida_gudhi.parsers.rips:RipsParser"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install --pre aiida-gudhi",is_installable:"True"},"aiida-gulp":{code_home:"https://github.com/aiidaplugins/aiida-gulp",development_status:"beta",documentation_url:"https://aiida-gulp.readthedocs.io",entry_point_prefix:"gulp",pip_url:"aiida-gulp",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-gulp/master/setup.json",name:"aiida-gulp",package_name:"aiida_gulp",hosted_on:"github.com",metadata:{release_date:"2019-10-30",description:"AiiDA plugin for running the GULP MD code",author:"Chris Sewell",author_email:"chrisj_sewell@hotmail.com",license:"MIT",home_page:"https://github.com/chrisjsewell/aiida-gulp",classifiers:["Framework :: AiiDA","Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.6","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"0.10.0b5"},aiida_version:"1.0.0b5",entry_points:{"aiida.calculations":{"gulp.fitting":"aiida_gulp.calculations.gulp_fitting:GulpFittingCalculation","gulp.optimize":"aiida_gulp.calculations.gulp_optimize:GulpOptCalculation","gulp.single":"aiida_gulp.calculations.gulp_single:GulpSingleCalculation"},"aiida.cmdline.data":{"gulp.potentials":"aiida_gulp.cmndline.potentials:potentials"},"aiida.data":{"gulp.potential":"aiida_gulp.data.potential:EmpiricalPotential","gulp.symmetry":"aiida_gulp.data.symmetry:SymmetryData"},"aiida.parsers":{"gulp.fitting":"aiida_gulp.parsers.parse_fitting:GulpFittingParser","gulp.optimize":"aiida_gulp.parsers.parse_opt:GulpOptParser","gulp.single":"aiida_gulp.parsers.parse_single:GulpSingleParser"},"aiida.workflows":{},console_scripts:{gulp_mock:"aiida_gulp.tests.mock_gulp:main"},"gulp.potentials":{lj:"aiida_gulp.potentials.lj:PotentialWriterLJ",reaxff:"aiida_gulp.potentials.reaxff:PotentialWriterReaxff"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-gulp<pre>Collecting aiida-gulp
  Downloading aiida_gulp-0.10.0b5-py3-none-any.whl.metadata (5.4 kB)
INFO: pip is looking at multiple versions of aiida-gulp to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-gulp==0.10.0b5 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-gulp 0.10.0b5 depends on aiida-core==1.0.0b5
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:3},{colorclass:"brown",text:"Parsers",count:3},{colorclass:"red",text:"Data",count:2},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands, Gulp potentials)",count:3}],pip_install_cmd:"pip install --pre aiida-gulp",is_installable:"False"},"aiida-hubbard":{code_home:"https://github.com/aiidateam/aiida-hubbard",entry_point_prefix:"quantumespresso.hp",pip_url:"aiida-hubbard",plugin_info:"https://raw.github.com/aiidateam/aiida-hubbard/master/pyproject.toml",name:"aiida-hubbard",package_name:"aiida_hubbard",hosted_on:"github.com",metadata:{release_date:"2025-07-04",description:"AiiDA plugin for the first-principles calculation of Hubbard parameters.",author_email:'Lorenzo Bastonero <lbastone@uni-bremen.de>, "Sebastiaan P. Huber" <mail@sphuber.net>',classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: Free To Use But Restricted","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9"],version:"0.3.0"},aiida_version:">=2.3,<2.6 || >2.6,<3.0",entry_points:{"aiida.calculations":{"quantumespresso.hp":"aiida_hubbard.calculations.hp:HpCalculation"},"aiida.parsers":{"quantumespresso.hp":"aiida_hubbard.parsers.hp:HpParser"},"aiida.workflows":{"quantumespresso.hp.base":"aiida_hubbard.workflows.hp.base:HpBaseWorkChain","quantumespresso.hp.hubbard":"aiida_hubbard.workflows.hubbard:SelfConsistentHubbardWorkChain","quantumespresso.hp.main":"aiida_hubbard.workflows.hp.main:HpWorkChain","quantumespresso.hp.parallelize_atoms":"aiida_hubbard.workflows.hp.parallelize_atoms:HpParallelizeAtomsWorkChain","quantumespresso.hp.parallelize_qpoints":"aiida_hubbard.workflows.hp.parallelize_qpoints:HpParallelizeQpointsWorkChain"},console_scripts:{"aiida-hubbard":"aiida_hubbard.cli:cmd_root"}},commits_count:34,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'quantumespresso.hp' does not follow naming convention."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:5},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-hubbard",is_installable:"True"},"aiida-icon":{entry_point_prefix:"icon",pip_url:"aiida-icon",documentation_url:"https://aiida-icon.github.io/aiida-icon/",code_home:"https://github.com/aiida-icon/aiida-icon",plugin_info:"https://raw.githubusercontent.com/aiida-icon/aiida-icon/main/pyproject.toml",name:"aiida-icon",package_name:"aiida_icon",hosted_on:"github.com",metadata:{release_date:"2024-11-11",description:"AiiDA Plugin to run simulations with the ICON weather & climate model",author_email:"Rico Häuselmann <rico.haeuselmann@gmail.com>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.13","Programming Language :: Python :: Implementation :: CPython"],version:"0.4.0"},aiida_version:">=2.5",entry_points:{"aiida.calculations":{"icon.icon":{description:["AiiDA calculation to run ICON."],spec:{inputs:[{name:"cloud_opt_props",required:!0,valid_types:"RemoteData",info:""},{name:"dmin_wetgrowth_lookup",required:!0,valid_types:"RemoteData",info:""},{name:"dynamics_grid_file",required:!0,valid_types:"RemoteData",info:""},{name:"ecrad_data",required:!0,valid_types:"RemoteData",info:""},{name:"master_namelist",required:!0,valid_types:"SinglefileData",info:""},{name:"model_namelist",required:!0,valid_types:"SinglefileData",info:""},{name:"rrtmg_sw",required:!0,valid_types:"RemoteData",info:""},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_file",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"wrapper_script",required:!1,valid_types:"SinglefileData, NoneType",info:""}],outputs:[{name:"all_restart_files",required:!0,valid_types:"",info:""},{name:"finish_status",required:!0,valid_types:"",info:""},{name:"latest_restart_file",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"ICON did not create a restart file or directory."},{status:301,message:"Could not read the finish.status file."},{status:302,message:"The final status was not 'OK or RESTART', check the finish_status output."},{status:303,message:"Could not fully parse due to an unsupported feature, please check the log."},{status:304,message:"Some outputs might be missing, check the log for explanations."},{status:310,message:"ICON was expected to produce a restart file but did not."}]},class:"aiida_icon.calculations:IconCalculation"}},"aiida.parsers":{"icon.icon":"aiida_icon.calculations:IconParser"}},commits_count:28,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-icon",is_installable:"True"},"aiida-inq":{entry_point_prefix:"inq",plugin_info:"https://github.com/LLNL/aiida-inq/blob/main/pyproject.toml",code_home:"https://github.com/LLNL/aiida-inq",pip_url:"aiida-inq",name:"aiida-inq",package_name:"aiida_inq",hosted_on:"github.com",metadata:{release_date:"2024-10-08",description:"The official AiiDA plugin for INQ.",author_email:"Nathan Keilbart <keilbart1@llnl.gov>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Topic :: Scientific/Engineering"],version:"0.1.0"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"inq.create_kpoints_from_distance":{description:["Generate a kpoint mesh for a given structure.","","    :param structure: StructureData to which the mesh will be applied.","    :param kspacing: Spacing between kpoints in reciprocal space.","","    :returns: KpointsData object with mesh."],spec:{inputs:[{name:"kspacing",required:!0,valid_types:"Data",info:"Spacing between kpoints in reciprocal space."},{name:"structure",required:!0,valid_types:"Data",info:"StructureData to which the mesh will be applied."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_inq.calculations.functions.create_kpoints_from_distance:create_kpoints_from_distance"},"inq.inq":{description:["Base calculation class for the INQ code."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the input file."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Optional working directory of a previous calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Optional parameters to affect the way the calculation job is performed."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:201,message:"At minimum the energy cutoff must be specified."},{status:202,message:"No run type was specified in the input parameters."},{status:203,message:"Input parameter was not specified for this result."}]},class:"aiida_inq.calculations.inq:InqCalculation"}},"aiida.parsers":{"inq.inq":"aiida_inq.parsers.inq:InqParser"},"aiida.workflows":{"inq.base":{description:["Workchain to run an Inq calculation with automated error handling ","    and restarts."],spec:{inputs:[{name:"inq",required:!0,valid_types:"Data",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"Whether to clean all related work folders."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Kpoint grid."},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"The spacing between kpoints in reciprocal space."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_inq.workflows.base:InqBaseWorkChain"},"inq.convergence":{description:["Workchain to run convergence tests using the Inq calculator."],spec:{inputs:[{name:"clean_workdir",required:!0,valid_types:"Bool",info:"If `True`, work directories of all called calculations will be cleaned at the end of the workflow."},{name:"conv",required:!0,valid_types:"Data",info:"Inputs for the INQ Base Workchain."},{name:"structure",required:!0,valid_types:"StructureData",info:"The starting structure"},{name:"energy_delta",required:!1,valid_types:"Float, NoneType",info:"The value used to check if the total energy has converged. Since the parser returns values in eV, make sure to scale the value accordingly."},{name:"energy_start",required:!1,valid_types:"Int, NoneType",info:"If provided, will use this energy cutoff as a starting point. Otherwise, the suggested energy cutoffs will be used from the pseudos.yaml protocol file. Units are considered to be Ha."},{name:"energy_step",required:!1,valid_types:"Int, NoneType",info:"Default value for increasing the energy cutoff value. Units considered to be in Ha."},{name:"kspacing_start",required:!1,valid_types:"Float, NoneType",info:"Starting kspacing value for convergence testing."},{name:"kspacing_step",required:!1,valid_types:"Float, NoneType",info:"Step value for reducing kspacing value."},{name:"max_iter",required:!1,valid_types:"Int, NoneType",info:"Maximum number of iterations to perform for both energy and kspacing calculations."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"suggested",required:!0,valid_types:"Dict",info:"Suggested values for energy cutoff and kspacing."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"An INQ calculation failed."},{status:402,message:"Reached the maximum number of iterations for the workchain."}]},class:"aiida_inq.workflows.convergence:InqConvergenceWorkChain"},"inq.tddft":{description:["Workchain to run convergence tests using the Inq calculator."],spec:{inputs:[{name:"clean_workdir",required:!0,valid_types:"Bool",info:"If `True`, work directories of all called calculations will be cleaned at the end of the workflow."},{name:"gs",required:!0,valid_types:"Data",info:"Inputs for the Ground State calculation."},{name:"structure",required:!0,valid_types:"StructureData",info:"The starting structure."},{name:"tddft",required:!0,valid_types:"Data",info:"Inputs for the TDDFT calculation."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"An INQ calculation failed."}]},class:"aiida_inq.workflows.tddft:InqTDDFTWorkChain"}}},commits_count:77,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:3}],pip_install_cmd:"pip install aiida-inq",is_installable:"True"},"aiida-kkr":{code_home:"https://github.com/JuDFTteam/aiida-kkr/tree/develop",development_status:"stable",documentation_url:"https://aiida-kkr.readthedocs.io/",entry_point_prefix:"kkr",pip_url:"aiida-kkr",plugin_info:"https://raw.githubusercontent.com/JuDFTteam/aiida-kkr/master/pyproject.toml",name:"aiida-kkr",package_name:"aiida_kkr",hosted_on:"github.com",metadata:{release_date:"2024-12-05",description:"AiiDA plugin for the JuKKR codes",author_email:"Philipp Ruessmann <p.ruessmann@fz-juelich.de>, Jens Broeder <j.broeder@fz-juelich.de>, Fabian Bertoldo <f.bertoldo@fz-juelich.de>",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.3.1"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{"kkr.kkr":{description:["AiiDA calculation plugin for a KKR calculation."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:`
Use a remote or local repository folder as parent folder
(also for restarts and similar). It should contain all the  needed
files for a KKR calc, only edited files should be uploaded from the
repository.
`},{name:"anomalous_density",required:!1,valid_types:"FolderData, NoneType",info:`
FolderData that contains anomalous density input files for
the KKRhost BdG calculation. If these are not give the code looks
for them in the retrieved of the parent calculation and takes them
from there.`},{name:"bfield",required:!1,valid_types:"Dict, NoneType",info:`
Non-collinear exteral B-field used for constraint calculations.

The Dict node should be of the form
initial_noco_angles = Dict(dict={
    'theta': [theta_at1, theta_at2, ..., theta_atN],
    # list theta values in degrees (0..180)
    'phi': [phi_at1, phi_at2, ..., phi_atN],
    # list phi values in degrees (0..360)
    'magnitude': [magnitude at_1, ..., magnitude at_N]
    # list of magnitude of the applied fields in Ry units
})
Note: The length of the theta, phi and magnitude lists have to be
equal to the number of atoms.
`},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"deciout_parent",required:!1,valid_types:"RemoteData, NoneType",info:"KkrCalculation RemoteData folder from deci-out calculation"},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:`
Use a Parameter node that specifies properties for a following
impurity calculation (e.g. setting of impurity cluster in scoef
file that is automatically created).`},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of
the impurities. These values will be written into the
\`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
initial_noco_angles = Dict(dict={
    'theta': [theta_at1, theta_at2, ..., theta_atN],
    # list theta values in degrees (0..180)
    'phi': [phi_at1, phi_at2, ..., phi_atN],
    # list phi values in degrees (0..360)
    'fix_dir': [True/False at_1, ..., True/False at_N]
    # list of booleans indicating if the direction of the magnetic
    # moment should be fixed or is allowed relax (True means keep the
    # direction of the magnetic moment fixed)
})
Note: The length of the theta, phi and fix_dir lists have to be
equal to the number of atoms.
`},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:`
Use a KpointsData node that specifies the kpoints for which a
bandstructure (i.e. 'qdos') calculation should be performed.`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieve_kkrflex",required:!1,valid_types:"Bool, NoneType",info:`
For a GF writeout calculation, determine whether or not
the kkrflex_* files are copied to the retrieved (can clutter the
database) or are ony left in the remote folder.
`},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the KKR calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"KKR output file not found"},{status:302,message:"KKR parser retuned an error"},{status:303,message:"Could not find shapefun from voronoi parent"}]},class:"aiida_kkr.calculations.kkr:KkrCalculation"},"kkr.kkrimp":{description:["AiiDA calculation plugin for a KKRimp calculation."],spec:{inputs:[{name:"host_Greenfunction_folder",required:!0,valid_types:"RemoteData",info:"Use a node that specifies the host KKR calculation contaning the host Green function and tmatrix (KkrCalculation with impurity_info input)."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"host_Greenfunction_folder_Efshift",required:!1,valid_types:"RemoteData, NoneType",info:"Use a node that specifies the host KKR calculation contaning the host Green function and tmatrix with Fermi level shift (used to set Fermi level)."},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:"Use a parameter node that specifies properties for a immpurity calculation."},{name:"impurity_potential",required:!1,valid_types:"SinglefileData, NoneType",info:"Use a node that contains the input potential."},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of the impurities. These values will be written into the \`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
    initial_noco_angles = Dict({
        'theta': [theta_at1, theta_at2, ..., theta_atN], # list theta values in degrees (0..180)
        'phi': [phi_at1, phi_at2, ..., phi_atN],         # list phi values in degrees (0..360)
        'fix_dir': [True, False, ..., True/False],       # list of booleans indicating of the direction of the magentic moment should be fixed or is allowed to be updated (True means keep the direction of the magnetic moment fixed)
    })

Note: The length of the theta, phi and fix_dir lists have to be equal to the number of atoms in the impurity cluster.
`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Use a node that specifies the input parameters (calculation settings)."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a node that specifies a parent KKRimp calculation."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"rimpshift",required:!1,valid_types:"Dict, NoneType",info:`
Shift for atoms in the impurity cluster used in U-transformation.

The Dict node should be of the form
    rimpshift = Dict({'shifts': [[0., 0., 0.], ... ]})
where the shifts are given in atomic units (i.e. the internal KKR units).

Note: The length of the 'shifts' attribute should be an array with three numbers indicating the shift for each atom in the impurity cluster.
`},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict({'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})

Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the KKRimp calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"Retrieved folder of KKRimp calculation not found."},{status:302,message:"KKRimp parser returned an error."}]},class:"aiida_kkr.calculations.kkrimp:KkrimpCalculation"},"kkr.kkrimporter":{description:["Importer dummy calculation for a previous KKR run","","    :param remote_workdir: Absolute path to the directory where the job was run.","        The transport of the computer you link ask input to the calculation is","        the transport that will be used to retrieve the calculation's files.","        Therefore, ``remote_workdir`` should be the absolute path to the job's","        directory on that computer.","    :type remote_workdir: str","    :param input_file_names: The file names of the job's input file.","    :type input_file_name: dict with str entries","    :param output_file_name: The file names of the job's output file (i.e. the","        file containing the stdout of kkr.x).","    :type output_file_name: dict with str entries"],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:`
Use a remote or local repository folder as parent folder
(also for restarts and similar). It should contain all the  needed
files for a KKR calc, only edited files should be uploaded from the
repository.
`},{name:"anomalous_density",required:!1,valid_types:"FolderData, NoneType",info:`
FolderData that contains anomalous density input files for
the KKRhost BdG calculation. If these are not give the code looks
for them in the retrieved of the parent calculation and takes them
from there.`},{name:"bfield",required:!1,valid_types:"Dict, NoneType",info:`
Non-collinear exteral B-field used for constraint calculations.

The Dict node should be of the form
initial_noco_angles = Dict(dict={
    'theta': [theta_at1, theta_at2, ..., theta_atN],
    # list theta values in degrees (0..180)
    'phi': [phi_at1, phi_at2, ..., phi_atN],
    # list phi values in degrees (0..360)
    'magnitude': [magnitude at_1, ..., magnitude at_N]
    # list of magnitude of the applied fields in Ry units
})
Note: The length of the theta, phi and magnitude lists have to be
equal to the number of atoms.
`},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"deciout_parent",required:!1,valid_types:"RemoteData, NoneType",info:"KkrCalculation RemoteData folder from deci-out calculation"},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:`
Use a Parameter node that specifies properties for a following
impurity calculation (e.g. setting of impurity cluster in scoef
file that is automatically created).`},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of
the impurities. These values will be written into the
\`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
initial_noco_angles = Dict(dict={
    'theta': [theta_at1, theta_at2, ..., theta_atN],
    # list theta values in degrees (0..180)
    'phi': [phi_at1, phi_at2, ..., phi_atN],
    # list phi values in degrees (0..360)
    'fix_dir': [True/False at_1, ..., True/False at_N]
    # list of booleans indicating if the direction of the magnetic
    # moment should be fixed or is allowed relax (True means keep the
    # direction of the magnetic moment fixed)
})
Note: The length of the theta, phi and fix_dir lists have to be
equal to the number of atoms.
`},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:`
Use a KpointsData node that specifies the kpoints for which a
bandstructure (i.e. 'qdos') calculation should be performed.`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieve_kkrflex",required:!1,valid_types:"Bool, NoneType",info:`
For a GF writeout calculation, determine whether or not
the kkrflex_* files are copied to the retrieved (can clutter the
database) or are ony left in the remote folder.
`},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the KKR calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"KKR output file not found"},{status:302,message:"KKR parser retuned an error"},{status:303,message:"Could not find shapefun from voronoi parent"}]},class:"aiida_kkr.calculations.kkrimporter:KkrImporterCalculation"},"kkr.kkrnano":{description:["AiiDA calculation plugin for a KKRnano calculation"],spec:{inputs:[{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"convert",required:!1,valid_types:"Bool, NoneType",info:"Activate to use together with set up convert code in order to retrieve potential files."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"nocoangles",required:!1,valid_types:"Dict, NoneType",info:"Dict node that specifies the starting angles for non-colinear calculations                   (only needed in conjunction with non-colinear calculations, i. e. KORBIT=1                   (which is also necessary for SOC calculations!))"},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Dict node that specifies the input parameters for KKRnano (k-point density etc.)"},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Use a node that specifies a parent KKRnano or voronoi calculation"},{name:"passed_lattice_param_angs",required:!1,valid_types:"Float, NoneType",info:"Use a prespecified lattice constant in Angstrom as input for KKRnano, i. e. in the input.conf file.                    Default is the length of the longest Bravais vector in the structure object used for the voronoi calculation.                    This can be useful in the context of treating supercells."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"strucwithpot",required:!1,valid_types:"StrucWithPotData, NoneType",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"KKRnano output file not found"},{status:302,message:"KKRnano parser retuned an error"}]},class:"aiida_kkr.calculations.kkrnano:KKRnanoCalculation"},"kkr.voro":{description:["AiiDA calculation plugin for a voronoi calculation (creation of starting potential and shapefun)."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_KKR",required:!1,valid_types:"RemoteData, NoneType",info:"Use a node that specifies a parent KKR calculation"},{name:"potential_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:"Use a node that specifies the potential which is used instead of the voronoi output potential"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"shapefun_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:"Use a node that specifies the shapefun which is used instead of the voronoi output"},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"Use a node that specifies the input crystal structure"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"results of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"Voronoi output file not found"},{status:302,message:"Voronoi parser retuned an error"}]},class:"aiida_kkr.calculations.voro:VoronoiCalculation"}},"aiida.data":{"kkr.strucwithpot":"aiida_kkr.data.strucwithpot:StrucWithPotData"},"aiida.parsers":{"kkr.kkrimporterparser":"aiida_kkr.parsers.kkrimporter:KkrImporterParser","kkr.kkrimpparser":"aiida_kkr.parsers.kkrimp:KkrimpParser","kkr.kkrnanoparser":"aiida_kkr.parsers.kkrnano:KKRnanoParser","kkr.kkrparser":"aiida_kkr.parsers.kkr:KkrParser","kkr.voroparser":"aiida_kkr.parsers.voro:VoronoiParser"},"aiida.workflows":{"kkr.STM":{description:["Workchain for the Simulation of a (superconducting) STM tip around a magnetic impurity.","    The workchain uses the (converged) impurity calculation of a host system and combines them","    with vacuum sites in positions","","    inputs::","        :param options: (Dict), computer options","        :param tip_position: (Dict), specify the position of the STM tip","        :param impurity_info: (Dict), information about the impurity cluster","        :param host_calc: (RemoteData), information about the host structure of the sample","        :param wf_parameters: (Dict), parameters that are used to run the workflow","        :param kkr: (Code), KKR host code for the writing out kkrflex files","        :param kkrimp: (Code), KKR impurity code for the normal state impurity scf and BdG impurity DOS calculation","        :param gf_writeout.params_kkr_overwrite (Dict), overwrite parameters for the GF calculation","        :param kkr_imp_sub.params_overwrite (Dict), overwrite parameters for the impurity calculation","","     returns::","","        :return workflow_info: (Dict), Information of workflow results","                            like success, last result node, list with convergence behavior","        :return STM_dos_data: (XYData), Returns the plot of the lmDOS of the calculation","        :retrun STM_lmdos_data: (XYData), Returns the interpolated lmDOS of the calculation"],spec:{inputs:[{name:"BdG",required:!0,valid_types:"Data",info:""},{name:"gf_writeout",required:!0,valid_types:"Data",info:""},{name:"host_remote",required:!0,valid_types:"RemoteData",info:"Remote Data containing the remote folder from the outputs of the host calculation"},{name:"imp_info",required:!0,valid_types:"Dict",info:"Information of the impurity like position in the unit cell, screening cluster, atom type."},{name:"imp_potential_node",required:!0,valid_types:"SinglefileData",info:"Impurity potential node"},{name:"kkrimp",required:!0,valid_types:"Code",info:"KKRimp code, always needed."},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of the impurities. These values will be written into the \`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
    initial_noco_angles = Dict({
        'theta': [theta_at1, theta_at2, ..., theta_atN], # list theta values in degrees (0..180)
        'phi': [phi_at1, phi_at2, ..., phi_atN],         # list phi values in degrees (0..360)
        'fix_dir': [True, False, ..., True/False],       # list of booleans indicating of the direction of the magentic moment should be fixed or is allowed to be updated (True means keep the direction of the magnetic moment fixed)
    })

Note: The length of the theta, phi and fix_dir lists have to be equal to the number of atoms in the impurity cluster.
`},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"KKRhost code, needed if gf_dos_remote is not given."},{name:"kkrflex_files",required:!1,valid_types:"RemoteData, NoneType",info:"with this input we can directly load the gf_dos files without calculating them"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (resources, quene name, etc.)."},{name:"rimpshift",required:!1,valid_types:"Dict, NoneType",info:`
Shift for atoms in the impurity cluster used in U-transformation.

The Dict node should be of the form
    rimpshift = Dict({'shifts': [[0., 0., 0.], ... ]})
where the shifts are given in atomic units (i.e. the internal KKR units).

Note: The length of the 'shifts' attribute should be an array with three numbers indicating the shift for each atom in the impurity cluster.
`},{name:"tip_position",required:!1,valid_types:"Dict, NoneType",info:"How many sites will be scanned in the da and db direction (Bravais Lattice). And the layer that is being scanned."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Workflow parameter (see `kkr_dos_wc.get_wf_defaults()`)."}],outputs:[{name:"STM_dos_data",required:!0,valid_types:"XyData",info:""},{name:"STM_dos_data_lmdos",required:!0,valid_types:"XyData",info:""},{name:"combined_imp_info",required:!0,valid_types:"Dict",info:""},{name:"combined_imp_potential",required:!0,valid_types:"SinglefileData",info:""},{name:"kkrflexfiles",required:!0,valid_types:"RemoteData",info:""},{name:"tip_position",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The position provided for the STM probe are incorrect"},{status:101,message:"The node provided for the impurity info is not valid"},{status:102,message:"No impurity node has been given in the intput"},{status:103,message:"No impurity info has been given in the input"},{status:104,message:`Neither the kkrflex files nor the KKR builder have been given.
Please provide already converged kkrflex files, or the kkr builder to evaluate them`},{status:201,message:"A step in the kkr_imp_dos workflow has failed"}]},class:"aiida_kkr.workflows.kkr_STM:kkr_STM_wc"},"kkr.bs":{description:["Workchain for BandStructure calculation, starting from RemoteFolderData of the previous converged KKR calculation remote folder data","","    inputs:","    :param wf_parameters: (Dict), (optional); Workchain Specifications, contains nepts, tempr, emin (in eV relative to EF), emax (in eV),","                          and RCLUSTZ (can be used to increase the screening cluster radius) keys.","","    :param options: (Dict), (optional); Computer Specifications, scheduler command, parallel or serial","    :param kpoints: (KpointsData),(optional); Kpoints data type from the structure,","                                   but not mendatory as it can be extracted from structure internaly from the remote data","    :param remote_data: (RemoteData)(mendaory); From the previous kkr-converged calculation.","    :param kkr: (Code)(mendaory); KKR code specifiaction","    :param label: (Str) (optional) ; label for WC but will be found in the 'result_wf' output","                                     Dict as 'BS_wf_label' key","    :param description: (Str) (optional) : description for WC but will be found in the 'result_wf' output","                                     Dict as 'BS_wf_description' key","","","    returns:","    :out BS_Data : (ArrayData) ; Consist of BlochSpectralFunction, k_points (list), energy_points (list), special_kpoints(dict)","    :out result_wf: (Dict); work_chain_specifications node, BS_data node, remote_folder node"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost code, needed to run the qdos KkrCalculation"},{name:"remote_data",required:!0,valid_types:"RemoteData",info:"Parent folder of previously converged KkrCalculation"},{name:"description",required:!1,valid_types:"Str, NoneType",info:"description for the workflow"},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`Initial non-collinear angles for the magnetic moments. See KkrCalculation for details.
            If this is found in the input potentially extracted nonco angles from the parent calulation are overwritten!`},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"K-points data for the calculation. If not given the seekpath library is used to find the irreducable k-points of a structure."},{name:"label",required:!1,valid_types:"Str, NoneType",info:"label for the workflow"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (walltime etc.) passed onto KkrCalculation"},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Overwrite some input parameters of the parent KKR calculation."},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters of the bandstructure workflow (see output of kkr_bs_wc.get_wf_default() for more details)."}],outputs:[{name:"BS_Data",required:!0,valid_types:"ArrayData",info:""},{name:"results_wf",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:161,message:"No remote_data was provided as Input"},{status:162,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:163,message:"calc_parameters given are not consistent! Hint: did you give an unknown keyword?"},{status:164,message:"calc_parameters not complete"},{status:165,message:"KKR Band Structure calculation failed"},{status:166,message:"No K-POINTS can be extracted from the structure data"},{status:167,message:"No K-POINTS can be extracted from the primtive structure data rather conventional structure data"},{status:168,message:"Input remote_data node neither output of a KKR/voronoi calculation nor of kkr_scf_wc workflow"}]},class:"aiida_kkr.workflows.bs:kkr_bs_wc"},"kkr.combine_imp":{description:["Workchain that combines 2 converged single-impurity calculations to a bigger impurity,","    reusing the preconverged potentials. This is useful, for example, to study co-doping.","","   Inputs:","    :param impurity1_output_node:(Dict), required, output node from singel impurity wc, and should be one of the","                                 following:","                                 * for `kkr_imp_wc`: single_imp_worlfow.outputs.workflow_info","                                 * for `kkr_imp_sub_wc`: single_imp_worlfow.outputs.workflow_info","                                 * for `KkrimpCalculation`: single_imp_worlfow.outputs.output_parameters","","    :param impurity2_output_node:(Dict), required, output node from second singel impurity wc, and should be one of","                                 the following:","                                 * for `kkr_imp_wc`: single_imp_worlfow.outputs.workflow_info","                                 * for `kkr_imp_sub_wc`: single_imp_worlfow.outputs.workflow_info","                                 * for `KkrimpCalculation`: single_imp_worlfow.outputs.output_parameters","    :offset_imp2:(Dict), required, offset of the second impurity with respect to the first impurity position.","                 e.g. {'index:0 or 1}, the replacement by the second impurity will take place at the same cell","                        or at the next nearest cell respectively.","","    :param scf.kkrimp: (Code), mandatory, KKRimp code needed to submit kkr_imp_wc","    :param scf.wf_parameters: (Dict), optional, KKRimp code needed to submit kkr_imp_sub_wc","    :param scf.options: (Dict), optional, computer options for kkr_imp_sub_wc","","    :param host_gf.kkr: (Code), optional, KKR code for submit kkr_flex_wc, needed if remote_data_gf is not given","    :param host_gf.options: (Dict), optional, computer options for kkr_flex_wc","    :param host_gf.params_kkr_overwrite: (Dict), optional, needed for kkr calculation for GF writeout","","    :param wf_parameters_overwrite: (Dict), optional, specifications for wf_parameters of kkr_imp_sub_wc as well","                                  as well as wf_parameters of kkr_flex_wc.","    :param gf_host_remote: (RemoteData), optional, remote folder of a previous kkrflex writeout step","                          calculations containing the flexfiles and will be used for combine host GF.","","   Returns:","    :return workflow_info: (Dict), Information of workflow results","    :return last_calc_output_parameters: (Dict), link to output parameters of the last called calculation of the","                                        scf kkr_imp_sub_wc.","    :return last_potential: (SingleFileData) link to last output potential of scf kkr_imp_sub_wc step.","    :return last_calc_remote: (RemoteData) link to remote data of last called calculation of the scf step.","    :return remote_data_gf: (RemoteData) link to GF_host_remote of outputs of kkr_flex_wc e.g. gf_writeou","                           step (only present of host GF was generated here).","    :return JijData: (ArrayData) Consists magnetic interaction data among the magnetic impurity atoms,","                    such as vector distance(rx, ry, rz) between atoms, spin interaction magnetude J,","                    Dzyaloshinskii-Moriya vector magnitude, and Dzyaloshinskii-Moriya vector component(Dx, Dy, Dz)","    :return JijInfo :(Dict) Consists description about the JijData."],spec:{inputs:[{name:"impurity1_output_node",required:!0,valid_types:"Dict",info:"\nOutput node of a single impurity calculation. This can be the output of either the `kkr_imp_wc`, `kkr_imp_sub_wc`\nworkflows or of an `KkrimpCalculation`.\n\nUse these output Dict nodes:\n  * for `kkr_imp_wc`: single_imp_workfow.outputs.workflow_info\n  * for `kkr_imp_sub_wc`: single_imp_workfow.outputs.workflow_info\n  * for `KkrimpCalculation`: single_imp_workfow.outputs.output_parameters\n"},{name:"impurity2_output_node",required:!0,valid_types:"Dict",info:"Output node of second single impurity calculation. See help string of `impurity1_output_node` for more details."},{name:"offset_imp2",required:!0,valid_types:"Dict",info:`Offset of the secon impurity with respect to the first impurity.
Can be given either via the 'vector' or the 'index' keys in the dictionary.
The 'vector' option allows to give the offset vector in cartesian units and
the 'index' option allows to five the offset vector in units of the lattice
vectors of the host system's structure.`},{name:"scf",required:!0,valid_types:"Data",info:""},{name:"gf_host_remote",required:!1,valid_types:"RemoteData, NoneType",info:`RemoteData node of pre-calculated host Green function (i.e. with kkr_flex_wc).
If given then the writeout step of the host GF is omitted.`},{name:"host_gf",required:!1,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"wf_parameters_overwrite",required:!1,valid_types:"Dict, NoneType",info:"To add or edit wf_parameters in scf namespace and add run optioins, if needed"}],outputs:[{name:"last_calc_output_parameters",required:!0,valid_types:"",info:""},{name:"last_calc_remote",required:!0,valid_types:"",info:""},{name:"last_potential",required:!0,valid_types:"",info:""},{name:"workflow_info",required:!0,valid_types:"",info:""},{name:"JijData",required:!1,valid_types:"",info:""},{name:"JijInfo",required:!1,valid_types:"",info:""},{name:"remote_data_gf",required:!1,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:700,message:"The writeout of the host GF failed"},{status:800,message:"Impurity input is not a single impurity calculation."},{status:850,message:"i_neighbor_inplane needs to be positive and bigger than 0 for in-plane neighbors"},{status:900,message:"Host structures of impurity 1 and impurity 2 are not identical!"},{status:950,message:"The impurity calculations have different NSPIN values"},{status:999,message:"ERROR: take a look"}]},class:"aiida_kkr.workflows._combine_imps:combine_imps_wc"},"kkr.decimation":{description:["Workchain a decimation calculation with KKR starting from a thick slab (center potential should be bulk-like).","","    The workchain","     - creates the structure nodes of the substrate and decimation region from thick slab structure","     - creates starting potentials of the slab structure","     - runs auxiliary voronoi steps to get starting setup correctly for the KKR calculations","     - runs the deci-out step in serial","     - runs the decimation step","","     The workflow starts either from a converged thick film of from a previous decimation calculation (skips the structure and starting potential setup and the voronoi steps).","","     The workflow parameters input can be:","          {'nkz' : 30,   # number of k-points in z-direction for substrate","           'nprinc': 4,  # number of layer in principle layer","           'nplayer': 4, # number of principle layers (naez deci: nprinc*nplayer)","           'dosmode': False, # run DOS calculation","           'dos_params': {'emin_EF': -5.0, # EMIN-EF in eV","                          'emax_EF':  3.0, # EMAX-EF in eV","                          'nepts': 96,     # number of points in contour","                          'tempr': 100,    # smearing temperature","                          'kmesh': [50, 50, 50]}, # k-mesh used in dos calculation","           }","","    :param wf_parameters: Dict node with workchain parameters (see kkr_decimation_wc.get_wf_defaults())","    :param options: Dict node with specifications for the computer (used in decimation step only)","    :param remote_data: mandatory RemoteData node of either a parent slab or previous decimation calculation","    :param kkr: mandatory Code node with KKR code for running deci-out and decimation steps","    :param voronoi: Code node that is mandatory if starting from slab calculation. Is the voronoi code for auxiliary calculations","    :param kpoints: KpointsData node that triggers a band structure calculation. The kpoints specify the k-point path along which the bandstructure is computed with the qdos mode of KKRhost.","    :param calc_parameters: Dict node that contains KKR parameters which overwrites settings from the slab parent.","","    :returns structure_decimate: StructureData node of the structure of the decimation region.","    :returns structure_substrate: StructureData node of the structure of thesubstrate lattice continuation.","    :returns out_params_calc_deci_out: Dict node of the output parameters of the deci-out calculation.","    :returns out_params_calc_decimate: Dict node of the output parameters of the decimation calculation.","    :returns out_remote_calc_decimate: RemoteData node of the decimation calculation.","    :returns out_retrieved_calc_decimate: retrieved FolderData node of the decimation calculation.","    :returns dos_data: XyData node with the DOS data at finite imaginary part in the energy contour. Only present in DOS mode.","    :returns dos_data_interpol: XyData node with the interpolated DOS data onto the real axis. Only present in DOS mode."],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost code."},{name:"remote_data",required:!0,valid_types:"RemoteData",info:"Parent calculation (either previous decimation calculation, then voronoi steps are skipped or slab calculation)."},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:"If given overwrites KKR parameters starting from slab params (can be used to run DOS for instance)."},{name:"calc_parameters_decimate",required:!1,valid_types:"Dict, NoneType",info:"Overwrite calculation parameters in the decimation step"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"If given this triggers a bandstructure (i.e. qdos) calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options used in the deicmation step (voronoi and deci-out steps run serially but use the walltime given here)."},{name:"options_deci_out",required:!1,valid_types:"Dict, NoneType",info:"Computer options used in the deci-out step (createion of decifile, if not provided, this step will run in serial)."},{name:"shapefun_deci_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:"Use a node that specifies the shapefun which is used instead of the voronoi output for the decimation step"},{name:"shapefun_substrate_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:"Use a node that specifies the shapefun which is used instead of the voronoi output for the deci-out step"},{name:"voronoi",required:!1,valid_types:"Code, NoneType",info:"Voronoi code. Only needed if remote_data is slab claculation and not a previous decimation run."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"parameters for decimation setup (used only if not started from previous decimation calculation)."}],outputs:[{name:"out_params_calc_deci_out",required:!0,valid_types:"Dict",info:"Output parameter node of deci-out calculation."},{name:"out_params_calc_decimate",required:!0,valid_types:"Dict",info:"Output parameter node of decimation calculation."},{name:"out_remote_calc_decimate",required:!0,valid_types:"RemoteData",info:"Remote folder of decimation calculation."},{name:"out_retrieved_calc_decimate",required:!0,valid_types:"FolderData",info:"Retrieved folder of decimation calculation."},{name:"structure_decimate",required:!0,valid_types:"StructureData",info:"Structure of decimation region."},{name:"structure_substrate",required:!0,valid_types:"StructureData",info:"Structure of substrate lattice continuation."},{name:"dos_data",required:!1,valid_types:"XyData",info:"DOS data with finite imaginary part in the energy contour."},{name:"dos_data_interpol",required:!1,valid_types:"XyData",info:"interpolated DOS data onto the real axis."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"Given remote_data is not correct (needs to be a slab or decimation KKR calculation)"},{status:301,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:302,message:"The code you provided for voronoi does not use the plugin kkr.voro"},{status:303,message:"The voronoi step for the starting potential of the substrate failed."},{status:304,message:"The voronoi step for the starting potential of the decimation region failed."},{status:305,message:"The deci-out step (writeout of continuation GF) failed."}]},class:"aiida_kkr.workflows._decimation:kkr_decimation_wc"},"kkr.dos":{description:["Workchain a DOS calculation with KKR starting from the remoteData node","    of a previous calculation (either Voronoi or KKR).","","    :param wf_parameters: (Dict); Workchain specifications","    :param options: (Dict); specifications for the computer","    :param remote_data: (RemoteData), mandatory; from a KKR or Vornoi calculation","    :param kkr: (Code), mandatory; KKR code running the dos calculation","","    :return result_kkr_dos_wc: (Dict), Information of workflow results","        like Success, last result node, list with convergence behavior"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost Code node used to run the DOS calculation."},{name:"remote_data",required:!0,valid_types:"RemoteData",info:"RemoteData node of the parent calculation."},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`Initial non-collinear angles for the magnetic moments. See KkrCalculation for details.
            If this is found in the input potentially extracted nonco angles from the parent calulation are overwritten!`},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options used by the workflow."},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Overwrite some input parameters of the parent KKR calculation."},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:`
Settings for running a LDA+U calculation. The Dict node should be of the form
    settings_LDAU = Dict(dict={'iatom=0':{
        'L': 3,         # l-block which gets U correction (1: p, 2: d, 3: f-electrons)
        'U': 7.,        # U value in eV
        'J': 0.75,      # J value in eV
        'Eref_EF': 0.,  # reference energy in eV relative to the Fermi energy. This is the energy where the projector wavefunctions are calculated (should be close in energy where the states that are shifted lie (e.g. for Eu use the Fermi energy))
    }})
    Note: you can add multiple entries like the one for iatom==0 in this example. The atom index refers to the corresponding atom in the impurity cluster.
`},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Workflow parameter (see `kkr_dos_wc.get_wf_defaults()`)."}],outputs:[{name:"results_wf",required:!0,valid_types:"Dict",info:"Results collected by the workflow."},{name:"dos_data",required:!1,valid_types:"XyData",info:"XyData node of the parsed DOS output."},{name:"dos_data_interpol",required:!1,valid_types:"XyData",info:"XyData node of the parsed DOS output, interpolated onto the real axis."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:161,message:"No remote_data was provided as Input"},{status:162,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:163,message:"calc_parameters given are not consistent! Hint: did you give an unknown keyword?"},{status:164,message:"calc_parameters not complete"},{status:165,message:"dos_params given in wf_params are not valid"},{status:166,message:"KKR dos calculation failed"}]},class:"aiida_kkr.workflows.dos:kkr_dos_wc"},"kkr.eos":{description:["Workchain of an equation of states calculation with KKR.","","    Layout of the workflow:","      1. determine V0, scale_range, etc. from input","      2. run voro_start for V0 and smallest volume","          2.1 get minimum for RMTCORE (needs to be fixed for all calculations to be able to compare total energies","      3. submit kkr_scf calculations for all volumes using RMTCORE setting determined in step 2","      4. collect results"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:`
            Code entry for the KKRhost calculations.
            `},{name:"structure",required:!0,valid_types:"StructureData",info:`
            Initial structure for which the EOS will be calculated.
            `},{name:"voronoi",required:!0,valid_types:"Code",info:`
            Code entry for the Voronoi calculations.
            `},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            KKR input parameters. Everything (except structural factors) which
            would normally be written in the inputcard.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            Workfunction specific parameters, controlling the behavior of the
            EOS workchain.
            `}],outputs:[{name:"eos_results",required:!0,valid_types:"Dict",info:""},{name:"explicit_kpoints",required:!1,valid_types:"KpointsData",info:""},{name:"get_explicit_kpoints_path_parameters",required:!1,valid_types:"Dict",info:""},{name:"gs_structure",required:!1,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:221,message:"ERROR: inputs invalid"},{status:222,message:"ERROR: need at least 3 successful calculations"},{status:223,message:"ERROR: nsteps is smaller than 3, need at least three data points to do fitting"},{status:224,message:"given fitfunction name not valid"},{status:225,message:"ERROR: kkr_startpot was not successful. Check you inputs."}]},class:"aiida_kkr.workflows.eos:kkr_eos_wc"},"kkr.gf_writeout":{description:["Workchain of a kkr_flex calculation to calculate the Green function with","    KKR starting from the RemoteData node of a previous calculation (either Voronoi or KKR).","","    :param options: (Dict), Workchain specifications","    :param wf_parameters: (Dict), Workflow parameters that deviate from previous KKR RemoteData","    :param remote_data: (RemoteData), mandatory; from a converged KKR calculation","    :param kkr: (Code), mandatory; KKR code running the flexfile writeout","    :param impurity_info: Dict, mandatory: node specifying information","                          of the impurities in the system","","    :return workflow_info: (Dict), Information of workflow results","                            like success, last result node, list with convergence behavior","    :return GF_host_remote: (RemoteData), host GF of the system"],spec:{inputs:[{name:"impurity_info",required:!0,valid_types:"Dict",info:""},{name:"remote_data",required:!0,valid_types:"RemoteData",info:""},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Set some input parameters of the KKR calculation."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"GF_host_remote",required:!0,valid_types:"RemoteData",info:""},{name:"workflow_info",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:101,message:"ERROR: the 'impurity_info' input Dict node could not be used"},{status:102,message:"ERROR: the code you provided for kkr does not use the plugin kkr.kkr"},{status:103,message:"ERROR: No remote_data was provided as Input"},{status:104,message:"ERROR: calc_parameters given are not consistent! Hint: did you give an unknown keyword?"},{status:105,message:"ERROR: calc_parameters misses keys"},{status:106,message:"ERROR: KKR calculation to write out kkrflex files unsuccessful"},{status:107,message:"ERROR: Could not extract value for Fermi level from parent calculation"}]},class:"aiida_kkr.workflows.gf_writeout:kkr_flex_wc"},"kkr.imp":{description:["Workchain of a kkrimp calculation starting either from scratch (with a structure","    and impurity_info node), or with a converged host potential and impurity","    startpotentials, ... to calculate the converged host-impurity potential of the system.","","    :param options: (Dict), Workchain specifications","    :param wf_parameters: (Dict), specifications for the kkr impurity workflow","    :param voro_aux_parameters: (Dict), specification for the auxiliary voronoi calculation for the impurity","    :param kkrimp: (Code), mandatory: KKRimp code converging the host-imp-potential","    :param kkr: (Code), mandatory: KKR code for calculation the host potential","    :param voronoi: (Code), mandatory: Voronoi code to generate the impurity startpot","    :param remote_data_gf: (RemoteData): remote folder of a previous kkrflex","                                         calculation containing the flexfiles ...","    :param remote_data_host: (RemoteData): remote folder of a converged KKR","                                           host calculation","","    :return workflow_info: (Dict), Information of workflow results","    :return last_calc_output_parameters: (Dict), output parameters of","                                         the last called calculation","    :return last_calc_info: (Dict), information of the last called calculation"],spec:{inputs:[{name:"gf_writeout",required:!0,valid_types:"Data",info:""},{name:"impurity_info",required:!0,valid_types:"Dict",info:"Information of the impurity like position in the unit cell, screening cluster, atom type."},{name:"kkrimp",required:!0,valid_types:"Code",info:"KKRimp code used to converge the impurity calculation"},{name:"scf",required:!0,valid_types:"Data",info:""},{name:"voronoi",required:!0,valid_types:"Code",info:"Voronoi code used to create the impurity starting potential."},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"KKRhost code used to run GF writeout step."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Options for running the codes (walltime etc.)."},{name:"options_voronoi",required:!1,valid_types:"Dict, NoneType",info:"Options for running the Voronoi code (if differing from general `options` node)"},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Set some input parameters of the KKR calculation for the GF writeout step."},{name:"remote_data_gf",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of precomputed host Green function."},{name:"remote_data_gf_Efshift",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of precomputed host Green function with Fermi level shift (overwrite kkrflex_green and tmat files from first remote_data_gf node."},{name:"remote_data_host",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of the converged host calculation. Used to write out the host Green function."},{name:"startpot",required:!1,valid_types:"SinglefileData, NoneType",info:"Set starting potential (e.g. from preconverged calculation"},{name:"voro_aux_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the auxiliary voronoi starting potential workflow."},{name:"voro_params_overwrite",required:!1,valid_types:"Dict, NoneType",info:"If given, overwrite the some parameters used as input for auxiliary voronoi calculation of starting potential."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters for the KKRimp selfconsistency workflow."}],outputs:[{name:"last_calc_info",required:!0,valid_types:"Dict",info:""},{name:"last_calc_output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_data_gf",required:!0,valid_types:"RemoteData",info:""},{name:"workflow_info",required:!0,valid_types:"Dict",info:""},{name:"converged_potential",required:!1,valid_types:"SinglefileData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:141,message:"ERROR: one or more of the codes you provided do not use the necessary plugins: kkr.voro, kkr.kkr, kkr.kkrimp"},{status:142,message:"ERROR: since GF writeout step has to be conducted, 'kkrcode' is needed as an input"},{status:143,message:"ERROR: neither converged host remote nor GF writeout remote is given as an input. One of them is needed to proceed with this workflow!"},{status:144,message:"ERROR: sub-workflow for KKRimp convergence failed"},{status:145,message:"ERROR: sub-workflow Kkr_startpot failed (look for failure of voronoi calculation)."}]},class:"aiida_kkr.workflows.kkr_imp:kkr_imp_wc"},"kkr.imp_BdG":{description:["Workchain for one-shot BdG impurity DOS calculation from a converged normal state host calculation.","    1) Normal state impurity potential scf","    2) One-shot BdG DOS calcluation","        a) Writing out of the BdG kkrflex DOS files","        b) One-shot BdG impurity DOS","    The intermediate steps (1 & 2a) can be skipped by providing the corresponding nodes as inputs to the workflow.","","    inputs::","        :param options: (Dict), computer options","        :param impurity_info: (Dict), information about the impurity cluster","        :param voronoi: (Code), Voronoi code for creating the impurity starting potential","        :param kkr: (Code), KKR host code for the writing out kkrflex files","        :param kkrimp: (Code), KKR impurity code for the normal state impurity scf and BdG impurity DOS calculation","        :param BdG_settings: (Dict), set BdG parameters","        :param imp_scf.startpot: (SinglefileData), pre-converged impurity potential used to start the impurity scf calculation","        :param imp_scf.converged_potential: (SinglefileData), converged impurity potential, skips the impurity scf calculation if provided","        :param imp_scf.wf_parameters: (Dict), parameters for the kkr impurity scf","        :param imp_scf.gf_writeout.params_kkr_overwrite: (Dict), set some input parameters of the KKR calculation for the GF writeout step of impurity scf workchain","        :param imp_scf.gf_writeout.options: (Dict), computer settings","        :param imp_scf.scf.params_overwrite: (Dict), set some input parameters of the KKR impurity scf","        :param imp_scf.options: (Dict), computer settings","        :param imp_scf.remote_data_host: (RemoteData), parent folder of converged host normal state KkrCalculation","","        :param dos.wf_parameters: (Dict), parameters for the DOS calculation","        :param dos.gf_dos_remote: (RemoteData), node of precomputed host GF for DOS energy contour","        :param dos.gf_writeout.params_kkr_overwrite: (Dict), set some input parameters of the KKR calculation for the GF writeout step of imßpurity dos workchain","        :param dos.gf_writeout.host_remote: (RemoteData), parent folder of kkrflex writeout step for DOS calculation","        :param dos.gf_writeout.kkr: (Code), KKR code for writing out of kkrflex files for impurity DOS calculation","        :param dos.gf_writeout.options: (Dict), computer settings","        :param dos.options: (Dict), computer settings","","    returns::","        :return workflow_info: (Dict), Information on workflow results","        :return output_parameters: (Dict), output parameters of the workflow","        :return dos_data: (XyData), impurity DOS data output node","        :return dos_data_interpol: (XyData), interpolated DOS data output node","        :return impurity_potential: (SinglefileData), converged normal state impurity potential node","        :return gf_host_BdG: (RemoteData), kkrflex writeout step files of DOS calculation"],spec:{inputs:[{name:"BdG_scf",required:!0,valid_types:"Data",info:""},{name:"dos",required:!0,valid_types:"Data",info:""},{name:"imp_scf",required:!0,valid_types:"Data",info:""},{name:"kkrimp",required:!0,valid_types:"Code",info:"KKRimp code used to converge the impurity calculation"},{name:"BdG_settings",required:!1,valid_types:"Dict",info:"Define BdG parameters"},{name:"calc_DOS",required:!1,valid_types:"Bool, NoneType",info:"Set this to TRUE to calculate DOS"},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:"Information of the impurity like position in the unit cell, screening cluster, atom type."},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"KKRhost code, needed to run the KkrCalculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (walltime etc.) passed onto KkrCalculation, fall back to settings from parent calculation if not given"},{name:"voronoi",required:!1,valid_types:"Code, NoneType",info:"Voronoi code used to create the impurity starting potential."}],outputs:[{name:"impurity_potential",required:!0,valid_types:"SinglefileData",info:""},{name:"dos_data",required:!1,valid_types:"XyData",info:""},{name:"dos_data_interpol",required:!1,valid_types:"XyData",info:""},{name:"dos_data_lm",required:!1,valid_types:"XyData",info:""},{name:"dos_data_lm_interpol",required:!1,valid_types:"XyData",info:""},{name:"gf_host_BdG",required:!1,valid_types:"RemoteData",info:""},{name:"output_parameters",required:!1,valid_types:"Dict",info:""},{name:"workflow_info",required:!1,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:101,message:"The code you provided for kkrimp does not use the plugin kkr.kkrimp"},{status:102,message:"The code you provided for voronoi does not use the plugin kkr.voronoi"},{status:200,message:"Parent calculation is not valid"}]},class:"aiida_kkr.workflows.imp_BdG:kkrimp_BdG_wc"},"kkr.imp_dos":{description:["Workchain of a DOS calculation for an impurity system starting from a","    converged impurity calculation or workflow","","    :param options: (Dict), computer options","    :param wf_parameters: (Dict), specifications for the DOS","    :param kkr: (Code), mandatory: KKR code for gf_writeout step","    :param kkrimp: (Code), mandatory: KKRimp code for DOS calculation","    :param imp_host_pot: (SinglefileData), mandatory: impurity startpotential","","    :return workflow_info: (Dict), Information on workflow results","    :return last_calc_output_parameters: (Dict), output parameters of","                                         the last called calculation","    :return last_calc_info: (Dict), information of the last called calculation"],spec:{inputs:[{name:"BdG",required:!0,valid_types:"Data",info:""},{name:"gf_writeout",required:!0,valid_types:"Data",info:""},{name:"kkrimp",required:!0,valid_types:"Code",info:"KKRimp code, always needed."},{name:"gf_dos_remote",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of precomputed host GF for DOS energy contour."},{name:"host_remote",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of the (converged) host calculation."},{name:"imp_pot_sfd",required:!1,valid_types:"SinglefileData, NoneType",info:"impurity potential single file data. Needs also impurity_info node."},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:"impurity info node that specifies the relation between imp_pot_sfd to the host system. Mandatory if imp_pot_sfd is given."},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of the impurities. These values will be written into the \`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
    initial_noco_angles = Dict({
        'theta': [theta_at1, theta_at2, ..., theta_atN], # list theta values in degrees (0..180)
        'phi': [phi_at1, phi_at2, ..., phi_atN],         # list phi values in degrees (0..360)
        'fix_dir': [True, False, ..., True/False],       # list of booleans indicating of the direction of the magentic moment should be fixed or is allowed to be updated (True means keep the direction of the magnetic moment fixed)
    })

Note: The length of the theta, phi and fix_dir lists have to be equal to the number of atoms in the impurity cluster.
`},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"KKRhost code, needed if gf_dos_remote is not given."},{name:"kkrimp_remote",required:!1,valid_types:"RemoteData, NoneType",info:"RemoteData node of previous (converged) KKRimp calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (resources, quene name, etc.)."},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Set some input parameters of the KKR calculation."},{name:"rimpshift",required:!1,valid_types:"Dict, NoneType",info:`
Shift for atoms in the impurity cluster used in U-transformation.

The Dict node should be of the form
    rimpshift = Dict({'shifts': [[0., 0., 0.], ... ]})
where the shifts are given in atomic units (i.e. the internal KKR units).

Note: The length of the 'shifts' attribute should be an array with three numbers indicating the shift for each atom in the impurity cluster.
`},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:"Settings for LDA+U run (see KkrimpCalculation for details)."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"DOS workflow parameters (energy range, etc.)."}],outputs:[{name:"dos_data",required:!0,valid_types:"XyData",info:""},{name:"last_calc_info",required:!0,valid_types:"Dict",info:""},{name:"last_calc_output_parameters",required:!0,valid_types:"Dict",info:""},{name:"workflow_info",required:!0,valid_types:"Dict",info:""},{name:"dos_data_interpol",required:!1,valid_types:"XyData",info:""},{name:"dos_data_interpol_lm",required:!1,valid_types:"XyData",info:""},{name:"dos_data_lm",required:!1,valid_types:"XyData",info:""},{name:"gf_dos_remote",required:!1,valid_types:"RemoteData",info:"RemoteData node of the computed host GF."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:220,message:"Unknown problem detected."},{status:221,message:"Unable to find the parent remote_data node that led to the input impurity calculation. You need to specify `host_remote` and `impurity_info` nodes."},{status:222,message:"The gf_writeout workflow was not succesful, cannot continue."},{status:223,message:"The input nodes `imp_pot_sfd` and `kkrimp_remote` are given but are mutually exclusive"},{status:224,message:"KKRhost code node (`inputs.kkr`) is missing if gf_dos_remote is not given."},{status:225,message:"`host_remote` node is missing if gf_dos_remote is not given."},{status:226,message:"KKRimp sub-workflow failed."}]},class:"aiida_kkr.workflows.kkr_imp_dos:kkr_imp_dos_wc"},"kkr.imp_sub":{description:["Workchain of a kkrimp self consistency calculation starting from the","    host-impurity potential of the system. (Not the entire kkr_imp workflow!)","","    :param options: (Dict), Workchain specifications","    :param wf_parameters: (Dict), specifications for the calculation","    :param host_imp_startpot: (RemoteData), mandatory; input host-impurity potential","    :param kkrimp: (Code), mandatory; KKRimp code converging the host-imp-potential","    :param remote_data: (RemoteData), mandatory; remote folder of a previous","                           kkrflex calculation containing the flexfiles ...","    :param kkrimp_remote: (RemoteData), remote folder of a previous kkrimp calculation","    :param impurity_info: (Dict), Parameter node with information","                          about the impurity cluster","","    :return workflow_info: (Dict), Information of workflow results","                                   like success, last result node, list with","                                   convergence behavior","    :return host_imp_pot: (SinglefileData), output potential of the sytem"],spec:{inputs:[{name:"kkrimp",required:!0,valid_types:"Code",info:""},{name:"host_imp_startpot",required:!1,valid_types:"SinglefileData, NoneType",info:""},{name:"impurity_info",required:!1,valid_types:"Dict, NoneType",info:""},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
Initial non-collinear angles for the magnetic moments of the impurities. These values will be written into the \`kkrflex_angle\` input file of KKRimp.
The Dict node should be of the form
    initial_noco_angles = Dict({
        'theta': [theta_at1, theta_at2, ..., theta_atN], # list theta values in degrees (0..180)
        'phi': [phi_at1, phi_at2, ..., phi_atN],         # list phi values in degrees (0..360)
        'fix_dir': [True, False, ..., True/False],       # list of booleans indicating of the direction of the magentic moment should be fixed or is allowed to be updated (True means keep the direction of the magnetic moment fixed)
    })

Note: The length of the theta, phi and fix_dir lists have to be equal to the number of atoms in the impurity cluster.
`},{name:"kkrimp_remote",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:""},{name:"params_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Dict of parameters that are given to the KKRimpCalculation. Overwrites automatically set values!"},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"remote_data_Efshift",required:!1,valid_types:"RemoteData, NoneType",info:""},{name:"rimpshift",required:!1,valid_types:"Dict, NoneType",info:`
Shift for atoms in the impurity cluster used in U-transformation.

The Dict node should be of the form
    rimpshift = Dict({'shifts': [[0., 0., 0.], ... ]})
where the shifts are given in atomic units (i.e. the internal KKR units).

Note: The length of the 'shifts' attribute should be an array with three numbers indicating the shift for each atom in the impurity cluster.
`},{name:"settings_LDAU",required:!1,valid_types:"Dict, NoneType",info:"LDA+U settings. See KKRimpCalculation for details."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:""}],outputs:[{name:"workflow_info",required:!0,valid_types:"Dict",info:""},{name:"host_imp_pot",required:!1,valid_types:"SinglefileData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:121,message:"ERROR: Not both host-impurity potential and GF remote found in the inputs. Provide either both of them or a RemoteData from a previous kkrimp calculation."},{status:122,message:"ERROR: The code you provided for KKRimp does not use the plugin kkr.kkrimp"},{status:123,message:"ERROR: Unable to extract parent paremeter node of input remote folder"},{status:124,message:"ERROR: No calculation parameters provided"},{status:125,message:`ERROR: Last KKRcalc in SUBMISSIONFAILED state!
stopping now`},{status:126,message:"ERROR: Maximal number of KKR restarts reached. Exiting now!"},{status:127,message:"ERROR: Last_remote could not be set to a previous succesful calculation"},{status:128,message:"ERROR: There are still missing calculation parameters"},{status:129,message:"ERROR: Parameters could not be updated"},{status:130,message:"ERROR: Last calculation is not in finished state"},{status:131,message:"The input `remote_data` node has no valid calculation parent."},{status:132,message:"The parent calculation of the input `remote_data` node was not succesful."},{status:133,message:"ERROR: Last calculation does not have an output potential."}]},class:"aiida_kkr.workflows.kkr_imp_sub:kkr_imp_sub_wc"},"kkr.jij":{description:["Workchain for calculation of exchange coupling constants Jij and Dij if parent calculation used the SOC solver.","","    inputs::","","        :param wf_parameters: optional Dict node of workchain specifications, contains settings like Jij radius cutoff,","                              selection of sites for i and j and numerical cutoffs. None values in the accuracy sub-dict","                              means that values from parent calculation are coptied.","        :param remote_data: mandatory RemoteData node of parent (i.e. converged) KkrCalculation","        :param kkr: optional Code for KKRhost executable (if not given the same as in the parent calculation is used)","        :param options: optional Dict computer options like scheduler command or parallelization","","    returns::","","        :return jij_data: ArrayData with the arrays 'Jij_expanded' (Table of all Jij and Dij pairs) and 'positions_expanded' (positions of all ij pairs)","        :return structure_jij_sites: StructureData"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost code, needed to run the Jij KkrCalculation"},{name:"remote_data",required:!0,valid_types:"RemoteData",info:"Parent folder of previously converged KkrCalculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options (walltime etc.) passed onto KkrCalculation, fall back to settings from parent calculation if not given"},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Overwrite some input parameters of the parent KKR calculation."},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters of the bandstructure workflow (see output of kkr_bs_wc.get_wf_default() for more details)."}],outputs:[{name:"jij_data",required:!0,valid_types:"ArrayData",info:""},{name:"results_wf",required:!0,valid_types:"Dict",info:""},{name:"structure_jij_sites",required:!0,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:160,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:161,message:"Parent calculation is not valid"},{status:162,message:"KKR Band Structure calculation failed"},{status:163,message:"Parsing of Jij calculations failed"}]},class:"aiida_kkr.workflows.jijs:kkr_jij_wc"},"kkr.scf":{description:["Workchain for converging a KKR calculation (SCF).","","    It converges the charge potential.","    Two paths are possible:","","    (1) Start from a structure and run a voronoi calculation first,","    optional with calc_parameters","    (2) Start from an existing Voronoi or KKR calculation, with a remoteData","","    :param wf_parameters: (Dict), Workchain Specifications","    :param options: (Dict); specifications for the computer","    :param structure: (StructureData), Crystal structure","    :param calc_parameters: (Dict), Voronoi/Kkr Parameters","    :param remote_data: (RemoteData), from a KKR, or Voronoi calculation","    :param voronoi: (Code)","    :param kkr: (Code)","","    :return output_kkr_scf_wc_para: (Dict), Information of workflow results","        like Success, last result node, list with convergence behavior","","    minimum input example:","    1. Code1, Code2, Structure, (Parameters), (wf_parameters)","    2. Code2, remote_data, (Parameters), (wf_parameters)","","    maximum input example:","    1. Code1, Code2, Structure, Parameters","        wf_parameters: {'queue_name' : String,",`                        'resources' : dict({"num_machines": int, "num_mpiprocs_per_machine" : int})`,"                        'walltime' : int}","    2. Code2, (remote-data), wf_parameters as in 1.","","    Hints:","    1. This workflow does not work with local codes!"],spec:{inputs:[{name:"kkr",required:!0,valid_types:"Code",info:"KKRhost code node which will run the KkrCalculations"},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            KKR-specific calculation parameters (LMAX etc.),
            usually set up with the help of the \`kkrparams\` class.
            `},{name:"initial_noco_angles",required:!1,valid_types:"Dict, NoneType",info:`
            Initial non-collinear angles for the magnetic moments of the
            impurities. See KkrCalculation for details.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:`
            Computer settings used by the calculations in the workflow
            (see also help string of wf_parameters).
            `},{name:"params_kkr_overwrite",required:!1,valid_types:"Dict, NoneType",info:"Set some input parameters of the KKR calculation."},{name:"remote_data",required:!1,valid_types:"RemoteData, NoneType",info:`
            RemoteFolder node of a preconverged calculation.
            Can be used as a starting point to skip the Voronoi step.
            `},{name:"startpot_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:`
            Potential SinglefileData, can be used to overwrite
            the starting potential from Voronoi
            (the shapefun will be used though and thus needs to be compatible).
            This can be used to construct a better starting potential from a
            preconverged calculation (e.g. in a smaller unit cell).
            `},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:`
            Input structure for which a calculation is started with a
            VoronoiCalculation.
            Can be skipped if a previous KkrCalculation is given with the
            \`remote_data\` input node.
            `},{name:"voronoi",required:!1,valid_types:"Code, NoneType",info:"\n            Voronoi code node, needed only if `structure` input node is given.\n            "},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            Settings for the workflow. Use \`KkrCalculation.get_wf_defaults()\`
            to get the default values and default options.
            `}],outputs:[{name:"output_kkr_scf_wc_ParameterResults",required:!0,valid_types:"Dict",info:""},{name:"final_dosdata_interpol",required:!1,valid_types:"XyData",info:""},{name:"last_InputParameters",required:!1,valid_types:"Dict",info:""},{name:"last_RemoteData",required:!1,valid_types:"RemoteData",info:""},{name:"last_calc_out",required:!1,valid_types:"Dict",info:""},{name:"last_noco_angles",required:!1,valid_types:"Dict",info:""},{name:"results_vorostart",required:!1,valid_types:"Dict",info:""},{name:"starting_dosdata_interpol",required:!1,valid_types:"XyData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:221,message:"Unable to extract parent paremeter node of input remote folder"},{status:222,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:223,message:"The code you provided for voronoi does not use the plugin kkr.voro"},{status:224,message:"ERROR: StructureData was provided, but no voronoi code was provided"},{status:225,message:"ERROR: No StructureData nor remote_data was provided as Input"},{status:226,message:"ERROR: kkr_startpot_wc step failed!"},{status:227,message:"DOS run unsuccessful. Check inputs."},{status:228,message:"ERROR: calc_parameters given are not consistent! Missing mandatory keys"},{status:229,message:"ERROR: calc_parameters given are not consistent! Hint: did you give an unknown keyword?"},{status:230,message:"ERROR: calc_parameters not given as input but are needed!"},{status:231,message:"ERROR: parameter update unsuccessful: some key, value pair not valid!"},{status:232,message:"ERROR: calc_parameters misses keys"},{status:233,message:"ERROR: last_remote could not be set to a previous successful calculation"},{status:234,message:"ERROR: maximal number of KKR restarts reached. Exiting now!"},{status:235,message:"ERROR: last KKRcalc in SUBMISSIONFAILED state"}]},class:"aiida_kkr.workflows.kkr_scf:kkr_scf_wc"},"kkr.startpot":{description:["Workchain  create starting potential for a KKR calculation by running","    voronoi and getting the starting DOS for first checks on the validity of the input setting.","    Starts from a structure together with a KKR parameter node.","","    :param wf_parameters: (Dict), Workchain specifications","    :param options: (Dict), specifications for the computer","    :param structure: (StructureData), aiida structure node to begin","        calculation from (needs to contain vacancies, if KKR needs empty spheres)","    :param kkr: (Code)","    :param voronoi: (Code)","    :param calc_parameters: (Dict), KKR parameter set, passed on to voronoi run.","","    :return result_kkr_startpot_wc: (Dict), Information of workflow results","        like Success, last result node, dos array data"],spec:{inputs:[{name:"voronoi",required:!0,valid_types:"Code",info:"Voronoi code"},{name:"calc_parameters",required:!1,valid_types:"Dict, NoneType",info:`
            KKR-specific parameters passed onto the VoronoiCalculation (lmax etc.).
            `},{name:"kkr",required:!1,valid_types:"Code, NoneType",info:"Kkr code, only needed only if DOS is calculated."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"options",required:!1,valid_types:"Dict, NoneType",info:"Computer options passed onto the calculations"},{name:"parent_KKR",required:!1,valid_types:"RemoteData, NoneType",info:`
            RemoteData node of a KKR calculation which is used to overwrite
            the output potential Voronoi constructs
            (typically used to increase lmax). Cannot be used with a different
            structure in the input since the structure is extracted from the
            parent_KKR.
            `},{name:"startpot_overwrite",required:!1,valid_types:"SinglefileData, NoneType",info:`
            Potential which can be used instead of the output potential
            Voronoi constructs.
            `},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:`
            Structure for which the starting potential should be constructed,
            not needed if parent_KKR is given (typically used to increase the
            lmax but use the output potential of the parent_KKR as starting
            potential).
            `},{name:"wf_parameters",required:!1,valid_types:"Dict, NoneType",info:"Parameters that control the behavior of the workflow"}],outputs:[{name:"results_vorostart_wc",required:!0,valid_types:"Dict",info:""},{name:"last_doscal_dosdata",required:!1,valid_types:"XyData",info:""},{name:"last_doscal_dosdata_interpol",required:!1,valid_types:"XyData",info:""},{name:"last_doscal_results",required:!1,valid_types:"Dict",info:""},{name:"last_params_voronoi",required:!1,valid_types:"Dict",info:""},{name:"last_voronoi_remote",required:!1,valid_types:"RemoteData",info:""},{name:"last_voronoi_results",required:!1,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"The code you provided for kkr does not use the plugin kkr.kkr"},{status:202,message:"The code you provided for voronoi does not use the plugin kkr.voro"},{status:203,message:"Voronoi calculation unsuccessful. Check inputs"},{status:204,message:"Voronoi calculation unsuccessful. Check inputs."},{status:205,message:"Voronoi calculation unsuccessful. Structure inconsistent. Maybe you need empty spheres?"},{status:206,message:"DOS run unsuccessful. Check inputs."},{status:207,message:"Can only take either structure or parent_KKR as input."},{status:208,message:"Need either structure or parent_KKR as input."}]},class:"aiida_kkr.workflows.voro_start:kkr_startpot_wc"}},console_scripts:{"aiida-kkr":"aiida_kkr.cmdline:cmd_root"}},commits_count:89,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (beta) does not match development_status in metadata (stable)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:5},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:14},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-kkr",is_installable:"True"},"aiida-lammps":{code_home:"https://github.com/aiidaplugins/aiida-lammps",development_status:"beta",entry_point_prefix:"lammps",pip_url:"git+https://github.com/aiidaplugins/aiida-lammps",name:"aiida-lammps",package_name:"aiida_lammps",hosted_on:"github.com",metadata:{classifiers:["Development Status :: 4 - Beta","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Framework :: AiiDA"],author:"Chris Sewell",author_email:"chrisj_sewell@hotmail.com"},aiida_version:"~=2.3",entry_points:{"aiida.calculations":{"lammps.base":{description:["A basic plugin for performing calculations in ``LAMMPS`` using aiida.","","    The plugin will take the input parameters validate them against a schema","    and then use them to generate the ``LAMMPS`` input file. The input file","    is generated depending on the parameters provided, the type of potential,","    the input structure and whether or not a restart file is provided."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Parameters that control the input script generated for the ``LAMMPS`` calculation"},{name:"potential",required:!0,valid_types:"LammpsPotentialData",info:"Potential used in the ``LAMMPS`` calculation"},{name:"structure",required:!0,valid_types:"StructureData",info:"Structure used in the ``LAMMPS`` calculation"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"input_restartfile",required:!1,valid_types:"SinglefileData, NoneType",info:"Input restartfile to continue from a previous ``LAMMPS`` calculation"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"An optional working directory of a previously completed calculation to restart from."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional settings that control the ``LAMMPS`` calculation"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"The data extracted from the lammps output file"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"time_dependent_computes",required:!0,valid_types:"ArrayData",info:"The data with the time dependent computes parsed from the lammps.out"},{name:"trajectories",required:!0,valid_types:"LammpsTrajectory",info:"The data extracted from the lammps trajectory file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"restartfile",required:!1,valid_types:"SinglefileData",info:"The restartfile of a ``LAMMPS`` calculation"},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"the retrieved folder data node could not be accessed."},{status:302,message:"the stdout output file was not found"},{status:303,message:"the stderr output file was not found"},{status:304,message:"the output file is missing, it is possible that LAMMPS never ran"},{status:305,message:"the file with the lammps log was not found"},{status:306,message:"the file with the final variables was not found"},{status:307,message:"the file with the trajectories was not found"},{status:308,message:"the file with the restart information was not found"},{status:309,message:"The parser detected the lammps error :{error}"},{status:400,message:"The calculation stopped prematurely because it ran out of walltime."},{status:401,message:"The energy tolerance was not reached at minimization."},{status:402,message:"The force tolerance was not reached at minimization."},{status:1001,message:"error parsing the output file has failed."},{status:1002,message:"error parsing the final variable file has failed."}]},class:"aiida_lammps.calculations.base:LammpsBaseCalculation"},"lammps.raw":{description:["Plugin with minimal interface to run LAMMPS."],spec:{inputs:[{name:"script",required:!0,valid_types:"SinglefileData",info:"Complete input script to use. If specified, `structure`, `potential` and `parameters` are ignored."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"filenames",required:!1,valid_types:"Dict, NoneType",info:"Optional namespace to specify with which filenames the files of ``files`` input should be written."},{name:"files",required:!1,valid_types:"SinglefileData",info:"Optional files that should be written to the working directory."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional settings that control the ``LAMMPS`` calculation"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"The data extracted from the lammps out file"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:309,message:"The parser detected the lammps error :{error}"},{status:351,message:"the file with the lammps out was not found"},{status:1001,message:"parsing the output file has failed."}]},class:"aiida_lammps.calculations.raw:LammpsRawCalculation"}},"aiida.parsers":{"lammps.base":"aiida_lammps.parsers.base:LammpsBaseParser","lammps.raw":"aiida_lammps.parsers.raw:LammpsRawParser"},"aiida.data":{"lammps.potential":"aiida_lammps.data.potential:LammpsPotentialData","lammps.trajectory":"aiida_lammps.data.trajectory:LammpsTrajectory"},"aiida.workflows":{"lammps.base":{description:["Base workchain for calculations using LAMMPS"],spec:{inputs:[{name:"lammps",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"store_restart",required:!1,valid_types:"Bool, NoneType",info:`
            Whether to store the restartfile in the repository.
            `}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"The data extracted from the lammps output file"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"time_dependent_computes",required:!0,valid_types:"ArrayData",info:"The data with the time dependent computes parsed from the lammps.out"},{name:"trajectories",required:!0,valid_types:"LammpsTrajectory",info:"The data extracted from the lammps trajectory file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"restartfile",required:!1,valid_types:"SinglefileData",info:"The restartfile of a ``LAMMPS`` calculation"},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:`
            The calculation failed with an unidentified unrecoverable error.
            `},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_lammps.workflows.base:LammpsBaseWorkChain"},"lammps.relax":{description:["Workchain to relax a structure using the LAMMPS minimization procedure."],spec:{inputs:[{name:"lammps",required:!0,valid_types:"Data",info:""},{name:"relax",required:!0,valid_types:"",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"store_restart",required:!1,valid_types:"Bool, NoneType",info:`
            Whether to store the restartfile in the repository.
            `}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"The data extracted from the lammps output file"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"time_dependent_computes",required:!0,valid_types:"ArrayData",info:"The data with the time dependent computes parsed from the lammps.out"},{name:"trajectories",required:!0,valid_types:"LammpsTrajectory",info:"The data extracted from the lammps trajectory file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"restartfile",required:!1,valid_types:"SinglefileData",info:"The restartfile of a ``LAMMPS`` calculation"},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:403,message:"The underlying LammpsBaseWorkChain failed"}]},class:"aiida_lammps.workflows.relax:LammpsRelaxWorkChain"},"lammps.md":{description:["Workchain to perform a LAMMPS MD simulation."],spec:{inputs:[{name:"lammps",required:!0,valid_types:"Data",info:""},{name:"md",required:!0,valid_types:"",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"store_restart",required:!1,valid_types:"Bool, NoneType",info:`
            Whether to store the restartfile in the repository.
            `}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results",required:!0,valid_types:"Dict",info:"The data extracted from the lammps output file"},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"time_dependent_computes",required:!0,valid_types:"ArrayData",info:"The data with the time dependent computes parsed from the lammps.out"},{name:"trajectories",required:!0,valid_types:"LammpsTrajectory",info:"The data extracted from the lammps trajectory file"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"restartfile",required:!1,valid_types:"SinglefileData",info:"The restartfile of a ``LAMMPS`` calculation"},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:403,message:"The underlying LammpsBaseWorkChain failed"}]},class:"aiida_lammps.workflows.molecular_dynamics:LammpsMDWorkChain"}}},commits_count:28,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:3}],pip_install_cmd:"pip install git+https://github.com/aiidaplugins/aiida-lammps",is_installable:"True"},"aiida-lsmo":{code_home:"https://github.com/lsmo-epfl/aiida-lsmo",development_status:"stable",entry_point_prefix:"lsmo",pip_url:"git+https://github.com/lsmo-epfl/aiida-lsmo",name:"aiida-lsmo",package_name:"aiida_lsmo",hosted_on:"github.com",metadata:{author:"Aliaksandr Yakutovich, Daniele Ongari, Leopold Talirz",author_email:"aliaksandr.yakutovich@epfl.ch",version:"1.0.0",description:"AiiDA workflows for the LSMO laboratory at EPFL",classifiers:["Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7"]},aiida_version:">=1.0.0",entry_points:{"aiida.calculations":{"lsmo.ff_builder":"aiida_lsmo.calcfunctions:ff_builder","lsmo.calc_ch4_working_cap":"aiida_lsmo.calcfunctions:calc_ch4_working_cap","lsmo.calc_h2_working_cap":"aiida_lsmo.calcfunctions:calc_h2_working_cap","lsmo.calc_o2_working_cap":"aiida_lsmo.calcfunctions:calc_o2_working_cap","lsmo.calc_selectivity":"aiida_lsmo.calcfunctions:calc_selectivity"},"aiida.parsers":{"lsmo.cp2k_bsse_parser":"aiida_lsmo.parsers:Cp2kBsseParser","lsmo.cp2k_advanced_parser":"aiida_lsmo.parsers:Cp2kAdvancedParser"},"aiida.workflows":{"lsmo.binding_site":"aiida_lsmo.workchains:BindingSiteWorkChain","lsmo.cp2k_binding_energy":"aiida_lsmo.workchains.cp2k_binding_energy:Cp2kBindingEnergyWorkChain","lsmo.cp2k_multistage":"aiida_lsmo.workchains:Cp2kMultistageWorkChain","lsmo.cp2k_multistage_ddec":"aiida_lsmo.workchains:Cp2kMultistageDdecWorkChain","lsmo.isotherm":"aiida_lsmo.workchains:IsothermWorkChain","lsmo.isotherm_multi_temp":"aiida_lsmo.workchains:IsothermMultiTempWorkChain","lsmo.isotherm_calc_pe":"aiida_lsmo.workchains:IsothermCalcPEWorkChain","lsmo.zeopp_multistage_ddec":"aiida_lsmo.workchains:ZeoppMultistageDdecWorkChain","lsmo.sim_annealing":"aiida_lsmo.workchains.sim_annealing:SimAnnealingWorkChain","lsmo.nanoporous_screening_1":"aiida_lsmo.workchains:NanoporousScreening1WorkChain"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-lsmo<pre>Collecting git+https://github.com/lsmo-epfl/aiida-lsmo
  Cloning https://github.com/lsmo-epfl/aiida-lsmo to /tmp/pip-req-build-nic2y_8k
  Running command git clone --filter=blob:none --quiet https://github.com/lsmo-epfl/aiida-lsmo /tmp/pip-req-build-nic2y_8k
  Resolved https://github.com/lsmo-epfl/aiida-lsmo to commit 6bf08fa42e545dadf889ea8095d7fcdd8d1be15c
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-lsmo to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-lsmo==1.0.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-lsmo 1.0.0 depends on aiida-core~=1.0
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:5},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:10}],pip_install_cmd:"pip install git+https://github.com/lsmo-epfl/aiida-lsmo",is_installable:"False"},"aiida-metavo-scheduler":{code_home:"https://github.com/pzarabadip/aiida-metavo-scheduler",development_status:"stable",entry_point_prefix:"metavo_scheduler",pip_url:"git+https://github.com/pzarabadip/aiida-metavo-scheduler",name:"aiida-metavo-scheduler",package_name:"aiida_metavo_scheduler",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"1.0.0",description:"",classifiers:["Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering"]},aiida_version:">=1.0.0,<1.6",entry_points:{"aiida.cmdline.computer.configure":{sshmetavo:"aiida_metavo_scheduler.metavo.ssh_metavo:CONFIGURE_SSH_CMD"},"aiida.schedulers":{pbsprometavo:"aiida_metavo_scheduler.metavo.pbspro_metavo:PbsproSchedulerMetaVO"},"aiida.transports":{sshmetavo:"aiida_metavo_scheduler.metavo.ssh_metavo:SshTransport"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-metavo-scheduler<pre>Collecting git+https://github.com/pzarabadip/aiida-metavo-scheduler
  Cloning https://github.com/pzarabadip/aiida-metavo-scheduler to /tmp/pip-req-build-9cmz7bc_
  Running command git clone --filter=blob:none --quiet https://github.com/pzarabadip/aiida-metavo-scheduler /tmp/pip-req-build-9cmz7bc_
  Resolved https://github.com/pzarabadip/aiida-metavo-scheduler to commit 955697497641ca13e997431a8e925df6ec3a9eea
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-metavo-scheduler to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-metavo-scheduler==1.0.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-metavo-scheduler 1.0.0 depends on aiida_core<1.6 and >=1.0.0
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'sshmetavo' does not start with prefix 'metavo_scheduler.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'pbsprometavo' does not start with prefix 'metavo_scheduler.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'sshmetavo' does not start with prefix 'metavo_scheduler.'"],summaryinfo:[{colorclass:"orange",text:"Other (Cmdline computer configure, Schedulers, Transports)",count:3}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-metavo-scheduler",is_installable:"False"},"aiida-mlip":{entry_point_prefix:"mlip",plugin_info:"https://raw.githubusercontent.com/stfc/aiida-mlip/main/pyproject.toml",code_home:"https://github.com/stfc/aiida-mlip",documentation_url:"https://stfc.github.io/aiida-mlip/",pip_url:"aiida-mlip",name:"aiida-mlip",package_name:"aiida_mlip",hosted_on:"github.com",metadata:{release_date:"2024-06-10",description:"machine learning interatomic potentials aiida plugin",author:"Federica Zanca",author_email:"federica.zanca@stfc.ac.uk",home_page:"https://github.com/stfc/aiida-mlip/",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: BSD License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9"],version:"0.2.1"},aiida_version:">=2.5,<3.0",entry_points:{"aiida.calculations":{"mlip.md":{description:["Calcjob implementation to run geometry MD calculations using mlips.","","    Methods","    -------","    define(spec: CalcJobProcessSpec) -> None:","        Define the process specification, its inputs, outputs and exit codes.","    prepare_for_submission(folder: Folder) -> CalcInfo:","        Create the input files for the `CalcJob`."],spec:{inputs:[{name:"arch",required:!1,valid_types:"Str, NoneType",info:"Mlip architecture to use for calculation, defaults to mace"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"config",required:!1,valid_types:"JanusConfigfile, NoneType",info:"Name of the log output file"},{name:"device",required:!1,valid_types:"Str, NoneType",info:"Device on which to run calculation (cpu, cuda or mps)"},{name:"ensemble",required:!1,valid_types:"Str, NoneType",info:"Name for thermodynamic ensemble"},{name:"log_filename",required:!1,valid_types:"Str, NoneType",info:"Name of the log output file"},{name:"md_kwargs",required:!1,valid_types:"Dict, NoneType",info:"Keywords for molecular dynamics"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"model",required:!1,valid_types:"ModelData, NoneType",info:"Mlip model used for calculation"},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"precision",required:!1,valid_types:"Str, NoneType",info:"Precision level for calculation"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"struct",required:!1,valid_types:"StructureData, NoneType",info:"The input structure."}],outputs:[{name:"final_structure",required:!0,valid_types:"StructureData",info:""},{name:"log_output",required:!0,valid_types:"SinglefileData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results_dict",required:!0,valid_types:"Dict",info:"The `results_dict` output node of the successful calculation."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stats_file",required:!0,valid_types:"SinglefileData",info:""},{name:"std_output",required:!0,valid_types:"SinglefileData",info:""},{name:"summary",required:!0,valid_types:"SinglefileData",info:""},{name:"traj_file",required:!0,valid_types:"SinglefileData",info:""},{name:"traj_output",required:!0,valid_types:"TrajectoryData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:305,message:"Some output files missing or cannot be read"}]},class:"aiida_mlip.calculations.md:MD"},"mlip.opt":{description:["Calcjob implementation to run geometry optimisation calculations using mlips.","","    Methods","    -------","    define(spec: CalcJobProcessSpec) -> None:","        Define the process specification, its inputs, outputs and exit codes.","    prepare_for_submission(folder: Folder) -> CalcInfo:","        Create the input files for the `CalcJob`."],spec:{inputs:[{name:"arch",required:!1,valid_types:"Str, NoneType",info:"Mlip architecture to use for calculation, defaults to mace"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"config",required:!1,valid_types:"JanusConfigfile, NoneType",info:"Name of the log output file"},{name:"device",required:!1,valid_types:"Str, NoneType",info:"Device on which to run calculation (cpu, cuda or mps)"},{name:"fmax",required:!1,valid_types:"Float, NoneType",info:"Maximum force for convergence"},{name:"fully_opt",required:!1,valid_types:"Bool, NoneType",info:"Fully optimise the cell vectors, angles, and atomic positions"},{name:"log_filename",required:!1,valid_types:"Str, NoneType",info:"Name of the log output file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"model",required:!1,valid_types:"ModelData, NoneType",info:"Mlip model used for calculation"},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"opt_kwargs",required:!1,valid_types:"Dict, NoneType",info:"Other optimisation keywords"},{name:"out",required:!1,valid_types:"Str, NoneType",info:"Name of the xyz output file"},{name:"precision",required:!1,valid_types:"Str, NoneType",info:"Precision level for calculation"},{name:"properties",required:!1,valid_types:"Str, NoneType",info:"Properties to calculate"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"steps",required:!1,valid_types:"Int, NoneType",info:"Number of optimisation steps"},{name:"struct",required:!1,valid_types:"StructureData, NoneType",info:"The input structure."},{name:"traj",required:!1,valid_types:"Str, NoneType",info:"Path to save optimisation frames to"},{name:"vectors_only",required:!1,valid_types:"Bool, NoneType",info:"Optimise cell vectors, as well as atomic positions"}],outputs:[{name:"final_structure",required:!0,valid_types:"StructureData",info:""},{name:"log_output",required:!0,valid_types:"SinglefileData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results_dict",required:!0,valid_types:"Dict",info:"The `results_dict` output node of the successful calculation."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"std_output",required:!0,valid_types:"SinglefileData",info:""},{name:"traj_file",required:!0,valid_types:"SinglefileData",info:""},{name:"traj_output",required:!0,valid_types:"TrajectoryData",info:""},{name:"xyz_output",required:!0,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:305,message:"Some output files missing or cannot be read"}]},class:"aiida_mlip.calculations.geomopt:GeomOpt"},"mlip.sp":{description:["Calcjob implementation to run single point calculations using mlips.","","    Attributes","    ----------","    XYZ_OUTPUT : str","        Default xyz output file name.","","    Methods","    -------","    define(spec: CalcJobProcessSpec) -> None:","        Define the process specification, its inputs, outputs and exit codes.","    validate_inputs(value: dict, port_namespace: PortNamespace) -> Optional[str]:","        Check if the inputs are valid.","    prepare_for_submission(folder: Folder) -> CalcInfo:","        Create the input files for the `CalcJob`."],spec:{inputs:[{name:"arch",required:!1,valid_types:"Str, NoneType",info:"Mlip architecture to use for calculation, defaults to mace"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"config",required:!1,valid_types:"JanusConfigfile, NoneType",info:"Name of the log output file"},{name:"device",required:!1,valid_types:"Str, NoneType",info:"Device on which to run calculation (cpu, cuda or mps)"},{name:"log_filename",required:!1,valid_types:"Str, NoneType",info:"Name of the log output file"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"model",required:!1,valid_types:"ModelData, NoneType",info:"Mlip model used for calculation"},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"out",required:!1,valid_types:"Str, NoneType",info:"Name of the xyz output file"},{name:"precision",required:!1,valid_types:"Str, NoneType",info:"Precision level for calculation"},{name:"properties",required:!1,valid_types:"Str, NoneType",info:"Properties to calculate"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"struct",required:!1,valid_types:"StructureData, NoneType",info:"The input structure."}],outputs:[{name:"log_output",required:!0,valid_types:"SinglefileData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results_dict",required:!0,valid_types:"Dict",info:"The `results_dict` output node of the successful calculation."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"std_output",required:!0,valid_types:"SinglefileData",info:""},{name:"xyz_output",required:!0,valid_types:"SinglefileData",info:""},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:305,message:"Some output files missing or cannot be read"}]},class:"aiida_mlip.calculations.singlepoint:Singlepoint"},"mlip.train":{description:["Calcjob implementation to train mlips.","","    Attributes","    ----------","    DEFAULT_OUTPUT_FILE : str","        Default stdout file name.","","    Methods","    -------","    define(spec: CalcJobProcessSpec) -> None:","        Define the process specification, its inputs, outputs and exit codes.","    validate_inputs(value: dict, port_namespace: PortNamespace) -> Optional[str]:","        Check if the inputs are valid.","    prepare_for_submission(folder: Folder) -> CalcInfo:","        Create the input files for the `CalcJob`."],spec:{inputs:[{name:"mlip_config",required:!0,valid_types:"JanusConfigfile",info:"Config file with parameters for training"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"fine_tune",required:!1,valid_types:"Bool, NoneType",info:"Whether fine-tuning a model"},{name:"foundation_model",required:!1,valid_types:"ModelData, NoneType",info:"Model to fine-tune"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"checkpoints",required:!0,valid_types:"FolderData",info:""},{name:"compiled_model",required:!0,valid_types:"SinglefileData",info:""},{name:"logs",required:!0,valid_types:"FolderData",info:""},{name:"model",required:!0,valid_types:"ModelData",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"results_dict",required:!0,valid_types:"Dict",info:"The `results_dict` output node of the training."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:305,message:"Some output files missing or cannot be read"}]},class:"aiida_mlip.calculations.train:Train"}},"aiida.data":{"mlip.config":"aiida_mlip.data.config:JanusConfigfile","mlip.modeldata":"aiida_mlip.data.model:ModelData"},"aiida.parsers":{"mlip.md_parser":"aiida_mlip.parsers.md_parser:MDParser","mlip.opt_parser":"aiida_mlip.parsers.opt_parser:GeomOptParser","mlip.sp_parser":"aiida_mlip.parsers.sp_parser:SPParser","mlip.train_parser":"aiida_mlip.parsers.train_parser:TrainParser"}},commits_count:13,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:4},{colorclass:"red",text:"Data",count:2}],pip_install_cmd:"pip install aiida-mlip",is_installable:"True"},"aiida-mpds":{code_home:"https://github.com/mpds-io/mpds-aiida",development_status:"beta",documentation_url:"https://github.com/mpds-io/mpds-aiida",entry_point_prefix:"mpds",pip_url:"git+https://github.com/mpds-io/mpds-aiida",name:"aiida-mpds",package_name:"aiida_mpds",hosted_on:"github.com",metadata:{author:"Andrey Sobolev",author_email:"as@tilde.pro",version:"",description:"Aiida workflows for MPDS based on CRYSTAL",classifiers:["Programming Language :: Python","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics","Topic :: Scientific/Engineering :: Information Analysis","Framework :: AiiDA"]},aiida_version:">=1.0.1",entry_points:{"aiida.workflows":{"crystal.mpds":"mpds_aiida.workflows.mpds:MPDSStructureWorkchain","crystal.cif":"mpds_aiida.workflows.cif:CIFStructureWorkchain","crystal.aiida":"mpds_aiida.workflows.aiida:AiidaStructureWorkchain"}},commits_count:2,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-mpds<pre>Collecting git+https://github.com/mpds-io/mpds-aiida
  Cloning https://github.com/mpds-io/mpds-aiida to /tmp/pip-req-build-yrg6tl6z
  Running command git clone --filter=blob:none --quiet https://github.com/mpds-io/mpds-aiida /tmp/pip-req-build-yrg6tl6z
  Resolved https://github.com/mpds-io/mpds-aiida to commit a5818ca804ad35bb2dbc28c3437697f3df4ee43f
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft (from mpds-aiida==0.10.1)
  Cloning https://github.com/tilde-lab/aiida-crystal-dft to /tmp/pip-install-io7u94rh/aiida-crystal-dft_7694de02728f41bd969c6b195ab6c3df
  Running command git clone --filter=blob:none --quiet https://github.com/tilde-lab/aiida-crystal-dft /tmp/pip-install-io7u94rh/aiida-crystal-dft_7694de02728f41bd969c6b195ab6c3df
  Resolved https://github.com/tilde-lab/aiida-crystal-dft to commit 4fb8ebc25eb5eba66b560c36ef0bfd612872b9b0
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
Collecting metis-backend@ git+https://github.com/basf/metis-backend (from mpds-aiida==0.10.1)
  Cloning https://github.com/basf/metis-backend to /tmp/pip-install-io7u94rh/metis-backend_398bb19e2acc4284aa53bd95e7d4c099
  Running command git clone --filter=blob:none --quiet https://github.com/basf/metis-backend /tmp/pip-install-io7u94rh/metis-backend_398bb19e2acc4284aa53bd95e7d4c099
  Resolved https://github.com/basf/metis-backend to commit e004049235d55e3ca1db444a5069b0eecbfdfb15
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
Collecting reentry>=1.3.1 (from mpds-aiida==0.10.1)
  Using cached reentry-1.3.3-py3-none-any.whl.metadata (10 kB)
Requirement already satisfied: six>=1.16.0 in /opt/conda/lib/python3.10/site-packages (from mpds-aiida==0.10.1) (1.16.0)
Requirement already satisfied: numpy>=1.17.5 in /opt/conda/lib/python3.10/site-packages (from mpds-aiida==0.10.1) (1.26.4)
Collecting ase>=3.19 (from mpds-aiida==0.10.1)
  Downloading ase-3.25.0-py3-none-any.whl.metadata (4.2 kB)
Collecting yascheduler>=1.0.12 (from mpds-aiida==0.10.1)
  Downloading yascheduler-1.5.0-py3-none-any.whl.metadata (13 kB)
Collecting scipy>=1.6.0 (from ase>=3.19->mpds-aiida==0.10.1)
  Downloading scipy-1.15.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 62.0/62.0 kB 7.0 MB/s eta 0:00:00
Collecting matplotlib>=3.3.4 (from ase>=3.19->mpds-aiida==0.10.1)
  Downloading matplotlib-3.10.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)
Requirement already satisfied: setuptools>=36.2 in /opt/conda/lib/python3.10/site-packages (from reentry>=1.3.1->mpds-aiida==0.10.1) (70.0.0)
Requirement already satisfied: click in /opt/conda/lib/python3.10/site-packages (from reentry>=1.3.1->mpds-aiida==0.10.1) (8.1.7)
Collecting aiohttp~=3.8 (from yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading aiohttp-3.12.14-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (7.6 kB)
Collecting asyncssh~=2.11 (from yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading asyncssh-2.21.0-py3-none-any.whl.metadata (9.9 kB)
Collecting asyncstdlib~=3.10 (from yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading asyncstdlib-3.13.1-py3-none-any.whl.metadata (3.7 kB)
Collecting attrs>=22.2.0 (from yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading attrs-25.3.0-py3-none-any.whl.metadata (10 kB)
Collecting backoff~=2.1.2 (from yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading backoff-2.1.2-py3-none-any.whl.metadata (13 kB)
Collecting pg8000~=1.19 (from yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading pg8000-1.31.2-py3-none-any.whl.metadata (74 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 74.7/74.7 kB 17.2 MB/s eta 0:00:00
Collecting python-daemon~=2.3 (from yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading python_daemon-2.3.2-py3-none-any.whl.metadata (2.0 kB)
Requirement already satisfied: typing-extensions>=4.2.0 in /opt/conda/lib/python3.10/site-packages (from yascheduler>=1.0.12->mpds-aiida==0.10.1) (4.12.1)
Requirement already satisfied: aiida-core>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.5.2)
Collecting pycrystal>=1.0.10 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading pycrystal-1.0.16.tar.gz (28 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting mpds_client>=0.24 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading mpds_client-0.24.tar.gz (9.7 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting pyparsing>2.3.1 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading pyparsing-3.2.3-py3-none-any.whl.metadata (5.0 kB)
Collecting spglib==2.0.2 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading spglib-2.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (1.3 kB)
Requirement already satisfied: jinja2>=2.10 in /opt/conda/lib/python3.10/site-packages (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (3.1.4)
Collecting jsonschema>=3.0.1 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading jsonschema-4.24.0-py3-none-any.whl.metadata (7.8 kB)
Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (24.0)
Collecting flask (from metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading flask-3.1.1-py3-none-any.whl.metadata (3.0 kB)
Collecting netius (from metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading netius-1.20.5-py2.py3-none-any.whl.metadata (2.7 kB)
Collecting unidecode (from metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading Unidecode-1.4.0-py3-none-any.whl.metadata (13 kB)
Collecting pyparsing>2.3.1 (from aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading pyparsing-2.4.7-py2.py3-none-any.whl.metadata (3.6 kB)
Collecting pycodcif (from metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading pycodcif-3.0.1.tar.gz (79 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 79.6/79.6 kB 19.0 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting xylib-py (from metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading xylib-py-1.6.1.tar.gz (63 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 63.7/63.7 kB 22.9 MB/s eta 0:00:00
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Collecting nexusformat (from metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading nexusformat-1.0.8-py3-none-any.whl.metadata (3.0 kB)
Requirement already satisfied: alembic~=1.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.13.1)
Requirement already satisfied: archive-path~=0.4.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.4.2)
Requirement already satisfied: aio-pika~=6.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (6.8.1)
Requirement already satisfied: circus~=0.18.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.18.0)
Requirement already satisfied: click-spinner~=0.1.8 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.1.10)
Requirement already satisfied: disk-objectstore~=1.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.1.0)
Requirement already satisfied: docstring-parser in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.16)
Requirement already satisfied: graphviz~=0.19 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.20.3)
Requirement already satisfied: ipython>=7 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (8.25.0)
Requirement already satisfied: jedi<0.19 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.18.2)
Requirement already satisfied: kiwipy~=0.7.7 in /opt/conda/lib/python3.10/site-packages (from kiwipy[rmq]~=0.7.7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.7.8)
Requirement already satisfied: importlib-metadata~=6.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (6.11.0)
Requirement already satisfied: paramiko>=2.7.2,~=2.7 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.12.0)
Requirement already satisfied: plumpy~=0.21.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.21.10)
Requirement already satisfied: pgsu~=0.2.1 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.2.4)
Requirement already satisfied: psutil~=5.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (5.9.8)
Requirement already satisfied: psycopg2-binary~=2.8 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.9.9)
Requirement already satisfied: pydantic~=2.4 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.7.3)
Requirement already satisfied: pytz~=2021.1 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2021.3)
Requirement already satisfied: pyyaml~=6.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (6.0.1)
Requirement already satisfied: requests~=2.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.32.3)
Requirement already satisfied: sqlalchemy~=2.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.0.30)
Requirement already satisfied: tabulate~=0.8.5 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.8.10)
Requirement already satisfied: tqdm~=4.45 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (4.66.4)
Requirement already satisfied: upf_to_json~=0.9.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.9.5)
Requirement already satisfied: wrapt~=1.11 in /opt/conda/lib/python3.10/site-packages (from aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.16.0)
Collecting aiohappyeyeballs>=2.5.0 (from aiohttp~=3.8->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading aiohappyeyeballs-2.6.1-py3-none-any.whl.metadata (5.9 kB)
Collecting aiosignal>=1.4.0 (from aiohttp~=3.8->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading aiosignal-1.4.0-py3-none-any.whl.metadata (3.7 kB)
Collecting async-timeout<6.0,>=4.0 (from aiohttp~=3.8->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading async_timeout-5.0.1-py3-none-any.whl.metadata (5.1 kB)
Collecting frozenlist>=1.1.1 (from aiohttp~=3.8->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading frozenlist-1.7.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)
Requirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp~=3.8->yascheduler>=1.0.12->mpds-aiida==0.10.1) (6.0.5)
Collecting propcache>=0.2.0 (from aiohttp~=3.8->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading propcache-0.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)
Collecting yarl<2.0,>=1.17.0 (from aiohttp~=3.8->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading yarl-1.20.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (73 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 73.9/73.9 kB 23.2 MB/s eta 0:00:00
Requirement already satisfied: cryptography>=39.0 in /opt/conda/lib/python3.10/site-packages (from asyncssh~=2.11->yascheduler>=1.0.12->mpds-aiida==0.10.1) (42.0.8)
Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2>=2.10->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.1.5)
Collecting jsonschema-specifications>=2023.03.6 (from jsonschema>=3.0.1->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading jsonschema_specifications-2025.4.1-py3-none-any.whl.metadata (2.9 kB)
Collecting referencing>=0.28.4 (from jsonschema>=3.0.1->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading referencing-0.36.2-py3-none-any.whl.metadata (2.8 kB)
Collecting rpds-py>=0.7.1 (from jsonschema>=3.0.1->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading rpds_py-0.26.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.2 kB)
Collecting contourpy>=1.0.1 (from matplotlib>=3.3.4->ase>=3.19->mpds-aiida==0.10.1)
  Downloading contourpy-1.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.5 kB)
Collecting cycler>=0.10 (from matplotlib>=3.3.4->ase>=3.19->mpds-aiida==0.10.1)
  Downloading cycler-0.12.1-py3-none-any.whl.metadata (3.8 kB)
Collecting fonttools>=4.22.0 (from matplotlib>=3.3.4->ase>=3.19->mpds-aiida==0.10.1)
  Downloading fonttools-4.58.5-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (106 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 106.9/106.9 kB 34.6 MB/s eta 0:00:00
Collecting kiwisolver>=1.3.1 (from matplotlib>=3.3.4->ase>=3.19->mpds-aiida==0.10.1)
  Downloading kiwisolver-1.4.8-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl.metadata (6.2 kB)
Collecting pillow>=8 (from matplotlib>=3.3.4->ase>=3.19->mpds-aiida==0.10.1)
  Downloading pillow-11.3.0-cp310-cp310-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (9.0 kB)
Collecting python-dateutil>=2.7 (from matplotlib>=3.3.4->ase>=3.19->mpds-aiida==0.10.1)
  Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)
Collecting httplib2 (from mpds_client>=0.24->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading httplib2-0.22.0-py3-none-any.whl.metadata (2.6 kB)
Collecting ujson (from mpds_client>=0.24->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading ujson-5.10.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (9.3 kB)
Collecting pandas (from mpds_client>=0.24->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading pandas-2.3.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (91 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 91.2/91.2 kB 29.1 MB/s eta 0:00:00
Collecting jmespath (from mpds_client>=0.24->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading jmespath-1.0.1-py3-none-any.whl.metadata (7.6 kB)
Collecting scramp>=1.4.5 (from pg8000~=1.19->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading scramp-1.4.6-py3-none-any.whl.metadata (19 kB)
Collecting bs4 (from pycrystal>=1.0.10->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading bs4-0.0.2-py2.py3-none-any.whl.metadata (411 bytes)
Collecting docutils (from python-daemon~=2.3->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading docutils-0.21.2-py3-none-any.whl.metadata (2.8 kB)
Collecting lockfile>=0.10 (from python-daemon~=2.3->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading lockfile-0.12.2-py2.py3-none-any.whl.metadata (2.4 kB)
Collecting blinker>=1.9.0 (from flask->metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading blinker-1.9.0-py3-none-any.whl.metadata (1.6 kB)
Collecting itsdangerous>=2.2.0 (from flask->metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading itsdangerous-2.2.0-py3-none-any.whl.metadata (1.9 kB)
Collecting werkzeug>=3.1.0 (from flask->metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading werkzeug-3.1.3-py3-none-any.whl.metadata (3.7 kB)
Collecting h5py>=2.9 (from nexusformat->metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading h5py-3.14.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.7 kB)
Collecting hdf5plugin (from nexusformat->metis-backend@ git+https://github.com/basf/metis-backend->mpds-aiida==0.10.1)
  Downloading hdf5plugin-5.1.0-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.7 kB)
Requirement already satisfied: aiormq<4,>=3.2.3 in /opt/conda/lib/python3.10/site-packages (from aio-pika~=6.6->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (3.3.1)
Requirement already satisfied: Mako in /opt/conda/lib/python3.10/site-packages (from alembic~=1.2->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.3.5)
Requirement already satisfied: pyzmq>=17.0 in /opt/conda/lib/python3.10/site-packages (from circus~=0.18.0->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (26.0.3)
Requirement already satisfied: tornado>=5.0.2 in /opt/conda/lib/python3.10/site-packages (from circus~=0.18.0->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (6.4)
Requirement already satisfied: cffi>=1.12 in /opt/conda/lib/python3.10/site-packages (from cryptography>=39.0->asyncssh~=2.11->yascheduler>=1.0.12->mpds-aiida==0.10.1) (1.16.0)
Requirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.10/site-packages (from importlib-metadata~=6.0->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (3.19.2)
Requirement already satisfied: decorator in /opt/conda/lib/python3.10/site-packages (from ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (5.1.1)
Requirement already satisfied: matplotlib-inline in /opt/conda/lib/python3.10/site-packages (from ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.1.7)
Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in /opt/conda/lib/python3.10/site-packages (from ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (3.0.46)
Requirement already satisfied: pygments>=2.4.0 in /opt/conda/lib/python3.10/site-packages (from ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.18.0)
Requirement already satisfied: stack-data in /opt/conda/lib/python3.10/site-packages (from ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.6.3)
Requirement already satisfied: traitlets>=5.13.0 in /opt/conda/lib/python3.10/site-packages (from ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (5.14.3)
Requirement already satisfied: exceptiongroup in /opt/conda/lib/python3.10/site-packages (from ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.2.1)
Requirement already satisfied: pexpect>4.3 in /opt/conda/lib/python3.10/site-packages (from ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (4.9.0)
Requirement already satisfied: parso<0.9.0,>=0.8.0 in /opt/conda/lib/python3.10/site-packages (from jedi<0.19->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.8.4)
Requirement already satisfied: shortuuid in /opt/conda/lib/python3.10/site-packages (from kiwipy~=0.7.7->kiwipy[rmq]~=0.7.7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.0.13)
Requirement already satisfied: async-generator in /opt/conda/lib/python3.10/site-packages (from kiwipy~=0.7.7->kiwipy[rmq]~=0.7.7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.10)
Requirement already satisfied: pytray<0.4.0,>=0.2.2 in /opt/conda/lib/python3.10/site-packages (from kiwipy~=0.7.7->kiwipy[rmq]~=0.7.7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.3.4)
Requirement already satisfied: deprecation in /opt/conda/lib/python3.10/site-packages (from kiwipy~=0.7.7->kiwipy[rmq]~=0.7.7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.1.0)
Requirement already satisfied: pamqp~=2.0 in /opt/conda/lib/python3.10/site-packages (from kiwipy[rmq]~=0.7.7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.3.0)
Requirement already satisfied: bcrypt>=3.1.3 in /opt/conda/lib/python3.10/site-packages (from paramiko>=2.7.2,~=2.7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (4.1.3)
Requirement already satisfied: pynacl>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from paramiko>=2.7.2,~=2.7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.5.0)
Requirement already satisfied: nest_asyncio~=1.5 in /opt/conda/lib/python3.10/site-packages (from plumpy~=0.21.6->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (1.6.0)
Requirement already satisfied: annotated-types>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from pydantic~=2.4->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.7.0)
Requirement already satisfied: pydantic-core==2.18.4 in /opt/conda/lib/python3.10/site-packages (from pydantic~=2.4->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.18.4)
Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests~=2.0->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (3.3.2)
Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests~=2.0->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (3.7)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests~=2.0->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.2.1)
Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests~=2.0->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2024.2.2)
Collecting asn1crypto>=1.5.1 (from scramp>=1.4.5->pg8000~=1.19->yascheduler>=1.0.12->mpds-aiida==0.10.1)
  Downloading asn1crypto-1.5.1-py2.py3-none-any.whl.metadata (13 kB)
Requirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.10/site-packages (from sqlalchemy~=2.0->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (3.0.3)
Collecting beautifulsoup4 (from bs4->pycrystal>=1.0.10->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading beautifulsoup4-4.13.4-py3-none-any.whl.metadata (3.8 kB)
Collecting tzdata>=2022.7 (from pandas->mpds_client>=0.24->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading tzdata-2025.2-py2.py3-none-any.whl.metadata (1.4 kB)
Requirement already satisfied: pycparser in /opt/conda/lib/python3.10/site-packages (from cffi>=1.12->cryptography>=39.0->asyncssh~=2.11->yascheduler>=1.0.12->mpds-aiida==0.10.1) (2.22)
Requirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.10/site-packages (from pexpect>4.3->ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.7.0)
Requirement already satisfied: wcwidth in /opt/conda/lib/python3.10/site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.2.13)
Collecting soupsieve>1.2 (from beautifulsoup4->bs4->pycrystal>=1.0.10->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1)
  Downloading soupsieve-2.7-py3-none-any.whl.metadata (4.6 kB)
Requirement already satisfied: executing>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.0.1)
Requirement already satisfied: asttokens>=2.1.0 in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (2.4.1)
Requirement already satisfied: pure-eval in /opt/conda/lib/python3.10/site-packages (from stack-data->ipython>=7->aiida-core>=2.0.2->aiida-crystal-dft@ git+https://github.com/tilde-lab/aiida-crystal-dft->mpds-aiida==0.10.1) (0.2.2)
Downloading ase-3.25.0-py3-none-any.whl (3.0 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 3.0/3.0 MB 107.8 MB/s eta 0:00:00
Using cached reentry-1.3.3-py3-none-any.whl (17 kB)
Downloading yascheduler-1.5.0-py3-none-any.whl (65 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 65.4/65.4 kB 22.8 MB/s eta 0:00:00
Downloading spglib-2.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (515 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 515.3/515.3 kB 103.8 MB/s eta 0:00:00
Downloading aiohttp-3.12.14-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.6/1.6 MB 145.7 MB/s eta 0:00:00
Downloading asyncssh-2.21.0-py3-none-any.whl (374 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 374.9/374.9 kB 77.6 MB/s eta 0:00:00
Downloading asyncstdlib-3.13.1-py3-none-any.whl (43 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 44.0/44.0 kB 15.5 MB/s eta 0:00:00
Downloading attrs-25.3.0-py3-none-any.whl (63 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 63.8/63.8 kB 21.2 MB/s eta 0:00:00
Downloading backoff-2.1.2-py3-none-any.whl (14 kB)
Downloading jsonschema-4.24.0-py3-none-any.whl (88 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 88.7/88.7 kB 33.4 MB/s eta 0:00:00
Downloading matplotlib-3.10.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (8.6 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 8.6/8.6 MB 174.1 MB/s eta 0:00:00
Downloading pg8000-1.31.2-py3-none-any.whl (54 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 54.5/54.5 kB 19.8 MB/s eta 0:00:00
Downloading pyparsing-2.4.7-py2.py3-none-any.whl (67 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 67.8/67.8 kB 26.7 MB/s eta 0:00:00
Downloading python_daemon-2.3.2-py3-none-any.whl (34 kB)
Downloading scipy-1.15.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (37.7 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 37.7/37.7 MB 115.5 MB/s eta 0:00:00
Downloading flask-3.1.1-py3-none-any.whl (103 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 103.3/103.3 kB 35.0 MB/s eta 0:00:00
Downloading netius-1.20.5-py2.py3-none-any.whl (557 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 557.8/557.8 kB 104.9 MB/s eta 0:00:00
Downloading nexusformat-1.0.8-py3-none-any.whl (79 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 79.9/79.9 kB 28.8 MB/s eta 0:00:00
Downloading Unidecode-1.4.0-py3-none-any.whl (235 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 235.8/235.8 kB 66.6 MB/s eta 0:00:00
Downloading aiohappyeyeballs-2.6.1-py3-none-any.whl (15 kB)
Downloading aiosignal-1.4.0-py3-none-any.whl (7.5 kB)
Downloading async_timeout-5.0.1-py3-none-any.whl (6.2 kB)
Downloading blinker-1.9.0-py3-none-any.whl (8.5 kB)
Downloading contourpy-1.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (325 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 325.0/325.0 kB 81.5 MB/s eta 0:00:00
Downloading cycler-0.12.1-py3-none-any.whl (8.3 kB)
Downloading fonttools-4.58.5-cp310-cp310-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (4.8 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 4.8/4.8 MB 153.7 MB/s eta 0:00:00
Downloading frozenlist-1.7.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (222 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 222.9/222.9 kB 67.9 MB/s eta 0:00:00
Downloading h5py-3.14.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.6 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 4.6/4.6 MB 124.2 MB/s eta 0:00:00
Downloading itsdangerous-2.2.0-py3-none-any.whl (16 kB)
Downloading jsonschema_specifications-2025.4.1-py3-none-any.whl (18 kB)
Downloading kiwisolver-1.4.8-cp310-cp310-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (1.6 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.6/1.6 MB 147.0 MB/s eta 0:00:00
Downloading lockfile-0.12.2-py2.py3-none-any.whl (13 kB)
Downloading pillow-11.3.0-cp310-cp310-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (6.6 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 6.6/6.6 MB 163.9 MB/s eta 0:00:00
Downloading propcache-0.3.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (198 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 198.3/198.3 kB 64.3 MB/s eta 0:00:00
Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 229.9/229.9 kB 63.4 MB/s eta 0:00:00
Downloading referencing-0.36.2-py3-none-any.whl (26 kB)
Downloading rpds_py-0.26.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (383 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 383.8/383.8 kB 94.3 MB/s eta 0:00:00
Downloading scramp-1.4.6-py3-none-any.whl (12 kB)
Downloading werkzeug-3.1.3-py3-none-any.whl (224 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 224.5/224.5 kB 67.2 MB/s eta 0:00:00
Downloading yarl-1.20.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (326 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 326.1/326.1 kB 87.8 MB/s eta 0:00:00
Downloading bs4-0.0.2-py2.py3-none-any.whl (1.2 kB)
Downloading docutils-0.21.2-py3-none-any.whl (587 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 587.4/587.4 kB 89.4 MB/s eta 0:00:00
Downloading hdf5plugin-5.1.0-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (45.9 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 45.9/45.9 MB 104.7 MB/s eta 0:00:00
Downloading httplib2-0.22.0-py3-none-any.whl (96 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 96.9/96.9 kB 32.1 MB/s eta 0:00:00
Downloading jmespath-1.0.1-py3-none-any.whl (20 kB)
Downloading pandas-2.3.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.3 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 12.3/12.3 MB 142.5 MB/s eta 0:00:00
Downloading ujson-5.10.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (53 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 53.6/53.6 kB 20.1 MB/s eta 0:00:00
Downloading asn1crypto-1.5.1-py2.py3-none-any.whl (105 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 105.0/105.0 kB 34.6 MB/s eta 0:00:00
Downloading tzdata-2025.2-py2.py3-none-any.whl (347 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 347.8/347.8 kB 86.1 MB/s eta 0:00:00
Downloading beautifulsoup4-4.13.4-py3-none-any.whl (187 kB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 187.3/187.3 kB 58.1 MB/s eta 0:00:00
Downloading soupsieve-2.7-py3-none-any.whl (36 kB)
Building wheels for collected packages: mpds-aiida, aiida-crystal-dft, metis-backend, mpds_client, pycrystal, pycodcif, xylib-py
  Building wheel for mpds-aiida (setup.py): started
  Building wheel for mpds-aiida (setup.py): finished with status 'done'
  Created wheel for mpds-aiida: filename=mpds_aiida-0.10.1-py3-none-any.whl size=26540 sha256=5fcec538696fc9ae988fa780bff8e5aaf3c2a759b1cadb2033d11d95e8c110fe
  Stored in directory: /tmp/pip-ephem-wheel-cache-u7gbxvux/wheels/78/53/54/1f9951ffdf9d9f80855f9b673b98a29c0fd5474eda71dda1dd
  Building wheel for aiida-crystal-dft (pyproject.toml): started
  Building wheel for aiida-crystal-dft (pyproject.toml): finished with status 'done'
  Created wheel for aiida-crystal-dft: filename=aiida_crystal_dft-0.9.1-py3-none-any.whl size=615292 sha256=28bdff723003d982a90fa40ef201f7977b9786ce643533b2bd130a2db015794a
  Stored in directory: /tmp/pip-ephem-wheel-cache-u7gbxvux/wheels/a3/99/76/53856ab4749a880e808f4f2a1fa0f13576e6bef968abb3337c
  Building wheel for metis-backend (pyproject.toml): started
  Building wheel for metis-backend (pyproject.toml): finished with status 'done'
  Created wheel for metis-backend: filename=metis_backend-0.5.0-py3-none-any.whl size=35834 sha256=49e4164e19aa2337c2c8a6824d2ada8cbbcb6f7f8cd89782f45c61d1a20b1cba
  Stored in directory: /tmp/pip-ephem-wheel-cache-u7gbxvux/wheels/bc/6d/01/c03b51b592639c2992831ed228f7d8c9e044684f97277a57c2
  Building wheel for mpds_client (setup.py): started
  Building wheel for mpds_client (setup.py): finished with status 'done'
  Created wheel for mpds_client: filename=mpds_client-0.24-py3-none-any.whl size=9969 sha256=e956c5cbbaacf8ce5e203ae8ae52629a832b64dfbfafd5033c7d9e724331c9b9
  Stored in directory: /home/aiida/.cache/pip/wheels/ac/3b/35/86c36e5a6497d198803077160a5ef38ef680c3a20750d01cdb
  Building wheel for pycrystal (setup.py): started
  Building wheel for pycrystal (setup.py): finished with status 'done'
  Created wheel for pycrystal: filename=pycrystal-1.0.16-py3-none-any.whl size=27471 sha256=670a4314d1c4f3c857a71f71cc00448f79e82e47c141dc7dfdfc30ab87e1891c
  Stored in directory: /home/aiida/.cache/pip/wheels/bb/b8/bd/373832f07727578241660773b3994e17776c78ca6a241f3362
  Building wheel for pycodcif (setup.py): started
  Building wheel for pycodcif (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py bdist_wheel did not run successfully.
  │ exit code: 1
  ╰─> [8 lines of output]
      running bdist_wheel
      running build
      running build_py
      running build_ext
      building 'pycodcif._pycodcif' extension
      swigging pycodcif.i to pycodcif_wrap.c
      swig -python -o pycodcif_wrap.c pycodcif.i
      error: command 'swig' failed: No such file or directory
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  ERROR: Failed building wheel for pycodcif
  Running setup.py clean for pycodcif
  Building wheel for xylib-py (setup.py): started
  Building wheel for xylib-py (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py bdist_wheel did not run successfully.
  │ exit code: 1
  ╰─> [7 lines of output]
      running bdist_wheel
      running build
      running build_ext
      building '_xylib' extension
      swigging xylib.i to xylib_wrap.cpp
      swig -python -c++ -modern -modernargs -py3 -o xylib_wrap.cpp xylib.i
      error: command 'swig' failed: No such file or directory
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
  ERROR: Failed building wheel for xylib-py
  Running setup.py clean for xylib-py
Successfully built mpds-aiida aiida-crystal-dft metis-backend mpds_client pycrystal
Failed to build pycodcif xylib-py
ERROR: Could not build wheels for pycodcif, xylib-py, which is required to install pyproject.toml-based projects
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'crystal.mpds' does not start with prefix 'mpds.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'crystal.cif' does not start with prefix 'mpds.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'crystal.aiida' does not start with prefix 'mpds.'"],summaryinfo:[{colorclass:"green",text:"Workflows",count:3}],pip_install_cmd:"pip install git+https://github.com/mpds-io/mpds-aiida",is_installable:"False"},"aiida-muon":{entry_point_prefix:"muon",code_home:"https://github.com/positivemuon/aiida-muon",version_file:"https://raw.githubusercontent.com/positivemuon/aiida-muon/main/aiida_muon/__init__.py",pip_url:"git+https://github.com/positivemuon/aiida-muon",name:"aiida-muon",package_name:"aiida_muon",hosted_on:"github.com",metadata:{description:"aiida-muon is allows to find candiate muon implantation sites and hyperfine field by DFT supercell relaxations and from further symmetry and kinetics analysis.  ",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: Free To Use But Restricted","Natural Language :: English","Development Status :: 5 - Production/Stable","Framework :: AiiDA"],author:"Muon group Parma"},aiida_version:">=2.0,<3",entry_points:{"aiida.workflows":{"muon.find_muon":"aiida_muon.workflows.find_muon:FindMuonWorkChain"}},commits_count:55,development_status:"stable",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-muon<pre>Collecting git+https://github.com/positivemuon/aiida-muon
  Cloning https://github.com/positivemuon/aiida-muon to /tmp/pip-req-build-sv7by1r0
  Running command git clone --filter=blob:none --quiet https://github.com/positivemuon/aiida-muon /tmp/pip-req-build-sv7by1r0
  Resolved https://github.com/positivemuon/aiida-muon to commit 4f1ce205836e21b1effb2231a44cc64a0fa01300
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'error'
  error: subprocess-exited-with-error
  
  × Getting requirements to build wheel did not run successfully.
  │ exit code: 1
  ╰─> [16 lines of output]
      Traceback (most recent call last):
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 353, in <module>
          main()
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 335, in main
          json_out['return_val'] = hook(**hook_input['kwargs'])
        File "/opt/conda/lib/python3.10/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py", line 118, in get_requires_for_build_wheel
          return hook(config_settings)
        File "/tmp/pip-build-env-oinb0m6_/overlay/lib/python3.10/site-packages/flit_core/buildapi.py", line 23, in get_requires_for_build_wheel
          info = read_flit_config(pyproj_toml)
        File "/tmp/pip-build-env-oinb0m6_/overlay/lib/python3.10/site-packages/flit_core/config.py", line 85, in read_flit_config
          return prep_toml_config(d, path)
        File "/tmp/pip-build-env-oinb0m6_/overlay/lib/python3.10/site-packages/flit_core/config.py", line 112, in prep_toml_config
          loaded_cfg = read_pep621_metadata(d['project'], path)
        File "/tmp/pip-build-env-oinb0m6_/overlay/lib/python3.10/site-packages/flit_core/config.py", line 618, in read_pep621_metadata
          raise ConfigError(f"License file {license_tbl['file']} does not exist")
      flit_core.config.ConfigError: License file LICENSE does not exist
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: subprocess-exited-with-error

× Getting requirements to build wheel did not run successfully.
│ exit code: 1
╰─> See above for output.

note: This error originates from a subprocess, and is likely not a problem with pip.
</pre>`],warnings:[],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/positivemuon/aiida-muon",is_installable:"False"},"aiida-musconv":{entry_point_prefix:"musconv",code_home:"https://github.com/positivemuon/aiida-musconv",version_file:"raw.githubusercontent.com/positivemuon/aiida-musconv/main/aiida_musconv/__init__.py",pip_url:"git+https://github.com/positivemuon/aiida-musconv",name:"aiida-musconv",package_name:"aiida_musconv",hosted_on:"github.com",metadata:{description:"aiida-impuritysupercellconv is a plugin that allows to obtain converged supercell size for an interstitial impurity calculation.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: Free To Use But Restricted","Natural Language :: English","Development Status :: 5 - Production/Stable","Framework :: AiiDA"],author:"Muon group Parma"},aiida_version:">=2.0,<3",entry_points:{"aiida.workflows":{impuritysupercellconv:"aiida_impuritysupercellconv.workflows.impuritysupercellconv:IsolatedImpurityWorkChain"}},commits_count:35,development_status:"stable",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E002'>E002</a>: Failed to import package aiida_musconv<pre>Traceback (most recent call last):
  File "<string>", line 1, in <module>
ModuleNotFoundError: No module named 'aiida_musconv'
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'impuritysupercellconv' does not start with prefix 'musconv.'"],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/positivemuon/aiida-musconv",is_installable:"True"},"aiida-nanotech-empa":{code_home:"https://github.com/nanotech-empa/aiida-nanotech-empa",development_status:"beta",entry_point_prefix:"nanotech_empa",pip_url:"git+https://github.com/nanotech-empa/aiida-nanotech-empa",name:"aiida-nanotech-empa",package_name:"aiida_nanotech_empa",hosted_on:"github.com",metadata:{description:"AiiDA plugins and workflows developed at nanotech@surfaces group from Empa.",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Topic :: Scientific/Engineering"],author:"nanotech@surfaces"},aiida_version:">=2.6,<3.0.0",entry_points:{"aiida.parsers":{"nanotech_empa.pp":"aiida_nanotech_empa.parsers:PpParser","nanotech_empa.cp2k_gw_parser":"aiida_nanotech_empa.parsers:Cp2kGwParser","nanotech_empa.cp2k_neb_parser":"aiida_nanotech_empa.parsers:Cp2kNebParser","nanotech_empa.gaussian.cubegen_pymol":"aiida_nanotech_empa.parsers.cubegen_pymol_parser:CubegenPymolParser","nanotech_empa.gaussian.casscf":"aiida_nanotech_empa.parsers:GaussianCasscfParser"},"aiida.calculations":{"nanotech_empa.stm":"aiida_nanotech_empa.plugins:StmCalculation","nanotech_empa.overlap":"aiida_nanotech_empa.plugins:OverlapCalculation","nanotech_empa.afm":"aiida_nanotech_empa.plugins:AfmCalculation","nanotech_empa.hrstm":"aiida_nanotech_empa.plugins:HrstmCalculation","nanotech_empa.cubehandler":"aiida_nanotech_empa.plugins:CubeHandlerCalculation"},"aiida.workflows":{"nanotech_empa.nanoribbon":"aiida_nanotech_empa.workflows.qe:NanoribbonWorkChain","nanotech_empa.gaussian.scf":"aiida_nanotech_empa.workflows.gaussian:GaussianScfWorkChain","nanotech_empa.gaussian.relax":"aiida_nanotech_empa.workflows.gaussian:GaussianRelaxWorkChain","nanotech_empa.gaussian.delta_scf":"aiida_nanotech_empa.workflows.gaussian:GaussianDeltaScfWorkChain","nanotech_empa.gaussian.natorb":"aiida_nanotech_empa.workflows.gaussian:GaussianNatOrbWorkChain","nanotech_empa.gaussian.spin":"aiida_nanotech_empa.workflows.gaussian:GaussianSpinWorkChain","nanotech_empa.gaussian.hf_mp2":"aiida_nanotech_empa.workflows.gaussian:GaussianHfMp2WorkChain","nanotech_empa.gaussian.constr_opt_chain":"aiida_nanotech_empa.workflows.gaussian:GaussianConstrOptChainWorkChain","nanotech_empa.gaussian.casscf":"aiida_nanotech_empa.workflows.gaussian:GaussianCasscfWorkChain","nanotech_empa.gaussian.casscf_series":"aiida_nanotech_empa.workflows.gaussian:GaussianCasscfSeriesWorkChain","nanotech_empa.gaussian.nics":"aiida_nanotech_empa.workflows.gaussian:GaussianNicsWorkChain","nanotech_empa.cp2k.geo_opt":"aiida_nanotech_empa.workflows.cp2k:Cp2kGeoOptWorkChain","nanotech_empa.cp2k.fragment_separation":"aiida_nanotech_empa.workflows.cp2k:Cp2kFragmentSeparationWorkChain","nanotech_empa.cp2k.ads_gw_ic":"aiida_nanotech_empa.workflows.cp2k:Cp2kAdsorbedGwIcWorkChain","nanotech_empa.cp2k.molecule_gw":"aiida_nanotech_empa.workflows.cp2k:Cp2kMoleculeGwWorkChain","nanotech_empa.cp2k.mol_opt_gw":"aiida_nanotech_empa.workflows.cp2k:Cp2kMoleculeOptGwWorkChain","nanotech_empa.cp2k.pdos":"aiida_nanotech_empa.workflows.cp2k:Cp2kPdosWorkChain","nanotech_empa.cp2k.orbitals":"aiida_nanotech_empa.workflows.cp2k:Cp2kOrbitalsWorkChain","nanotech_empa.cp2k.stm":"aiida_nanotech_empa.workflows.cp2k:Cp2kStmWorkChain","nanotech_empa.cp2k.afm":"aiida_nanotech_empa.workflows.cp2k:Cp2kAfmWorkChain","nanotech_empa.cp2k.hrstm":"aiida_nanotech_empa.workflows.cp2k:Cp2kHrstmWorkChain","nanotech_empa.cp2k.diag":"aiida_nanotech_empa.workflows.cp2k:Cp2kDiagWorkChain","nanotech_empa.cp2k.replica":"aiida_nanotech_empa.workflows.cp2k:Cp2kReplicaWorkChain","nanotech_empa.cp2k.neb":"aiida_nanotech_empa.workflows.cp2k:Cp2kNebWorkChain","nanotech_empa.cp2k.phonons":"aiida_nanotech_empa.workflows.cp2k:Cp2kPhononsWorkChain","nanotech_empa.cp2k.reftraj":"aiida_nanotech_empa.workflows.cp2k:Cp2kRefTrajWorkChain"},"aiida.schedulers":{slurm_ethz_euler:"aiida_nanotech_empa.schedulers:ETHZEulerSlurmScheduler"}},commits_count:23,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-nanotech-empa<pre>Collecting git+https://github.com/nanotech-empa/aiida-nanotech-empa
  Cloning https://github.com/nanotech-empa/aiida-nanotech-empa to /tmp/pip-req-build-kq83ljab
  Running command git clone --filter=blob:none --quiet https://github.com/nanotech-empa/aiida-nanotech-empa /tmp/pip-req-build-kq83ljab
  Resolved https://github.com/nanotech-empa/aiida-nanotech-empa to commit 88ba642de600172c5a0e5a05a801b9c2c3ccbeb7
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-nanotech-empa to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-nanotech-empa==1.0.0b11 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-nanotech-empa 1.0.0b11 depends on aiida-core<3.0.0 and >=2.6
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (stable) does not match development_status in metadata (beta)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'slurm_ethz_euler' does not start with prefix 'nanotech_empa.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:5},{colorclass:"brown",text:"Parsers",count:5},{colorclass:"green",text:"Workflows",count:26},{colorclass:"orange",text:"Other (Schedulers)",count:1}],pip_install_cmd:"pip install git+https://github.com/nanotech-empa/aiida-nanotech-empa",is_installable:"False"},"aiida-nims-scheduler":{code_home:"https://github.com/atztogo/aiida-nims-scheduler",development_status:"stable",documentation_url:"https://github.com/atztogo/aiida-nims-scheduler",entry_point_prefix:"nims_scheduler",pip_url:"git+https://github.com/atztogo/aiida-nims-scheduler",name:"aiida-nims-scheduler",package_name:"aiida_nims_scheduler",hosted_on:"github.com",metadata:{description:"NIMS supercomputer scheduler",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Development Status :: 3 - Alpha","Framework :: AiiDA"],author:"Atsushi Togo"},aiida_version:">=2.0,<3",entry_points:{"aiida.schedulers":{nims_scheduler:"aiida_nims_scheduler.schedulers.pbs_nims:PbsNimsScheduler"}},commits_count:21,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W005'>W005</a>: Development status in classifiers (alpha) does not match development_status in metadata (stable)","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"orange",text:"Other (Schedulers)",count:1}],pip_install_cmd:"pip install git+https://github.com/atztogo/aiida-nims-scheduler",is_installable:"True"},"aiida-nwchem":{code_home:"https://github.com/aiidateam/aiida-nwchem",documentation_url:"https://aiida-nwchem.readthedocs.io/",entry_point_prefix:"nwchem",pip_url:"aiida-nwchem",plugin_info:"https://raw.githubusercontent.com/aiidateam/aiida-nwchem/master/setup.json",name:"aiida-nwchem",package_name:"aiida_nwchem",hosted_on:"github.com",metadata:{release_date:"2023-08-22",description:"The official AiiDA plugin for NWChem",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"3.0.1"},aiida_version:">=2.0,<3.0",entry_points:{"aiida.calculations":{"nwchem.base":{description:["Base calculation class for NWChem."],spec:{inputs:[{name:"input_file",required:!0,valid_types:"SinglefileData",info:"NWChem input file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, FolderData, NoneType",info:"Remote directory of a completed NWChem calculation to restart from."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Required output files are missing."},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"The stdout output file could not be read."},{status:312,message:"The stdout output file was incomplete."},{status:313,message:"The stdout contains multiple calculations"},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception."}]},class:"aiida_nwchem.calculations.nwchem:NwchemBaseCalculation"},"nwchem.nwchem":{description:["Base calculation class for NWChem.","","    Synthesizes NWChem input file from parameter dictionary and StructureData."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure, with or without a cell"},{name:"add_cell",required:!1,valid_types:"Bool",info:"The input structure, with or without a cell"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, FolderData, NoneType",info:"Remote directory of a completed NWChem calculation to restart from."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Required output files are missing."},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:310,message:"The stdout output file could not be read."},{status:312,message:"The stdout output file was incomplete."},{status:313,message:"The stdout contains multiple calculations"},{status:340,message:"The calculation stopped prematurely because it ran out of walltime but the job was killed by the scheduler before the files were safely written to disk for a potential restart."},{status:350,message:"The parser raised an unexpected exception."}]},class:"aiida_nwchem.calculations.nwchem:NwchemCalculation"}},"aiida.parsers":{"nwchem.nwchem":"aiida_nwchem.parsers.nwchem:NwchemBaseParser"},"aiida.workflows":{"nwchem.base":{description:["Workchain to run an NWChem calculation with automated error handling and restarts."],spec:{inputs:[{name:"nwchem",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"output_structure",required:!1,valid_types:"StructureData",info:"The relaxed output structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_nwchem.workflows.base:NwchemBaseWorkChain"}}},commits_count:0,development_status:"beta",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-nwchem",is_installable:"True"},"aiida-open_circuit_voltage":{entry_point_prefix:"quantumespresso.ocv",code_home:"https://github.com/tsthakur/aiida-open_circuit_voltage",name:"aiida-open_circuit_voltage",package_name:"aiida_open_circuit_voltage",hosted_on:"github.com",metadata:{author:"Tushar Thakur",author_email:"tushar.thakur@epfl.ch",version:"0.2.0",description:"The AiiDA plugin to calculate ocv at various charge of states using QE",classifiers:["Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Development Status :: 4 - Beta","Natural Language :: English","Intended Audience :: Science/Research"]},aiida_version:">=1.1.0",entry_points:{"aiida.workflows":{"quantumespresso.ocv.ocvwc":"aiida_open_circuit_voltage.workflows.workchain:OCVWorkChain"}},commits_count:1,development_status:"beta",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'quantumespresso.ocv' does not follow naming convention."],summaryinfo:[{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"Missing, see source code repository"},"aiida-optimize":{code_home:"https://github.com/greschd/aiida-optimize",documentation_url:"https://aiida-optimize.readthedocs.io",entry_point_prefix:"optimize",pip_url:"aiida-optimize",plugin_info:"https://raw.githubusercontent.com/greschd/aiida-optimize/master/setup.json",name:"aiida-optimize",package_name:"aiida_optimize",hosted_on:"github.com",metadata:{release_date:"2023-03-30",description:"AiiDA Plugin for running optimization algorithms.",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-optimize.readthedocs.io/",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"1.0.2"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.workflows":{"optimize.optimize":{description:["Runs an optimization procedure, given an optimization engine that defines the optimization","    algorithm, and a process which evaluates the function to be optimized."],spec:{inputs:[{name:"engine",required:!0,valid_types:"Str",info:"Engine that runs the optimization."},{name:"engine_kwargs",required:!0,valid_types:"Dict",info:"Keyword arguments passed to the optimization engine."},{name:"evaluate_process",required:!0,valid_types:"Str",info:"Process which produces the result to be optimized."},{name:"evaluate",required:!1,valid_types:"",info:"Inputs that are passed to all evaluation processes."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"optimal_process_output",required:!0,valid_types:"",info:"Output value of the optimal evaluation process."},{name:"optimal_process_uuid",required:!0,valid_types:"",info:"UUID of the optimal evaluation process."},{name:"engine_outputs",required:!1,valid_types:"",info:""},{name:"optimal_process_input",required:!1,valid_types:"",info:"Input value of the optimal evaluation process."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Optimization failed because one of the evaluate processes did not finish ok."},{status:202,message:"Optimization failed because the engine did not finish ok."}]},class:"aiida_optimize._optimization_workchain:OptimizationWorkChain"},"optimize.wrappers.add_inputs":{description:["Wrapper workchain that takes inputs as keys and values and passes it","    on to a sub-process. This enables taking a process which was not","    designed to be used in optimization, and optimize with respect to","    some arbitrary input. Inputs which always remain the same can be","    specified in the ``inputs`` namespace, whereas the inputs to be","    optimized are given through the ``added_input_keys`` and","    ``added_input_values`` inputs.","","    The outputs of the wrapper workchain are the same as those of","    the wrapped process.","",'    The "added" inputs can only be BaseType sub-classes, or',"    attributes of a Dict. For each input, its port location is given",'    in the "added_input_keys" input. For example, ``x.y`` would set',"    the ``y`` input in the ``x`` namespace.","","    For cases where the input is a Dict attribute, the (possibly nested) attribute name is given after a colon. That means ``x:a.b`` would","    set the ``['a']['b']`` attribute of the ``Dict`` given in the ``x``","    input.","","    In cases where only a single input needs to be added, they can be","    specified directly instead of wrapped in a List."],spec:{inputs:[{name:"added_input_keys",required:!0,valid_types:"List, Str",info:"Specifies the location of each added input."},{name:"added_input_values",required:!0,valid_types:"List, BaseType",info:"Values of the added inputs to be passed into the sub-process."},{name:"sub_process",required:!0,valid_types:"Str",info:"The class of the process that should be wrapped."},{name:"inputs",required:!1,valid_types:"",info:"Inputs to be passed on to the sub-process."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Workchain failed because the sub-process did not finish ok."}]},class:"aiida_optimize.wrappers._add_inputs:AddInputsWorkChain"},"optimize.wrappers.concatenate":{description:["Allows concatenating an arbitrary number of sub-processes.","","    A wrapper workchain that allows concatenating an arbitrary number","    of sub-processes. Outputs of one processes can be configured to","    be passed to the next one."],spec:{inputs:[{name:"output_input_mappings",required:!0,valid_types:"List",info:"Defines how inputs are passed between sub-processes. Each list entry entry has the form `((process_label_a, process_label_b), mapping)`, and defines outputs of process A to be passed to process B. The `mapping` values are dictionaries `{'output_name': 'input_name'}` giving the output name (in process A) and input name (in process B) for each value to pass."},{name:"process_inputs",required:!0,valid_types:"",info:"Inputs which are passed on to the sub-processes. The inputs should be grouped into a namespace identified by the process label."},{name:"process_labels",required:!0,valid_types:"List",info:"A list of pairs (label, process_name). The labels can be any string, the process_name needs to be loadable by `aiida_optimize.process_inputs.load_object`, and defines which process is being run."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"process_outputs",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"Workchain failed because a sub-process failed."}]},class:"aiida_optimize.wrappers._concatenate:ConcatenateWorkChain"},"optimize.wrappers.create_evaluate":{description:["Wrapper workchain to combine two processes: The first process _creates_","    a result, and the second _evaluates_ that result.","","    The purpose of this workchain is to facilitate optimization of processes","    which don't natively produce an output that can be optimized, by only","    having to add the 'evaluation' part."],spec:{inputs:[{name:"create",required:!0,valid_types:"",info:"Inputs which are passed on to the create sub-process."},{name:"create_process",required:!0,valid_types:"Str",info:"The sub-process which performs the create step."},{name:"evaluate_process",required:!0,valid_types:"Str",info:"The sub-process which performs the evaluate step."},{name:"output_input_mapping",required:!0,valid_types:"Dict",info:"A mapping from output names of the create process to input names of the evaluate process. These outputs (if present) are forwarded to the evaluate process."},{name:"evaluate",required:!1,valid_types:"",info:"Inputs which are passed on to the evaluate sub-process."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"create",required:!0,valid_types:"",info:""},{name:"evaluate",required:!0,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"Workchain failed because the 'create' sub-process failed."},{status:202,message:"Workchain failed because the 'evaluate' sub-process failed."}]},class:"aiida_optimize.wrappers._create_evaluate:CreateEvaluateWorkChain"}}},commits_count:0,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"green",text:"Workflows",count:4}],pip_install_cmd:"pip install aiida-optimize",is_installable:"True"},"aiida-orca":{code_home:"https://github.com/pzarabadip/aiida-orca",development_status:"stable",documentation_url:"https://aiida-orca.readthedocs.io/",entry_point_prefix:"orca",pip_url:"git+https://github.com/pzarabadip/aiida-orca",name:"aiida-orca",package_name:"aiida_orca",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"0.5.1",description:"AiiDA plugin for ORCA code",classifiers:["Environment :: Plugins","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Framework :: AiiDA"]},aiida_version:">=1.0.0,<2.0.0",entry_points:{"aiida.calculations":{orca_main:"aiida_orca.calculations:OrcaCalculation",orca_asa:"aiida_orca.calculations:OrcaAsaCalculation"},"aiida.parsers":{orca_base_parser:"aiida_orca.parsers:OrcaBaseParser"},"aiida.workflows":{"orca.base":{description:["Workchain to run a orca calculation with automated error handling and restarts."],spec:{inputs:[{name:"orca",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"the results of the calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"relaxed_structure",required:!1,valid_types:"StructureData",info:"relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unidentified unrecoverable error."},{status:301,message:"The sub process excepted."},{status:301,message:"The calculation failed with an unrecoverable error coming from aiida-orca."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_orca.workchains:OrcaBaseWorkChain"}}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-orca",is_installable:"True"},"aiida-phonopy":{code_home:"https://github.com/aiida-phonopy/aiida-phonopy",documentation_url:"https://aiida-phonopy.readthedocs.io/",entry_point_prefix:"phonopy",pip_url:"aiida-phonopy",plugin_info:"https://raw.githubusercontent.com/aiida-phonopy/aiida-phonopy/master/setup.json",name:"aiida-phonopy",package_name:"aiida_phonopy",hosted_on:"github.com",metadata:{release_date:"2025-01-27",description:"The official AiiDA plugin for Phonopy",author_email:"Lorenzo Bastonero <bastonero.lorenzo@gmail.com>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"1.2.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{"phonopy.phonopy":{description:["Base `CalcJob` implementation for Phonopy post-processing."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:`Phonopy parameters (\`setting tags\`) for post processing. The following tags, along their type, are allowed:
PRIMITIVE_AXES
PRIMITIVE_AXIS
EIGENVECTORS
BAND
BAND_PATHS
BAND_POINTS
BAND_LABELS
BAND_CONNECTION
BAND_INDICES
MESH
MP
MESH_NUMBERS
MP_SHIFT
GAMMA_CENTER
WRITE_MESH
DOS
DOS_RANGE
FMIN
FMAX
FPITCH
PDOS
PROJECTION_DIRECTION
XYZ_DIRECTION
SIGMA
DEBYE_MODEL
MOMEMT
MOMENT_ORDER
TPROP
TMIN
TMAX
TSTEP
PRETEND_REAL
CUTOFF_FREQUENCY
TDISP
TDISPMAT
TDISPMAT_CIF
QPOINTS
WRITEDM
NAC_METHOD
Q_DIRECTION
GROUP_VELOCITY
GV_DELTA_Q
SYMMETRY_TOLERANCE
SYMMETRY
MESH_SYMMETRY
FC_SYMMETRY
FULL_FORCE_CONSTANTS
WRITE_FORCE_CONSTANTS
ANIME_TYPE
ANIME
MODULATION
IRREPS
SHOW_IRREPS
LITTLE_COGROUP`},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"force_constants",required:!1,valid_types:"ForceConstantsData, NoneType",info:"Force constants of the input structure."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"phonopy_data",required:!1,valid_types:"PhonopyData, NoneType",info:"The preprocess output info of a previous ForceConstantsWorkChain."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Settings for phonopy calculation."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"irreducible_representations",required:!1,valid_types:"Dict",info:"Irreducible representation output."},{name:"modulation",required:!1,valid_types:"Dict",info:"Modulation information."},{name:"output_force_constants",required:!1,valid_types:"ArrayData",info:"Calculated force constants."},{name:"output_parameters",required:!1,valid_types:"Dict",info:"Sum up info of phonopy calculation."},{name:"phonon_bands",required:!1,valid_types:"BandsData",info:"Calculated phonon band structure."},{name:"projected_phonon_dos",required:!1,valid_types:"XyData",info:"Calculated projected DOS."},{name:"qpoints",required:!1,valid_types:"BandsData",info:"Calculated qpoints."},{name:"qpoints_mesh",required:!1,valid_types:"BandsData",info:"Calculated qpoint mesh."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"thermal_displacement_matrices",required:!1,valid_types:"Dict",info:"Calculated thermal displacements matrices."},{name:"thermal_displacements",required:!1,valid_types:"Dict",info:"Calculated thermal displacements."},{name:"thermal_properties",required:!1,valid_types:"XyData",info:"Calculated thermal properties."},{name:"total_phonon_dos",required:!1,valid_types:"XyData",info:"Calculated total DOS."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:301,message:"The retrieved temporary folder could not be accessed."},{status:302,message:"The retrieved folder did not contain the required stdout output file."},{status:303,message:"The retrieved folder did not contain the required phonopy file."},{status:304,message:"The retrieved folder did not contain one or more expected output files."},{status:305,message:"No run mode has been selected."},{status:310,message:"The stdout output file could not be read."},{status:311,message:"The stdout output file could not be parsed."},{status:312,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:320,message:"The loading of yaml file got an unexpected error."},{status:321,message:"The file loading via numpy got an unexpected error."},{status:350,message:"The parser raised an unexpected exception."},{status:400,message:"The parser was not able to parse one or more files."}]},class:"aiida_phonopy.calculations.phonopy:PhonopyCalculation"}},"aiida.data":{"phonopy.force_constants":"aiida_phonopy.data.force_constants:ForceConstantsData","phonopy.phonopy":"aiida_phonopy.data.phonopy:PhonopyData","phonopy.preprocess":"aiida_phonopy.data.preprocess:PreProcessData","phonopy.raw":"aiida_phonopy.data.raw:RawData"},"aiida.parsers":{"phonopy.phonopy":"aiida_phonopy.parsers.phonopy:PhonopyParser"},"aiida.workflows":{"phonopy.ase":{description:["Workflow for automated frozen phonons calculations using Phonopy and any ASE calculator.","","    Phonopy is used to produce structures with displacements, while the forces are calculated","    with any calculator that can be interfaced with ASE. The submission of the calculation","    using ASE are handled via aiida-pythonjob."],spec:{inputs:[{name:"pythonjob",required:!0,valid_types:"Data",info:""},{name:"settings",required:!0,valid_types:"",info:"Settings for how to run the workflow."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"displacement_generator",required:!1,valid_types:"Dict, NoneType",info:`Info for displacements generation. The following flags are allowed:
 distance
 is_plusminus
 is_diagonal
 is_trigonal
 number_of_snapshots
 random_seed
 temperature
 cutoff_frequency`},{name:"fc_options",required:!1,valid_types:"Dict, NoneType",info:`Options for force constants calculation (optional). The following flags are allowed:
 calculate_full_force_constants
 fc_calculator
 fc_calculator_options`},{name:"is_symmetry",required:!1,valid_types:"Bool, NoneType",info:"Whether using or not the space group symmetries."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"nac_parameters",required:!1,valid_types:"ArrayData, NoneType",info:"Non-analytical parameters."},{name:"phonopy",required:!1,valid_types:"Data",info:"Inputs for the `PhonopyCalculation` that willbe used to calculate the inter-atomic force constants, or for post-processing."},{name:"preprocess_data",required:!1,valid_types:"PhonopyData, PreProcessData, NoneType",info:"The preprocess data for frozen phonon calcualtion."},{name:"primitive_matrix",required:!1,valid_types:"List, NoneType",info:"The matrix used to generate the primitive cell from the input structure in the List format. Allowed shapes are 3x1 and 3x3 lists."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"The structure at equilibrium volume."},{name:"supercell_matrix",required:!1,valid_types:"List, NoneType",info:"The matrix used to generate the supercell from the input structure in the List format. Allowed shapes are 3x1 and 3x3 lists."},{name:"symmetry_tolerance",required:!1,valid_types:"Float, NoneType",info:"Symmetry tolerance for space group analysis on the input structure."}],outputs:[{name:"supercells_forces",required:!0,valid_types:"ArrayData",info:"The forces acting on the atoms of each supercell."},{name:"force_constants",required:!1,valid_types:"ForceConstantsData",info:"The matrix of force constants computed with finite displacements."},{name:"output_phonopy",required:!1,valid_types:"",info:""},{name:"phonopy_data",required:!1,valid_types:"PhonopyData",info:"The phonopy data with supercells displacements, forces and (optionally)nac parameters to use in the post-processing calculation."},{name:"supercells",required:!1,valid_types:"StructureData",info:"The supercells with displacements."},{name:"supercells_energies",required:!1,valid_types:"Float",info:"The total energy of each supercell."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"At least one sub processe did not finish successfully."},{status:401,message:"The PhonopyCalculation did not finish successfully."}]},class:"aiida_phonopy.workflows.ase:PhonopyAseWorkChain"},"phonopy.phonopy":{description:["Abstract workflow for automated frozen phonons.","","    Phonopy is used to produce structures with displacements,","    while the forces are calculated with a quantum engine of choice.","","    This workchain is meant to be used as a base for other specific force calculato plugin workchains,","    or as an example on how to set a possible workchain/workflow. For this reason, the outline of","    this class is not defined, while it provides the inputs and a `setup` method, which can be used","    in a specific workflow outline. Ideally, the workflow would look like:","","    1. Setup the preprocess data.","","        This is already provided in this class. It setups a `PreProcessData` node, from where","        supercell, primitive cell and supercells with displacements can be easily extracted using","        the methods of the nodes. This node can be taken from `self.ctx.preprocess_data`, and used","        during the outline of the workflow.","","    2. Run supercells using the selected quantum engine/force calculator code.","","        In specific code implementations, a force calculation on supercells needs to be run.","        To get these supercells, one need simply to run:","","        ```self.ctx.preprocess_data.calcfunctions.get_supercells_with_displacements()```","","        This will return a dictionary with all the supercells as StructureData to run for the phonon calculation.","        The keys of this dictionary are of the type `supercell_{number}`, where `number` is an integer.","        These numbers are essentials since the `phonopy` force sets is generated following these numbers,","        in order to make sure to refer to the correct displacement. Thus, it is required to keep track","        of them.","        Moreover,a calculation over the pristine supercell structure should be run before hand as reference.","        This structure can instead be gotten via:","","        ```self.ctx.preprocess_data.calcfunctions.get_supercell()```","","        This will return a StructureData without any label.","","        For an example of implementation, refer to aiidateam/aiida-common-worfklows.","","        * Note: some type of force calculation needs to map some variables from the unitcell to the supercell","        (and in certain case even the primitive cell), e.g. the atomic spin in VASP. Since this is code dependent,","        you will need to map these parameters before launching the force calculation of a certain supercell","        with displacement. This information can be gotten via:","","        ```self.ctx.preprocess_data.get_cells_mappings()```","","        Moreover, consider that cells in phonopy will always (re)fold the atoms in order to have positive coordinates.","","    3. Inspect all runs and expose the forces and energies (not mandatory) outputs.","","        * Suggested: when the calculation on each supercell has finished (correctly)","        expose the output forces (and energies) in the dynamical `supercells_forces(energies)` namespace(s).","        Provide each supercell forces as an `ArrayData` with the forces stored as `forces`","        (e.g. if your code plugin stores  the forces in `TrajectoryData`, extract them with a `calcfunction`).","        Expose each `ArrayData` choosing a **common prefix**, while as **suffix use","        _{number}**, with `{number}` referring to the correspective supercell label suffix (that you are supposed to","        keep track somewhere, e.g. in the label of the code calculation/workchain).","        Now you can gather all the information in one data noe, i.e. in a `PhonopyData` node.","        To do so, you can simple run:","","        ```self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(**self.outputs.supercells_forces)```","","        and then expose it as output in the `output_phonopy_data` namespace.","","        * Alternatively: instead of exposing the supercell forces as outputs, you can directly gather all the forces","        in a dictionary and run directly to the `generate_phonopy_data` method using this dictionary (always using","        the double *).","","        See the implementation in aiidateam/aiida-common-workflows for an example.","","    4. (optional) Run the non-analytical constants on the primitive cell.","","        Non-analytical constants should be run for polar insulators. These require usually a linear response code","        or a finite difference approach (e.g. using the electric enthalpy). Since this is usually the most expensive","        part, you should run them on the primitive cell. To get it, use:","","        ```self.ctx.preprocess_data.calcfunctions.get_primitive_cell()```","","        If you compute also these, collect the dielectric tensor and the effectic born charges in an ArrayData,","        with the arraynames `dielectric` and `born_charges` (in Cartesian coordinates!).","        Then, gather all the information of nac and forces in a unique `PhonopyData` via:","","        ```","        self.ctx.preprocess_data.calcfunctions.generate_phonopy_data(","            nac_parameters=nac_paramters,","            **self.outputs.supercells_forces","            )","        ```","","        and expose the output.","","        * Note: we require in the input for generating the full phonopy data, to give the nac in the primitive cell.","        The primitive cell of phonopy will just rotate the lattice vectors, thus mantaining the Cartasian coordinate","        system. It can happen, though, that the unitcell is not the primitive cell of the system, meaning that the","        primitive cell will contain less atoms. We expect in input the nac computed on this number of atoms. If you","        want, for some reason, compute the nac on the unitcell, you will need to get the reduced nac.","        To do so, you can consider using a built-in function in phonopy, namely:","","        :py:func:`phonopy.structure.symmetry.elaborate_borns_and_epsilon`"],spec:{inputs:[{name:"settings",required:!0,valid_types:"",info:"Settings for how to run the workflow."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation will be cleaned at the end of execution."},{name:"displacement_generator",required:!1,valid_types:"Dict, NoneType",info:`Info for displacements generation. The following flags are allowed:
 distance
 is_plusminus
 is_diagonal
 is_trigonal
 number_of_snapshots
 random_seed
 temperature
 cutoff_frequency`},{name:"fc_options",required:!1,valid_types:"Dict, NoneType",info:`Options for force constants calculation (optional). The following flags are allowed:
 calculate_full_force_constants
 fc_calculator
 fc_calculator_options`},{name:"is_symmetry",required:!1,valid_types:"Bool, NoneType",info:"Whether using or not the space group symmetries."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"nac_parameters",required:!1,valid_types:"ArrayData, NoneType",info:"Non-analytical parameters."},{name:"phonopy",required:!1,valid_types:"Data",info:"Inputs for the `PhonopyCalculation` that willbe used to calculate the inter-atomic force constants, or for post-processing."},{name:"preprocess_data",required:!1,valid_types:"PhonopyData, PreProcessData, NoneType",info:"The preprocess data for frozen phonon calcualtion."},{name:"primitive_matrix",required:!1,valid_types:"List, NoneType",info:"The matrix used to generate the primitive cell from the input structure in the List format. Allowed shapes are 3x1 and 3x3 lists."},{name:"structure",required:!1,valid_types:"StructureData, NoneType",info:"The structure at equilibrium volume."},{name:"supercell_matrix",required:!1,valid_types:"List, NoneType",info:"The matrix used to generate the supercell from the input structure in the List format. Allowed shapes are 3x1 and 3x3 lists."},{name:"symmetry_tolerance",required:!1,valid_types:"Float, NoneType",info:"Symmetry tolerance for space group analysis on the input structure."}],outputs:[{name:"supercells_forces",required:!0,valid_types:"ArrayData",info:"The forces acting on the atoms of each supercell."},{name:"force_constants",required:!1,valid_types:"ForceConstantsData",info:"The matrix of force constants computed with finite displacements."},{name:"output_phonopy",required:!1,valid_types:"",info:""},{name:"phonopy_data",required:!1,valid_types:"PhonopyData",info:"The phonopy data with supercells displacements, forces and (optionally)nac parameters to use in the post-processing calculation."},{name:"supercells",required:!1,valid_types:"StructureData",info:"The supercells with displacements."},{name:"supercells_energies",required:!1,valid_types:"Float",info:"The total energy of each supercell."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:400,message:"At least one sub processe did not finish successfully."},{status:401,message:"The PhonopyCalculation did not finish successfully."}]},class:"aiida_phonopy.workflows.phonopy:PhonopyWorkChain"}}},commits_count:5,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:4},{colorclass:"green",text:"Workflows",count:2}],pip_install_cmd:"pip install aiida-phonopy",is_installable:"True"},"aiida-phtools":{code_home:"https://github.com/ltalirz/aiida-phtools",entry_point_prefix:"phtools",pip_url:"aiida-phtools",plugin_info:"https://raw.github.com/ltalirz/aiida-phtools/master/setup.json",name:"aiida-phtools",package_name:"aiida_phtools",hosted_on:"github.com",metadata:{release_date:"2018-06-21",description:"AiiDA plugin for persistence homology tools, used to analyze nanoporous materials.",author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-phtools",classifiers:["Programming Language :: Python"],version:"0.1.0a1"},aiida_version:"*",entry_points:{"aiida.calculations":{"phtools.dmatrix":"aiida_phtools.calculations.distance_matrix:DistanceMatrixCalculation","phtools.surface":"aiida_phtools.calculations.pore_surface:PoreSurfaceCalculation"},"aiida.data":{"phtools.surface":"aiida_phtools.data.pore_surface:PoreSurfaceParameters"},"aiida.parsers":{"phtools.dmatrix":"aiida_phtools.parsers.distance_matrix:DistanceMatrixParser","phtools.surface":"aiida_phtools.parsers.pore_surface:PoreSurfaceParser"}},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install --pre aiida-phtools"},"aiida-plumed":{code_home:"https://github.com/ConradJohnston/aiida-plumed",entry_point_prefix:"plumed",pip_url:"aiida-plumed",plugin_info:"https://raw.github.com/ConradJohnston/aiida-plumed/AiiDA-v1.0-compatibility/setup.json",name:"aiida-plumed",package_name:"aiida_plumed",hosted_on:"github.com",metadata:{release_date:"2019-09-16",description:"AiiDA plugin providing support for Plumed2",author:"Conrad Johnston",author_email:"conrad.s.johnston@googlemail.com",license:"MIT",home_page:"https://github.com/ConradJohnston/aiida-plumed",classifiers:["Development Status :: 2 - Pre-Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0a0"},aiida_version:">=1.0.0b3,<2.0.0",entry_points:{"aiida.calculations":{plumed:"aiida_plumed.calculations:DiffCalculation"},"aiida.cmdline.data":{plumed:"aiida_plumed.cli:data_cli"},"aiida.data":{plumed:"aiida_plumed.data:DiffParameters"},"aiida.parsers":{plumed:"aiida_plumed.parsers:DiffParser"}},commits_count:0,development_status:"pre-alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-plumed<pre>Collecting aiida-plumed
  Downloading aiida-plumed-0.1.0a0.tar.gz (11 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-plumed to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-plumed==0.1.0a0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-plumed 0.1.0a0 depends on aiida-core<2.0.0 and >=1.0.0b3
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install --pre aiida-plumed",is_installable:"False"},"aiida-porousmaterials":{code_home:"https://github.com/pzarabadip/aiida-porousmaterials",development_status:"stable",entry_point_prefix:"porousmaterials",pip_url:"aiida-porousmaterials",name:"aiida-porousmaterials",package_name:"aiida_porousmaterials",hosted_on:"github.com",metadata:{release_date:"2020-03-05",description:"AiiDA plugin for PorousMaterials code",author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",license:"MIT",home_page:"https://github.com/pzarabadip/aiida-porousmaterials",classifiers:["Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8"],version:"1.0.0a3"},aiida_version:null,entry_points:{"aiida.calculations":{porousmaterials:"aiida_porousmaterials.calculations:PorousMaterialsCalculation"},"aiida.parsers":{porousmaterials:"aiida_porousmaterials.parser:PorousMaterialsParser"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-porousmaterials<pre>Collecting aiida-porousmaterials
  Downloading aiida-porousmaterials-1.0.0a3.tar.gz (5.7 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-porousmaterials to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida_porousmaterials-1.0.0a2-py3-none-any.whl.metadata (2.6 kB)
  Downloading aiida_porousmaterials-1.0.0a1-py3-none-any.whl.metadata (2.6 kB)
ERROR: Cannot install aiida-porousmaterials==1.0.0a1, aiida-porousmaterials==1.0.0a2 and aiida-porousmaterials==1.0.0a3 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-porousmaterials 1.0.0a3 depends on aiida_core<2.0.0 and >=1.0.0
    aiida-porousmaterials 1.0.0a2 depends on aiida-core<2.0.0 and >=1.0.0
    aiida-porousmaterials 1.0.0a1 depends on aiida-core<2.0.0 and >=1.0.0
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install --pre aiida-porousmaterials",is_installable:"False"},"aiida-pseudo":{code_home:"https://github.com/aiidateam/aiida-pseudo",entry_point_prefix:"pseudo",pip_url:"aiida-pseudo",plugin_info:"https://raw.github.com/aiidateam/aiida-pseudo/master/setup.cfg",name:"aiida-pseudo",package_name:"aiida_pseudo",hosted_on:"github.com",metadata:{release_date:"2025-07-01",description:"AiiDA plugin that simplifies working with pseudo potentials.",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>',classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.13","Programming Language :: Python :: 3.9"],version:"1.7.2"},aiida_version:">=2.6,<3.0",entry_points:{"aiida.data":{pseudo:"aiida_pseudo.data.pseudo.pseudo:PseudoPotentialData","pseudo.jthxml":"aiida_pseudo.data.pseudo.jthxml:JthXmlData","pseudo.psf":"aiida_pseudo.data.pseudo.psf:PsfData","pseudo.psml":"aiida_pseudo.data.pseudo.psml:PsmlData","pseudo.psp8":"aiida_pseudo.data.pseudo.psp8:Psp8Data","pseudo.upf":"aiida_pseudo.data.pseudo.upf:UpfData","pseudo.vps":"aiida_pseudo.data.pseudo.vps:VpsData"},"aiida.groups":{"pseudo.family":"aiida_pseudo.groups.family.pseudo:PseudoPotentialFamily","pseudo.family.cutoffs":"aiida_pseudo.groups.family.cutoffs:CutoffsPseudoPotentialFamily","pseudo.family.pseudo_dojo":"aiida_pseudo.groups.family.pseudo_dojo:PseudoDojoFamily","pseudo.family.sssp":"aiida_pseudo.groups.family.sssp:SsspFamily"},console_scripts:{"aiida-pseudo":"aiida_pseudo.cli:cmd_root"}},commits_count:22,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"red",text:"Data",count:7},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Groups)",count:4}],pip_install_cmd:"pip install aiida-pseudo",is_installable:"True"},"aiida-psi4":{code_home:"https://github.com/ltalirz/aiida-psi4/tree/master",development_status:"beta",entry_point_prefix:"psi4",pip_url:"git+https://github.com/ltalirz/aiida-psi4",name:"aiida-psi4",package_name:"aiida_psi4",hosted_on:"github.com",metadata:{author:"Leopold Talirz",author_email:"leopold.talirz@gmail.com",version:"0.1.0a0",description:"AiiDA plugin for the Psi4 Quantum Chemistry package.",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.6.4,<2.0.0",entry_points:{"aiida.data":{"psi4.atomic_input":"aiida_psi4.data:AtomicInput"},"aiida.calculations":{psi4:"aiida_psi4.calculations:Psi4Calculation"},"aiida.parsers":{psi4:"aiida_psi4.parsers:QCSchemaParser"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-psi4<pre>Collecting git+https://github.com/ltalirz/aiida-psi4
  Cloning https://github.com/ltalirz/aiida-psi4 to /tmp/pip-req-build-sarv5qua
  Running command git clone --filter=blob:none --quiet https://github.com/ltalirz/aiida-psi4 /tmp/pip-req-build-sarv5qua
  Resolved https://github.com/ltalirz/aiida-psi4 to commit 637e6b0b29e724a158014269d55d9091c6af48c7
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-psi4 to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-psi4==0.1.0a0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-psi4 0.1.0a0 depends on aiida-core<2.0.0 and >=1.6.4
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install git+https://github.com/ltalirz/aiida-psi4",is_installable:"False"},"aiida-pyscf":{code_home:"https://github.com/microsoft/aiida-pyscf",entry_point_prefix:"pyscf",pip_url:"aiida-pyscf",plugin_info:"https://raw.githubusercontent.com/microsoft/aiida-pyscf/main/pyproject.toml",name:"aiida-pyscf",package_name:"aiida_pyscf",hosted_on:"github.com",metadata:{release_date:"2024-01-03",description:"AiiDA plugin for the Python-based Simulations of Chemistry Framework (PySCF).",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>, Adam Grofe <v-adamgrofe@microsoft.com>',classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"0.5.1"},aiida_version:">=2.5,<3.0",entry_points:{"aiida.calculations":{"pyscf.base":{description:["``CalcJob`` plugin for PySCF."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure with molecular structure definition."},{name:"checkpoint",required:!1,valid_types:"SinglefileData, NoneType",info:"Checkpoint of a previously completed calculation that failed to converge."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parameters",required:!1,valid_types:"Dict, NoneType",info:"Input parameters used to render the PySCF script template."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"checkpoint",required:!1,valid_types:"SinglefileData",info:"The checkpoint file in case the calculation did not converge. Can be used as an input for a restart."},{name:"cubegen",required:!1,valid_types:"",info:""},{name:"fcidump",required:!1,valid_types:"SinglefileData",info:"Computed fcidump files."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The computed Hessian."},{name:"model",required:!1,valid_types:"PickledData",info:"The model in serialized form. Can be deserialized and used without having to run the kernel again."},{name:"parameters",required:!1,valid_types:"Dict",info:"Various computed properties parsed from the `FILENAME_RESULTS` output file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The optimized structure if the input parameters contained the `optimizer` key."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The geometry optimization trajectory if the input parameters contained the `optimizer` key."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:302,message:"The stdout output file was not retrieved."},{status:303,message:"The results JSON file was not retrieved."},{status:410,message:"The electronic minimization cycle did not reach self-consistency."},{status:500,message:"The ionic minimization cycle did not converge for the given thresholds."}]},class:"aiida_pyscf.calculations.base:PyscfCalculation"}},"aiida.parsers":{"pyscf.base":"aiida_pyscf.parsers.base:PyscfParser"},"aiida.workflows":{"pyscf.base":{description:["Workchain to run a pyscf calculation with automated error handling and restarts."],spec:{inputs:[{name:"pyscf",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"checkpoint",required:!1,valid_types:"SinglefileData",info:"The checkpoint file in case the calculation did not converge. Can be used as an input for a restart."},{name:"cubegen",required:!1,valid_types:"",info:""},{name:"fcidump",required:!1,valid_types:"SinglefileData",info:"Computed fcidump files."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The computed Hessian."},{name:"model",required:!1,valid_types:"PickledData",info:"The model in serialized form. Can be deserialized and used without having to run the kernel again."},{name:"parameters",required:!1,valid_types:"Dict",info:"Various computed properties parsed from the `FILENAME_RESULTS` output file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The optimized structure if the input parameters contained the `optimizer` key."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The geometry optimization trajectory if the input parameters contained the `optimizer` key."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"The calculation failed with an unrecoverable error."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:310,message:"The calculation failed and did not retrieve a checkpoint file from which can be restarted."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_pyscf.workflows.base:PyscfBaseWorkChain"}}},commits_count:4,development_status:"alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-pyscf",is_installable:"True"},"aiida-python":{entry_point_prefix:"aiida-python",development_status:"beta",code_home:"https://github.com/addman2/aiida-python",pip_url:"aiida-python",documentation_url:"https://aiida-python.readthedocs.io",name:"aiida-python",package_name:"aiida_python",hosted_on:"github.com",metadata:{release_date:"2023-11-03",description:"AiiDA Python",author:"Ot(t)o Kohulák",author_email:"otto.kohulak@dontemail.me",license:"MIT",home_page:"https://todo.nothing/",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.0.6"},aiida_version:">=2.1.0",entry_points:{"aiida.calculations":{"python.calc":"aiida_python.calc:CalcJobPython"},"aiida.parsers":{"python.parser":"aiida_python.parser:ParserPython"},"aiida_python.serializers":{int:"aiida_python.serializers:SerializerInt",float:"aiida_python.serializers:SerializerFloat",str:"aiida_python.serializers:SerializerStr",list:"aiida_python.serializers:SerializerList",arraydata:"aiida_python.serializers:SerializerArrayData"},"aiida.data":{}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'aiida-python' does not follow naming convention.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'python.calc' does not start with prefix 'aiida-python.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'python.parser' does not start with prefix 'aiida-python.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"orange",text:"Other (Aiida python serializers)",count:5}],pip_install_cmd:"pip install aiida-python",is_installable:"True"},"aiida-pythonjob":{code_home:"https://github.com/aiidateam/aiida-pythonjob",entry_point_prefix:"pythonjob",pip_url:"aiida-pythonjob",plugin_info:"https://raw.github.com/aiidateam/aiida-pythonjob/master/pyproject.toml",name:"aiida-pythonjob",package_name:"aiida_pythonjob",hosted_on:"github.com",metadata:{release_date:"2025-04-01",description:"Run Python functions on a remote computer.",author_email:"Xing Wang <xingwang1991@gmail.com>",license:`MIT License
        
        Copyright (c) 2024 AiiDA team
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.`,classifiers:["Development Status :: 3 - Alpha","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.5"},aiida_version:">=2.3,<3",entry_points:{"aiida.calculations":{"pythonjob.pythonjob":{description:["Calcjob to run a Python function on a remote computer.","","    Supports two modes:","    1) Loading a pickled function object (function_data.pickled_function).","    2) Embedding raw source code for the function (function_data.source_code)."],spec:{inputs:[{name:"function_data",required:!0,valid_types:"",info:""},{name:"additional_retrieve_list",required:!1,valid_types:"List, NoneType",info:"Additional filenames to retrieve from the remote work directory"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"copy_files",required:!1,valid_types:"RemoteData",info:"The folder/files to copy from the remote computer"},{name:"deserializers",required:!1,valid_types:"Dict, NoneType",info:"The deserializers to convert the input AiiDA data nodes to raw Python data."},{name:"function_inputs",required:!1,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, FolderData, SinglefileData, NoneType",info:"Use a local or remote folder as parent folder (for restarts and similar)"},{name:"parent_folder_name",required:!1,valid_types:"Str, NoneType",info:`Default name of the subfolder to create in the working directory
            where the files from parent_folder are placed.`},{name:"parent_output_folder",required:!1,valid_types:"Str, NoneType",info:"Name of the subfolder inside 'parent_folder' from which you want to copy the files"},{name:"process_label",required:!1,valid_types:"Str, NoneType",info:""},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"serializers",required:!1,valid_types:"Dict, NoneType",info:"The serializers to convert the raw Python data to AiiDA data nodes."},{name:"upload_files",required:!1,valid_types:"FolderData, SinglefileData",info:"The folder/files to upload"}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:310,message:"The output file could not be read."},{status:320,message:"The output file contains invalid output."},{status:321,message:"The number of results does not match the number of outputs."},{status:322,message:`Importing cloudpickle failed.
{exception}
{traceback}`},{status:323,message:`Failed to unpickle inputs.
{exception}
{traceback}`},{status:324,message:`Failed to unpickle user function.
{exception}
{traceback}`},{status:325,message:`Function execution failed.
{exception}
{traceback}`},{status:326,message:`Failed to pickle results.
{exception}
{traceback}`},{status:327,message:`The script failed for an unknown reason.
{exception}
{traceback}`}]},class:"aiida_pythonjob.calculations.pythonjob:PythonJob"}},"aiida.data":{"pythonjob.ase.atoms.Atoms":"aiida_pythonjob.data.atoms:AtomsData","pythonjob.builtins.bool":"aiida.orm.nodes.data.bool:Bool","pythonjob.builtins.dict":"aiida_pythonjob.data.data_wrapper:Dict","pythonjob.builtins.float":"aiida.orm.nodes.data.float:Float","pythonjob.builtins.int":"aiida.orm.nodes.data.int:Int","pythonjob.builtins.list":"aiida_pythonjob.data.data_wrapper:List","pythonjob.builtins.str":"aiida.orm.nodes.data.str:Str","pythonjob.jsonable_data":"aiida_pythonjob.data.jsonable_data:JsonableData","pythonjob.numpy.bool_":"aiida.orm.nodes.data.bool:Bool","pythonjob.numpy.float32":"aiida.orm.nodes.data.float:Float","pythonjob.numpy.float64":"aiida.orm.nodes.data.float:Float","pythonjob.numpy.int64":"aiida.orm.nodes.data.int:Int","pythonjob.numpy.ndarray":"aiida_pythonjob.data.data_wrapper:ArrayData","pythonjob.pickled_data":"aiida_pythonjob.data.pickled_data:PickledData"},"aiida.parsers":{"pythonjob.pythonjob":"aiida_pythonjob.parsers.pythonjob:PythonJobParser"}},commits_count:41,development_status:"alpha",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:14}],pip_install_cmd:"pip install aiida-pythonjob",is_installable:"True"},"aiida-qeq":{code_home:"https://github.com/ltalirz/aiida-qeq",development_status:"stable",entry_point_prefix:"qeq",pip_url:"aiida-qeq",plugin_info:"https://raw.githubusercontent.com/ltalirz/aiida-qeq/master/setup.json",name:"aiida-qeq",package_name:"aiida_qeq",hosted_on:"github.com",metadata:{release_date:"2018-11-21",description:"AiiDA plugin for computing electronic charges on atoms using equilibration-type models (QEq, EQEq, ...).",author:"Leopold Talirz, Daniele Ongari",author_email:"leopold.talirz@gmail.com",license:"MIT",home_page:"https://github.com/ltalirz/aiida-qeq",classifiers:["Programming Language :: Python"],version:"0.1.0"},aiida_version:">=0.12.2,<1.0.0",entry_points:{"aiida.calculations":{"qeq.eqeq":"aiida_qeq.calculations.eqeq:EQeqCalculation","qeq.qeq":"aiida_qeq.calculations.qeq:QeqCalculation"},"aiida.data":{"qeq.eqeq":"aiida_qeq.data.eqeq:EQeqParameters","qeq.qeq":"aiida_qeq.data.qeq:QeqParameters"},"aiida.parsers":{"qeq.eqeq":"aiida_qeq.parsers.eqeq:EQeqParser","qeq.qeq":"aiida_qeq.parsers.qeq:QeqParser"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-qeq<pre>Collecting aiida-qeq
  Downloading aiida-qeq-0.1.0.tar.gz (10 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-qeq to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-qeq==0.1.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-qeq 0.1.0 depends on aiida-core<1.0.0 and >=0.12.2
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:2}],pip_install_cmd:"pip install aiida-qeq",is_installable:"False"},"aiida-qp2":{code_home:"https://github.com/TREX-CoE/aiida-qp2",entry_point_prefix:"qp2",pip_url:"aiida-qp2",documentation_url:"https://trex-coe.github.io/aiida-qp2/index.html",name:"aiida-qp2",package_name:"aiida_qp2",hosted_on:"github.com",metadata:{release_date:"2022-02-26",description:"AiiDA plugin for the Quantum Package 2.0",author:"Evgeny Posenitskiy",author_email:"posenitskiy@irsamc.ups-tlse.fr",license:"MIT",home_page:"https://github.com/TREX-CoE/aiida-qp2",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python"],version:"0.2.0"},aiida_version:null,entry_points:{console_scripts:{aqp:"aiida_qp2.cli:cli_root"},"aiida.cmdline.data":{"qp2.cli":"aiida_qp2.cli:cli_root"},"aiida.calculations":{qp2:"aiida_qp2.calculations:QP2Calculation","qp2.create":"aiida_qp2.create.calculation:QP2CreateCalculation","qp2.run":"aiida_qp2.run.calculation:QP2RunCalculation","qp2.qmcchemrun":"aiida_qp2.run.qmcchem_calculation:QP2QmcchemRunCalculation"},"aiida.parsers":{qp2:"aiida_qp2.parsers:QP2Parser","qp2.create":"aiida_qp2.create.parser:QP2CreateParser","qp2.run":"aiida_qp2.run.parser:QP2RunParser","qp2.qmcchemrun":"aiida_qp2.run.qmcchem_parser:QP2QmcchemRunParser"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-qp2<pre>Collecting aiida-qp2
  Downloading aiida-qp2-0.2.0.tar.gz (9.8 kB)
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Installing backend dependencies: started
  Installing backend dependencies: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-qp2 to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-qp2==0.2.0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-qp2 0.2.0 depends on aiida-core<2.0.0 and >=1.1.0
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:4},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Data commands)",count:1}],pip_install_cmd:"pip install aiida-qp2",is_installable:"False"},"aiida-quantumespresso":{code_home:"https://github.com/aiidateam/aiida-quantumespresso",documentation_url:"https://aiida-quantumespresso.readthedocs.io/",entry_point_prefix:"quantumespresso",pip_url:"aiida-quantumespresso",plugin_info:"https://raw.github.com/aiidateam/aiida-quantumespresso/master/setup.json",name:"aiida-quantumespresso",package_name:"aiida_quantumespresso",hosted_on:"github.com",metadata:{release_date:"2025-03-27",description:"The official AiiDA plugin for Quantum ESPRESSO",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9"],version:"4.10.0"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{"quantumespresso.bands":"aiida_quantumespresso.calculations.bands:BandsCalculation","quantumespresso.cp":"aiida_quantumespresso.calculations.cp:CpCalculation","quantumespresso.create_kpoints_from_distance":"aiida_quantumespresso.calculations.functions.create_kpoints_from_distance:create_kpoints_from_distance","quantumespresso.create_magnetic_configuration":"aiida_quantumespresso.calculations.functions.create_magnetic_configuration:create_magnetic_configuration","quantumespresso.dos":"aiida_quantumespresso.calculations.dos:DosCalculation","quantumespresso.epw":"aiida_quantumespresso.calculations.epw:EpwCalculation","quantumespresso.matdyn":"aiida_quantumespresso.calculations.matdyn:MatdynCalculation","quantumespresso.merge_ph_outputs":"aiida_quantumespresso.calculations.functions.merge_ph_outputs:merge_ph_outputs","quantumespresso.namelists":"aiida_quantumespresso.calculations.namelists:NamelistsCalculation","quantumespresso.neb":"aiida_quantumespresso.calculations.neb:NebCalculation","quantumespresso.open_grid":"aiida_quantumespresso.calculations.open_grid:OpenGridCalculation","quantumespresso.ph":"aiida_quantumespresso.calculations.ph:PhCalculation","quantumespresso.pp":"aiida_quantumespresso.calculations.pp:PpCalculation","quantumespresso.projwfc":"aiida_quantumespresso.calculations.projwfc:ProjwfcCalculation","quantumespresso.pw":"aiida_quantumespresso.calculations.pw:PwCalculation","quantumespresso.pw2gw":"aiida_quantumespresso.calculations.pw2gw:Pw2gwCalculation","quantumespresso.pw2wannier90":"aiida_quantumespresso.calculations.pw2wannier90:Pw2wannier90Calculation","quantumespresso.pwimmigrant":"aiida_quantumespresso.calculations.pwimmigrant:PwimmigrantCalculation","quantumespresso.q2r":"aiida_quantumespresso.calculations.q2r:Q2rCalculation","quantumespresso.seekpath_structure_analysis":"aiida_quantumespresso.calculations.functions.seekpath_structure_analysis:seekpath_structure_analysis","quantumespresso.xspectra":"aiida_quantumespresso.calculations.xspectra:XspectraCalculation"},"aiida.data":{"quantumespresso.force_constants":"aiida_quantumespresso.data.force_constants:ForceConstantsData","quantumespresso.hubbard_structure":"aiida_quantumespresso.data.hubbard_structure:HubbardStructureData"},"aiida.parsers":{"quantumespresso.bands":"aiida_quantumespresso.parsers.bands:BandsParser","quantumespresso.cp":"aiida_quantumespresso.parsers.cp:CpParser","quantumespresso.dos":"aiida_quantumespresso.parsers.dos:DosParser","quantumespresso.matdyn":"aiida_quantumespresso.parsers.matdyn:MatdynParser","quantumespresso.neb":"aiida_quantumespresso.parsers.neb:NebParser","quantumespresso.open_grid":"aiida_quantumespresso.parsers.open_grid:OpenGridParser","quantumespresso.ph":"aiida_quantumespresso.parsers.ph:PhParser","quantumespresso.pp":"aiida_quantumespresso.parsers.pp:PpParser","quantumespresso.projwfc":"aiida_quantumespresso.parsers.projwfc:ProjwfcParser","quantumespresso.pw":"aiida_quantumespresso.parsers.pw:PwParser","quantumespresso.pw2gw":"aiida_quantumespresso.parsers.pw2gw:Pw2gwParser","quantumespresso.pw2wannier90":"aiida_quantumespresso.parsers.pw2wannier90:Pw2wannier90Parser","quantumespresso.q2r":"aiida_quantumespresso.parsers.q2r:Q2rParser","quantumespresso.xspectra":"aiida_quantumespresso.parsers.xspectra:XspectraParser"},"aiida.tools.calculations":{"quantumespresso.pw":"aiida_quantumespresso.tools.calculations.pw:PwCalculationTools"},"aiida.tools.data.orbitals":{noncollinearhydrogen:"aiida_quantumespresso.tools.data.orbital.noncollinearhydrogen:NoncollinearHydrogenOrbital",spinorbithydrogen:"aiida_quantumespresso.tools.data.orbital.spinorbithydrogen:SpinorbitHydrogenOrbital"},"aiida.workflows":{"quantumespresso.bands.base":"aiida_quantumespresso.workflows.bands.base:BandsBaseWorkChain","quantumespresso.matdyn.base":"aiida_quantumespresso.workflows.matdyn.base:MatdynBaseWorkChain","quantumespresso.pdos":"aiida_quantumespresso.workflows.pdos:PdosWorkChain","quantumespresso.ph.base":"aiida_quantumespresso.workflows.ph.base:PhBaseWorkChain","quantumespresso.pw.bands":"aiida_quantumespresso.workflows.pw.bands:PwBandsWorkChain","quantumespresso.pw.base":"aiida_quantumespresso.workflows.pw.base:PwBaseWorkChain","quantumespresso.pw.relax":"aiida_quantumespresso.workflows.pw.relax:PwRelaxWorkChain","quantumespresso.q2r.base":"aiida_quantumespresso.workflows.q2r.base:Q2rBaseWorkChain","quantumespresso.xps":"aiida_quantumespresso.workflows.xps:XpsWorkChain","quantumespresso.xspectra.base":"aiida_quantumespresso.workflows.xspectra.base:XspectraBaseWorkChain","quantumespresso.xspectra.core":"aiida_quantumespresso.workflows.xspectra.core:XspectraCoreWorkChain","quantumespresso.xspectra.crystal":"aiida_quantumespresso.workflows.xspectra.crystal:XspectraCrystalWorkChain"},console_scripts:{"aiida-quantumespresso":"aiida_quantumespresso.cli:cmd_root"}},commits_count:34,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'noncollinearhydrogen' does not start with prefix 'quantumespresso.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'spinorbithydrogen' does not start with prefix 'quantumespresso.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:21},{colorclass:"brown",text:"Parsers",count:14},{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:12},{colorclass:"purple",text:"Console scripts",count:1},{colorclass:"orange",text:"Other (Tools calculations, Tools data orbitals)",count:3}],pip_install_cmd:"pip install aiida-quantumespresso",is_installable:"True"},"aiida-raspa":{code_home:"https://github.com/yakutovicha/aiida-raspa",entry_point_prefix:"raspa",pip_url:"aiida-raspa",plugin_info:"https://raw.github.com/yakutovicha/aiida-raspa/master/setup.json",name:"aiida-raspa",package_name:"aiida_raspa",hosted_on:"github.com",metadata:{release_date:"2023-08-26",description:"AiiDA plugin for RASPA code",author_email:"Aliaksandr Yakutovich <aliaksandr.yakutovich@epfl.ch>, Miriam Pougin <miriam.pougin@epfl.ch>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.0"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{raspa:{description:["This is a RaspaCalculation, subclass of CalcJob, to prepare input for RASPA code.","    For information on RASPA, refer to: https://github.com/iraspa/raspa2."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"block_pocket",required:!1,valid_types:"SinglefileData",info:"Zeo++ block pocket file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"file",required:!1,valid_types:"SinglefileData",info:"Additional input file(s)"},{name:"framework",required:!1,valid_types:"CifData",info:"Input framework(s)"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote folder used to continue the same simulation stating from the binary restarts."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"retrieved_parent_folder",required:!1,valid_types:"FolderData, NoneType",info:"To use an old calculation as a starting poing for a new one."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional input parameters"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The results of a calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"warnings",required:!1,valid_types:"List",info:"Warnings that appeared during the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"The retrieved folder does not contain an output file."},{status:102,message:'The output does not contain "Starting simulation".'},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:500,message:"The calculation could not be completed due to the lack of time."}]},class:"aiida_raspa.calculations:RaspaCalculation"}},"aiida.parsers":{raspa:"aiida_raspa.parsers:RaspaParser"},"aiida.workflows":{"raspa.base":{description:["Workchain to run a RASPA calculation with automated error handling and restarts."],spec:{inputs:[{name:"raspa",required:!0,valid_types:"Data",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The results of a calculation"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"warnings",required:!1,valid_types:"List",info:"Warnings that appeared during the calculation"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."}]},class:"aiida_raspa.workchains:RaspaBaseWorkChain"}}},commits_count:0,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-raspa",is_installable:"True"},"aiida-shell":{code_home:"https://github.com/sphuber/aiida-shell",entry_point_prefix:"core",pip_url:"aiida-shell",plugin_info:"https://raw.github.com/sphuber/aiida-shell/master/pyproject.toml",name:"aiida-shell",package_name:"aiida_shell",hosted_on:"github.com",metadata:{release_date:"2025-06-03",description:"AiiDA plugin that makes running shell commands easy.",author_email:'"Sebastiaan P. Huber" <mail@sphuber.net>',classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],version:"0.8.1"},aiida_version:">=2.6.1,<3.0",entry_points:{"aiida.calculations":{"core.shell":{description:["Implementation of :class:`aiida.engine.CalcJob` to run a simple shell command."],spec:{inputs:[{name:"code",required:!0,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"arguments",required:!1,valid_types:"List, NoneType",info:""},{name:"filenames",required:!1,valid_types:"Dict, NoneType",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"nodes",required:!1,valid_types:"Data",info:""},{name:"outputs",required:!1,valid_types:"List, NoneType",info:""},{name:"parser",required:!1,valid_types:"EntryPointData, PickledData, NoneType",info:""},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Exit status could not be determined: exit status file was not retrieved."},{status:301,message:"Exit status could not be determined: exit status file does not contain a valid integer."},{status:302,message:"The stdout file was not retrieved."},{status:303,message:"One or more output files defined in the `outputs` input were not retrieved: {missing_filepaths}."},{status:310,message:"Callable specified in the `parser` input excepted: {exception}."},{status:400,message:"The command exited with a non-zero status: {status} {stderr}."},{status:410,message:"The command exited with a zero status but the stderr was not empty."}]},class:"aiida_shell.calculations.shell:ShellJob"}},"aiida.data":{"core.code.installed.shell":"aiida_shell.data.code:ShellCode","core.entry_point":"aiida_shell.data.entry_point:EntryPointData","core.pickled":"aiida_shell.data.pickled:PickledData"},"aiida.parsers":{"core.shell":"aiida_shell.parsers.shell:ShellParser"}},commits_count:12,development_status:"beta",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W009'>W009</a>: Prefix 'core' does not follow naming convention."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:3}],pip_install_cmd:"pip install aiida-shell",is_installable:"True"},"aiida-siesta":{code_home:"https://github.com/siesta-project/aiida_siesta_plugin/tree/master",documentation_url:"https://aiida-siesta-plugin.readthedocs.io/",entry_point_prefix:"siesta",pip_url:"aiida-siesta",name:"aiida-siesta",package_name:"aiida_siesta",hosted_on:"github.com",metadata:{release_date:"2022-07-17",description:"A plugin for Siesta's basic functionality within the AiiDA framework.",author_email:'Albero Garcia <albertog@icmab.es>, "Victor M. Garcia-Suarez" <garciavictor@uniovi.es>, Emanuele Bosoni <ebosoni@icmab.es>, Vladimir Dikan <vdikan@icmab.es>, Pol Febrer <pol.febrer@icn2.cat>',classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.0"},aiida_version:">=2.0.0,<3.0.0",entry_points:{"aiida.calculations":{"siesta.siesta":{description:["Siesta calculator class for AiiDA."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The calculation results"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"Optional band structure"},{name:"forces_and_stress",required:!1,valid_types:"ArrayData",info:"Optional forces and stress"},{name:"ion_files",required:!1,valid_types:"IonData",info:""},{name:"optical_eps2",required:!1,valid_types:"ArrayData",info:"Optional eps2 optical data"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Optional relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:350,message:'Statement "Job completed" not detected, unknown error'},{status:448,message:"Problems in the polarization of a basis element"},{status:449,message:"Split_norm parameter too small"},{status:450,message:"Calculation did not reach scf convergence!"},{status:451,message:"Calculation did not reach geometry convergence!"},{status:452,message:"Bands analysis was requested, but file is not present"},{status:453,message:"Failure while parsing the bands file"},{status:454,message:"Optical calculation requested, but file is not present"}]},class:"aiida_siesta.calculations.siesta:SiestaCalculation"},"siesta.stm":{description:['Plugin for the "plstm" program in the Siesta distribution.',"",'    The "plstm" program takes the .LDOS file and generates a plot file with a simulated STM image.','    It supports both the old "plstm" versions (inputs in a files) and the new ones (inputs in the command','    line). Spin options are supported only in recent "plstm" versions, therefore ignored otherwise.'],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"ldos_folder",required:!0,valid_types:"RemoteData",info:"Parent folder"},{name:"mode",required:!0,valid_types:"Str",info:'Allowed values are "constant-height" or "constant-current"'},{name:"value",required:!0,valid_types:"Float",info:"Value of height in Ang or value of current in e/bohr**3"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"spin_option",required:!1,valid_types:"Str",info:'Spin option follows plstm sintax: "q" no spin, "s" total spin, "x","y","z" the three spin components'}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"For the moment only parser version and name of .STM file"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"stm_array",required:!0,valid_types:"ArrayData",info:"The contour data for the STM image"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The retrieved folder data node could not be accessed."},{status:101,message:"The retrieved folder does not contain a CH.STM file"},{status:102,message:"The .STM file can not be read"},{status:102,message:"The array containing the STM data can not be produced"},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_siesta.calculations.stm:STMCalculation"}},"aiida.parsers":{"siesta.parser":"aiida_siesta.parsers.siesta:SiestaParser","siesta.stm":"aiida_siesta.parsers.stm:STMParser"},"aiida.workflows":{"siesta.base":{description:["Base Workchain to launch a total energy calculation via Siesta."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The calculation results"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"Optional band structure"},{name:"forces_and_stress",required:!1,valid_types:"ArrayData",info:"Optional forces and stress"},{name:"ion_files",required:!1,valid_types:"IonData",info:""},{name:"optical_eps2",required:!1,valid_types:"ArrayData",info:"Optional eps2 optical data"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Optional relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:403,message:"Basis polarization problem."},{status:404,message:"Error in the parsing of bands"}]},class:"aiida_siesta.workflows.base:SiestaBaseWorkChain"},"siesta.eos":{description:["WorkChain to calculate the equation of state of a solid.","","    The cell shape is fixed, only the volume is rescaled.","    In particular the volumes considered are 7 equidistant volumes","    around a starting volume. The starting volume is","    an optional input of the WorkChain (called volume_per_atom).","    If not specified, the input structure volume is used with no modifications.","    All the SiestaBaseWorkChain inputs are other inputs of the workchain.","    This WorkChain also tries to perform a Birch_Murnaghan fit","    on the calculatad E(V) data."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"batch_size",required:!1,valid_types:"Int",info:`The maximum number of simulations that should run at the same time.
            You can set this to a very large number to make sure that all simulations run in
            one single batch if you want.`},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"iterate_mode",required:!1,valid_types:"Str",info:`Indicates the way the parameters should be iterated.
            Currently allowed values are:
            - 'zip': zips all the parameters together (all parameters should
              have the same number of values!)
            - 'product': performs a cartesian product of the parameters. That is,
              all possible combinations of parameters and values are explored.
            `},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"scales",required:!1,valid_types:"",info:`
            Factors by which the structure should be scaled.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"volume_per_atom",required:!1,valid_types:"Float, NoneType",info:"Volume per atom around which to perform the EqOfState"}],outputs:[{name:"results_dict",required:!0,valid_types:"Dict",info:"Containing the calculated E(V) data and, if the fit is sucessfull, the resulting fit parameters"},{name:"equilibrium_structure",required:!1,valid_types:"StructureData",info:"Equilibrium volume structure. Returned only if the fit is succesfull"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.eos:EqOfStateFixedCellShape"},"siesta.bandgap":{description:["Workchain to obtain the bands and bandgap of a structure through Siesta.","",'    If "bandskpoints" are set in inputs, it behaves like `SiestaBaseWorkChain`',"    adding just the bandgap calculation at the end. If no bandskpoints","    was specified, the bands are computed anyway on a kpoints path automatically","    assigned using seekpath and the input (output) structure","    of the single-point (relaxation/md) calculation."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"seekpath_dict",required:!1,valid_types:"Dict",info:"dictionary of seekpath parameters that are pased to `get_explicit_kpoints_path`"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The calculation results"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"band_gap_info",required:!1,valid_types:"Dict",info:""},{name:"bands",required:!1,valid_types:"BandsData",info:"Optional band structure"},{name:"forces_and_stress",required:!1,valid_types:"ArrayData",info:"Optional forces and stress"},{name:"ion_files",required:!1,valid_types:"IonData",info:""},{name:"optical_eps2",required:!1,valid_types:"ArrayData",info:"Optional eps2 optical data"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Optional relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The main SiestaBaseWorkChain failed"},{status:201,message:"The SiestaBaseWorkChain to obtain the bands failed"}]},class:"aiida_siesta.workflows.bandgap:BandgapWorkChain"},"siesta.stm":{description:["STM Workchain.","","    This workchain runs a DFT calculation with siesta, calculates","    the local density of states in an energy window specified by the user (stored","    in a .LDOS file) and post-process it in order to produce simulated STM images."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"emax",required:!0,valid_types:"Float",info:"Higher boundary energy (in eV respect to Ef) for LDOS calculation"},{name:"emin",required:!0,valid_types:"Float",info:"Lower boundary energy (in eV respect to Ef) for LDOS calculation"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"stm_code",required:!0,valid_types:"Code",info:"STM plstm code"},{name:"stm_mode",required:!0,valid_types:"Str",info:'Allowed values are "constant-height" or "constant-current"'},{name:"stm_spin",required:!0,valid_types:"Str",info:'Allowed values are "none", "collinear" or "non-collinear"'},{name:"stm_value",required:!0,valid_types:"Float",info:"Value of height in Ang or value of current in e/bohr**3"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"stm_options",required:!1,valid_types:"Dict, NoneType",info:"STM plstm code resources and options"}],outputs:[{name:"stm_array",required:!0,valid_types:"ArrayData",info:""},{name:"output_structure",required:!1,valid_types:"StructureData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The main SiestaBaseWorkChain failed"},{status:201,message:"The SiestaBaseWorkChain to obtain the .LDOS file failed"},{status:202,message:"The STM post-process failed"}]},class:"aiida_siesta.workflows.stm:SiestaSTMWorkChain"},"siesta.baseneb":{description:["Workchain to run a NEB MEP optimization starting from a guessed path.","","    In theory, such task can be accomplished using directly the SiestaCalculation","    and passing the guessed path as xyz files in lua.input_files input (see","    `examples/plugins/siesta/example_neb.py`). Here, instead, the","    guessed path must be specified as a set of structures in a `TrajectoryData` object.","    The structures in `TrajectoryData` are then transformed in xyz files and placed","    in a directory that is the passed to lua.input_files when the SiestaCalculation is called.","    This better preserves the provenance. Moreover allows cleaner use of ghost (often necessaries)","    Finally, we have a dedicated output containing all the NEB quantities.","    This workchain can also become the place where to deal with possible errors due","    to the lua features."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"neb_script",required:!0,valid_types:"SinglefileData",info:"Lua script for NEB engine"},{name:"options",required:!0,valid_types:"Dict",info:"Options"},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"starting_path",required:!0,valid_types:"TrajectoryData",info:"Starting Path"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"spring_constant",required:!1,valid_types:"Float",info:""}],outputs:[{name:"neb_output_package",required:!0,valid_types:"TrajectoryData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:201,message:"The NEB calculation failed"},{status:202,message:"The .xyz files or the NEB.results file could not be retrieved"}]},class:"aiida_siesta.workflows.neb_base:SiestaBaseNEBWorkChain"},"siesta.epsilon":{description:["Workchain to obtain the electronic contribution to the static dielectric constant using Siesta."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Input code"},{name:"optical",required:!0,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters"},{name:"structure",required:!0,valid_types:"StructureData",info:"Input structure"},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The calculation results"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"bands",required:!1,valid_types:"BandsData",info:"Optional band structure"},{name:"epsilon",required:!1,valid_types:"Float",info:"Low-frequency dielectric constant"},{name:"forces_and_stress",required:!1,valid_types:"ArrayData",info:"Optional forces and stress"},{name:"ion_files",required:!1,valid_types:"IonData",info:""},{name:"optical_eps2",required:!1,valid_types:"ArrayData",info:"Optional eps2 optical data"},{name:"output_structure",required:!1,valid_types:"StructureData",info:"Optional relaxed structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:403,message:"Basis polarization problem."},{status:404,message:"Error in the parsing of bands"}]},class:"aiida_siesta.workflows.epsilon:EpsilonWorkChain"},"siesta.iterator":{description:["Iterator for the SietaBaseWorkChain.","","    The iterator is extended to iterate over any Siesta keyword.","    WARNING: if a keyword not recognized by Siesta is used in `iterate_over`, the iterator will not","    complain. It will just add the keyword to the parameters dict and run the calculation!"],spec:{inputs:[{name:"iterate_over",required:!0,valid_types:"Dict",info:`A dictionary where each key is the name of a parameter we want to iterate
                over (str) and each value is a list with all the values to iterate over for
                that parameter. Each value in the list can be either a node (unstored or stored)
                or a simple python object (str, float, int, bool).
                Note that each subclass might parse this keys and values differently, so you should
                know how they do it.
                `},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"batch_size",required:!1,valid_types:"Int",info:`The maximum number of simulations that should run at the same time.
            You can set this to a very large number to make sure that all simulations run in
            one single batch if you want.`},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"Code",info:"Input code"},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"iterate_mode",required:!1,valid_types:"Str",info:`Indicates the way the parameters should be iterated.
            Currently allowed values are:
            - 'zip': zips all the parameters together (all parameters should
              have the same number of values!)
            - 'product': performs a cartesian product of the parameters. That is,
              all possible combinations of parameters and values are explored.
            `},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"options",required:!1,valid_types:"Dict",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"Input parameters"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"structure",required:!1,valid_types:"StructureData",info:"Input structure"}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.iterate:SiestaIterator"},"siesta.converger":{description:["Only connects the two parent classes."],spec:{inputs:[{name:"iterate_over",required:!0,valid_types:"Dict",info:`A dictionary where each key is the name of a parameter we want to iterate
                over (str) and each value is a list with all the values to iterate over for
                that parameter. Each value in the list can be either a node (unstored or stored)
                or a simple python object (str, float, int, bool).
                Note that each subclass might parse this keys and values differently, so you should
                know how they do it.
                `},{name:"bandskpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints for bands"},{name:"basis",required:!1,valid_types:"Dict, NoneType",info:"Input basis"},{name:"batch_size",required:!1,valid_types:"Int",info:`The maximum number of simulations that should run at the same time.
            You can set this to a very large number to make sure that all simulations run in
            one single batch if you want.`},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"Code",info:"Input code"},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"ions",required:!1,valid_types:"IonData",info:"Input ion file"},{name:"iterate_mode",required:!1,valid_types:"Str",info:`Indicates the way the parameters should be iterated.
            Currently allowed values are:
            - 'zip': zips all the parameters together (all parameters should
              have the same number of values!)
            - 'product': performs a cartesian product of the parameters. That is,
              all possible combinations of parameters and values are explored.
            `},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Input kpoints"},{name:"lua",required:!1,valid_types:"",info:"Script and files for the Lua engine"},{name:"max_iterations",required:!1,valid_types:"Int",info:"Maximum number of iterations the work chain will restart the process to finish successfully."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"optical",required:!1,valid_types:"Dict, NoneType",info:"Specifications for optical properties"},{name:"options",required:!1,valid_types:"Dict",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"Input parameters"},{name:"parent_calc_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Parent folder"},{name:"pseudo_family",required:!1,valid_types:"Str, NoneType",info:""},{name:"pseudos",required:!1,valid_types:"PsfData, PsmlData",info:"Input pseudo potentials"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Input settings"},{name:"structure",required:!1,valid_types:"StructureData",info:"Input structure"},{name:"target",required:!1,valid_types:"Str, NoneType",info:"The parameter that you want to track."},{name:"threshold",required:!1,valid_types:"Int, Float",info:"The maximum difference between two consecutive steps to consider that convergence is reached"}],outputs:[{name:"converged",required:!0,valid_types:"",info:"Whether the target has converged"},{name:"converged_parameters",required:!1,valid_types:"",info:"The values for the parameters that was enough to achieve convergence. If converged is not achieved, it won't be returned"},{name:"converged_target_value",required:!1,valid_types:"",info:"The value of the target with convergence reached."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.converge:SiestaConverger"},"siesta.sequential_converger":{description:["An iterator of convergers."],spec:{inputs:[{name:"converger_inputs",required:!0,valid_types:"Data",info:""},{name:"iterate_over",required:!0,valid_types:"List",info:`A dictionary where each key is the name of a parameter we want to iterate
                over (str) and each value is a list with all the values to iterate over for
                that parameter. Each value in the list can be either a node (unstored or stored)
                or a simple python object (str, float, int, bool).
                Note that each subclass might parse this keys and values differently, so you should
                know how they do it.
                `},{name:"batch_size",required:!1,valid_types:"Int",info:`The maximum number of simulations that should run at the same time.
            You can set this to a very large number to make sure that all simulations run in
            one single batch if you want.`},{name:"iterate_mode",required:!1,valid_types:"Str",info:`Indicates the way the parameters should be iterated.
            Currently allowed values are:
            - 'zip': zips all the parameters together (all parameters should
              have the same number of values!)
            - 'product': performs a cartesian product of the parameters. That is,
              all possible combinations of parameters and values are explored.
            `},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"converged_parameters",required:!0,valid_types:"",info:"The values for the parameters that was enough to achieve convergence. If convergence is not achieved, it will be an empty dictionary"},{name:"converged_target_value",required:!1,valid_types:"",info:"The value of the target with convergence reached."},{name:"unconverged_parameters",required:!1,valid_types:"",info:"The list of unconverged parameters."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.converge:SiestaSequentialConverger"},"siesta.forbasisopt":{description:["Wrapper of SiestaBaseWorkChain.","","    Class wrapping the SiestaBaseWorkChain with the scope of","    assigning the variables of the optimization process to the right","    input of the SiestaBaseWorkChain."],spec:{inputs:[{name:"lower_bounds",required:!0,valid_types:"List",info:""},{name:"out_name",required:!0,valid_types:"Str",info:""},{name:"siesta_base",required:!0,valid_types:"Data",info:""},{name:"the_names",required:!0,valid_types:"List",info:""},{name:"the_values",required:!0,valid_types:"List",info:""},{name:"upper_bounds",required:!0,valid_types:"List",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"ene",required:!0,valid_types:"Float",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows._for_optimization:ForBasisOptWorkChain"},"siesta.simplex_basis":{description:["Workchain running a simple NelderMead optimization (simplex) varing variables defined in the basis dictionaries."],spec:{inputs:[{name:"siesta_base",required:!0,valid_types:"Data",info:""},{name:"simplex",required:!0,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"last_simplex",required:!0,valid_types:"List",info:""},{name:"optimal_process_output",required:!0,valid_types:"",info:"Output value of the optimal evaluation process."},{name:"optimal_process_uuid",required:!0,valid_types:"",info:"UUID of the optimal evaluation process."},{name:"optimal_process_input",required:!1,valid_types:"",info:"Input value of the optimal evaluation process."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The OptimizationWorkChain did not finished"}]},class:"aiida_siesta.workflows.simplex_basis:SimplexBasisOptimization"},"siesta.two_step_basis_opt":{description:["Optimization that is more similar to the simplex code in the siesta utils.","",'    The optimization has two levels, a "marcrostep" that consists in the restart of',"    a simplex with gradual reduction of the dimention of the initial simplex."],spec:{inputs:[{name:"macrostep",required:!0,valid_types:"",info:""},{name:"siesta_base",required:!0,valid_types:"Data",info:""},{name:"simplex",required:!0,valid_types:"",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[{name:"last_simplex",required:!0,valid_types:"List",info:""},{name:"optimal_process_output",required:!0,valid_types:"",info:"Output value of the optimal evaluation process."},{name:"optimal_process_uuid",required:!0,valid_types:"",info:"UUID of the optimal evaluation process."},{name:"optimal_process_input",required:!1,valid_types:"",info:"Input value of the optimal evaluation process."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_siesta.workflows.two_steps_optimization:TwoStepsBasisOpt"},"siesta.basis_optimization":{description:["WorkChain for basis optimization."],spec:{inputs:[{name:"optimization_schema",required:!0,valid_types:"",info:""},{name:"siesta_base",required:!0,valid_types:"Data",info:""},{name:"simplex",required:!0,valid_types:"",info:""},{name:"add_orbital",required:!1,valid_types:"Dict, NoneType",info:""},{name:"basis_sizes",required:!1,valid_types:"List",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"sizes_monitored_quantity",required:!1,valid_types:"Str",info:""}],outputs:[{name:"optimal_basis_block",required:!0,valid_types:"Dict",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:200,message:"The SiestaIterator running pao sizes failed"},{status:201,message:"The basis optimization failed, probably not sufficient steps"},{status:202,message:"The basis optimization failed, probably not sufficient steps"}]},class:"aiida_siesta.workflows.basis_optimization:BasisOptimizationWorkChain"}},"aiida.data":{"siesta.ion":"aiida_siesta.data.ion:IonData"},"aiida.tools.data.orbitals":{"siesta.atomic_orbital":"aiida_siesta.data.atomic_orbitals:SislAtomicOrbital"}},commits_count:0,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:13},{colorclass:"orange",text:"Other (Tools data orbitals)",count:1}],pip_install_cmd:"pip install aiida-siesta",is_installable:"True"},"aiida-spex":{code_home:"https://github.com/JuDFTteam/aiida-spex",entry_point_prefix:"spex",pip_url:"git+https://github.com/JuDFTteam/aiida-spex",name:"aiida-spex",package_name:"aiida_spex",hosted_on:"github.com",metadata:{author:"The SPEX Team",author_email:"a.chandran@fz-juelich.de",version:"1.1.2",description:"AiiDA plugin for SPEX code",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.0.0b3,<3.0.0",entry_points:{"aiida.calculations":{"spex.spex":"aiida_spex.calculations.spex:SpexCalculation"},"aiida.data":{"spex.spexinp":"aiida_spex.data.spexinp:SpexinpData"},"aiida.parsers":{"spex.spexparser":"aiida_spex.parsers.spex:SpexParser"},"aiida.workflows":{"spex.job":"aiida_spex.workflows.job:SpexJobWorkchain"}},commits_count:0,development_status:"planning",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install git+https://github.com/JuDFTteam/aiida-spex"},"aiida-spirit":{code_home:"https://github.com/JuDFTteam/aiida-spirit/tree/main",documentation_url:"https://aiida-spirit.readthedocs.io/",entry_point_prefix:"spirit",name:"aiida-spirit",pip_url:"aiida-spirit",package_name:"aiida_spirit",hosted_on:"github.com",metadata:{release_date:"2023-06-23",description:"AiiDA plugin for the spirit code",author:"The JuDFT Team",author_email:"p.ruessmann@fz-juelich.de",license:"MIT",home_page:"https://github.com/JuDFTteam/aiida-spirit",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.2"},aiida_version:null,entry_points:{"aiida.calculations":{spirit:"aiida_spirit.calculations:SpiritCalculation"},"aiida.parsers":{spirit:"aiida_spirit.parsers:SpiritParser"}},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-spirit"},"aiida-ssh2win":{entry_point_prefix:"ssh2win",code_home:"https://github.com/edan-bainglass/aiida-ssh2win",version_file:"https://raw.githubusercontent.com/edan-bainglass/aiida-ssh2win/develop/aiida_ssh2win/__init__.py",pip_url:"git+https://github.com/edan-bainglass/aiida-ssh2win",name:"aiida-ssh2win",package_name:"aiida_ssh2win",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"pip install git+https://github.com/edan-bainglass/aiida-ssh2win"},"aiida-sshonly":{code_home:"https://github.com/adegomme/aiida-sshonly",development_status:"beta",entry_point_prefix:"sshonly",pip_url:"aiida-sshonly",plugin_info:"https://raw.github.com/adegomme/aiida-sshonly/master/setup.json",name:"aiida-sshonly",package_name:"aiida_sshonly",hosted_on:"github.com",metadata:{release_date:"2020-10-07",description:"AiiDA plugin adding a sshonly transport option, using only SSH to transfer files, avoiding SFTP, in case it's blocked or non functional on a remote system",author:"adegomme",license:"MIT",home_page:"https://github.com/adegomme/aiida-sshonly",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0a3"},aiida_version:">=1.3.0,<2.0.0",entry_points:{"aiida.transports":{ssh_only:"aiida_sshonly.transports.sshonly:SshOnlyTransport"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-sshonly<pre>Collecting aiida-sshonly
  Downloading aiida-sshonly-0.1.0a3.tar.gz (19 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-sshonly to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida_sshonly-0.1.0a2-py3-none-any.whl.metadata (3.4 kB)
  Downloading aiida_sshonly-0.1.0a1-py3-none-any.whl.metadata (3.4 kB)
  Downloading aiida-sshonly-0.1.0a0.tar.gz (19 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
ERROR: Cannot install aiida-sshonly==0.1.0a0, aiida-sshonly==0.1.0a1, aiida-sshonly==0.1.0a2 and aiida-sshonly==0.1.0a3 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-sshonly 0.1.0a3 depends on aiida-core<2.0.0 and >=1.3.0
    aiida-sshonly 0.1.0a2 depends on aiida-core<2.0.0 and >=1.3.0
    aiida-sshonly 0.1.0a1 depends on aiida-core<2.0.0 and >=1.3.0
    aiida-sshonly 0.1.0a0 depends on aiida-core<2.0.0 and >=1.1.0
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead.","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'ssh_only' does not start with prefix 'sshonly.'"],summaryinfo:[{colorclass:"orange",text:"Other (Transports)",count:1}],pip_install_cmd:"pip install --pre aiida-sshonly",is_installable:"False"},"aiida-statefile-schedulers":{code_home:"https://github.com/dev-zero/aiida-statefile-schedulers",development_status:"beta",entry_point_prefix:"statefile_schedulers",pip_url:"aiida-statefile-schedulers",name:"aiida-statefile-schedulers",package_name:"aiida_statefile_schedulers",hosted_on:"github.com",metadata:{release_date:"2021-11-23",description:"Simple statefile-driven task schedulers for AiiDA",author:"Tiziano Müller",author_email:"tm@dev-zero.ch",license:"MIT",home_page:"https://github.com/dev-zero/aiida-statefile-schedulers",classifiers:["Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.2.1"},aiida_version:null,entry_points:{"aiida.schedulers":{"statefile_schedulers.direct":"aiida_statefile_schedulers.schedulers.direct:StatefileDirectScheduler"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"orange",text:"Other (Schedulers)",count:1}],pip_install_cmd:"pip install aiida-statefile-schedulers",is_installable:"True"},"aiida-strain":{code_home:"https://github.com/greschd/aiida-strain",documentation_url:"https://aiida-strain.readthedocs.io",entry_point_prefix:"strain",pip_url:"aiida-strain",name:"aiida-strain",package_name:"aiida_strain",hosted_on:"github.com",metadata:{release_date:"2019-11-22",description:"AiiDA Plugin for applying strain to structures",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-strain.readthedocs.io",classifiers:["Development Status :: 3 - Alpha","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0"},aiida_version:null,entry_points:{"aiida.workflows":{"strain.apply_strains":{description:["Workchain to create strained structures from a given input structure."],spec:{inputs:[{name:"strain_kind",required:!0,valid_types:"Str",info:""},{name:"strain_parameters",required:!0,valid_types:"Str",info:""},{name:"strain_strengths",required:!0,valid_types:"List",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_strain:ApplyStrains"},"strain.apply_strains_with_symmetry":{description:["Workchain to create strained structures from an input structure, and select the symmetries which are compatible with the strained structure from a set of given input symmetries."],spec:{inputs:[{name:"strain_kind",required:!0,valid_types:"Str",info:""},{name:"strain_parameters",required:!0,valid_types:"Str",info:""},{name:"strain_strengths",required:!0,valid_types:"List",info:""},{name:"structure",required:!0,valid_types:"StructureData",info:""},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:""},{name:"symmetry_repr_code",required:!0,valid_types:"Code",info:""},{name:"metadata",required:!1,valid_types:"",info:""}],outputs:[],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_strain:ApplyStrainsWithSymmetry"}}},commits_count:0,development_status:"alpha",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"green",text:"Workflows",count:2}],pip_install_cmd:"pip install aiida-strain",is_installable:"True"},"aiida-supercell":{code_home:"https://github.com/pzarabadip/aiida-supercell",development_status:"stable",documentation_url:"https://aiida-supercell.readthedocs.io/",entry_point_prefix:"supercell",pip_url:"git+https://github.com/pzarabadip/aiida-supercell",name:"aiida-supercell",package_name:"aiida_supercell",hosted_on:"github.com",metadata:{author:"Pezhman Zarabadi-Poor",author_email:"pzarabadip@gmail.com",version:"1.0.1",description:"AiiDA Plugin for Supercell program",classifiers:["Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"]},aiida_version:">=1.0.0,<2.0",entry_points:{"aiida.calculations":{supercell:"aiida_supercell.calculations:SupercellCalculation"},"aiida.parsers":{supercell:"aiida_supercell.parsers:SupercellParser"}},commits_count:0,errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-supercell<pre>Collecting git+https://github.com/pzarabadip/aiida-supercell
  Cloning https://github.com/pzarabadip/aiida-supercell to /tmp/pip-req-build-0i4aj5ce
  Running command git clone --filter=blob:none --quiet https://github.com/pzarabadip/aiida-supercell /tmp/pip-req-build-0i4aj5ce
  Resolved https://github.com/pzarabadip/aiida-supercell to commit 24a89f990fcf84584a51f49b53311a5c6db18347
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
INFO: pip is looking at multiple versions of aiida-supercell to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-supercell==1.0.1 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-supercell 1.0.1 depends on aiida-core<2.0 and >=1.0.0
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/pzarabadip/aiida-supercell",is_installable:"False"},"aiida-symmetry-representation":{code_home:"https://github.com/greschd/aiida_symmetry_representation",documentation_url:"https://aiida-symmetry-representation.readthedocs.io",entry_point_prefix:"symmetry_representation",pip_url:"aiida-symmetry-representation",name:"aiida-symmetry-representation",package_name:"aiida_symmetry_representation",hosted_on:"github.com",metadata:{release_date:"2019-11-18",description:"AiiDA Plugin for symmetry representations.",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-symmetry-representation.readthedocs.io",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0"},aiida_version:null,entry_points:{"aiida.calculations":{"symmetry_representation.filter_symmetries":{description:["Calculation class to run the ``symmetry-repr filter_symmetries`` command."],spec:{inputs:[{name:"structure",required:!0,valid_types:"StructureData",info:"Structure with which the filtered symmetries should be compatible."},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:"File containing the symmetries (in HDF5 format)."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"symmetries",required:!0,valid_types:"SinglefileData",info:"The HDF5 file containing the symmetries which are compatible with the structure."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_symmetry_representation.calculations.filter_symmetries:FilterSymmetriesCalculation"}},"aiida.parsers":{"symmetry_representation.symmetry":"aiida_symmetry_representation.parsers.symmetries:SymmetriesParser"}},commits_count:0,development_status:"stable",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-symmetry-representation",is_installable:"True"},"aiida-tbextraction":{code_home:"https://github.com/greschd/aiida-tbextraction",documentation_url:"https://aiida-tbextraction.readthedocs.io/",entry_point_prefix:"tbextraction",pip_url:"aiida-tbextraction",name:"aiida-tbextraction",package_name:"aiida_tbextraction",hosted_on:"github.com",metadata:{release_date:"2020-02-25",description:"AiiDA Plugin for extracting tight-binding models",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-tbextraction.readthedocs.io",classifiers:["Development Status :: 4 - Beta","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.2.0b1"},aiida_version:null,entry_points:{"aiida.workflows":{"tbextraction.fp_run.base":"aiida_tbextraction.fp_run:FirstPrinciplesRunBase","tbextraction.fp_run.reference_bands.base":"aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase","tbextraction.fp_run.wannier_input.base":"aiida_tbextraction.fp_run.wannier_input:WannierInputBase","tbextraction.calculate_tb":"aiida_tbextraction.calculate_tb:TightBindingCalculation","tbextraction.model_evaluation.base":"aiida_tbextraction.model_evaluation:ModelEvaluationBase","tbextraction.model_evaluation.band_difference":"aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation","tbextraction.energy_windows.run_window":"aiida_tbextraction.energy_windows.run_window:RunWindow","tbextraction.energy_windows.window_search":"aiida_tbextraction.energy_windows.window_search:WindowSearch","tbextraction.optimize_fp_tb":"aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding","tbextraction.optimize_strained_fp_tb":"aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-tbextraction<pre>Collecting aiida-tbextraction
  Downloading aiida-tbextraction-0.2.0b1.tar.gz (19 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py egg_info did not run successfully.
  │ exit code: 1
  ╰─> [20 lines of output]
      /opt/conda/lib/python3.10/site-packages/setuptools/__init__.py:80: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated.
      !!
      
              ********************************************************************************
              Requirements should be satisfied by a PEP 517 installer.
              If you are using pip, you can try \`pip install --use-pep517\`.
              ********************************************************************************
      
      !!
        dist.fetch_build_eggs(dist.setup_requires)
      [ REENTRY ] registering entry points with reentry...
      [ REENTRY ] ... registered to /home/aiida/.config/reentry/data/5d9e5327e684dbfa000493a11d0110f0abb5242e20a9b88369b9910dfe0d9564
      [ REENTRY ] Following entrypoints were registered
      
          aiida-tbextraction -> {'aiida.workflows': {'tbextraction.fp_run.base': 'tbextraction.fp_run.base = aiida_tbextraction.fp_run:FirstPrinciplesRunBase', 'tbextraction.fp_run.reference_bands.base': 'tbextraction.fp_run.reference_bands.base = aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase', 'tbextraction.fp_run.wannier_input.base': 'tbextraction.fp_run.wannier_input.base = aiida_tbextraction.fp_run.wannier_input:WannierInputBase', 'tbextraction.calculate_tb': 'tbextraction.calculate_tb = aiida_tbextraction.calculate_tb:TightBindingCalculation', 'tbextraction.model_evaluation.base': 'tbextraction.model_evaluation.base = aiida_tbextraction.model_evaluation:ModelEvaluationBase', 'tbextraction.model_evaluation.band_difference': 'tbextraction.model_evaluation.band_difference = aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation', 'tbextraction.energy_windows.run_window': 'tbextraction.energy_windows.run_window = aiida_tbextraction.energy_windows.run_window:RunWindow', 'tbextraction.energy_windows.window_search': 'tbextraction.energy_windows.window_search = aiida_tbextraction.energy_windows.window_search:WindowSearch', 'tbextraction.optimize_fp_tb': 'tbextraction.optimize_fp_tb = aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding', 'tbextraction.optimize_strained_fp_tb': 'tbextraction.optimize_strained_fp_tb = aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding'}}
      [ REENTRY ] Current entry point map at /home/aiida/.config/reentry/data/5d9e5327e684dbfa000493a11d0110f0abb5242e20a9b88369b9910dfe0d9564:
          aiida-tbextraction -> {'aiida.workflows': {'tbextraction.fp_run.base': 'tbextraction.fp_run.base = aiida_tbextraction.fp_run:FirstPrinciplesRunBase', 'tbextraction.fp_run.reference_bands.base': 'tbextraction.fp_run.reference_bands.base = aiida_tbextraction.fp_run.reference_bands:ReferenceBandsBase', 'tbextraction.fp_run.wannier_input.base': 'tbextraction.fp_run.wannier_input.base = aiida_tbextraction.fp_run.wannier_input:WannierInputBase', 'tbextraction.calculate_tb': 'tbextraction.calculate_tb = aiida_tbextraction.calculate_tb:TightBindingCalculation', 'tbextraction.model_evaluation.base': 'tbextraction.model_evaluation.base = aiida_tbextraction.model_evaluation:ModelEvaluationBase', 'tbextraction.model_evaluation.band_difference': 'tbextraction.model_evaluation.band_difference = aiida_tbextraction.model_evaluation:BandDifferenceModelEvaluation', 'tbextraction.energy_windows.run_window': 'tbextraction.energy_windows.run_window = aiida_tbextraction.energy_windows.run_window:RunWindow', 'tbextraction.energy_windows.window_search': 'tbextraction.energy_windows.window_search = aiida_tbextraction.energy_windows.window_search:WindowSearch', 'tbextraction.optimize_fp_tb': 'tbextraction.optimize_fp_tb = aiida_tbextraction.optimize_fp_tb:OptimizeFirstPrinciplesTightBinding', 'tbextraction.optimize_strained_fp_tb': 'tbextraction.optimize_strained_fp_tb = aiida_tbextraction.optimize_strained_fp_tb:OptimizeStrainedFirstPrinciplesTightBinding'}}
      error in aiida-tbextraction setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers; Expected end or semicolon (after version specifier)
          aiida-core>=1.0.0<2
                    ~~~~~~~^
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"green",text:"Workflows",count:10}],pip_install_cmd:"pip install --pre aiida-tbextraction",is_installable:"False"},"aiida-tbmodels":{code_home:"https://github.com/greschd/aiida-tbmodels",documentation_url:"https://aiida-tbmodels.readthedocs.io",entry_point_prefix:"tbmodels",pip_url:"aiida-tbmodels",name:"aiida-tbmodels",package_name:"aiida_tbmodels",hosted_on:"github.com",metadata:{release_date:"2020-03-03",description:"AiiDA Plugin for running TBmodels",author:"Dominik Gresch",author_email:"greschd@gmx.ch",license:"Apache 2.0",home_page:"https://aiida-tbmodels.readthedocs.io",classifiers:["Development Status :: 3 - Alpha","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Scientific/Engineering :: Physics"],version:"0.3.0"},aiida_version:null,entry_points:{"aiida.calculations":{"tbmodels.eigenvals":"aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation","tbmodels.parse":"aiida_tbmodels.calculations.parse:ParseCalculation","tbmodels.slice":"aiida_tbmodels.calculations.slice:SliceCalculation","tbmodels.symmetrize":"aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation"},"aiida.parsers":{"tbmodels.model":"aiida_tbmodels.parsers.model:ModelParser"}},commits_count:0,development_status:"alpha",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-tbmodels<pre>Collecting aiida-tbmodels
  Downloading aiida-tbmodels-0.3.0.tar.gz (8.8 kB)
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'error'
  error: subprocess-exited-with-error
  
  × python setup.py egg_info did not run successfully.
  │ exit code: 1
  ╰─> [20 lines of output]
      /opt/conda/lib/python3.10/site-packages/setuptools/__init__.py:80: _DeprecatedInstaller: setuptools.installer and fetch_build_eggs are deprecated.
      !!
      
              ********************************************************************************
              Requirements should be satisfied by a PEP 517 installer.
              If you are using pip, you can try \`pip install --use-pep517\`.
              ********************************************************************************
      
      !!
        dist.fetch_build_eggs(dist.setup_requires)
      [ REENTRY ] registering entry points with reentry...
      [ REENTRY ] ... registered to /home/aiida/.config/reentry/data/5d9e5327e684dbfa000493a11d0110f0abb5242e20a9b88369b9910dfe0d9564
      [ REENTRY ] Following entrypoints were registered
      
          aiida-tbmodels -> {'aiida.calculations': {'tbmodels.eigenvals': 'tbmodels.eigenvals = aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation', 'tbmodels.parse': 'tbmodels.parse = aiida_tbmodels.calculations.parse:ParseCalculation', 'tbmodels.slice': 'tbmodels.slice = aiida_tbmodels.calculations.slice:SliceCalculation', 'tbmodels.symmetrize': 'tbmodels.symmetrize = aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation'}, 'aiida.parsers': {'tbmodels.model': 'tbmodels.model = aiida_tbmodels.parsers.model:ModelParser'}}
      [ REENTRY ] Current entry point map at /home/aiida/.config/reentry/data/5d9e5327e684dbfa000493a11d0110f0abb5242e20a9b88369b9910dfe0d9564:
          aiida-tbmodels -> {'aiida.calculations': {'tbmodels.eigenvals': 'tbmodels.eigenvals = aiida_tbmodels.calculations.eigenvals:EigenvalsCalculation', 'tbmodels.parse': 'tbmodels.parse = aiida_tbmodels.calculations.parse:ParseCalculation', 'tbmodels.slice': 'tbmodels.slice = aiida_tbmodels.calculations.slice:SliceCalculation', 'tbmodels.symmetrize': 'tbmodels.symmetrize = aiida_tbmodels.calculations.symmetrize:SymmetrizeCalculation'}, 'aiida.parsers': {'tbmodels.model': 'tbmodels.model = aiida_tbmodels.parsers.model:ModelParser'}}
      error in aiida-tbmodels setup command: 'install_requires' must be a string or list of strings containing valid project/version requirement specifiers; Expected end or semicolon (after version specifier)
          aiida-core>=1.1.0<2.0.0
                    ~~~~~~~^
      [end of output]
  
  note: This error originates from a subprocess, and is likely not a problem with pip.
error: metadata-generation-failed

× Encountered error while generating package metadata.
╰─> See above for output.

note: This is an issue with the package mentioned above, not pip.
hint: See above for details.
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W019'>W019</a>: No <code>bdist_wheel</code> available for PyPI release.","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-tbmodels",is_installable:"False"},"aiida-tcod":{code_home:"https://github.com/aiidateam/aiida-tcod",development_status:"beta",entry_point_prefix:"tcod",pip_url:"git+https://github.com/aiidateam/aiida-tcod",name:"aiida-tcod",package_name:"aiida_tcod",hosted_on:"github.com",metadata:{author:"The AiiDA team",author_email:"developers@aiida.net",version:"0.1.0a0",description:"AiiDA plugin to interact with the TCOD",classifiers:["Programming Language :: Python"]},aiida_version:">=1.0.0b1",entry_points:{"aiida.tools.dbexporters":{tcod:"aiida.tools.dbexporters.tcod"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W003'>W003</a>: Missing classifier 'Framework :: AiiDA'","<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"orange",text:"Other (Database Exporters)",count:1}],pip_install_cmd:"pip install git+https://github.com/aiidateam/aiida-tcod",is_installable:"True"},"aiida-uppasd":{code_home:"https://github.com/uppasd/aiida-uppasd",documentation_url:"https://github.com/uppasd/aiida-uppasd/blob/master/README.md",entry_point_prefix:"uppasd",pip_url:"git+https://github.com/unkcpz/aiida-uppasd",name:"aiida-uppasd",package_name:"aiida_uppasd",hosted_on:"github.com",metadata:{author:"Qichen Xu, Anders Bergman, Anna Delin, Jonathan Chico",author_email:"qichenx@kth.se",version:"0.1.0",description:"Interface for UppASD and AiiDA",classifiers:["Programming Language :: Python","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Framework :: AiiDA"]},aiida_version:">=1.1.0,<2.0.0",entry_points:{"aiida.calculations":{UppASD_core_calculations:"UppASD_AiiDA.calculations.core_calcs:UppASD"},"aiida.parsers":{UppASD_core_parsers:"UppASD_AiiDA.parsers.core_parser:SpinDynamic_core_parser"}},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'UppASD_core_calculations' does not start with prefix 'uppasd.'","<a href='https://github.com/aiidateam/aiida-registry#W010'>W010</a>: Entry point 'UppASD_core_parsers' does not start with prefix 'uppasd.'"],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install git+https://github.com/unkcpz/aiida-uppasd"},"aiida-vasp":{code_home:"https://github.com/aiida-vasp/aiida-vasp",documentation_url:"https://aiida-vasp.readthedocs.io/",entry_point_prefix:"vasp",pip_url:"aiida-vasp",plugin_info:"https://raw.githubusercontent.com/aiida-vasp/aiida-vasp/master/setup.json",name:"aiida-vasp",package_name:"aiida_vasp",hosted_on:"github.com",metadata:{release_date:"2024-12-12",description:"AiiDA plugin for running VASP calculations and workflows.",author_email:"Espen Flage-Larsen <espen.flage-larsen@sigma2.no>",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Physics"],version:"4.1.0"},aiida_version:">=2.6",entry_points:{"aiida.calculations":{"vasp.immigrant":"aiida_vasp.calcs.immigrant:VaspImmigrant","vasp.neb":"aiida_vasp.calcs.neb:VaspNEBCalculation","vasp.vasp":"aiida_vasp.calcs.vasp:VaspCalculation","vasp.vasp2w90":"aiida_vasp.calcs.vasp2w90:Vasp2w90Calculation"},"aiida.cmdline.data":{"vasp.potcar":"aiida_vasp.commands.potcar:potcar","vasp.tools":"aiida_vasp.commands.tools:tools"},"aiida.data":{"vasp.archive":"aiida_vasp.data.archive:ArchiveData","vasp.chargedensity":"aiida_vasp.data.chargedensity:ChargedensityData","vasp.potcar":"aiida_vasp.data.potcar:PotcarData","vasp.potcar_file":"aiida_vasp.data.potcar:PotcarFileData","vasp.wavefun":"aiida_vasp.data.wavefun:WavefunData"},"aiida.groups":{"vasp.potcar":"aiida_vasp.data.potcar:PotcarGroup"},"aiida.parsers":{"vasp.neb":"aiida_vasp.parsers.neb:NebParser","vasp.vasp":"aiida_vasp.parsers.vasp:VaspParser"},"aiida.workflows":{"vasp.bands":{description:["Workchain for running bands calculations.","","    This workchain does the following:","","    1. Relax the structure if requested (eg. inputs passed to the relax namespace).","    2. Do a SCF singlepoint calculation.","    3. Do a non-scf calculation for bands and dos.","","    Inputs must be passed for the SCF calculation, others are optional. The dos calculation","    will only run if the kpoints for DOS are passed or a full specification is given under the","    `dos` input namesace.","","    The SCF calculation may be skipped by passing a CHGCAR file/remote folder. In which case the SCF inputs","    are carried on for non-scf calculations.","","    The band structure calculation will run unless `only_dos` is set to `Bool(True)`.","","    For magnetic structures, the workchain will internally create additional species for the symmetry",'    analysis and regenerate "undecorated" structures with corresponding initial magnetic moments. This',"    works for both FM and AFM species. Care should be taken when the MAGMOM is obtained from site projected","    values in case of unexpected symmetry breaking.","","    Input for bands and dos calculations are optional. However, if they are needed, the full list of inputs must","    be passed. For the `parameters` node, one may choose to only specify those fields that need to be updated.","","    For optics calculations, one should run with `only_dos`, set 'NBANDS' to a high value and","    set 'LOPTICS' to be True."],spec:{inputs:[{name:"band_settings",required:!0,valid_types:"Dict",info:`                              symprec:  float      
                                        Default: Precision of the symmetry determination
                            band_mode:  str        
                                        Default: Mode for generating the band path. Choose from: bradcrack, pymatgen,seekpath-aiida and latimer-munro.
                band_kpoints_distance:  float      
                                        Default: Spacing for band distances for automatic kpoints generation, used by seekpath-aiida mode.
                         line_density:  float      
                                        Default: Density of the point along the path, used by the sumo interface.
                 dos_kpoints_distance:  float      
                                        Default: Kpoints for running DOS calculations in A^-1 * 2pi. Will perform non-SCF DOS calculation is supplied.
                             only_dos:  bool       
                                        Default: Flag for running only DOS calculations
                              run_dos:  bool       
                                        Default: Flag for running DOS calculations
  additional_band_analysis_parameters:  dict       
                                        Default: Additional keyword arguments for the seekpath/ interface, available keys are:  ['with_time_reversal', 'reference_distance', 'recipe', 'threshold', 'symprec', 'angle_tolerance']
                    kpoints_per_split:  int        
                                        Default: Number of kpoints per split for the band structure calculation
                 hybrid_reuse_wavecar:  bool       
                                        Default: Whether to reuse the WAVECAR from the previous relax/singlepoint calculation`},{name:"scf",required:!0,valid_types:"Data",info:"Inputs for SCF workchain, mandatory"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bands",required:!1,valid_types:"Data",info:"Inputs for bands calculation, if needed"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints for the bands. Will not generate kpoints if supplied."},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:"Explicit CHGCAR file used for DOS/Bands calculations"},{name:"clean_children_workdir",required:!1,valid_types:"Str, NoneType",info:"What part of the called children to clean"},{name:"dos",required:!1,valid_types:"Data",info:"Inputs for DOS calculation, if needed"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for Relaxation workchain, if needed"},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder containing the CHGCAR file to be used"}],outputs:[{name:"band_structure",required:!1,valid_types:"",info:"Computed band structure with labels"},{name:"dos",required:!1,valid_types:"",info:""},{name:"primitive_structure",required:!1,valid_types:"",info:"Primitive structure used for band structure calculations"},{name:"projectors",required:!1,valid_types:"",info:""},{name:"seekpath_parameters",required:!1,valid_types:"",info:"Parameters used by seekpath"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:501,message:"Relaxation workchain failed"},{status:502,message:"SCF workchain failed"},{status:503,message:"Band structure workchain failed"},{status:504,message:"DOS workchain failed"},{status:601,message:"The input structure is not the primitive one!"}]},class:"aiida_vasp.workchains.v2.bands:VaspBandsWorkChain"},"vasp.converge":{description:["A workchain to perform convergence tests.","","    The inputs are essentially the same as for ``VaspWorChain`` but instead of launching","    a single calculation it launches many calculations with different kpoint spacing","    and the cut off energy.","","    A ``conv_setting`` input controls the range of cut off energies and kpoint spacings.","    The available options are:","      - cutoff_start","      - cutoff_stop","      - cutoff_step","      - kspacing_start","      - kspacing_stop","      - kspacing_step","      - cutoff_kconv : cut-off energy for the kpoints convergence tests.","      - kspacing_cutconv : the kpoint spacing to be used for cut-off energy convergence tests.","","    The the output data are collected and stored in two ``Dict`` output nodes."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"conv_settings",required:!0,valid_types:"Dict",info:`      cutoff_start:  float      
                     Default: The starting cut-off energy
       cutoff_stop:  float      
                     Default: The Final cut-off energy
       cutoff_step:  float      
                     Default: Step size of the cut-off energy
    kspacing_start:  float      
                     Default: The starting kspacing
     kspacing_stop:  float      
                     Default: The final kspacing
     kspacing_step:  float      
                     Default: Step size of the cut-off energy
      cutoff_kconv:  float      
                     Default: The cut-off energy used for kpoints convergence tests
  kspacing_cutconv:  float      
                     Default: The kpoints spacing used for cut-off energy convergence tests`},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"auto_parallel",required:!1,valid_types:"Dict, NoneType",info:"Automatic parallelisation settings, keywords passed to `get_jobscheme` function."},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"keep_last_workdir",required:!1,valid_types:"Bool",info:"If True, prevent the last workdir from being cleaned in case the files are needed for restarts."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Spacing for the kpoints in units A^-1 * 2pi"},{name:"ldau_mapping",required:!1,valid_types:"Dict, NoneType",info:`Settings for assign LDA+U related settings according to the input structure.

    mapping: a dictionary in the format of  {"Mn": [d, 4]...} for U
    utype: the type of LDA+U, default to 2, which is the one with only one parameter
    jmapping: a dictionary in the format of  {"Mn": [d, 4]...} but for J
    felec: Wether we are dealing with f electrons, will increase lmaxmix if we are.`},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"cutoff_conv_data",required:!1,valid_types:"",info:""},{name:"kpoints_conv_data",required:!1,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"At leaste one of the launched sub-workchain has failed"}]},class:"aiida_vasp.workchains.v2.converge:VaspConvergenceWorkChain"},"vasp.hybrid_bands":{description:["Bands workchain for hybrid calculations","","    This workchain compute the bandstructure by adding band path segments as zero-weighted","    kpoints for self-consistent calculations. This is mainly for hybrid calculations, but can","    also be used for GGA calculations, although it would be not as efficient as the non-SCF","    method implemented in ``VaspBandsWorkChain``.","","    In contrast to ``VaspBandsWorkChain`` this workflow requires and explicitly defined kpoints","    set for the ``scf.kpoints`` port. This can be obtained by parsing the ``IBZKPT`` file from","    and existing calculation or dryrun. Or by parsing the ``vasprun.xml`` file.","","    If a relaxation workchain is run as part of the process, the ``kpoints`` output returned can","    be used for this purpose automatically.","","    Only the `scf` namespace will be used for performing the calculation","","    TODO:","     - Warn if the calculation is not actually a hybrid one","     - Automatic Kpoints from dryruns"],spec:{inputs:[{name:"band_settings",required:!0,valid_types:"Dict",info:`                              symprec:  float      
                                        Default: Precision of the symmetry determination
                            band_mode:  str        
                                        Default: Mode for generating the band path. Choose from: bradcrack, pymatgen,seekpath-aiida and latimer-munro.
                band_kpoints_distance:  float      
                                        Default: Spacing for band distances for automatic kpoints generation, used by seekpath-aiida mode.
                         line_density:  float      
                                        Default: Density of the point along the path, used by the sumo interface.
                 dos_kpoints_distance:  float      
                                        Default: Kpoints for running DOS calculations in A^-1 * 2pi. Will perform non-SCF DOS calculation is supplied.
                             only_dos:  bool       
                                        Default: Flag for running only DOS calculations
                              run_dos:  bool       
                                        Default: Flag for running DOS calculations
  additional_band_analysis_parameters:  dict       
                                        Default: Additional keyword arguments for the seekpath/ interface, available keys are:  ['with_time_reversal', 'reference_distance', 'recipe', 'threshold', 'symprec', 'angle_tolerance']
                    kpoints_per_split:  int        
                                        Default: Number of kpoints per split for the band structure calculation
                 hybrid_reuse_wavecar:  bool       
                                        Default: Whether to reuse the WAVECAR from the previous relax/singlepoint calculation`},{name:"scf",required:!0,valid_types:"Data",info:"Inputs for SCF workchain, mandatory"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bands",required:!1,valid_types:"Data",info:"Inputs for bands calculation, if needed"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints for the bands. Will not generate kpoints if supplied."},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:"Explicit CHGCAR file used for DOS/Bands calculations"},{name:"clean_children_workdir",required:!1,valid_types:"Str, NoneType",info:"What part of the called children to clean"},{name:"dos",required:!1,valid_types:"Data",info:"Inputs for DOS calculation, if needed"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for Relaxation workchain, if needed"},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder containing the CHGCAR file to be used"}],outputs:[{name:"band_structure",required:!1,valid_types:"",info:"Computed band structure with labels"},{name:"dos",required:!1,valid_types:"",info:""},{name:"primitive_structure",required:!1,valid_types:"",info:"Primitive structure used for band structure calculations"},{name:"projectors",required:!1,valid_types:"",info:""},{name:"seekpath_parameters",required:!1,valid_types:"",info:"Parameters used by seekpath"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:501,message:"Relaxation workchain failed"},{status:502,message:"SCF workchain failed"},{status:503,message:"Band structure workchain failed"},{status:504,message:"DOS workchain failed"},{status:505,message:"Cannot found valid inputs for SCF kpoints"},{status:601,message:"The input structure is not the primitive one!"}]},class:"aiida_vasp.workchains.v2.bands:VaspHybridBandsWorkChain"},"vasp.neb":{description:["A NEB workchain","","    Error handling enriched wrapper around VaspNEBCalculation.","","    Deliberately conserves most of the interface (required inputs) of the VaspNEBCalculation class, but","    makes it possible for a user to interact with a workchain and not a calculation.","","    In addition, implement restarts of calculation when the calculation is net full converged for error handling."],spec:{inputs:[{name:"dynamics",required:!0,valid_types:"",info:""},{name:"final_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for the final image."},{name:"initial_structure",required:!0,valid_types:"StructureData, CifData",info:"The input structure (POSCAR) for initial image."},{name:"neb_images",required:!0,valid_types:"StructureData, CifData",info:"Starting structure for the NEB images"},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:"The VASP input parameters (INCAR)."},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"charge_density",required:!1,valid_types:"ChargedensityData",info:"The charge density. (CHGCAR)"},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successful calculation.
            `},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Spacing for the kpoints in units A^-1 * 2pi (CASTEP style `kpoints_mp_spacing`)"},{name:"kpoints_spacing_vasp",required:!1,valid_types:"Float, NoneType",info:"Spacing for the kpoints in units A^-1 (VASP style)"},{name:"ldau_mapping",required:!1,valid_types:"Dict, NoneType",info:"Mappings, see the doc string of 'get_ldau_keys'"},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder to restart from if need be"},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional parameters not related to VASP itself."},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavefunctions",required:!1,valid_types:"WavefunData",info:"The wave function coefficients. (WAVECAR)"}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"Per-image misc output."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"structure",required:!0,valid_types:"StructureData",info:"NEB images"},{name:"arrays",required:!1,valid_types:"ArrayData",info:"Array data from each image."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"energies",required:!1,valid_types:"ArrayData",info:"Energies of the calculation at each ionic/electronic step."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"parameters",required:!1,valid_types:"Dict",info:"All input parameters including the default values."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The projectors for the calculation."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The NEB trajectory."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:401,message:"The maximum number of iterations was exceeded."},{status:402,message:"The process failed for an unknown reason, twice in a row."},{status:501,message:"Unrecoverable error in launched NEB calculations."},{status:700,message:"the user did not supply a potential family name"},{status:701,message:"ValueError was returned from get_potcars_from_structure"},{status:702,message:"the potential does not exist"},{status:703,message:"the exception: {exception} was thrown while massaging the parameters"}]},class:"aiida_vasp.workchains.neb:VaspNEBWorkChain"},"vasp.relax":{description:["Structure relaxation workchain."],spec:{inputs:[{name:"relax_settings",required:!0,valid_types:"Dict",info:`                             algo:  str        
                                    Default: The algorithm to use for relaxation
                    energy_cutoff:  Optional   
                                    Default: The cut off energy difference when the relaxation is stopped (e.g. EDIFF)
                     force_cutoff:  float      
                                    Default: The maximum force when the relaxation is stopped (e.g. EDIFFG)
                            steps:  int        
                                    Default: Number of relaxation steps to perform (eg. NSW)
                        positions:  bool       
                                    Default: If True, perform relaxation of the atomic positions
                            shape:  bool       
                                    Default: If True, perform relaxation of the cell shape
                           volume:  bool       
                                    Default: If True, perform relaxation of the cell volume
                   convergence_on:  bool       
                                    Default: If True, perform convergence checks within the workchain
             convergence_absolute:  bool       
                                    Default: If True, use absolute values where possible when performing convergence checks
       convergence_max_iterations:  int        
                                    Default: Maximum iterations for convergence checking
            convergence_positions:  float      
                                    Default: The cutoff value for the convergence check on positions in Angstram. A negative value by pass the check.
               convergence_volume:  float      
                                    Default: The cutoff value for the convergence check on volume between the two structures. A negative value by pass the check.
        convergence_shape_lengths:  float      
                                    Default: The cutoff value for the convergence check on the lengths of the unit cell vectors, between input and the outputs structure. A negative value by pass the check.
         convergence_shape_angles:  float      
                                    Default: The cutoff value for the convergence check on the angles of the unit cell vectors, between input and the outputs structure. A negative value by pass the check.
                 convergence_mode:  str        
                                    Default: Mode of the convergence check for positions. 'inout' for checking input/output structure, or 'last' to check only the change of the last step.
                            reuse:  bool       
                                    Default: Whether reuse the previous calculation by copying over the remote folder
                      clean_reuse:  bool       
                                    Default: Whether to perform a final cleaning of the reused calculations
                  keep_sp_workdir:  bool       
                                    Default: Whether to keep the workdir of the final singlepoint calculation
                          perform:  bool       
                                    Default: Do not perform any relaxation if set to 'False'
            hybrid_calc_bootstrap:  bool       
                                    Default: Whether to bootstrap hybrid calculation by performing standard DFT first
  hybrid_calc_bootstrap_wallclock:  int        
                                    Default: Wall time limit in second for the bootstrap calculation
               keep_magnetization:  bool       
                                    Default: Whether to keep magnetization from the previous calculation if possible`},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"vasp",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"static_calc_options",required:!1,valid_types:"Dict, NoneType",info:`
                   The full options Dict to be used in the final static calculation.
                   `},{name:"static_calc_parameters",required:!1,valid_types:"Dict, NoneType",info:`
                   The parameters (INCAR) to be used in the final static calculation.
                   `},{name:"static_calc_settings",required:!1,valid_types:"Dict, NoneType",info:`
                   The full settings Dict to be used in the final static calculation.
                   `},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:"Increased verbosity."}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"relax",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"arrays",required:!1,valid_types:"ArrayData",info:"The output trajectory data."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"energies",required:!1,valid_types:"ArrayData",info:"Energies of the calculation at each ionic/electronic step."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"parallel_settings",required:!1,valid_types:"Dict",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"All input parameters including the default values."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The projectors for the calculation."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"the called workchain does not contain the necessary relaxed output structure"},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the relax workchain"},{status:502,message:"there was an error overriding the parameters"},{status:600,message:"Ionic relaxation was not converged after the maximum number of iterations has been spent"},{status:601,message:"The final singlepoint calculation has increased residual forces. This may be caused by electronic solver converging to a different solution. Care should be taken to investigate the results."}]},class:"aiida_vasp.workchains.v2.relax:VaspRelaxWorkChain"},"vasp.v2.bands":{description:["Workchain for running bands calculations.","","    This workchain does the following:","","    1. Relax the structure if requested (eg. inputs passed to the relax namespace).","    2. Do a SCF singlepoint calculation.","    3. Do a non-scf calculation for bands and dos.","","    Inputs must be passed for the SCF calculation, others are optional. The dos calculation","    will only run if the kpoints for DOS are passed or a full specification is given under the","    `dos` input namesace.","","    The SCF calculation may be skipped by passing a CHGCAR file/remote folder. In which case the SCF inputs","    are carried on for non-scf calculations.","","    The band structure calculation will run unless `only_dos` is set to `Bool(True)`.","","    For magnetic structures, the workchain will internally create additional species for the symmetry",'    analysis and regenerate "undecorated" structures with corresponding initial magnetic moments. This',"    works for both FM and AFM species. Care should be taken when the MAGMOM is obtained from site projected","    values in case of unexpected symmetry breaking.","","    Input for bands and dos calculations are optional. However, if they are needed, the full list of inputs must","    be passed. For the `parameters` node, one may choose to only specify those fields that need to be updated.","","    For optics calculations, one should run with `only_dos`, set 'NBANDS' to a high value and","    set 'LOPTICS' to be True."],spec:{inputs:[{name:"band_settings",required:!0,valid_types:"Dict",info:`                              symprec:  float      
                                        Default: Precision of the symmetry determination
                            band_mode:  str        
                                        Default: Mode for generating the band path. Choose from: bradcrack, pymatgen,seekpath-aiida and latimer-munro.
                band_kpoints_distance:  float      
                                        Default: Spacing for band distances for automatic kpoints generation, used by seekpath-aiida mode.
                         line_density:  float      
                                        Default: Density of the point along the path, used by the sumo interface.
                 dos_kpoints_distance:  float      
                                        Default: Kpoints for running DOS calculations in A^-1 * 2pi. Will perform non-SCF DOS calculation is supplied.
                             only_dos:  bool       
                                        Default: Flag for running only DOS calculations
                              run_dos:  bool       
                                        Default: Flag for running DOS calculations
  additional_band_analysis_parameters:  dict       
                                        Default: Additional keyword arguments for the seekpath/ interface, available keys are:  ['with_time_reversal', 'reference_distance', 'recipe', 'threshold', 'symprec', 'angle_tolerance']
                    kpoints_per_split:  int        
                                        Default: Number of kpoints per split for the band structure calculation
                 hybrid_reuse_wavecar:  bool       
                                        Default: Whether to reuse the WAVECAR from the previous relax/singlepoint calculation`},{name:"scf",required:!0,valid_types:"Data",info:"Inputs for SCF workchain, mandatory"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bands",required:!1,valid_types:"Data",info:"Inputs for bands calculation, if needed"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints for the bands. Will not generate kpoints if supplied."},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:"Explicit CHGCAR file used for DOS/Bands calculations"},{name:"clean_children_workdir",required:!1,valid_types:"Str, NoneType",info:"What part of the called children to clean"},{name:"dos",required:!1,valid_types:"Data",info:"Inputs for DOS calculation, if needed"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for Relaxation workchain, if needed"},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder containing the CHGCAR file to be used"}],outputs:[{name:"band_structure",required:!1,valid_types:"",info:"Computed band structure with labels"},{name:"dos",required:!1,valid_types:"",info:""},{name:"primitive_structure",required:!1,valid_types:"",info:"Primitive structure used for band structure calculations"},{name:"projectors",required:!1,valid_types:"",info:""},{name:"seekpath_parameters",required:!1,valid_types:"",info:"Parameters used by seekpath"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:501,message:"Relaxation workchain failed"},{status:502,message:"SCF workchain failed"},{status:503,message:"Band structure workchain failed"},{status:504,message:"DOS workchain failed"},{status:601,message:"The input structure is not the primitive one!"}]},class:"aiida_vasp.workchains.v2.bands:VaspBandsWorkChain"},"vasp.v2.converge":{description:["A workchain to perform convergence tests.","","    The inputs are essentially the same as for ``VaspWorChain`` but instead of launching","    a single calculation it launches many calculations with different kpoint spacing","    and the cut off energy.","","    A ``conv_setting`` input controls the range of cut off energies and kpoint spacings.","    The available options are:","      - cutoff_start","      - cutoff_stop","      - cutoff_step","      - kspacing_start","      - kspacing_stop","      - kspacing_step","      - cutoff_kconv : cut-off energy for the kpoints convergence tests.","      - kspacing_cutconv : the kpoint spacing to be used for cut-off energy convergence tests.","","    The the output data are collected and stored in two ``Dict`` output nodes."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"conv_settings",required:!0,valid_types:"Dict",info:`      cutoff_start:  float      
                     Default: The starting cut-off energy
       cutoff_stop:  float      
                     Default: The Final cut-off energy
       cutoff_step:  float      
                     Default: Step size of the cut-off energy
    kspacing_start:  float      
                     Default: The starting kspacing
     kspacing_stop:  float      
                     Default: The final kspacing
     kspacing_step:  float      
                     Default: Step size of the cut-off energy
      cutoff_kconv:  float      
                     Default: The cut-off energy used for kpoints convergence tests
  kspacing_cutconv:  float      
                     Default: The kpoints spacing used for cut-off energy convergence tests`},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"auto_parallel",required:!1,valid_types:"Dict, NoneType",info:"Automatic parallelisation settings, keywords passed to `get_jobscheme` function."},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"keep_last_workdir",required:!1,valid_types:"Bool",info:"If True, prevent the last workdir from being cleaned in case the files are needed for restarts."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Spacing for the kpoints in units A^-1 * 2pi"},{name:"ldau_mapping",required:!1,valid_types:"Dict, NoneType",info:`Settings for assign LDA+U related settings according to the input structure.

    mapping: a dictionary in the format of  {"Mn": [d, 4]...} for U
    utype: the type of LDA+U, default to 2, which is the one with only one parameter
    jmapping: a dictionary in the format of  {"Mn": [d, 4]...} but for J
    felec: Wether we are dealing with f electrons, will increase lmaxmix if we are.`},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"cutoff_conv_data",required:!1,valid_types:"",info:""},{name:"kpoints_conv_data",required:!1,valid_types:"",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:401,message:"At leaste one of the launched sub-workchain has failed"}]},class:"aiida_vasp.workchains.v2.converge:VaspConvergenceWorkChain"},"vasp.v2.hybrid_bands":{description:["Bands workchain for hybrid calculations","","    This workchain compute the bandstructure by adding band path segments as zero-weighted","    kpoints for self-consistent calculations. This is mainly for hybrid calculations, but can","    also be used for GGA calculations, although it would be not as efficient as the non-SCF","    method implemented in ``VaspBandsWorkChain``.","","    In contrast to ``VaspBandsWorkChain`` this workflow requires and explicitly defined kpoints","    set for the ``scf.kpoints`` port. This can be obtained by parsing the ``IBZKPT`` file from","    and existing calculation or dryrun. Or by parsing the ``vasprun.xml`` file.","","    If a relaxation workchain is run as part of the process, the ``kpoints`` output returned can","    be used for this purpose automatically.","","    Only the `scf` namespace will be used for performing the calculation","","    TODO:","     - Warn if the calculation is not actually a hybrid one","     - Automatic Kpoints from dryruns"],spec:{inputs:[{name:"band_settings",required:!0,valid_types:"Dict",info:`                              symprec:  float      
                                        Default: Precision of the symmetry determination
                            band_mode:  str        
                                        Default: Mode for generating the band path. Choose from: bradcrack, pymatgen,seekpath-aiida and latimer-munro.
                band_kpoints_distance:  float      
                                        Default: Spacing for band distances for automatic kpoints generation, used by seekpath-aiida mode.
                         line_density:  float      
                                        Default: Density of the point along the path, used by the sumo interface.
                 dos_kpoints_distance:  float      
                                        Default: Kpoints for running DOS calculations in A^-1 * 2pi. Will perform non-SCF DOS calculation is supplied.
                             only_dos:  bool       
                                        Default: Flag for running only DOS calculations
                              run_dos:  bool       
                                        Default: Flag for running DOS calculations
  additional_band_analysis_parameters:  dict       
                                        Default: Additional keyword arguments for the seekpath/ interface, available keys are:  ['with_time_reversal', 'reference_distance', 'recipe', 'threshold', 'symprec', 'angle_tolerance']
                    kpoints_per_split:  int        
                                        Default: Number of kpoints per split for the band structure calculation
                 hybrid_reuse_wavecar:  bool       
                                        Default: Whether to reuse the WAVECAR from the previous relax/singlepoint calculation`},{name:"scf",required:!0,valid_types:"Data",info:"Inputs for SCF workchain, mandatory"},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure"},{name:"bands",required:!1,valid_types:"Data",info:"Inputs for bands calculation, if needed"},{name:"bs_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"Explicit kpoints for the bands. Will not generate kpoints if supplied."},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:"Explicit CHGCAR file used for DOS/Bands calculations"},{name:"clean_children_workdir",required:!1,valid_types:"Str, NoneType",info:"What part of the called children to clean"},{name:"dos",required:!1,valid_types:"Data",info:"Inputs for DOS calculation, if needed"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"relax",required:!1,valid_types:"Data",info:"Inputs for Relaxation workchain, if needed"},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:"A remote folder containing the CHGCAR file to be used"}],outputs:[{name:"band_structure",required:!1,valid_types:"",info:"Computed band structure with labels"},{name:"dos",required:!1,valid_types:"",info:""},{name:"primitive_structure",required:!1,valid_types:"",info:"Primitive structure used for band structure calculations"},{name:"projectors",required:!1,valid_types:"",info:""},{name:"seekpath_parameters",required:!1,valid_types:"",info:"Parameters used by seekpath"}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:501,message:"Relaxation workchain failed"},{status:502,message:"SCF workchain failed"},{status:503,message:"Band structure workchain failed"},{status:504,message:"DOS workchain failed"},{status:505,message:"Cannot found valid inputs for SCF kpoints"},{status:601,message:"The input structure is not the primitive one!"}]},class:"aiida_vasp.workchains.v2.bands:VaspHybridBandsWorkChain"},"vasp.v2.relax":{description:["Structure relaxation workchain."],spec:{inputs:[{name:"relax_settings",required:!0,valid_types:"Dict",info:`                             algo:  str        
                                    Default: The algorithm to use for relaxation
                    energy_cutoff:  Optional   
                                    Default: The cut off energy difference when the relaxation is stopped (e.g. EDIFF)
                     force_cutoff:  float      
                                    Default: The maximum force when the relaxation is stopped (e.g. EDIFFG)
                            steps:  int        
                                    Default: Number of relaxation steps to perform (eg. NSW)
                        positions:  bool       
                                    Default: If True, perform relaxation of the atomic positions
                            shape:  bool       
                                    Default: If True, perform relaxation of the cell shape
                           volume:  bool       
                                    Default: If True, perform relaxation of the cell volume
                   convergence_on:  bool       
                                    Default: If True, perform convergence checks within the workchain
             convergence_absolute:  bool       
                                    Default: If True, use absolute values where possible when performing convergence checks
       convergence_max_iterations:  int        
                                    Default: Maximum iterations for convergence checking
            convergence_positions:  float      
                                    Default: The cutoff value for the convergence check on positions in Angstram. A negative value by pass the check.
               convergence_volume:  float      
                                    Default: The cutoff value for the convergence check on volume between the two structures. A negative value by pass the check.
        convergence_shape_lengths:  float      
                                    Default: The cutoff value for the convergence check on the lengths of the unit cell vectors, between input and the outputs structure. A negative value by pass the check.
         convergence_shape_angles:  float      
                                    Default: The cutoff value for the convergence check on the angles of the unit cell vectors, between input and the outputs structure. A negative value by pass the check.
                 convergence_mode:  str        
                                    Default: Mode of the convergence check for positions. 'inout' for checking input/output structure, or 'last' to check only the change of the last step.
                            reuse:  bool       
                                    Default: Whether reuse the previous calculation by copying over the remote folder
                      clean_reuse:  bool       
                                    Default: Whether to perform a final cleaning of the reused calculations
                  keep_sp_workdir:  bool       
                                    Default: Whether to keep the workdir of the final singlepoint calculation
                          perform:  bool       
                                    Default: Do not perform any relaxation if set to 'False'
            hybrid_calc_bootstrap:  bool       
                                    Default: Whether to bootstrap hybrid calculation by performing standard DFT first
  hybrid_calc_bootstrap_wallclock:  int        
                                    Default: Wall time limit in second for the bootstrap calculation
               keep_magnetization:  bool       
                                    Default: Whether to keep magnetization from the previous calculation if possible`},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"vasp",required:!0,valid_types:"Data",info:""},{name:"metadata",required:!1,valid_types:"",info:""},{name:"static_calc_options",required:!1,valid_types:"Dict, NoneType",info:`
                   The full options Dict to be used in the final static calculation.
                   `},{name:"static_calc_parameters",required:!1,valid_types:"Dict, NoneType",info:`
                   The parameters (INCAR) to be used in the final static calculation.
                   `},{name:"static_calc_settings",required:!1,valid_types:"Dict, NoneType",info:`
                   The full settings Dict to be used in the final static calculation.
                   `},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:"Increased verbosity."}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"relax",required:!0,valid_types:"",info:""},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"arrays",required:!1,valid_types:"ArrayData",info:"The output trajectory data."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"energies",required:!1,valid_types:"ArrayData",info:"Energies of the calculation at each ionic/electronic step."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"parallel_settings",required:!1,valid_types:"Dict",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"All input parameters including the default values."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The projectors for the calculation."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"the called workchain does not contain the necessary relaxed output structure"},{status:420,message:"no called workchain detected"},{status:500,message:"unknown error detected in the relax workchain"},{status:502,message:"there was an error overriding the parameters"},{status:600,message:"Ionic relaxation was not converged after the maximum number of iterations has been spent"},{status:601,message:"The final singlepoint calculation has increased residual forces. This may be caused by electronic solver converging to a different solution. Care should be taken to investigate the results."}]},class:"aiida_vasp.workchains.v2.relax:VaspRelaxWorkChain"},"vasp.v2.vasp":{description:["The VASP workchain.","","    -------------------","    Error handling enriched wrapper around VaspCalculation.","","    Deliberately conserves most of the interface (required inputs) of the VaspCalculation class, but","    makes it possible for a user to interact with a workchain and not a calculation.","","    This is intended to be used instead of directly submitting a VaspCalculation,","    so that future features like","    automatic restarting, error checking etc. can be propagated to higher level workchains","    automatically by implementing them here.","","    Handlers are implemented to try fix common problems and improves the robustness.","    Individual handlers can be enabled/disabled by setting the ``handler_overrides`` input port.",'    Additional settings may be passed under the "settings" input, which is also forwarded to the',"    calculations. The available options are:","","    - ``USE_WAVECAR_FOR_RESTART`` wether calculation restarts should use the WAVECAR. The default is ``True``.","","    Usage::","","        from aiida.common.extendeddicts import AttributeDict","        from aiida.work import submit","        basevasp = WorkflowFactory('vasp.vasp')","        inputs = basevasp.get_builder()","        inputs = AttributeDict()","        ## ... set inputs","        submit(basevasp, **inputs)","","    To see a working example, including generation of input nodes from scratch, please","    refer to ``examples/run_vasp_lean.py``."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"auto_parallel",required:!1,valid_types:"Dict, NoneType",info:"Automatic parallelisation settings, keywords passed to `get_jobscheme` function."},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"keep_last_workdir",required:!1,valid_types:"Bool",info:"If True, prevent the last workdir from being cleaned in case the files are needed for restarts."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Spacing for the kpoints in units A^-1 * 2pi"},{name:"ldau_mapping",required:!1,valid_types:"Dict, NoneType",info:`Settings for assign LDA+U related settings according to the input structure.

    mapping: a dictionary in the format of  {"Mn": [d, 4]...} for U
    utype: the type of LDA+U, default to 2, which is the one with only one parameter
    jmapping: a dictionary in the format of  {"Mn": [d, 4]...} but for J
    felec: Wether we are dealing with f electrons, will increase lmaxmix if we are.`},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"arrays",required:!1,valid_types:"ArrayData",info:"The output trajectory data."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"energies",required:!1,valid_types:"ArrayData",info:"Energies of the calculation at each ionic/electronic step."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"parallel_settings",required:!1,valid_types:"Dict",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"All input parameters including the default values."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The projectors for the calculation."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"the calculation is missing at least one required output in the restart workchain"},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:400,message:"the run_calculation step did not successfully add a calculation node to the context"},{status:401,message:"the maximum number of iterations was exceeded"},{status:402,message:"the calculation finished with an unexpected calculation state"},{status:403,message:"the calculation experienced and unexpected failure"},{status:404,message:"the calculation failed to submit, twice in a row"},{status:405,message:"the calculation failed for an unknown reason, twice in a row"},{status:500,message:"Missing critical output for inspecting the status of the calculation."},{status:501,message:"Cannot handle the error - inputs are likely need to be revised manually. Message: {message}"},{status:502,message:"Cannot handle the error - the last calculation did not reach the end of execution."},{status:503,message:"Cannot handle the error - the last calculation did not reach electronic convergence."},{status:504,message:"The ionic relaxation is not converged."},{status:505,message:"At least one of the ionic steps during the relaxation has did not have converged electronic structure."},{status:700,message:"the user did not supply a potential family name"},{status:701,message:"ValueError was returned from get_potcars_from_structure"},{status:702,message:"the potential does not exist"},{status:703,message:"the exception: {exception} was thrown while massaging the parameters"}]},class:"aiida_vasp.workchains.v2.vasp:VaspWorkChain"},"vasp.vasp":{description:["The VASP workchain.","","    -------------------","    Error handling enriched wrapper around VaspCalculation.","","    Deliberately conserves most of the interface (required inputs) of the VaspCalculation class, but","    makes it possible for a user to interact with a workchain and not a calculation.","","    This is intended to be used instead of directly submitting a VaspCalculation,","    so that future features like","    automatic restarting, error checking etc. can be propagated to higher level workchains","    automatically by implementing them here.","","    Handlers are implemented to try fix common problems and improves the robustness.","    Individual handlers can be enabled/disabled by setting the ``handler_overrides`` input port.",'    Additional settings may be passed under the "settings" input, which is also forwarded to the',"    calculations. The available options are:","","    - ``USE_WAVECAR_FOR_RESTART`` wether calculation restarts should use the WAVECAR. The default is ``True``.","","    Usage::","","        from aiida.common.extendeddicts import AttributeDict","        from aiida.work import submit","        basevasp = WorkflowFactory('vasp.vasp')","        inputs = basevasp.get_builder()","        inputs = AttributeDict()","        ## ... set inputs","        submit(basevasp, **inputs)","","    To see a working example, including generation of input nodes from scratch, please","    refer to ``examples/run_vasp_lean.py``."],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:""},{name:"dynamics",required:!0,valid_types:"",info:""},{name:"options",required:!0,valid_types:"Dict",info:""},{name:"parameters",required:!0,valid_types:"Dict",info:""},{name:"potential_family",required:!0,valid_types:"Str",info:""},{name:"potential_mapping",required:!0,valid_types:"Dict",info:""},{name:"structure",required:!0,valid_types:"StructureData, CifData",info:""},{name:"auto_parallel",required:!1,valid_types:"Dict, NoneType",info:"Automatic parallelisation settings, keywords passed to `get_jobscheme` function."},{name:"chgcar",required:!1,valid_types:"ChargedensityData, NoneType",info:""},{name:"clean_workdir",required:!1,valid_types:"Bool, NoneType",info:`
            If True, clean the work dir upon the completion of a successfull calculation.
            `},{name:"handler_overrides",required:!1,valid_types:"Dict, NoneType",info:"Mapping where keys are process handler names and the values are a dictionary, where each dictionary can define the ``enabled`` and ``priority`` key, which can be used to toggle the values set on the original process handler declaration."},{name:"keep_last_workdir",required:!1,valid_types:"Bool",info:"If True, prevent the last workdir from being cleaned in case the files are needed for restarts."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:""},{name:"kpoints_spacing",required:!1,valid_types:"Float, NoneType",info:"Spacing for the kpoints in units A^-1 * 2pi"},{name:"ldau_mapping",required:!1,valid_types:"Dict, NoneType",info:`Settings for assign LDA+U related settings according to the input structure.

    mapping: a dictionary in the format of  {"Mn": [d, 4]...} for U
    utype: the type of LDA+U, default to 2, which is the one with only one parameter
    jmapping: a dictionary in the format of  {"Mn": [d, 4]...} but for J
    felec: Wether we are dealing with f electrons, will increase lmaxmix if we are.`},{name:"max_iterations",required:!1,valid_types:"Int, NoneType",info:`
            The maximum number of iterations to perform.
            `},{name:"metadata",required:!1,valid_types:"",info:""},{name:"restart_folder",required:!1,valid_types:"RemoteData, NoneType",info:`
            The restart folder from a previous workchain run that is going to be used.
            `},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:""},{name:"site_magnetization",required:!1,valid_types:"Dict, NoneType",info:"Site magnetization to be used as MAGMOM"},{name:"verbose",required:!1,valid_types:"Bool, NoneType",info:`
            If True, enable more detailed output during workchain execution.
            `},{name:"wavecar",required:!1,valid_types:"WavefunData, NoneType",info:""}],outputs:[{name:"misc",required:!0,valid_types:"Dict",info:"The output parameters containing smaller quantities that do not depend on system size."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"arrays",required:!1,valid_types:"ArrayData",info:"The output trajectory data."},{name:"bands",required:!1,valid_types:"BandsData",info:"The output band structure."},{name:"born_charges",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"chgcar",required:!1,valid_types:"ChargedensityData",info:"The output charge density CHGCAR file."},{name:"dielectrics",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"dos",required:!1,valid_types:"ArrayData",info:"The output dos."},{name:"dynmat",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"energies",required:!1,valid_types:"ArrayData",info:"Energies of the calculation at each ionic/electronic step."},{name:"hessian",required:!1,valid_types:"ArrayData",info:"The output {name} data."},{name:"kpoints",required:!1,valid_types:"KpointsData",info:"The output k-points."},{name:"parallel_settings",required:!1,valid_types:"Dict",info:""},{name:"parameters",required:!1,valid_types:"Dict",info:"All input parameters including the default values."},{name:"projectors",required:!1,valid_types:"ArrayData",info:"The projectors for the calculation."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."},{name:"structure",required:!1,valid_types:"StructureData",info:"The output structure."},{name:"trajectory",required:!1,valid_types:"TrajectoryData",info:"The output trajectory data."},{name:"wavecar",required:!1,valid_types:"WavefunData",info:"The output plane wave coefficients file."}],exit_codes:[{status:0,message:"the sun is shining"},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:300,message:"the calculation is missing at least one required output in the restart workchain"},{status:301,message:"The sub process excepted."},{status:302,message:"The sub process was killed."},{status:400,message:"the run_calculation step did not successfully add a calculation node to the context"},{status:401,message:"the maximum number of iterations was exceeded"},{status:402,message:"the calculation finished with an unexpected calculation state"},{status:403,message:"the calculation experienced and unexpected failure"},{status:404,message:"the calculation failed to submit, twice in a row"},{status:405,message:"the calculation failed for an unknown reason, twice in a row"},{status:500,message:"Missing critical output for inspecting the status of the calculation."},{status:501,message:"Cannot handle the error - inputs are likely need to be revised manually. Message: {message}"},{status:502,message:"Cannot handle the error - the last calculation did not reach the end of execution."},{status:503,message:"Cannot handle the error - the last calculation did not reach electronic convergence."},{status:504,message:"The ionic relaxation is not converged."},{status:505,message:"At least one of the ionic steps during the relaxation has did not have converged electronic structure."},{status:700,message:"the user did not supply a potential family name"},{status:701,message:"ValueError was returned from get_potcars_from_structure"},{status:702,message:"the potential does not exist"},{status:703,message:"the exception: {exception} was thrown while massaging the parameters"}]},class:"aiida_vasp.workchains.v2.vasp:VaspWorkChain"}},console_scripts:{"dryrun-vasp":"aiida_vasp.commands.dryrun_vasp:cmd_dryrun_vasp","mock-vasp":"aiida_vasp.commands.mock_vasp:mock_vasp","mock-vasp-loose":"aiida_vasp.commands.mock_vasp:mock_vasp_loose"}},commits_count:237,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:4},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"red",text:"Data",count:5},{colorclass:"green",text:"Workflows",count:11},{colorclass:"purple",text:"Console scripts",count:3},{colorclass:"orange",text:"Other (Data commands, Groups)",count:3}],pip_install_cmd:"pip install aiida-vasp",is_installable:"True"},"aiida-vibroscopy":{entry_point_prefix:"vibroscopy",plugin_info:"https://raw.githubusercontent.com/bastonero/aiida-vibroscopy/main/pyproject.toml",code_home:"https://github.com/bastonero/aiida-vibroscopy",version_file:"https://raw.githubusercontent.com/bastonero/aiida-vibroscopy/main/src/aiida_vibroscopy/__init__.py",pip_url:"aiida-vibroscopy",documentation_url:"https://aiida-vibroscopy.readthedocs.io/en/latest/",name:"aiida-vibroscopy",package_name:"aiida_vibroscopy",hosted_on:"github.com",metadata:{release_date:"2025-05-29",description:"AiiDA plugin for vibrational spectoscopy using Quantum ESPRESSO.",author_email:"Lorenzo Bastonero <bastonero.lorenzo@gmail.com>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: Other/Proprietary License","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"1.3.0"},aiida_version:">=2.2.2,<3.0.0",entry_points:{"aiida.data":{"vibroscopy.fp":"aiida_vibroscopy.data.vibro_fp:VibrationalFrozenPhononData","vibroscopy.vibrational":"aiida_vibroscopy.data.vibro_lr:VibrationalData"},"aiida.workflows":{"vibroscopy.dielectric":"aiida_vibroscopy.workflows.dielectric.base:DielectricWorkChain","vibroscopy.dielectric.numerical_derivatives":"aiida_vibroscopy.workflows.dielectric.numerical_derivatives:NumericalDerivativesWorkChain","vibroscopy.phonons.harmonic":"aiida_vibroscopy.workflows.phonons.harmonic:HarmonicWorkChain","vibroscopy.phonons.phonon":"aiida_vibroscopy.workflows.phonons.base:PhononWorkChain","vibroscopy.spectra.intensities_average":"aiida_vibroscopy.workflows.spectra.intensities_average:IntensitiesAverageWorkChain","vibroscopy.spectra.iraman":"aiida_vibroscopy.workflows.spectra.iraman:IRamanSpectraWorkChain"},console_scripts:{"aiida-vibroscopy":"aiida_vibroscopy.cli:cmd_root"}},commits_count:21,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"red",text:"Data",count:2},{colorclass:"green",text:"Workflows",count:6},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-vibroscopy",is_installable:"True"},"aiida-wannier90":{code_home:"https://github.com/aiidateam/aiida-wannier90",documentation_url:"https://aiida-wannier90.readthedocs.io/",entry_point_prefix:"wannier90",pip_url:"aiida-wannier90",plugin_info:"https://raw.github.com/aiidateam/aiida-wannier90/master/setup.json",name:"aiida-wannier90",package_name:"aiida_wannier90",hosted_on:"github.com",metadata:{release_date:"2024-05-10",description:"AiiDA Plugin for the Wannier90 code",author:"Junfeng Qiao, Dominik Gresch, Antimo Marrazzo, Daniel Marchand, Giovanni Pizzi, Norma Rivano, The AiiDA team",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.2.0"},aiida_version:">=2.0,<3",entry_points:{"aiida.calculations":{"wannier90.postw90":{description:["Plugin for Wannier90.","","    Wannier90 is a code for computing maximally-localized Wannier functions.","    See http://www.wannier.org/ for more details."],spec:{inputs:[{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the Wannier90 code"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possibly stored in a remote computer."},{name:"structure",required:!0,valid_types:"StructureData",info:"input crystal structure"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"A list of k-points along a path to be used for bands interpolation; it should contain `labels`. Specify either this or `kpoint_path`."},{name:"clean_workdir",required:!1,valid_types:"Bool",info:"If `True`, work directories of all called calculation jobs will be cleaned at the end of execution."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"kpoint_path",required:!1,valid_types:"Dict, NoneType",info:"Description of the k-points path to be used for bands interpolation; it should contain two properties: a list ``path`` of length-2 tuples with the labels of the endpoints of the path; and a dictionary ``point_coords`` giving the scaled coordinates for each high-symmetry endpoint."},{name:"kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"k-point mesh used in the NSCF calculation."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"projections",required:!1,valid_types:"OrbitalData, Dict, List, NoneType",info:"Starting projections for the Wannierisation procedure."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional settings to manage the Wannier90 calculation."}],outputs:[{name:"boltzwann",required:!0,valid_types:"",info:""},{name:"output_parameters",required:!0,valid_types:"Dict",info:"The ``output_parameters`` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"interpolated_bands",required:!1,valid_types:"BandsData",info:"The interpolated band structure by Wannier90 (if any)."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required stdout output file."},{status:300,message:"A Wannier90 error file (.werr) has been found."},{status:400,message:'The string "Exiting..." has been found in the Wannier90 output (some partial output might have been parsed).'},{status:401,message:"An error related to bvectors has been found in the Wannier90 output."},{status:402,message:"Energy window contains fewer states than number of target WFs."},{status:403,message:"Error plotting Wanier functions in cube format."},{status:404,message:"The stdout output file was incomplete probably because the calculation got interrupted."},{status:405,message:"Some output files were missing probably because the calculation got interrupted."},{status:406,message:"The retrieved temporary folder could not be accessed."}]},class:"aiida_wannier90.calculations:Postw90Calculation"},"wannier90.wannier90":{description:["Plugin for Wannier90.","","    Wannier90 is a code for computing maximally-localized Wannier functions.","    See http://www.wannier.org/ for more details."],spec:{inputs:[{name:"kpoints",required:!0,valid_types:"KpointsData",info:"k-point mesh used in the NSCF calculation."},{name:"parameters",required:!0,valid_types:"Dict",info:"Input parameters for the Wannier90 code"},{name:"structure",required:!0,valid_types:"StructureData",info:"input crystal structure"},{name:"bands_kpoints",required:!1,valid_types:"KpointsData, NoneType",info:"A list of k-points along a path to be used for bands interpolation; it should contain `labels`. Specify either this or `kpoint_path`."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"kpoint_path",required:!1,valid_types:"Dict, NoneType",info:"Description of the k-points path to be used for bands interpolation; it should contain two properties: a list ``path`` of length-2 tuples with the labels of the endpoints of the path; and a dictionary ``point_coords`` giving the scaled coordinates for each high-symmetry endpoint."},{name:"local_input_folder",required:!1,valid_types:"FolderData, NoneType",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``FolderData`` stored in the AiiDA repository."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"projections",required:!1,valid_types:"OrbitalData, Dict, List, NoneType",info:"Starting projections for the Wannierisation procedure."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"remote_input_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Get input files (``.amn``, ``.mmn``, ...) from a class ``RemoteData`` possibly stored in a remote computer."},{name:"settings",required:!1,valid_types:"Dict, NoneType",info:"Additional settings to manage the Wannier90 calculation."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"The ``output_parameters`` output node of the successful calculation."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"interpolated_bands",required:!1,valid_types:"BandsData",info:"The interpolated band structure by Wannier90 (if any)."},{name:"nnkp_file",required:!1,valid_types:"SinglefileData",info:"The ``.nnkp`` file, produced only in -pp (postproc) mode."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:200,message:"The retrieved folder data node could not be accessed."},{status:210,message:"The retrieved folder did not contain the required stdout output file."},{status:300,message:"A Wannier90 error file (.werr) has been found."},{status:400,message:'The string "Exiting..." has been found in the Wannier90 output (some partial output might have been parsed).'},{status:401,message:"An error related to bvectors has been found in the Wannier90 output."},{status:402,message:"Energy window contains fewer states than number of target WFs."},{status:403,message:"Error plotting Wanier functions in cube format."},{status:404,message:"The stdout output file was incomplete probably because the calculation got interrupted."}]},class:"aiida_wannier90.calculations:Wannier90Calculation"}},"aiida.parsers":{"wannier90.postw90":"aiida_wannier90.parsers:Postw90Parser","wannier90.wannier90":"aiida_wannier90.parsers:Wannier90Parser"},"aiida.workflows":{"wannier90.minimal":{description:["Workchain to run a full stack of Quantum ESPRESSO + Wannier90 for GaAs.","","    Note that this is mostly to be used as an example, as there is no","    error checking and runs directly Quantum ESPRESSO calculations rather","    than the base workflows."],spec:{inputs:[{name:"kpoint_path",required:!0,valid_types:"Dict",info:"The kpoints path for the NSCF run and Wannierisation."},{name:"kpoints_nscf",required:!0,valid_types:"KpointsData",info:"The kpoints for the NSCF run and Wannierisation."},{name:"kpoints_scf",required:!0,valid_types:"KpointsData",info:"The kpoints for the SCF run."},{name:"projections",required:!0,valid_types:"OrbitalData",info:"The projections for the Wannierisation."},{name:"pseudo_family",required:!0,valid_types:"Str",info:"The name of a pseudopotential family to use."},{name:"pw2wannier90_code",required:!0,valid_types:"Code",info:"The `pw2wannier90.x` code to use for the `Pw2Wannier90Calculation`s."},{name:"pw_code",required:!0,valid_types:"Code",info:"The `pw.x` code to use for the `PwCalculation`s."},{name:"structure",required:!0,valid_types:"StructureData",info:"The input structure."},{name:"wannier_code",required:!0,valid_types:"Code",info:"The `wannier90.x` code to use for the `Wannier90Calculation`s."},{name:"max_wallclock_seconds",required:!1,valid_types:"Int, NoneType",info:"Maximum wallclock time in seconds"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"num_machines",required:!1,valid_types:"Int, NoneType",info:"The number of machines (nodes) to use"}],outputs:[{name:"matrices_folder",required:!0,valid_types:"FolderData",info:""},{name:"nnkp_file",required:!0,valid_types:"SinglefileData",info:""},{name:"nscf_output",required:!0,valid_types:"Dict",info:""},{name:"p2wannier_output",required:!0,valid_types:"Dict",info:""},{name:"pw2wan_remote_folder",required:!0,valid_types:"RemoteData",info:""},{name:"scf_output",required:!0,valid_types:"Dict",info:""},{name:"wannier_bands",required:!0,valid_types:"BandsData",info:""}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."}]},class:"aiida_wannier90.workflows.minimal:MinimalW90WorkChain"}}},commits_count:0,development_status:"stable",errors:[],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:2},{colorclass:"brown",text:"Parsers",count:2},{colorclass:"green",text:"Workflows",count:1}],pip_install_cmd:"pip install aiida-wannier90",is_installable:"True"},"aiida-wannier90-workflows":{code_home:"https://github.com/aiidateam/aiida-wannier90-workflows",development_status:"stable",entry_point_prefix:"wannier90_workflows",pip_url:"aiida-wannier90-workflows",plugin_info:"https://raw.github.com/aiidateam/aiida-wannier90-workflows/master/setup.json",name:"aiida-wannier90-workflows",package_name:"aiida_wannier90_workflows",hosted_on:"github.com",metadata:{release_date:"2025-07-09",description:"Advanced AiiDA workflows for Wannier90",author_email:"The AiiDA team <developers@aiida.net>",classifiers:["Development Status :: 5 - Production/Stable","Environment :: Plugins","Framework :: AiiDA","Intended Audience :: Science/Research","License :: Free To Use But Restricted","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Physics"],version:"2.5.0"},aiida_version:">=2.5,<3.0",entry_points:{"aiida.calculations":{"wannier90_workflows.split":{description:["AiiDA calculation plugin wrapping the split AMN/MMN/EIG script."],spec:{inputs:[{name:"num_val",required:!0,valid_types:"Int",info:"Number of valence WFs."},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"parent_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote folder containing win/amn/mmn/eig/unk files."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."},{name:"rotate_unk",required:!1,valid_types:"Bool",info:"Number of valence WFs."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"Output parameters."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"remote_folder_cond",required:!0,valid_types:"RemoteData",info:"Remote folder for conduction."},{name:"remote_folder_val",required:!0,valid_types:"RemoteData",info:"Remote folder for valence."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"Calculation did not produce all expected output files."},{status:301,message:"The retrieved temporary folder could not be accessed."}]},class:"aiida_wannier90_workflows.calculations.split:Wannier90SplitCalculation"}},"aiida.data":{"wannier90_workflows.MagneticStructureData":"aiida_wannier90_workflows.data.structure:MagneticStructureData"},"aiida.parsers":{"wannier90_workflows.split":"aiida_wannier90_workflows.parsers.split:Wannier90SplitParser"},"aiida.workflows":{"wannier90_workflows.bands":"aiida_wannier90_workflows.workflows.bands:Wannier90BandsWorkChain","wannier90_workflows.base.open_grid":"aiida_wannier90_workflows.workflows.base.open_grid:OpenGridBaseWorkChain","wannier90_workflows.base.projwfc":"aiida_wannier90_workflows.workflows.base.projwfc:ProjwfcBaseWorkChain","wannier90_workflows.base.pw2wannier90":"aiida_wannier90_workflows.workflows.base.pw2wannier90:Pw2wannier90BaseWorkChain","wannier90_workflows.base.wannier90":"aiida_wannier90_workflows.workflows.base.wannier90:Wannier90BaseWorkChain","wannier90_workflows.open_grid":"aiida_wannier90_workflows.workflows.open_grid:Wannier90OpenGridWorkChain","wannier90_workflows.optimize":"aiida_wannier90_workflows.workflows.optimize:Wannier90OptimizeWorkChain","wannier90_workflows.projwfcbands":"aiida_wannier90_workflows.workflows.projwfcbands:ProjwfcBandsWorkChain","wannier90_workflows.split":"aiida_wannier90_workflows.workflows.split:Wannier90SplitWorkChain","wannier90_workflows.wannier90":"aiida_wannier90_workflows.workflows.wannier90:Wannier90WorkChain"},console_scripts:{"aiida-wannier90-workflows":"aiida_wannier90_workflows.cli:cmd_root"}},commits_count:52,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1},{colorclass:"green",text:"Workflows",count:10},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install aiida-wannier90-workflows",is_installable:"True"},"aiida-wien2k":{code_home:"https://github.com/rubel75/aiida-wien2k",entry_point_prefix:"wien2k",name:"aiida-wien2k",package_name:"aiida_wien2k",hosted_on:"github.com",metadata:{},aiida_version:null,entry_points:{},commits_count:0,development_status:"planning",errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Cannot fetch all data from PyPI and missing plugin_info key!","<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[],pip_install_cmd:"See source code repository."},"aiida-yambo":{code_home:"https://github.com/yambo-code/yambo-aiida/",development_status:"stable",entry_point_prefix:"yambo",pip_url:"aiida-yambo",plugin_info:"https://raw.github.com/yambo-code/yambo-aiida/master/setup.json",name:"aiida-yambo",package_name:"aiida_yambo",hosted_on:"github.com",metadata:{release_date:"2020-11-05",description:"YAMBO plugin and workflows for AiiDA",author:"Miki Bonacci, Michael Atambo, Antimo Marrazzo, Prandini Gianluca",author_email:"miki.bonacci@unimore.it",license:"MIT",home_page:"https://github.com/yambo-code/yambo-aiida",classifiers:["Environment :: Plugins","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Topic :: Scientific/Engineering :: Physics"],version:"1.3.0"},aiida_version:">=1.0.0a2",entry_points:{"aiida.calculations":{"yambo.yambo":{description:["AiiDA plugin for the Yambo code.","    For more information, refer to http://www.yambo-code.org/","    https://github.com/yambo-code/yambo-aiida and http://aiida-yambo.readthedocs.io/en/latest/"],spec:{inputs:[{name:"code",required:!0,valid_types:"Code",info:"Use a main code for yambo calculation"},{name:"parameters",required:!0,valid_types:"Dict",info:"Use a node that specifies the input parameters"},{name:"parent_folder",required:!0,valid_types:"RemoteData",info:'Use a remote folder as parent folder (for "restarts and similar"'},{name:"settings",required:!0,valid_types:"Dict",info:"Use an additional node for special settings"},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"precode_parameters",required:!1,valid_types:"Dict, NoneType",info:"Use a node that specifies the input parameters for the yambo precode"},{name:"preprocessing_code",required:!1,valid_types:"Code, NoneType",info:"Use a preprocessing code for starting yambo"},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"returns the output parameters"},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"array_alpha",required:!1,valid_types:"ArrayData",info:"returns the alpha array"},{name:"array_alpha_array",required:!1,valid_types:"ArrayData",info:"returns the alpha array"},{name:"array_alpha_bands",required:!1,valid_types:"ArrayData",info:"returns the alpha array bands"},{name:"array_eels",required:!1,valid_types:"ArrayData",info:"returns the eels array"},{name:"array_eps",required:!1,valid_types:"ArrayData",info:"returns the eps array"},{name:"array_ndb",required:!1,valid_types:"ArrayData",info:"returns the array for ndb"},{name:"array_ndb_HFlocXC",required:!1,valid_types:"ArrayData",info:"returns the array ndb for HFlocXC"},{name:"array_ndb_QP",required:!1,valid_types:"ArrayData",info:"returns the array for ndbQP"},{name:"array_qp",required:!1,valid_types:"ArrayData",info:"returns the quasiparticle array band structure"},{name:"bands_quasiparticle",required:!1,valid_types:"BandsData",info:"returns the quasiparticle band structure"},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"},{status:300,message:"The retrieved folder data node could not be accessed."},{status:301,message:"time exceeded the max walltime"},{status:302,message:"failed calculation for some reason: could be a low number of conduction bands"},{status:303,message:"Unexpected behavior of YamboFolder"},{status:304,message:"parallelization error"},{status:305,message:"memory issues"}]},class:"aiida_yambo.calculations.yambo:YamboCalculation"}},"aiida.data":{},"aiida.parsers":{"yambo.yambo":"aiida_yambo.parsers.parsers:YamboParser"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1}],pip_install_cmd:"pip install aiida-yambo",is_installable:"True"},"aiida-yambo-wannier90":{code_home:"https://github.com/aiidaplugins/aiida-yambo-wannier90",entry_point_prefix:"yambo_wannier90",pip_url:"aiida-yambo-wannier90",plugin_info:"https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/pyproject.toml",documentation_url:"https://aiida-yambo-wannier90.readthedocs.io/en/latest/",version_file:"https://raw.githubusercontent.com/aiidaplugins/aiida-yambo-wannier90/main/aiida_yambo_wannier90/__init__.py",name:"aiida-yambo-wannier90",package_name:"aiida_yambo_wannier90",hosted_on:"github.com",metadata:{release_date:"2022-07-06",description:"Plugin to combine Wannier90 interpolations with GW corrections computed by Yambo",author:"The AiiDA Team",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python"],version:"0.1.0b0"},aiida_version:">=1.6.4,<3",entry_points:{"aiida.calculations":{"yambo_wannier90.gw2wannier90":"aiida_yambo_wannier90.calculations.gw2wannier90:Gw2wannier90Calculation"},"aiida.parsers":{"yambo_wannier90.gw2wannier90":"aiida_yambo_wannier90.parsers.gw2wannier90:Gw2wannier90Parser"},"aiida.workflows":{yambo_wannier90:"aiida_yambo_wannier90.workflows:YamboWannier90WorkChain"},console_scripts:{"aiida-yambo-wannier90":"aiida_yambo_wannier90.cli:cmd_root"}},commits_count:0,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-yambo-wannier90<pre>Collecting aiida-yambo-wannier90
  Downloading aiida_yambo_wannier90-0.1.0b0-py3-none-any.whl.metadata (3.4 kB)
Requirement already satisfied: aiida-core<3,>=1.6.4 in /opt/conda/lib/python3.10/site-packages (from aiida-yambo-wannier90) (2.5.2)
Collecting voluptuous (from aiida-yambo-wannier90)
  Downloading voluptuous-0.15.2-py3-none-any.whl.metadata (20 kB)
Collecting aiida-yambo>=1.3.0 (from aiida-yambo-wannier90)
  Downloading aiida_yambo-1.3.0-py3-none-any.whl.metadata (1.1 kB)
Collecting aiida-wannier90-workflows>=1.0.1 (from aiida-yambo-wannier90)
  Downloading aiida_wannier90_workflows-2.5.0-py3-none-any.whl.metadata (5.6 kB)
Requirement already satisfied: alembic~=1.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (1.13.1)
Requirement already satisfied: archive-path~=0.4.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.4.2)
Requirement already satisfied: aio-pika~=6.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (6.8.1)
Requirement already satisfied: circus~=0.18.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.18.0)
Requirement already satisfied: click-spinner~=0.1.8 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.1.10)
Requirement already satisfied: click~=8.1 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (8.1.7)
Requirement already satisfied: disk-objectstore~=1.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (1.1.0)
Requirement already satisfied: docstring-parser in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.16)
Requirement already satisfied: graphviz~=0.19 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.20.3)
Requirement already satisfied: ipython>=7 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (8.25.0)
Requirement already satisfied: jedi<0.19 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.18.2)
Requirement already satisfied: jinja2~=3.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (3.1.4)
Requirement already satisfied: kiwipy~=0.7.7 in /opt/conda/lib/python3.10/site-packages (from kiwipy[rmq]~=0.7.7->aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.7.8)
Requirement already satisfied: importlib-metadata~=6.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (6.11.0)
Requirement already satisfied: numpy~=1.21 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (1.26.4)
Requirement already satisfied: paramiko>=2.7.2,~=2.7 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2.12.0)
Requirement already satisfied: plumpy~=0.21.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.21.10)
Requirement already satisfied: pgsu~=0.2.1 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.2.4)
Requirement already satisfied: psutil~=5.6 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (5.9.8)
Requirement already satisfied: psycopg2-binary~=2.8 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2.9.9)
Requirement already satisfied: pydantic~=2.4 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2.7.3)
Requirement already satisfied: pytz~=2021.1 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2021.3)
Requirement already satisfied: pyyaml~=6.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (6.0.1)
Requirement already satisfied: requests~=2.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2.32.3)
Requirement already satisfied: sqlalchemy~=2.0 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (2.0.30)
Requirement already satisfied: tabulate~=0.8.5 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.8.10)
Requirement already satisfied: tqdm~=4.45 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (4.66.4)
Requirement already satisfied: upf_to_json~=0.9.2 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (0.9.5)
Requirement already satisfied: wrapt~=1.11 in /opt/conda/lib/python3.10/site-packages (from aiida-core<3,>=1.6.4->aiida-yambo-wannier90) (1.16.0)
Collecting aiida-pseudo>=0.6 (from aiida-wannier90-workflows>=1.0.1->aiida-yambo-wannier90)
  Downloading aiida_pseudo-1.7.2-py3-none-any.whl.metadata (10 kB)
Collecting aiida-quantumespresso>=4.4 (from aiida-wannier90-workflows>=1.0.1->aiida-yambo-wannier90)
  Downloading aiida_quantumespresso-4.10.0-py3-none-any.whl.metadata (40 kB)
     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 40.3/40.3 kB 3.1 MB/s eta 0:00:00
Collecting aiida-wannier90>=2.2 (from aiida-wannier90-workflows>=1.0.1->aiida-yambo-wannier90)
  Downloading aiida_wannier90-2.2.0-py3-none-any.whl.metadata (4.0 kB)
Requirement already satisfied: colorama in /opt/conda/lib/python3.10/site-packages (from aiida-wannier90-workflows>=1.0.1->aiida-yambo-wannier90) (0.4.6)
INFO: pip is looking at multiple versions of aiida-yambo to determine which version is compatible with other requirements. This could take a while.
Collecting aiida-wannier90-workflows>=1.0.1 (from aiida-yambo-wannier90)
  Downloading aiida_wannier90_workflows-2.4.0-py3-none-any.whl.metadata (5.6 kB)
  Downloading aiida_wannier90_workflows-2.3.0-py3-none-any.whl.metadata (5.6 kB)
  Downloading aiida_wannier90_workflows-2.2.0-py3-none-any.whl.metadata (5.4 kB)
  Downloading aiida_wannier90_workflows-2.1.0-py3-none-any.whl.metadata (4.7 kB)
  Downloading aiida_wannier90_workflows-1.0.2-py3-none-any.whl.metadata (969 bytes)
INFO: pip is looking at multiple versions of aiida-wannier90-workflows to determine which version is compatible with other requirements. This could take a while.
  Downloading aiida_wannier90_workflows-1.0.1-py2.py3-none-any.whl.metadata (925 bytes)
ERROR: Cannot install aiida-yambo-wannier90 and aiida-yambo-wannier90==0.1.0b0 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-yambo-wannier90 0.1.0b0 depends on aiida-core<3 and >=1.6.4
    aiida-wannier90-workflows 1.0.2 depends on aiida-core<2 and >=1.1.1
    aiida-yambo-wannier90 0.1.0b0 depends on aiida-core<3 and >=1.6.4
    aiida-wannier90-workflows 1.0.1 depends on aiida-core<2 and >=1.1.1
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:1},{colorclass:"purple",text:"Console scripts",count:1}],pip_install_cmd:"pip install --pre aiida-yambo-wannier90",is_installable:"False"},"aiida-yascheduler":{code_home:"https://github.com/tilde-lab/yascheduler",documentation_url:"https://github.com/tilde-lab/yascheduler",entry_point_prefix:"yascheduler",pip_url:"yascheduler",plugin_info:"https://raw.githubusercontent.com/tilde-lab/yascheduler/master/pyproject.toml",name:"aiida-yascheduler",package_name:"aiida_yascheduler",hosted_on:"github.com",metadata:{release_date:"2025-05-23",description:"Yet another computing scheduler and cloud orchestration engine",author_email:"Sergei Korolev <knopki@duck.com>, Andrey Sobolev <as@tilde.pro>, Evgeny Blokhin <eb@tilde.pro>",classifiers:["Development Status :: 4 - Beta","Framework :: AiiDA","Intended Audience :: Science/Research","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.13","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering :: Chemistry","Topic :: Scientific/Engineering :: Information Analysis","Topic :: Scientific/Engineering :: Physics","Topic :: Software Development :: Libraries :: Python Modules"],version:"1.5.0"},aiida_version:null,entry_points:{"aiida.schedulers":{yascheduler:"yascheduler.aiida_plugin:YaScheduler"},console_scripts:{yainit:"yascheduler.utils:init",yanodes:"yascheduler.utils:show_nodes",yascheduler:"yascheduler.utils:daemonize",yasetnode:"yascheduler.utils:manage_node",yastatus:"yascheduler.utils:check_status",yasubmit:"yascheduler.utils:submit"}},commits_count:56,development_status:"beta",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E002'>E002</a>: Failed to import package aiida_yascheduler<pre>Traceback (most recent call last):
  File "<string>", line 1, in <module>
ModuleNotFoundError: No module named 'aiida_yascheduler'
</pre>`],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W002'>W002</a>: AiiDA version not found"],summaryinfo:[{colorclass:"purple",text:"Console scripts",count:6},{colorclass:"orange",text:"Other (Schedulers)",count:1}],pip_install_cmd:"pip install yascheduler",is_installable:"True"},"aiida-z2pack":{code_home:"https://github.com/AntimoMarrazzo/aiida-z2pack",entry_point_prefix:"z2pack",pip_url:"git+https://github.com/AntimoMarrazzo/aiida-z2pack",name:"aiida-z2pack",package_name:"aiida_z2pack",hosted_on:"github.com",metadata:{description:"The official AiiDA plugin for z2pack",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11"],author:"Antimo Marrazzo",author_email:"antimo.marrazzo@epfl.ch"},aiida_version:">=2.1.2,<=2.2.2",entry_points:{"aiida.calculations":{"z2pack.z2pack":"aiida_z2pack.calculations.z2pack:Z2packCalculation"},"aiida.parsers":{"z2pack.z2pack":"aiida_z2pack.parsers.z2pack:Z2packParser"},"aiida.workflows":{"z2pack.base":"aiida_z2pack.workchains.base:Z2packBaseWorkChain","z2pack.qsh":"aiida_z2pack.workchains.parity:Z2QSHworkchain","z2pack.3DChern":"aiida_z2pack.workchains.chern:Z2pack3DChernWorkChain","z2pack.refine":"aiida_z2pack.workchains.refine:RefineCrossingsPosition"}},commits_count:0,development_status:"stable",errors:[`<a href='https://github.com/aiidateam/aiida-registry#E001'>E001</a>: Failed to install plugin aiida-z2pack<pre>Collecting git+https://github.com/AntimoMarrazzo/aiida-z2pack
  Cloning https://github.com/AntimoMarrazzo/aiida-z2pack to /tmp/pip-req-build-0_tazele
  Running command git clone --filter=blob:none --quiet https://github.com/AntimoMarrazzo/aiida-z2pack /tmp/pip-req-build-0_tazele
  Resolved https://github.com/AntimoMarrazzo/aiida-z2pack to commit 01a06de726c8b3eab7d18d1a36b4631ad8216f8b
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Getting requirements to build wheel: started
  Getting requirements to build wheel: finished with status 'done'
  Preparing metadata (pyproject.toml): started
  Preparing metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from aiida-z2pack==3.0.1) (1.26.4)
Collecting z2pack==2.1.1 (from aiida-z2pack==3.0.1)
  Downloading z2pack-2.1.1-py3-none-any.whl.metadata (2.3 kB)
INFO: pip is looking at multiple versions of aiida-z2pack to determine which version is compatible with other requirements. This could take a while.
ERROR: Cannot install aiida-z2pack==3.0.1 because these package versions have conflicting dependencies.

The conflict is caused by:
    aiida-z2pack 3.0.1 depends on aiida-core<=2.2.2 and >=2.1.2
    The user requested (constraint) aiida-core==2.5.2

To fix this you could try to:
1. loosen the range of package versions you've specified
2. remove package versions to allow pip attempt to solve the dependency conflict

ERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts
</pre>`],warnings:[],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"green",text:"Workflows",count:4}],pip_install_cmd:"pip install git+https://github.com/AntimoMarrazzo/aiida-z2pack",is_installable:"False"},"aiida-zeopp":{code_home:"https://github.com/lsmo-epfl/aiida-zeopp",development_status:"stable",entry_point_prefix:"zeopp",pip_url:"aiida-zeopp",plugin_info:"https://raw.github.com/lsmo-epfl/aiida-zeopp/master/setup.json",name:"aiida-zeopp",package_name:"aiida_zeopp",hosted_on:"github.com",metadata:{release_date:"2023-08-26",description:"AiiDA plugin for zeo++",author_email:"Leopold Talirz <leopold.talirz@epfl.ch>, Miriam Pougin <miriam.pougin@epfl.ch>",classifiers:["Development Status :: 5 - Production/Stable","Framework :: AiiDA","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],version:"2.0.0"},aiida_version:">=2.3,<3.0",entry_points:{"aiida.calculations":{"zeopp.network":{description:["AiiDA calculation plugin for the zeo++ network binary"],spec:{inputs:[{name:"parameters",required:!0,valid_types:"NetworkParameters",info:"command line parameters for zeo++"},{name:"structure",required:!0,valid_types:"CifData",info:"input structure to be analyzed"},{name:"atomic_radii",required:!1,valid_types:"SinglefileData, NoneType",info:"atomic radii file"},{name:"code",required:!1,valid_types:"AbstractCode, NoneType",info:"The `Code` to use for this job. This input is required, unless the `remote_folder` input is specified, which means an existing job is being imported and no code will actually be run."},{name:"metadata",required:!1,valid_types:"",info:""},{name:"monitors",required:!1,valid_types:"Dict",info:"Add monitoring functions that can inspect output files while the job is running and decide to prematurely terminate the job."},{name:"remote_folder",required:!1,valid_types:"RemoteData, NoneType",info:"Remote directory containing the results of an already completed calculation job without AiiDA. The inputs should be passed to the `CalcJob` as normal but instead of launching the actual job, the engine will recreate the input files and then proceed straight to the retrieve step where the files of this `RemoteData` will be retrieved as if it had been actually launched through AiiDA. If a parser is defined in the inputs, the results are parsed and attached as output nodes as usual."}],outputs:[{name:"output_parameters",required:!0,valid_types:"Dict",info:"key-value pairs parsed from zeo++ output file(s)."},{name:"remote_folder",required:!0,valid_types:"RemoteData",info:"Input files necessary to run the process will be stored in this folder node."},{name:"retrieved",required:!0,valid_types:"FolderData",info:"Files that are retrieved by the daemon will be stored in this node. By default the stdout and stderr of the scheduler will be added, but one can add more by specifying them in `CalcInfo.retrieve_list`."},{name:"block",required:!1,valid_types:"SinglefileData",info:"Blocked pockets fileoutput file."},{name:"remote_stash",required:!1,valid_types:"RemoteStashData",info:"Contents of the `stash.source_list` option are stored in this remote folder after job completion."}],exit_codes:[{status:0,message:"Calculation completed successfully."},{status:1,message:"The process has failed with an unspecified error."},{status:2,message:"The process failed with legacy failure mode."},{status:10,message:"The process returned an invalid output."},{status:11,message:"The process did not register a required output."},{status:100,message:"The process did not have the required `retrieved` output."},{status:101,message:"Not all expected output files were found."},{status:102,message:"Empty block file. This indicates the calculation of blocked pockets did not finish."},{status:110,message:"The job ran out of memory."},{status:120,message:"The job ran out of walltime."},{status:131,message:"The specified account is invalid."},{status:140,message:"The node running the job failed."},{status:150,message:"{message}"}]},class:"aiida_zeopp.calculations.network:NetworkCalculation"}},"aiida.data":{"zeopp.parameters":"aiida_zeopp.data.parameters:NetworkParameters"},"aiida.parsers":{"zeopp.network":"aiida_zeopp.parsers.network:NetworkParser"}},commits_count:0,errors:[],warnings:["<a href='https://github.com/aiidateam/aiida-registry#W006'>W006</a>: 'development_status' key is deprecated. Use PyPI Trove classifiers in the plugin repository instead."],summaryinfo:[{colorclass:"blue",text:"Calculations",count:1},{colorclass:"brown",text:"Parsers",count:1},{colorclass:"red",text:"Data",count:1}],pip_install_cmd:"pip install aiida-zeopp",is_installable:"True"}},Lk=[{name:"Calculations",colorclass:"blue",num_entries:70,total_num:172},{name:"Parsers",colorclass:"brown",num_entries:71,total_num:149},{name:"Data",colorclass:"red",num_entries:41,total_num:141},{name:"Workflows",colorclass:"green",num_entries:50,total_num:221},{name:"Console scripts",colorclass:"purple",num_entries:19,total_num:36},{name:"Other",tooltip:"Aenet potentials, Aiida python serializers, Aiidalab qe properties, ...",colorclass:"orange",num_entries:34,total_num:122}],Bk={planning:["Not yet ready to use. Developers welcome!","status-planning-d9644d.svg"],"pre-alpha":["Not yet ready to use. Developers welcome!","status-planning-d9644d.svg"],alpha:["Adds new functionality, not yet ready for production. Testing welcome!","status-alpha-d6af23.svg"],beta:["Adds new functionality, not yet ready for production. Testing welcome!","status-beta-d6af23.svg"],stable:["Ready for production calculations. Bug reports welcome!","status-stable-4cc61e.svg"],mature:["Ready for production calculations. Bug reports welcome!","status-stable-4cc61e.svg"],inactive:["No longer maintained.","status-inactive-bbbbbb.svg"]},Wk={"aiida.calculations":"CalcJobs and calculation functions","aiida.parsers":"CalcJob parsers","aiida.data":"Data node types","aiida.cmdline.data":"verdi data commands","aiida.groups":"Group types","aiida.workflows":"WorkChains and work functions","aiida.schedulers":"Job scheduler support","aiida.transports":"Data transport protocols","aiida.tests":"Development test modules","aiida.tools.dbexporters":"Support for exporting to external databases","aiida.tools.dbimporters":"Support for importing from external databases",console_scripts:"Console scripts"},ya={plugins:Mk,globalsummary:Lk,status_dict:Bk,entrypointtypes:Wk};var wp={},X_={exports:{}};(function(e){function t(a){return a&&a.__esModule?a:{default:a}}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports})(X_);var ts=X_.exports,Ad={};function q(){return q=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)({}).hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},q.apply(null,arguments)}function Xa(e){if(typeof e!="object"||e===null)return!1;const t=Object.getPrototypeOf(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)}function J_(e){if(b.isValidElement(e)||!Xa(e))return e;const t={};return Object.keys(e).forEach(a=>{t[a]=J_(e[a])}),t}function Dt(e,t,a={clone:!0}){const i=a.clone?q({},e):e;return Xa(e)&&Xa(t)&&Object.keys(t).forEach(n=>{b.isValidElement(t[n])?i[n]=t[n]:Xa(t[n])&&Object.prototype.hasOwnProperty.call(e,n)&&Xa(e[n])?i[n]=Dt(e[n],t[n],a):a.clone?i[n]=Xa(t[n])?J_(t[n]):t[n]:i[n]=t[n]}),i}const zk=Object.freeze(Object.defineProperty({__proto__:null,default:Dt,isPlainObject:Xa},Symbol.toStringTag,{value:"Module"}));function Mi(e){let t="https://mui.com/production-error/?code="+e;for(let a=1;a<arguments.length;a+=1)t+="&args[]="+encodeURIComponent(arguments[a]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}const $k=Object.freeze(Object.defineProperty({__proto__:null,default:Mi},Symbol.toStringTag,{value:"Module"}));var Y_={exports:{}},fe={};/**
 * @license React
 * react-is.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var kp=Symbol.for("react.transitional.element"),Tp=Symbol.for("react.portal"),ul=Symbol.for("react.fragment"),cl=Symbol.for("react.strict_mode"),pl=Symbol.for("react.profiler"),fl=Symbol.for("react.consumer"),ml=Symbol.for("react.context"),hl=Symbol.for("react.forward_ref"),gl=Symbol.for("react.suspense"),yl=Symbol.for("react.suspense_list"),_l=Symbol.for("react.memo"),vl=Symbol.for("react.lazy"),Uk=Symbol.for("react.view_transition"),Kk=Symbol.for("react.client.reference");function Vt(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case kp:switch(e=e.type,e){case ul:case pl:case cl:case gl:case yl:case Uk:return e;default:switch(e=e&&e.$$typeof,e){case ml:case hl:case vl:case _l:return e;case fl:return e;default:return t}}case Tp:return t}}}fe.ContextConsumer=fl;fe.ContextProvider=ml;fe.Element=kp;fe.ForwardRef=hl;fe.Fragment=ul;fe.Lazy=vl;fe.Memo=_l;fe.Portal=Tp;fe.Profiler=pl;fe.StrictMode=cl;fe.Suspense=gl;fe.SuspenseList=yl;fe.isContextConsumer=function(e){return Vt(e)===fl};fe.isContextProvider=function(e){return Vt(e)===ml};fe.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===kp};fe.isForwardRef=function(e){return Vt(e)===hl};fe.isFragment=function(e){return Vt(e)===ul};fe.isLazy=function(e){return Vt(e)===vl};fe.isMemo=function(e){return Vt(e)===_l};fe.isPortal=function(e){return Vt(e)===Tp};fe.isProfiler=function(e){return Vt(e)===pl};fe.isStrictMode=function(e){return Vt(e)===cl};fe.isSuspense=function(e){return Vt(e)===gl};fe.isSuspenseList=function(e){return Vt(e)===yl};fe.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===ul||e===pl||e===cl||e===gl||e===yl||typeof e=="object"&&e!==null&&(e.$$typeof===vl||e.$$typeof===_l||e.$$typeof===ml||e.$$typeof===fl||e.$$typeof===hl||e.$$typeof===Kk||e.getModuleId!==void 0)};fe.typeOf=Vt;Y_.exports=fe;var Lm=Y_.exports;const Vk=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function Q_(e){const t=`${e}`.match(Vk);return t&&t[1]||""}function Z_(e,t=""){return e.displayName||e.name||Q_(e)||t}function Bm(e,t,a){const i=Z_(t);return e.displayName||(i!==""?`${a}(${i})`:a)}function Gk(e){if(e!=null){if(typeof e=="string")return e;if(typeof e=="function")return Z_(e,"Component");if(typeof e=="object")switch(e.$$typeof){case Lm.ForwardRef:return Bm(e,e.render,"ForwardRef");case Lm.Memo:return Bm(e,e.type,"memo");default:return}}}const Hk=Object.freeze(Object.defineProperty({__proto__:null,default:Gk,getFunctionName:Q_},Symbol.toStringTag,{value:"Module"}));function J(e){if(typeof e!="string")throw new Error(Mi(7));return e.charAt(0).toUpperCase()+e.slice(1)}const Xk=Object.freeze(Object.defineProperty({__proto__:null,default:J},Symbol.toStringTag,{value:"Module"}));function Yu(...e){return e.reduce((t,a)=>a==null?t:function(...n){t.apply(this,n),a.apply(this,n)},()=>{})}function bl(e,t=166){let a;function i(...n){const r=()=>{e.apply(this,n)};clearTimeout(a),a=setTimeout(r,t)}return i.clear=()=>{clearTimeout(a)},i}function Jk(e,t){return()=>null}function to(e,t){var a,i;return b.isValidElement(e)&&t.indexOf((a=e.type.muiName)!=null?a:(i=e.type)==null||(i=i._payload)==null||(i=i.value)==null?void 0:i.muiName)!==-1}function yt(e){return e&&e.ownerDocument||document}function ha(e){return yt(e).defaultView||window}function Yk(e,t){return()=>null}function Fo(e,t){typeof e=="function"?e(t):e&&(e.current=t)}const Qk=typeof window<"u"?b.useLayoutEffect:b.useEffect,Ia=Qk;let Wm=0;function Zk(e){const[t,a]=b.useState(e),i=e||t;return b.useEffect(()=>{t==null&&(Wm+=1,a(`mui-${Wm}`))},[t]),i}const zm=lo["useId".toString()];function xp(e){if(zm!==void 0){const t=zm();return e??t}return Zk(e)}function eT(e,t,a,i,n){return null}function Qu({controlled:e,default:t,name:a,state:i="value"}){const{current:n}=b.useRef(e!==void 0),[r,s]=b.useState(t),o=n?e:r,l=b.useCallback(d=>{n||s(d)},[]);return[o,l]}function Za(e){const t=b.useRef(e);return Ia(()=>{t.current=e}),b.useRef((...a)=>(0,t.current)(...a)).current}function Ke(...e){return b.useMemo(()=>e.every(t=>t==null)?null:t=>{e.forEach(a=>{Fo(a,t)})},e)}const $m={};function tT(e,t){const a=b.useRef($m);return a.current===$m&&(a.current=e(t)),a}const aT=[];function iT(e){b.useEffect(e,aT)}class wl{constructor(){this.currentId=null,this.clear=()=>{this.currentId!==null&&(clearTimeout(this.currentId),this.currentId=null)},this.disposeEffect=()=>this.clear}static create(){return new wl}start(t,a){this.clear(),this.currentId=setTimeout(()=>{this.currentId=null,a()},t)}}function ev(){const e=tT(wl.create).current;return iT(e.disposeEffect),e}let kl=!0,Zu=!1;const nT=new wl,rT={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function sT(e){const{type:t,tagName:a}=e;return!!(a==="INPUT"&&rT[t]&&!e.readOnly||a==="TEXTAREA"&&!e.readOnly||e.isContentEditable)}function oT(e){e.metaKey||e.altKey||e.ctrlKey||(kl=!0)}function Id(){kl=!1}function lT(){this.visibilityState==="hidden"&&Zu&&(kl=!0)}function dT(e){e.addEventListener("keydown",oT,!0),e.addEventListener("mousedown",Id,!0),e.addEventListener("pointerdown",Id,!0),e.addEventListener("touchstart",Id,!0),e.addEventListener("visibilitychange",lT,!0)}function uT(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch{}return kl||sT(t)}function tv(){const e=b.useCallback(n=>{n!=null&&dT(n.ownerDocument)},[]),t=b.useRef(!1);function a(){return t.current?(Zu=!0,nT.start(100,()=>{Zu=!1}),t.current=!1,!0):!1}function i(n){return uT(n)?(t.current=!0,!0):!1}return{isFocusVisibleRef:t,onFocus:i,onBlur:a,ref:e}}function av(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}function ec(e,t){const a=q({},t);return Object.keys(e).forEach(i=>{if(i.toString().match(/^(components|slots)$/))a[i]=q({},e[i],a[i]);else if(i.toString().match(/^(componentsProps|slotProps)$/)){const n=e[i]||{},r=t[i];a[i]={},!r||!Object.keys(r)?a[i]=n:!n||!Object.keys(n)?a[i]=r:(a[i]=q({},r),Object.keys(n).forEach(s=>{a[i][s]=ec(n[s],r[s])}))}else a[i]===void 0&&(a[i]=e[i])}),a}function me(e,t,a=void 0){const i={};return Object.keys(e).forEach(n=>{i[n]=e[n].reduce((r,s)=>{if(s){const o=t(s);o!==""&&r.push(o),a&&a[s]&&r.push(a[s])}return r},[]).join(" ")}),i}const Um=e=>e,cT=()=>{let e=Um;return{configure(t){e=t},generate(t){return e(t)},reset(){e=Um}}},pT=cT(),Dp=pT,fT={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function pe(e,t,a="Mui"){const i=fT[t];return i?`${a}-${i}`:`${Dp.generate(e)}-${t}`}function se(e,t,a="Mui"){const i={};return t.forEach(n=>{i[n]=pe(e,n,a)}),i}function mT(e,t=Number.MIN_SAFE_INTEGER,a=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,a))}const hT=Object.freeze(Object.defineProperty({__proto__:null,default:mT},Symbol.toStringTag,{value:"Module"}));function $(e,t){if(e==null)return{};var a={};for(var i in e)if({}.hasOwnProperty.call(e,i)){if(t.indexOf(i)!==-1)continue;a[i]=e[i]}return a}function Oo(e){return typeof e=="string"}function iv(e,t,a){return e===void 0||Oo(e)?t:q({},t,{ownerState:q({},t.ownerState,a)})}function nv(e){var t,a,i="";if(typeof e=="string"||typeof e=="number")i+=e;else if(typeof e=="object")if(Array.isArray(e)){var n=e.length;for(t=0;t<n;t++)e[t]&&(a=nv(e[t]))&&(i&&(i+=" "),i+=a)}else for(a in e)e[a]&&(i&&(i+=" "),i+=a);return i}function G(){for(var e,t,a=0,i="",n=arguments.length;a<n;a++)(e=arguments[a])&&(t=nv(e))&&(i&&(i+=" "),i+=t);return i}function rv(e,t=[]){if(e===void 0)return{};const a={};return Object.keys(e).filter(i=>i.match(/^on[A-Z]/)&&typeof e[i]=="function"&&!t.includes(i)).forEach(i=>{a[i]=e[i]}),a}function Km(e){if(e===void 0)return{};const t={};return Object.keys(e).filter(a=>!(a.match(/^on[A-Z]/)&&typeof e[a]=="function")).forEach(a=>{t[a]=e[a]}),t}function sv(e){const{getSlotProps:t,additionalProps:a,externalSlotProps:i,externalForwardedProps:n,className:r}=e;if(!t){const w=G(a==null?void 0:a.className,r,n==null?void 0:n.className,i==null?void 0:i.className),v=q({},a==null?void 0:a.style,n==null?void 0:n.style,i==null?void 0:i.style),y=q({},a,n,i);return w.length>0&&(y.className=w),Object.keys(v).length>0&&(y.style=v),{props:y,internalRef:void 0}}const s=rv(q({},n,i)),o=Km(i),l=Km(n),d=t(s),c=G(d==null?void 0:d.className,a==null?void 0:a.className,r,n==null?void 0:n.className,i==null?void 0:i.className),f=q({},d==null?void 0:d.style,a==null?void 0:a.style,n==null?void 0:n.style,i==null?void 0:i.style),g=q({},d,a,l,o);return c.length>0&&(g.className=c),Object.keys(f).length>0&&(g.style=f),{props:g,internalRef:d.ref}}function ov(e,t,a){return typeof e=="function"?e(t,a):e}const gT=["elementType","externalSlotProps","ownerState","skipResolvingSlotProps"];function Cn(e){var t;const{elementType:a,externalSlotProps:i,ownerState:n,skipResolvingSlotProps:r=!1}=e,s=$(e,gT),o=r?{}:ov(i,n),{props:l,internalRef:d}=sv(q({},s,{externalSlotProps:o})),c=Ke(d,o==null?void 0:o.ref,(t=e.additionalProps)==null?void 0:t.ref);return iv(a,q({},l,{ref:c}),n)}function Fn(e){if(parseInt(b.version,10)>=19){var t;return(e==null||(t=e.props)==null?void 0:t.ref)||null}return(e==null?void 0:e.ref)||null}const yT=b.createContext(void 0);function _T(e){const{theme:t,name:a,props:i}=e;if(!t||!t.components||!t.components[a])return i;const n=t.components[a];return n.defaultProps?ec(n.defaultProps,i):!n.styleOverrides&&!n.variants?ec(n,i):i}function vT({props:e,name:t}){const a=b.useContext(yT);return _T({props:e,name:t,theme:{components:a}})}function he(e){return vT(e)}var as={},Ed={exports:{}},Vm;function lv(){return Vm||(Vm=1,function(e){function t(){return e.exports=t=Object.assign?Object.assign.bind():function(a){for(var i=1;i<arguments.length;i++){var n=arguments[i];for(var r in n)({}).hasOwnProperty.call(n,r)&&(a[r]=n[r])}return a},e.exports.__esModule=!0,e.exports.default=e.exports,t.apply(null,arguments)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(Ed)),Ed.exports}var Nd={exports:{}},Gm;function bT(){return Gm||(Gm=1,function(e){function t(a,i){if(a==null)return{};var n={};for(var r in a)if({}.hasOwnProperty.call(a,r)){if(i.indexOf(r)!==-1)continue;n[r]=a[r]}return n}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(Nd)),Nd.exports}var wT=!1;function kT(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}function TT(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),e.nonce!==void 0&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}var xT=function(){function e(a){var i=this;this._insertTag=function(n){var r;i.tags.length===0?i.insertionPoint?r=i.insertionPoint.nextSibling:i.prepend?r=i.container.firstChild:r=i.before:r=i.tags[i.tags.length-1].nextSibling,i.container.insertBefore(n,r),i.tags.push(n)},this.isSpeedy=a.speedy===void 0?!wT:a.speedy,this.tags=[],this.ctr=0,this.nonce=a.nonce,this.key=a.key,this.container=a.container,this.prepend=a.prepend,this.insertionPoint=a.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(i){i.forEach(this._insertTag)},t.insert=function(i){this.ctr%(this.isSpeedy?65e3:1)===0&&this._insertTag(TT(this));var n=this.tags[this.tags.length-1];if(this.isSpeedy){var r=kT(n);try{r.insertRule(i,r.cssRules.length)}catch{}}else n.appendChild(document.createTextNode(i));this.ctr++},t.flush=function(){this.tags.forEach(function(i){var n;return(n=i.parentNode)==null?void 0:n.removeChild(i)}),this.tags=[],this.ctr=0},e}(),tt="-ms-",Mo="-moz-",ne="-webkit-",dv="comm",qp="rule",Cp="decl",DT="@import",uv="@keyframes",qT="@layer",CT=Math.abs,Tl=String.fromCharCode,ST=Object.assign;function PT(e,t){return Xe(e,0)^45?(((t<<2^Xe(e,0))<<2^Xe(e,1))<<2^Xe(e,2))<<2^Xe(e,3):0}function cv(e){return e.trim()}function RT(e,t){return(e=t.exec(e))?e[0]:e}function re(e,t,a){return e.replace(t,a)}function tc(e,t){return e.indexOf(t)}function Xe(e,t){return e.charCodeAt(t)|0}function Ur(e,t,a){return e.slice(t,a)}function la(e){return e.length}function Sp(e){return e.length}function Es(e,t){return t.push(e),e}function AT(e,t){return e.map(t).join("")}var xl=1,Sn=1,pv=0,vt=0,Oe=0,On="";function Dl(e,t,a,i,n,r,s){return{value:e,root:t,parent:a,type:i,props:n,children:r,line:xl,column:Sn,length:s,return:""}}function Yn(e,t){return ST(Dl("",null,null,"",null,null,0),e,{length:-e.length},t)}function IT(){return Oe}function ET(){return Oe=vt>0?Xe(On,--vt):0,Sn--,Oe===10&&(Sn=1,xl--),Oe}function qt(){return Oe=vt<pv?Xe(On,vt++):0,Sn++,Oe===10&&(Sn=1,xl++),Oe}function ma(){return Xe(On,vt)}function ao(){return vt}function is(e,t){return Ur(On,e,t)}function Kr(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function fv(e){return xl=Sn=1,pv=la(On=e),vt=0,[]}function mv(e){return On="",e}function io(e){return cv(is(vt-1,ac(e===91?e+2:e===40?e+1:e)))}function NT(e){for(;(Oe=ma())&&Oe<33;)qt();return Kr(e)>2||Kr(Oe)>3?"":" "}function jT(e,t){for(;--t&&qt()&&!(Oe<48||Oe>102||Oe>57&&Oe<65||Oe>70&&Oe<97););return is(e,ao()+(t<6&&ma()==32&&qt()==32))}function ac(e){for(;qt();)switch(Oe){case e:return vt;case 34:case 39:e!==34&&e!==39&&ac(Oe);break;case 40:e===41&&ac(e);break;case 92:qt();break}return vt}function FT(e,t){for(;qt()&&e+Oe!==47+10;)if(e+Oe===42+42&&ma()===47)break;return"/*"+is(t,vt-1)+"*"+Tl(e===47?e:qt())}function OT(e){for(;!Kr(ma());)qt();return is(e,vt)}function MT(e){return mv(no("",null,null,null,[""],e=fv(e),0,[0],e))}function no(e,t,a,i,n,r,s,o,l){for(var d=0,c=0,f=s,g=0,w=0,v=0,y=1,T=1,u=1,m=0,p="",_=n,k=r,D=i,x=p;T;)switch(v=m,m=qt()){case 40:if(v!=108&&Xe(x,f-1)==58){tc(x+=re(io(m),"&","&\f"),"&\f")!=-1&&(u=-1);break}case 34:case 39:case 91:x+=io(m);break;case 9:case 10:case 13:case 32:x+=NT(v);break;case 92:x+=jT(ao()-1,7);continue;case 47:switch(ma()){case 42:case 47:Es(LT(FT(qt(),ao()),t,a),l);break;default:x+="/"}break;case 123*y:o[d++]=la(x)*u;case 125*y:case 59:case 0:switch(m){case 0:case 125:T=0;case 59+c:u==-1&&(x=re(x,/\f/g,"")),w>0&&la(x)-f&&Es(w>32?Xm(x+";",i,a,f-1):Xm(re(x," ","")+";",i,a,f-2),l);break;case 59:x+=";";default:if(Es(D=Hm(x,t,a,d,c,n,o,p,_=[],k=[],f),r),m===123)if(c===0)no(x,t,D,D,_,r,f,o,k);else switch(g===99&&Xe(x,3)===110?100:g){case 100:case 108:case 109:case 115:no(e,D,D,i&&Es(Hm(e,D,D,0,0,n,o,p,n,_=[],f),k),n,k,f,o,i?_:k);break;default:no(x,D,D,D,[""],k,0,o,k)}}d=c=w=0,y=u=1,p=x="",f=s;break;case 58:f=1+la(x),w=v;default:if(y<1){if(m==123)--y;else if(m==125&&y++==0&&ET()==125)continue}switch(x+=Tl(m),m*y){case 38:u=c>0?1:(x+="\f",-1);break;case 44:o[d++]=(la(x)-1)*u,u=1;break;case 64:ma()===45&&(x+=io(qt())),g=ma(),c=f=la(p=x+=OT(ao())),m++;break;case 45:v===45&&la(x)==2&&(y=0)}}return r}function Hm(e,t,a,i,n,r,s,o,l,d,c){for(var f=n-1,g=n===0?r:[""],w=Sp(g),v=0,y=0,T=0;v<i;++v)for(var u=0,m=Ur(e,f+1,f=CT(y=s[v])),p=e;u<w;++u)(p=cv(y>0?g[u]+" "+m:re(m,/&\f/g,g[u])))&&(l[T++]=p);return Dl(e,t,a,n===0?qp:o,l,d,c)}function LT(e,t,a){return Dl(e,t,a,dv,Tl(IT()),Ur(e,2,-2),0)}function Xm(e,t,a,i){return Dl(e,t,a,Cp,Ur(e,0,i),Ur(e,i+1,-1),i)}function _n(e,t){for(var a="",i=Sp(e),n=0;n<i;n++)a+=t(e[n],n,e,t)||"";return a}function BT(e,t,a,i){switch(e.type){case qT:if(e.children.length)break;case DT:case Cp:return e.return=e.return||e.value;case dv:return"";case uv:return e.return=e.value+"{"+_n(e.children,i)+"}";case qp:e.value=e.props.join(",")}return la(a=_n(e.children,i))?e.return=e.value+"{"+a+"}":""}function WT(e){var t=Sp(e);return function(a,i,n,r){for(var s="",o=0;o<t;o++)s+=e[o](a,i,n,r)||"";return s}}function zT(e){return function(t){t.root||(t=t.return)&&e(t)}}function hv(e){var t=Object.create(null);return function(a){return t[a]===void 0&&(t[a]=e(a)),t[a]}}var $T=function(t,a,i){for(var n=0,r=0;n=r,r=ma(),n===38&&r===12&&(a[i]=1),!Kr(r);)qt();return is(t,vt)},UT=function(t,a){var i=-1,n=44;do switch(Kr(n)){case 0:n===38&&ma()===12&&(a[i]=1),t[i]+=$T(vt-1,a,i);break;case 2:t[i]+=io(n);break;case 4:if(n===44){t[++i]=ma()===58?"&\f":"",a[i]=t[i].length;break}default:t[i]+=Tl(n)}while(n=qt());return t},KT=function(t,a){return mv(UT(fv(t),a))},Jm=new WeakMap,VT=function(t){if(!(t.type!=="rule"||!t.parent||t.length<1)){for(var a=t.value,i=t.parent,n=t.column===i.column&&t.line===i.line;i.type!=="rule";)if(i=i.parent,!i)return;if(!(t.props.length===1&&a.charCodeAt(0)!==58&&!Jm.get(i))&&!n){Jm.set(t,!0);for(var r=[],s=KT(a,r),o=i.props,l=0,d=0;l<s.length;l++)for(var c=0;c<o.length;c++,d++)t.props[d]=r[l]?s[l].replace(/&\f/g,o[c]):o[c]+" "+s[l]}}},GT=function(t){if(t.type==="decl"){var a=t.value;a.charCodeAt(0)===108&&a.charCodeAt(2)===98&&(t.return="",t.value="")}};function gv(e,t){switch(PT(e,t)){case 5103:return ne+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return ne+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return ne+e+Mo+e+tt+e+e;case 6828:case 4268:return ne+e+tt+e+e;case 6165:return ne+e+tt+"flex-"+e+e;case 5187:return ne+e+re(e,/(\w+).+(:[^]+)/,ne+"box-$1$2"+tt+"flex-$1$2")+e;case 5443:return ne+e+tt+"flex-item-"+re(e,/flex-|-self/,"")+e;case 4675:return ne+e+tt+"flex-line-pack"+re(e,/align-content|flex-|-self/,"")+e;case 5548:return ne+e+tt+re(e,"shrink","negative")+e;case 5292:return ne+e+tt+re(e,"basis","preferred-size")+e;case 6060:return ne+"box-"+re(e,"-grow","")+ne+e+tt+re(e,"grow","positive")+e;case 4554:return ne+re(e,/([^-])(transform)/g,"$1"+ne+"$2")+e;case 6187:return re(re(re(e,/(zoom-|grab)/,ne+"$1"),/(image-set)/,ne+"$1"),e,"")+e;case 5495:case 3959:return re(e,/(image-set\([^]*)/,ne+"$1$`$1");case 4968:return re(re(e,/(.+:)(flex-)?(.*)/,ne+"box-pack:$3"+tt+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+ne+e+e;case 4095:case 3583:case 4068:case 2532:return re(e,/(.+)-inline(.+)/,ne+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(la(e)-1-t>6)switch(Xe(e,t+1)){case 109:if(Xe(e,t+4)!==45)break;case 102:return re(e,/(.+:)(.+)-([^]+)/,"$1"+ne+"$2-$3$1"+Mo+(Xe(e,t+3)==108?"$3":"$2-$3"))+e;case 115:return~tc(e,"stretch")?gv(re(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(Xe(e,t+1)!==115)break;case 6444:switch(Xe(e,la(e)-3-(~tc(e,"!important")&&10))){case 107:return re(e,":",":"+ne)+e;case 101:return re(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+ne+(Xe(e,14)===45?"inline-":"")+"box$3$1"+ne+"$2$3$1"+tt+"$2box$3")+e}break;case 5936:switch(Xe(e,t+11)){case 114:return ne+e+tt+re(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return ne+e+tt+re(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return ne+e+tt+re(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return ne+e+tt+e+e}return e}var HT=function(t,a,i,n){if(t.length>-1&&!t.return)switch(t.type){case Cp:t.return=gv(t.value,t.length);break;case uv:return _n([Yn(t,{value:re(t.value,"@","@"+ne)})],n);case qp:if(t.length)return AT(t.props,function(r){switch(RT(r,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return _n([Yn(t,{props:[re(r,/:(read-\w+)/,":"+Mo+"$1")]})],n);case"::placeholder":return _n([Yn(t,{props:[re(r,/:(plac\w+)/,":"+ne+"input-$1")]}),Yn(t,{props:[re(r,/:(plac\w+)/,":"+Mo+"$1")]}),Yn(t,{props:[re(r,/:(plac\w+)/,tt+"input-$1")]})],n)}return""})}},XT=[HT],yv=function(t){var a=t.key;if(a==="css"){var i=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(i,function(y){var T=y.getAttribute("data-emotion");T.indexOf(" ")!==-1&&(document.head.appendChild(y),y.setAttribute("data-s",""))})}var n=t.stylisPlugins||XT,r={},s,o=[];s=t.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+a+' "]'),function(y){for(var T=y.getAttribute("data-emotion").split(" "),u=1;u<T.length;u++)r[T[u]]=!0;o.push(y)});var l,d=[VT,GT];{var c,f=[BT,zT(function(y){c.insert(y)})],g=WT(d.concat(n,f)),w=function(T){return _n(MT(T),g)};l=function(T,u,m,p){c=m,w(T?T+"{"+u.styles+"}":u.styles),p&&(v.inserted[u.name]=!0)}}var v={key:a,sheet:new xT({key:a,container:s,nonce:t.nonce,speedy:t.speedy,prepend:t.prepend,insertionPoint:t.insertionPoint}),nonce:t.nonce,inserted:r,registered:{},insert:l};return v.sheet.hydrate(o),v},_v={exports:{}},de={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ve=typeof Symbol=="function"&&Symbol.for,Pp=Ve?Symbol.for("react.element"):60103,Rp=Ve?Symbol.for("react.portal"):60106,ql=Ve?Symbol.for("react.fragment"):60107,Cl=Ve?Symbol.for("react.strict_mode"):60108,Sl=Ve?Symbol.for("react.profiler"):60114,Pl=Ve?Symbol.for("react.provider"):60109,Rl=Ve?Symbol.for("react.context"):60110,Ap=Ve?Symbol.for("react.async_mode"):60111,Al=Ve?Symbol.for("react.concurrent_mode"):60111,Il=Ve?Symbol.for("react.forward_ref"):60112,El=Ve?Symbol.for("react.suspense"):60113,JT=Ve?Symbol.for("react.suspense_list"):60120,Nl=Ve?Symbol.for("react.memo"):60115,jl=Ve?Symbol.for("react.lazy"):60116,YT=Ve?Symbol.for("react.block"):60121,QT=Ve?Symbol.for("react.fundamental"):60117,ZT=Ve?Symbol.for("react.responder"):60118,ex=Ve?Symbol.for("react.scope"):60119;function Rt(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case Pp:switch(e=e.type,e){case Ap:case Al:case ql:case Sl:case Cl:case El:return e;default:switch(e=e&&e.$$typeof,e){case Rl:case Il:case jl:case Nl:case Pl:return e;default:return t}}case Rp:return t}}}function vv(e){return Rt(e)===Al}de.AsyncMode=Ap;de.ConcurrentMode=Al;de.ContextConsumer=Rl;de.ContextProvider=Pl;de.Element=Pp;de.ForwardRef=Il;de.Fragment=ql;de.Lazy=jl;de.Memo=Nl;de.Portal=Rp;de.Profiler=Sl;de.StrictMode=Cl;de.Suspense=El;de.isAsyncMode=function(e){return vv(e)||Rt(e)===Ap};de.isConcurrentMode=vv;de.isContextConsumer=function(e){return Rt(e)===Rl};de.isContextProvider=function(e){return Rt(e)===Pl};de.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===Pp};de.isForwardRef=function(e){return Rt(e)===Il};de.isFragment=function(e){return Rt(e)===ql};de.isLazy=function(e){return Rt(e)===jl};de.isMemo=function(e){return Rt(e)===Nl};de.isPortal=function(e){return Rt(e)===Rp};de.isProfiler=function(e){return Rt(e)===Sl};de.isStrictMode=function(e){return Rt(e)===Cl};de.isSuspense=function(e){return Rt(e)===El};de.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===ql||e===Al||e===Sl||e===Cl||e===El||e===JT||typeof e=="object"&&e!==null&&(e.$$typeof===jl||e.$$typeof===Nl||e.$$typeof===Pl||e.$$typeof===Rl||e.$$typeof===Il||e.$$typeof===QT||e.$$typeof===ZT||e.$$typeof===ex||e.$$typeof===YT)};de.typeOf=Rt;_v.exports=de;var tx=_v.exports,bv=tx,ax={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},ix={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},wv={};wv[bv.ForwardRef]=ax;wv[bv.Memo]=ix;var nx=!0;function kv(e,t,a){var i="";return a.split(" ").forEach(function(n){e[n]!==void 0?t.push(e[n]+";"):n&&(i+=n+" ")}),i}var Ip=function(t,a,i){var n=t.key+"-"+a.name;(i===!1||nx===!1)&&t.registered[n]===void 0&&(t.registered[n]=a.styles)},Ep=function(t,a,i){Ip(t,a,i);var n=t.key+"-"+a.name;if(t.inserted[a.name]===void 0){var r=a;do t.insert(a===r?"."+n:"",r,t.sheet,!0),r=r.next;while(r!==void 0)}};function rx(e){for(var t=0,a,i=0,n=e.length;n>=4;++i,n-=4)a=e.charCodeAt(i)&255|(e.charCodeAt(++i)&255)<<8|(e.charCodeAt(++i)&255)<<16|(e.charCodeAt(++i)&255)<<24,a=(a&65535)*1540483477+((a>>>16)*59797<<16),a^=a>>>24,t=(a&65535)*1540483477+((a>>>16)*59797<<16)^(t&65535)*1540483477+((t>>>16)*59797<<16);switch(n){case 3:t^=(e.charCodeAt(i+2)&255)<<16;case 2:t^=(e.charCodeAt(i+1)&255)<<8;case 1:t^=e.charCodeAt(i)&255,t=(t&65535)*1540483477+((t>>>16)*59797<<16)}return t^=t>>>13,t=(t&65535)*1540483477+((t>>>16)*59797<<16),((t^t>>>15)>>>0).toString(36)}var sx={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},ox=!1,lx=/[A-Z]|^ms/g,dx=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Tv=function(t){return t.charCodeAt(1)===45},Ym=function(t){return t!=null&&typeof t!="boolean"},jd=hv(function(e){return Tv(e)?e:e.replace(lx,"-$&").toLowerCase()}),Qm=function(t,a){switch(t){case"animation":case"animationName":if(typeof a=="string")return a.replace(dx,function(i,n,r){return da={name:n,styles:r,next:da},n})}return sx[t]!==1&&!Tv(t)&&typeof a=="number"&&a!==0?a+"px":a},ux="Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";function Vr(e,t,a){if(a==null)return"";var i=a;if(i.__emotion_styles!==void 0)return i;switch(typeof a){case"boolean":return"";case"object":{var n=a;if(n.anim===1)return da={name:n.name,styles:n.styles,next:da},n.name;var r=a;if(r.styles!==void 0){var s=r.next;if(s!==void 0)for(;s!==void 0;)da={name:s.name,styles:s.styles,next:da},s=s.next;var o=r.styles+";";return o}return cx(e,t,a)}case"function":{if(e!==void 0){var l=da,d=a(e);return da=l,Vr(e,t,d)}break}}var c=a;if(t==null)return c;var f=t[c];return f!==void 0?f:c}function cx(e,t,a){var i="";if(Array.isArray(a))for(var n=0;n<a.length;n++)i+=Vr(e,t,a[n])+";";else for(var r in a){var s=a[r];if(typeof s!="object"){var o=s;t!=null&&t[o]!==void 0?i+=r+"{"+t[o]+"}":Ym(o)&&(i+=jd(r)+":"+Qm(r,o)+";")}else{if(r==="NO_COMPONENT_SELECTOR"&&ox)throw new Error(ux);if(Array.isArray(s)&&typeof s[0]=="string"&&(t==null||t[s[0]]===void 0))for(var l=0;l<s.length;l++)Ym(s[l])&&(i+=jd(r)+":"+Qm(r,s[l])+";");else{var d=Vr(e,t,s);switch(r){case"animation":case"animationName":{i+=jd(r)+":"+d+";";break}default:i+=r+"{"+d+"}"}}}}return i}var Zm=/label:\s*([^\s;{]+)\s*(;|$)/g,da;function ns(e,t,a){if(e.length===1&&typeof e[0]=="object"&&e[0]!==null&&e[0].styles!==void 0)return e[0];var i=!0,n="";da=void 0;var r=e[0];if(r==null||r.raw===void 0)i=!1,n+=Vr(a,t,r);else{var s=r;n+=s[0]}for(var o=1;o<e.length;o++)if(n+=Vr(a,t,e[o]),i){var l=r;n+=l[o]}Zm.lastIndex=0;for(var d="",c;(c=Zm.exec(n))!==null;)d+="-"+c[1];var f=rx(n)+d;return{name:f,styles:n,next:da}}var px=function(t){return t()},xv=lo["useInsertionEffect"]?lo["useInsertionEffect"]:!1,Dv=xv||px,eh=xv||b.useLayoutEffect,fx=!1,qv=b.createContext(typeof HTMLElement<"u"?yv({key:"css"}):null),mx=qv.Provider,Np=function(t){return b.forwardRef(function(a,i){var n=b.useContext(qv);return t(a,n,i)})},rs=b.createContext({}),jp={}.hasOwnProperty,ic="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",hx=function(t,a){var i={};for(var n in a)jp.call(a,n)&&(i[n]=a[n]);return i[ic]=t,i},gx=function(t){var a=t.cache,i=t.serialized,n=t.isStringTag;return Ip(a,i,n),Dv(function(){return Ep(a,i,n)}),null},yx=Np(function(e,t,a){var i=e.css;typeof i=="string"&&t.registered[i]!==void 0&&(i=t.registered[i]);var n=e[ic],r=[i],s="";typeof e.className=="string"?s=kv(t.registered,r,e.className):e.className!=null&&(s=e.className+" ");var o=ns(r,void 0,b.useContext(rs));s+=t.key+"-"+o.name;var l={};for(var d in e)jp.call(e,d)&&d!=="css"&&d!==ic&&!fx&&(l[d]=e[d]);return l.className=s,a&&(l.ref=a),b.createElement(b.Fragment,null,b.createElement(gx,{cache:t,serialized:o,isStringTag:typeof n=="string"}),b.createElement(n,l))}),_x=yx;lv();var th=function(t,a){var i=arguments;if(a==null||!jp.call(a,"css"))return b.createElement.apply(void 0,i);var n=i.length,r=new Array(n);r[0]=_x,r[1]=hx(t,a);for(var s=2;s<n;s++)r[s]=i[s];return b.createElement.apply(null,r)};(function(e){var t;t||(t=e.JSX||(e.JSX={}))})(th||(th={}));var vx=Np(function(e,t){var a=e.styles,i=ns([a],void 0,b.useContext(rs)),n=b.useRef();return eh(function(){var r=t.key+"-global",s=new t.sheet.constructor({key:r,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),o=!1,l=document.querySelector('style[data-emotion="'+r+" "+i.name+'"]');return t.sheet.tags.length&&(s.before=t.sheet.tags[0]),l!==null&&(o=!0,l.setAttribute("data-emotion",r),s.hydrate([l])),n.current=[s,o],function(){s.flush()}},[t]),eh(function(){var r=n.current,s=r[0],o=r[1];if(o){r[1]=!1;return}if(i.next!==void 0&&Ep(t,i.next,!0),s.tags.length){var l=s.tags[s.tags.length-1].nextElementSibling;s.before=l,s.flush()}t.insert("",i,s,!1)},[t,i.name]),null});function Cv(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];return ns(t)}function Fl(){var e=Cv.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}var bx=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,wx=hv(function(e){return bx.test(e)||e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)<91}),kx=!1,Tx=wx,xx=function(t){return t!=="theme"},ah=function(t){return typeof t=="string"&&t.charCodeAt(0)>96?Tx:xx},ih=function(t,a,i){var n;if(a){var r=a.shouldForwardProp;n=t.__emotion_forwardProp&&r?function(s){return t.__emotion_forwardProp(s)&&r(s)}:r}return typeof n!="function"&&i&&(n=t.__emotion_forwardProp),n},Dx=function(t){var a=t.cache,i=t.serialized,n=t.isStringTag;return Ip(a,i,n),Dv(function(){return Ep(a,i,n)}),null},qx=function e(t,a){var i=t.__emotion_real===t,n=i&&t.__emotion_base||t,r,s;a!==void 0&&(r=a.label,s=a.target);var o=ih(t,a,i),l=o||ah(n),d=!l("as");return function(){var c=arguments,f=i&&t.__emotion_styles!==void 0?t.__emotion_styles.slice(0):[];if(r!==void 0&&f.push("label:"+r+";"),c[0]==null||c[0].raw===void 0)f.push.apply(f,c);else{var g=c[0];f.push(g[0]);for(var w=c.length,v=1;v<w;v++)f.push(c[v],g[v])}var y=Np(function(T,u,m){var p=d&&T.as||n,_="",k=[],D=T;if(T.theme==null){D={};for(var x in T)D[x]=T[x];D.theme=b.useContext(rs)}typeof T.className=="string"?_=kv(u.registered,k,T.className):T.className!=null&&(_=T.className+" ");var S=ns(f.concat(k),u.registered,D);_+=u.key+"-"+S.name,s!==void 0&&(_+=" "+s);var R=d&&o===void 0?ah(p):l,P={};for(var A in T)d&&A==="as"||R(A)&&(P[A]=T[A]);return P.className=_,m&&(P.ref=m),b.createElement(b.Fragment,null,b.createElement(Dx,{cache:u,serialized:S,isStringTag:typeof p=="string"}),b.createElement(p,P))});return y.displayName=r!==void 0?r:"Styled("+(typeof n=="string"?n:n.displayName||n.name||"Component")+")",y.defaultProps=t.defaultProps,y.__emotion_real=y,y.__emotion_base=n,y.__emotion_styles=f,y.__emotion_forwardProp=o,Object.defineProperty(y,"toString",{value:function(){return s===void 0&&kx?"NO_COMPONENT_SELECTOR":"."+s}}),y.withComponent=function(T,u){var m=e(T,q({},a,u,{shouldForwardProp:ih(y,u,!0)}));return m.apply(void 0,f)},y}},Cx=["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"],nc=qx.bind(null);Cx.forEach(function(e){nc[e]=nc(e)});function Sx(e,t){const a=yv({key:"css",prepend:e});if(t){const i=a.insert;a.insert=(...n)=>(n[1].styles.match(/^@layer\s+[^{]*$/)||(n[1].styles=`@layer mui {${n[1].styles}}`),i(...n))}return a}const Fd=new Map;function Px(e){const{injectFirst:t,enableCssLayer:a,children:i}=e,n=b.useMemo(()=>{const r=`${t}-${a}`;if(typeof document=="object"&&Fd.has(r))return Fd.get(r);const s=Sx(t,a);return Fd.set(r,s),s},[t,a]);return t||a?h.jsx(mx,{value:n,children:i}):i}function Rx(e){return e==null||Object.keys(e).length===0}function Sv(e){const{styles:t,defaultTheme:a={}}=e,i=typeof t=="function"?n=>t(Rx(n)?a:n):t;return h.jsx(vx,{styles:i})}/**
 * @mui/styled-engine v5.18.0
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function Pv(e,t){return nc(e,t)}const Ax=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))},nh=[];function Rv(e){return nh[0]=e,ns(nh)}const Ix=Object.freeze(Object.defineProperty({__proto__:null,GlobalStyles:Sv,StyledEngineProvider:Px,ThemeContext:rs,css:Cv,default:Pv,internal_processStyles:Ax,internal_serializeStyles:Rv,keyframes:Fl},Symbol.toStringTag,{value:"Module"})),Ex=Fa(Ix),Nx=Fa(zk),jx=Fa(Xk),Fx=Fa(Hk),Ox=["values","unit","step"],Mx=e=>{const t=Object.keys(e).map(a=>({key:a,val:e[a]}))||[];return t.sort((a,i)=>a.val-i.val),t.reduce((a,i)=>q({},a,{[i.key]:i.val}),{})};function Av(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:a="px",step:i=5}=e,n=$(e,Ox),r=Mx(t),s=Object.keys(r);function o(g){return`@media (min-width:${typeof t[g]=="number"?t[g]:g}${a})`}function l(g){return`@media (max-width:${(typeof t[g]=="number"?t[g]:g)-i/100}${a})`}function d(g,w){const v=s.indexOf(w);return`@media (min-width:${typeof t[g]=="number"?t[g]:g}${a}) and (max-width:${(v!==-1&&typeof t[s[v]]=="number"?t[s[v]]:w)-i/100}${a})`}function c(g){return s.indexOf(g)+1<s.length?d(g,s[s.indexOf(g)+1]):o(g)}function f(g){const w=s.indexOf(g);return w===0?o(s[1]):w===s.length-1?l(s[w]):d(g,s[s.indexOf(g)+1]).replace("@media","@media not all and")}return q({keys:s,values:r,up:o,down:l,between:d,only:c,not:f,unit:a},n)}const Lx={borderRadius:4},Bx=Lx;function br(e,t){return t?Dt(e,t,{clone:!1}):e}const Fp={xs:0,sm:600,md:900,lg:1200,xl:1536},rh={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${Fp[e]}px)`};function Ea(e,t,a){const i=e.theme||{};if(Array.isArray(t)){const r=i.breakpoints||rh;return t.reduce((s,o,l)=>(s[r.up(r.keys[l])]=a(t[l]),s),{})}if(typeof t=="object"){const r=i.breakpoints||rh;return Object.keys(t).reduce((s,o)=>{if(Object.keys(r.values||Fp).indexOf(o)!==-1){const l=r.up(o);s[l]=a(t[o],o)}else{const l=o;s[l]=t[l]}return s},{})}return a(t)}function Wx(e={}){var t;return((t=e.keys)==null?void 0:t.reduce((i,n)=>{const r=e.up(n);return i[r]={},i},{}))||{}}function sh(e,t){return e.reduce((a,i)=>{const n=a[i];return(!n||Object.keys(n).length===0)&&delete a[i],a},t)}function Ol(e,t,a=!0){if(!t||typeof t!="string")return null;if(e&&e.vars&&a){const i=`vars.${t}`.split(".").reduce((n,r)=>n&&n[r]?n[r]:null,e);if(i!=null)return i}return t.split(".").reduce((i,n)=>i&&i[n]!=null?i[n]:null,e)}function Lo(e,t,a,i=a){let n;return typeof e=="function"?n=e(a):Array.isArray(e)?n=e[a]||i:n=Ol(e,a)||i,t&&(n=t(n,i,e)),n}function je(e){const{prop:t,cssProperty:a=e.prop,themeKey:i,transform:n}=e,r=s=>{if(s[t]==null)return null;const o=s[t],l=s.theme,d=Ol(l,i)||{};return Ea(s,o,f=>{let g=Lo(d,n,f);return f===g&&typeof f=="string"&&(g=Lo(d,n,`${t}${f==="default"?"":J(f)}`,f)),a===!1?g:{[a]:g}})};return r.propTypes={},r.filterProps=[t],r}function zx(e){const t={};return a=>(t[a]===void 0&&(t[a]=e(a)),t[a])}const $x={m:"margin",p:"padding"},Ux={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},oh={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},Kx=zx(e=>{if(e.length>2)if(oh[e])e=oh[e];else return[e];const[t,a]=e.split(""),i=$x[t],n=Ux[a]||"";return Array.isArray(n)?n.map(r=>i+r):[i+n]}),Op=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],Mp=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"];[...Op,...Mp];function ss(e,t,a,i){var n;const r=(n=Ol(e,t,!1))!=null?n:a;return typeof r=="number"?s=>typeof s=="string"?s:r*s:Array.isArray(r)?s=>typeof s=="string"?s:r[s]:typeof r=="function"?r:()=>{}}function Iv(e){return ss(e,"spacing",8)}function os(e,t){if(typeof t=="string"||t==null)return t;const a=Math.abs(t),i=e(a);return t>=0?i:typeof i=="number"?-i:`-${i}`}function Vx(e,t){return a=>e.reduce((i,n)=>(i[n]=os(t,a),i),{})}function Gx(e,t,a,i){if(t.indexOf(a)===-1)return null;const n=Kx(a),r=Vx(n,i),s=e[a];return Ea(e,s,r)}function Ev(e,t){const a=Iv(e.theme);return Object.keys(e).map(i=>Gx(e,t,i,a)).reduce(br,{})}function Re(e){return Ev(e,Op)}Re.propTypes={};Re.filterProps=Op;function Ae(e){return Ev(e,Mp)}Ae.propTypes={};Ae.filterProps=Mp;function Hx(e=8){if(e.mui)return e;const t=Iv({spacing:e}),a=(...i)=>(i.length===0?[1]:i).map(r=>{const s=t(r);return typeof s=="number"?`${s}px`:s}).join(" ");return a.mui=!0,a}function Ml(...e){const t=e.reduce((i,n)=>(n.filterProps.forEach(r=>{i[r]=n}),i),{}),a=i=>Object.keys(i).reduce((n,r)=>t[r]?br(n,t[r](i)):n,{});return a.propTypes={},a.filterProps=e.reduce((i,n)=>i.concat(n.filterProps),[]),a}function Bt(e){return typeof e!="number"?e:`${e}px solid`}function Gt(e,t){return je({prop:e,themeKey:"borders",transform:t})}const Xx=Gt("border",Bt),Jx=Gt("borderTop",Bt),Yx=Gt("borderRight",Bt),Qx=Gt("borderBottom",Bt),Zx=Gt("borderLeft",Bt),eD=Gt("borderColor"),tD=Gt("borderTopColor"),aD=Gt("borderRightColor"),iD=Gt("borderBottomColor"),nD=Gt("borderLeftColor"),rD=Gt("outline",Bt),sD=Gt("outlineColor"),Ll=e=>{if(e.borderRadius!==void 0&&e.borderRadius!==null){const t=ss(e.theme,"shape.borderRadius",4),a=i=>({borderRadius:os(t,i)});return Ea(e,e.borderRadius,a)}return null};Ll.propTypes={};Ll.filterProps=["borderRadius"];Ml(Xx,Jx,Yx,Qx,Zx,eD,tD,aD,iD,nD,Ll,rD,sD);const Bl=e=>{if(e.gap!==void 0&&e.gap!==null){const t=ss(e.theme,"spacing",8),a=i=>({gap:os(t,i)});return Ea(e,e.gap,a)}return null};Bl.propTypes={};Bl.filterProps=["gap"];const Wl=e=>{if(e.columnGap!==void 0&&e.columnGap!==null){const t=ss(e.theme,"spacing",8),a=i=>({columnGap:os(t,i)});return Ea(e,e.columnGap,a)}return null};Wl.propTypes={};Wl.filterProps=["columnGap"];const zl=e=>{if(e.rowGap!==void 0&&e.rowGap!==null){const t=ss(e.theme,"spacing",8),a=i=>({rowGap:os(t,i)});return Ea(e,e.rowGap,a)}return null};zl.propTypes={};zl.filterProps=["rowGap"];const oD=je({prop:"gridColumn"}),lD=je({prop:"gridRow"}),dD=je({prop:"gridAutoFlow"}),uD=je({prop:"gridAutoColumns"}),cD=je({prop:"gridAutoRows"}),pD=je({prop:"gridTemplateColumns"}),fD=je({prop:"gridTemplateRows"}),mD=je({prop:"gridTemplateAreas"}),hD=je({prop:"gridArea"});Ml(Bl,Wl,zl,oD,lD,dD,uD,cD,pD,fD,mD,hD);function vn(e,t){return t==="grey"?t:e}const gD=je({prop:"color",themeKey:"palette",transform:vn}),yD=je({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:vn}),_D=je({prop:"backgroundColor",themeKey:"palette",transform:vn});Ml(gD,yD,_D);function kt(e){return e<=1&&e!==0?`${e*100}%`:e}const vD=je({prop:"width",transform:kt}),Lp=e=>{if(e.maxWidth!==void 0&&e.maxWidth!==null){const t=a=>{var i,n;const r=((i=e.theme)==null||(i=i.breakpoints)==null||(i=i.values)==null?void 0:i[a])||Fp[a];return r?((n=e.theme)==null||(n=n.breakpoints)==null?void 0:n.unit)!=="px"?{maxWidth:`${r}${e.theme.breakpoints.unit}`}:{maxWidth:r}:{maxWidth:kt(a)}};return Ea(e,e.maxWidth,t)}return null};Lp.filterProps=["maxWidth"];const bD=je({prop:"minWidth",transform:kt}),wD=je({prop:"height",transform:kt}),kD=je({prop:"maxHeight",transform:kt}),TD=je({prop:"minHeight",transform:kt});je({prop:"size",cssProperty:"width",transform:kt});je({prop:"size",cssProperty:"height",transform:kt});const xD=je({prop:"boxSizing"});Ml(vD,Lp,bD,wD,kD,TD,xD);const DD={border:{themeKey:"borders",transform:Bt},borderTop:{themeKey:"borders",transform:Bt},borderRight:{themeKey:"borders",transform:Bt},borderBottom:{themeKey:"borders",transform:Bt},borderLeft:{themeKey:"borders",transform:Bt},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:Bt},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:Ll},color:{themeKey:"palette",transform:vn},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:vn},backgroundColor:{themeKey:"palette",transform:vn},p:{style:Ae},pt:{style:Ae},pr:{style:Ae},pb:{style:Ae},pl:{style:Ae},px:{style:Ae},py:{style:Ae},padding:{style:Ae},paddingTop:{style:Ae},paddingRight:{style:Ae},paddingBottom:{style:Ae},paddingLeft:{style:Ae},paddingX:{style:Ae},paddingY:{style:Ae},paddingInline:{style:Ae},paddingInlineStart:{style:Ae},paddingInlineEnd:{style:Ae},paddingBlock:{style:Ae},paddingBlockStart:{style:Ae},paddingBlockEnd:{style:Ae},m:{style:Re},mt:{style:Re},mr:{style:Re},mb:{style:Re},ml:{style:Re},mx:{style:Re},my:{style:Re},margin:{style:Re},marginTop:{style:Re},marginRight:{style:Re},marginBottom:{style:Re},marginLeft:{style:Re},marginX:{style:Re},marginY:{style:Re},marginInline:{style:Re},marginInlineStart:{style:Re},marginInlineEnd:{style:Re},marginBlock:{style:Re},marginBlockStart:{style:Re},marginBlockEnd:{style:Re},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:Bl},rowGap:{style:zl},columnGap:{style:Wl},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:kt},maxWidth:{style:Lp},minWidth:{transform:kt},height:{transform:kt},maxHeight:{transform:kt},minHeight:{transform:kt},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}},ls=DD;function qD(...e){const t=e.reduce((i,n)=>i.concat(Object.keys(n)),[]),a=new Set(t);return e.every(i=>a.size===Object.keys(i).length)}function CD(e,t){return typeof e=="function"?e(t):e}function Nv(){function e(a,i,n,r){const s={[a]:i,theme:n},o=r[a];if(!o)return{[a]:i};const{cssProperty:l=a,themeKey:d,transform:c,style:f}=o;if(i==null)return null;if(d==="typography"&&i==="inherit")return{[a]:i};const g=Ol(n,d)||{};return f?f(s):Ea(s,i,v=>{let y=Lo(g,c,v);return v===y&&typeof v=="string"&&(y=Lo(g,c,`${a}${v==="default"?"":J(v)}`,v)),l===!1?y:{[l]:y}})}function t(a){var i;const{sx:n,theme:r={},nested:s}=a||{};if(!n)return null;const o=(i=r.unstable_sxConfig)!=null?i:ls;function l(d){let c=d;if(typeof d=="function")c=d(r);else if(typeof d!="object")return d;if(!c)return null;const f=Wx(r.breakpoints),g=Object.keys(f);let w=f;return Object.keys(c).forEach(v=>{const y=CD(c[v],r);if(y!=null)if(typeof y=="object")if(o[v])w=br(w,e(v,y,r,o));else{const T=Ea({theme:r},y,u=>({[v]:u}));qD(T,y)?w[v]=t({sx:y,theme:r,nested:!0}):w=br(w,T)}else w=br(w,e(v,y,r,o))}),!s&&r.modularCssLayers?{"@layer sx":sh(g,w)}:sh(g,w)}return Array.isArray(n)?n.map(l):l(n)}return t}const jv=Nv();jv.filterProps=["sx"];const $l=jv;function Fv(e,t){const a=this;return a.vars&&typeof a.getColorSchemeSelector=="function"?{[a.getColorSchemeSelector(e).replace(/(\[[^\]]+\])/,"*:where($1)")]:t}:a.palette.mode===e?t:{}}const SD=["breakpoints","palette","spacing","shape"];function Bp(e={},...t){const{breakpoints:a={},palette:i={},spacing:n,shape:r={}}=e,s=$(e,SD),o=Av(a),l=Hx(n);let d=Dt({breakpoints:o,direction:"ltr",components:{},palette:q({mode:"light"},i),spacing:l,shape:q({},Bx,r)},s);return d.applyStyles=Fv,d=t.reduce((c,f)=>Dt(c,f),d),d.unstable_sxConfig=q({},ls,s==null?void 0:s.unstable_sxConfig),d.unstable_sx=function(f){return $l({sx:f,theme:this})},d}const PD=Object.freeze(Object.defineProperty({__proto__:null,default:Bp,private_createBreakpoints:Av,unstable_applyStyles:Fv},Symbol.toStringTag,{value:"Module"})),RD=Fa(PD),AD=["sx"],ID=e=>{var t,a;const i={systemProps:{},otherProps:{}},n=(t=e==null||(a=e.theme)==null?void 0:a.unstable_sxConfig)!=null?t:ls;return Object.keys(e).forEach(r=>{n[r]?i.systemProps[r]=e[r]:i.otherProps[r]=e[r]}),i};function Wp(e){const{sx:t}=e,a=$(e,AD),{systemProps:i,otherProps:n}=ID(a);let r;return Array.isArray(t)?r=[i,...t]:typeof t=="function"?r=(...s)=>{const o=t(...s);return Xa(o)?q({},i,o):i}:r=q({},i,t),q({},n,{sx:r})}const ED=Object.freeze(Object.defineProperty({__proto__:null,default:$l,extendSxProp:Wp,unstable_createStyleFunctionSx:Nv,unstable_defaultSxConfig:ls},Symbol.toStringTag,{value:"Module"})),ND=Fa(ED);var Mn=ts;Object.defineProperty(as,"__esModule",{value:!0});var jD=as.default=HD;as.shouldForwardProp=ro;as.systemDefaultTheme=void 0;var Ft=Mn(lv()),rc=Mn(bT()),Bo=zD(Ex),FD=Nx;Mn(jx);Mn(Fx);var OD=Mn(RD),MD=Mn(ND);const LD=["ownerState"],BD=["variants"],WD=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function Ov(e){if(typeof WeakMap!="function")return null;var t=new WeakMap,a=new WeakMap;return(Ov=function(i){return i?a:t})(e)}function zD(e,t){if(!t&&e&&e.__esModule)return e;if(e===null||typeof e!="object"&&typeof e!="function")return{default:e};var a=Ov(t);if(a&&a.has(e))return a.get(e);var i={__proto__:null},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if(r!=="default"&&Object.prototype.hasOwnProperty.call(e,r)){var s=n?Object.getOwnPropertyDescriptor(e,r):null;s&&(s.get||s.set)?Object.defineProperty(i,r,s):i[r]=e[r]}return i.default=e,a&&a.set(e,i),i}function $D(e){return Object.keys(e).length===0}function UD(e){return typeof e=="string"&&e.charCodeAt(0)>96}function ro(e){return e!=="ownerState"&&e!=="theme"&&e!=="sx"&&e!=="as"}function lh(e,t){return t&&e&&typeof e=="object"&&e.styles&&!e.styles.startsWith("@layer")&&(e.styles=`@layer ${t}{${String(e.styles)}}`),e}const KD=as.systemDefaultTheme=(0,OD.default)(),VD=e=>e&&e.charAt(0).toLowerCase()+e.slice(1);function Ns({defaultTheme:e,theme:t,themeId:a}){return $D(t)?e:t[a]||t}function GD(e){return e?(t,a)=>a[e]:null}function so(e,t,a){let{ownerState:i}=t,n=(0,rc.default)(t,LD);const r=typeof e=="function"?e((0,Ft.default)({ownerState:i},n)):e;if(Array.isArray(r))return r.flatMap(s=>so(s,(0,Ft.default)({ownerState:i},n),a));if(r&&typeof r=="object"&&Array.isArray(r.variants)){const{variants:s=[]}=r;let l=(0,rc.default)(r,BD);return s.forEach(d=>{let c=!0;if(typeof d.props=="function"?c=d.props((0,Ft.default)({ownerState:i},n,i)):Object.keys(d.props).forEach(f=>{(i==null?void 0:i[f])!==d.props[f]&&n[f]!==d.props[f]&&(c=!1)}),c){Array.isArray(l)||(l=[l]);const f=typeof d.style=="function"?d.style((0,Ft.default)({ownerState:i},n,i)):d.style;l.push(a?lh((0,Bo.internal_serializeStyles)(f),a):f)}}),l}return a?lh((0,Bo.internal_serializeStyles)(r),a):r}function HD(e={}){const{themeId:t,defaultTheme:a=KD,rootShouldForwardProp:i=ro,slotShouldForwardProp:n=ro}=e,r=s=>(0,MD.default)((0,Ft.default)({},s,{theme:Ns((0,Ft.default)({},s,{defaultTheme:a,themeId:t}))}));return r.__mui_systemSx=!0,(s,o={})=>{(0,Bo.internal_processStyles)(s,D=>D.filter(x=>!(x!=null&&x.__mui_systemSx)));const{name:l,slot:d,skipVariantsResolver:c,skipSx:f,overridesResolver:g=GD(VD(d))}=o,w=(0,rc.default)(o,WD),v=l&&l.startsWith("Mui")||d?"components":"custom",y=c!==void 0?c:d&&d!=="Root"&&d!=="root"||!1,T=f||!1;let u,m=ro;d==="Root"||d==="root"?m=i:d?m=n:UD(s)&&(m=void 0);const p=(0,Bo.default)(s,(0,Ft.default)({shouldForwardProp:m,label:u},w)),_=D=>typeof D=="function"&&D.__emotion_real!==D||(0,FD.isPlainObject)(D)?x=>{const S=Ns({theme:x.theme,defaultTheme:a,themeId:t});return so(D,(0,Ft.default)({},x,{theme:S}),S.modularCssLayers?v:void 0)}:D,k=(D,...x)=>{let S=_(D);const R=x?x.map(_):[];l&&g&&R.push(I=>{const E=Ns((0,Ft.default)({},I,{defaultTheme:a,themeId:t}));if(!E.components||!E.components[l]||!E.components[l].styleOverrides)return null;const j=E.components[l].styleOverrides,O={};return Object.entries(j).forEach(([M,L])=>{O[M]=so(L,(0,Ft.default)({},I,{theme:E}),E.modularCssLayers?"theme":void 0)}),g(I,O)}),l&&!y&&R.push(I=>{var E;const j=Ns((0,Ft.default)({},I,{defaultTheme:a,themeId:t})),O=j==null||(E=j.components)==null||(E=E[l])==null?void 0:E.variants;return so({variants:O},(0,Ft.default)({},I,{theme:j}),j.modularCssLayers?"theme":void 0)}),T||R.push(r);const P=R.length-x.length;if(Array.isArray(D)&&P>0){const I=new Array(P).fill("");S=[...D,...I],S.raw=[...D.raw,...I]}const A=p(S,...R);return s.muiName&&(A.muiName=s.muiName),A};return p.withConfig&&(k.withConfig=p.withConfig),k}}function XD(e,t){return q({toolbar:{minHeight:56,[e.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[e.up("sm")]:{minHeight:64}}},t)}var Fe={};const JD=Fa($k),YD=Fa(hT);var Mv=ts;Object.defineProperty(Fe,"__esModule",{value:!0});var qa=Fe.alpha=zv;Fe.blend=lq;Fe.colorChannel=void 0;var sc=Fe.darken=$p;Fe.decomposeColor=Kt;Fe.emphasize=$v;var QD=Fe.getContrastRatio=iq;Fe.getLuminance=Wo;Fe.hexToRgb=Lv;Fe.hslToRgb=Wv;var oc=Fe.lighten=Up;Fe.private_safeAlpha=nq;Fe.private_safeColorChannel=void 0;Fe.private_safeDarken=rq;Fe.private_safeEmphasize=oq;Fe.private_safeLighten=sq;Fe.recomposeColor=Ln;Fe.rgbToHex=aq;var dh=Mv(JD),ZD=Mv(YD);function zp(e,t=0,a=1){return(0,ZD.default)(e,t,a)}function Lv(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let a=e.match(t);return a&&a[0].length===1&&(a=a.map(i=>i+i)),a?`rgb${a.length===4?"a":""}(${a.map((i,n)=>n<3?parseInt(i,16):Math.round(parseInt(i,16)/255*1e3)/1e3).join(", ")})`:""}function eq(e){const t=e.toString(16);return t.length===1?`0${t}`:t}function Kt(e){if(e.type)return e;if(e.charAt(0)==="#")return Kt(Lv(e));const t=e.indexOf("("),a=e.substring(0,t);if(["rgb","rgba","hsl","hsla","color"].indexOf(a)===-1)throw new Error((0,dh.default)(9,e));let i=e.substring(t+1,e.length-1),n;if(a==="color"){if(i=i.split(" "),n=i.shift(),i.length===4&&i[3].charAt(0)==="/"&&(i[3]=i[3].slice(1)),["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(n)===-1)throw new Error((0,dh.default)(10,n))}else i=i.split(",");return i=i.map(r=>parseFloat(r)),{type:a,values:i,colorSpace:n}}const Bv=e=>{const t=Kt(e);return t.values.slice(0,3).map((a,i)=>t.type.indexOf("hsl")!==-1&&i!==0?`${a}%`:a).join(" ")};Fe.colorChannel=Bv;const tq=(e,t)=>{try{return Bv(e)}catch{return e}};Fe.private_safeColorChannel=tq;function Ln(e){const{type:t,colorSpace:a}=e;let{values:i}=e;return t.indexOf("rgb")!==-1?i=i.map((n,r)=>r<3?parseInt(n,10):n):t.indexOf("hsl")!==-1&&(i[1]=`${i[1]}%`,i[2]=`${i[2]}%`),t.indexOf("color")!==-1?i=`${a} ${i.join(" ")}`:i=`${i.join(", ")}`,`${t}(${i})`}function aq(e){if(e.indexOf("#")===0)return e;const{values:t}=Kt(e);return`#${t.map((a,i)=>eq(i===3?Math.round(255*a):a)).join("")}`}function Wv(e){e=Kt(e);const{values:t}=e,a=t[0],i=t[1]/100,n=t[2]/100,r=i*Math.min(n,1-n),s=(d,c=(d+a/30)%12)=>n-r*Math.max(Math.min(c-3,9-c,1),-1);let o="rgb";const l=[Math.round(s(0)*255),Math.round(s(8)*255),Math.round(s(4)*255)];return e.type==="hsla"&&(o+="a",l.push(t[3])),Ln({type:o,values:l})}function Wo(e){e=Kt(e);let t=e.type==="hsl"||e.type==="hsla"?Kt(Wv(e)).values:e.values;return t=t.map(a=>(e.type!=="color"&&(a/=255),a<=.03928?a/12.92:((a+.055)/1.055)**2.4)),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function iq(e,t){const a=Wo(e),i=Wo(t);return(Math.max(a,i)+.05)/(Math.min(a,i)+.05)}function zv(e,t){return e=Kt(e),t=zp(t),(e.type==="rgb"||e.type==="hsl")&&(e.type+="a"),e.type==="color"?e.values[3]=`/${t}`:e.values[3]=t,Ln(e)}function nq(e,t,a){try{return zv(e,t)}catch{return e}}function $p(e,t){if(e=Kt(e),t=zp(t),e.type.indexOf("hsl")!==-1)e.values[2]*=1-t;else if(e.type.indexOf("rgb")!==-1||e.type.indexOf("color")!==-1)for(let a=0;a<3;a+=1)e.values[a]*=1-t;return Ln(e)}function rq(e,t,a){try{return $p(e,t)}catch{return e}}function Up(e,t){if(e=Kt(e),t=zp(t),e.type.indexOf("hsl")!==-1)e.values[2]+=(100-e.values[2])*t;else if(e.type.indexOf("rgb")!==-1)for(let a=0;a<3;a+=1)e.values[a]+=(255-e.values[a])*t;else if(e.type.indexOf("color")!==-1)for(let a=0;a<3;a+=1)e.values[a]+=(1-e.values[a])*t;return Ln(e)}function sq(e,t,a){try{return Up(e,t)}catch{return e}}function $v(e,t=.15){return Wo(e)>.5?$p(e,t):Up(e,t)}function oq(e,t,a){try{return $v(e,t)}catch{return e}}function lq(e,t,a,i=1){const n=(l,d)=>Math.round((l**(1/i)*(1-a)+d**(1/i)*a)**i),r=Kt(e),s=Kt(t),o=[n(r.values[0],s.values[0]),n(r.values[1],s.values[1]),n(r.values[2],s.values[2])];return Ln({type:"rgb",values:o})}const dq={black:"#000",white:"#fff"},Gr=dq,uq={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},cq=uq,pq={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},Ki=pq,fq={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},Vi=fq,mq={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},Qn=mq,hq={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},Gi=hq,gq={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},Hi=gq,yq={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Xi=yq,_q=["mode","contrastThreshold","tonalOffset"],uh={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Gr.white,default:Gr.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Od={text:{primary:Gr.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Gr.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function ch(e,t,a,i){const n=i.light||i,r=i.dark||i*1.5;e[t]||(e.hasOwnProperty(a)?e[t]=e[a]:t==="light"?e.light=oc(e.main,n):t==="dark"&&(e.dark=sc(e.main,r)))}function vq(e="light"){return e==="dark"?{main:Gi[200],light:Gi[50],dark:Gi[400]}:{main:Gi[700],light:Gi[400],dark:Gi[800]}}function bq(e="light"){return e==="dark"?{main:Ki[200],light:Ki[50],dark:Ki[400]}:{main:Ki[500],light:Ki[300],dark:Ki[700]}}function wq(e="light"){return e==="dark"?{main:Vi[500],light:Vi[300],dark:Vi[700]}:{main:Vi[700],light:Vi[400],dark:Vi[800]}}function kq(e="light"){return e==="dark"?{main:Hi[400],light:Hi[300],dark:Hi[700]}:{main:Hi[700],light:Hi[500],dark:Hi[900]}}function Tq(e="light"){return e==="dark"?{main:Xi[400],light:Xi[300],dark:Xi[700]}:{main:Xi[800],light:Xi[500],dark:Xi[900]}}function xq(e="light"){return e==="dark"?{main:Qn[400],light:Qn[300],dark:Qn[700]}:{main:"#ed6c02",light:Qn[500],dark:Qn[900]}}function Dq(e){const{mode:t="light",contrastThreshold:a=3,tonalOffset:i=.2}=e,n=$(e,_q),r=e.primary||vq(t),s=e.secondary||bq(t),o=e.error||wq(t),l=e.info||kq(t),d=e.success||Tq(t),c=e.warning||xq(t);function f(y){return QD(y,Od.text.primary)>=a?Od.text.primary:uh.text.primary}const g=({color:y,name:T,mainShade:u=500,lightShade:m=300,darkShade:p=700})=>{if(y=q({},y),!y.main&&y[u]&&(y.main=y[u]),!y.hasOwnProperty("main"))throw new Error(Mi(11,T?` (${T})`:"",u));if(typeof y.main!="string")throw new Error(Mi(12,T?` (${T})`:"",JSON.stringify(y.main)));return ch(y,"light",m,i),ch(y,"dark",p,i),y.contrastText||(y.contrastText=f(y.main)),y},w={dark:Od,light:uh};return Dt(q({common:q({},Gr),mode:t,primary:g({color:r,name:"primary"}),secondary:g({color:s,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:g({color:o,name:"error"}),warning:g({color:c,name:"warning"}),info:g({color:l,name:"info"}),success:g({color:d,name:"success"}),grey:cq,contrastThreshold:a,getContrastText:f,augmentColor:g,tonalOffset:i},w[t]),n)}const qq=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"];function Cq(e){return Math.round(e*1e5)/1e5}const ph={textTransform:"uppercase"},fh='"Roboto", "Helvetica", "Arial", sans-serif';function Sq(e,t){const a=typeof t=="function"?t(e):t,{fontFamily:i=fh,fontSize:n=14,fontWeightLight:r=300,fontWeightRegular:s=400,fontWeightMedium:o=500,fontWeightBold:l=700,htmlFontSize:d=16,allVariants:c,pxToRem:f}=a,g=$(a,qq),w=n/14,v=f||(u=>`${u/d*w}rem`),y=(u,m,p,_,k)=>q({fontFamily:i,fontWeight:u,fontSize:v(m),lineHeight:p},i===fh?{letterSpacing:`${Cq(_/m)}em`}:{},k,c),T={h1:y(r,96,1.167,-1.5),h2:y(r,60,1.2,-.5),h3:y(s,48,1.167,0),h4:y(s,34,1.235,.25),h5:y(s,24,1.334,0),h6:y(o,20,1.6,.15),subtitle1:y(s,16,1.75,.15),subtitle2:y(o,14,1.57,.1),body1:y(s,16,1.5,.15),body2:y(s,14,1.43,.15),button:y(o,14,1.75,.4,ph),caption:y(s,12,1.66,.4),overline:y(s,12,2.66,1,ph),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return Dt(q({htmlFontSize:d,pxToRem:v,fontFamily:i,fontSize:n,fontWeightLight:r,fontWeightRegular:s,fontWeightMedium:o,fontWeightBold:l},T),g,{clone:!1})}const Pq=.2,Rq=.14,Aq=.12;function Te(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,${Pq})`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,${Rq})`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,${Aq})`].join(",")}const Iq=["none",Te(0,2,1,-1,0,1,1,0,0,1,3,0),Te(0,3,1,-2,0,2,2,0,0,1,5,0),Te(0,3,3,-2,0,3,4,0,0,1,8,0),Te(0,2,4,-1,0,4,5,0,0,1,10,0),Te(0,3,5,-1,0,5,8,0,0,1,14,0),Te(0,3,5,-1,0,6,10,0,0,1,18,0),Te(0,4,5,-2,0,7,10,1,0,2,16,1),Te(0,5,5,-3,0,8,10,1,0,3,14,2),Te(0,5,6,-3,0,9,12,1,0,3,16,2),Te(0,6,6,-3,0,10,14,1,0,4,18,3),Te(0,6,7,-4,0,11,15,1,0,4,20,3),Te(0,7,8,-4,0,12,17,2,0,5,22,4),Te(0,7,8,-4,0,13,19,2,0,5,24,4),Te(0,7,9,-4,0,14,21,2,0,5,26,4),Te(0,8,9,-5,0,15,22,2,0,6,28,5),Te(0,8,10,-5,0,16,24,2,0,6,30,5),Te(0,8,11,-5,0,17,26,2,0,6,32,5),Te(0,9,11,-5,0,18,28,2,0,7,34,6),Te(0,9,12,-6,0,19,29,2,0,7,36,6),Te(0,10,13,-6,0,20,31,3,0,8,38,7),Te(0,10,13,-6,0,21,33,3,0,8,40,7),Te(0,10,14,-6,0,22,35,3,0,8,42,7),Te(0,11,14,-7,0,23,36,3,0,9,44,8),Te(0,11,15,-7,0,24,38,3,0,9,46,8)],Eq=Iq,Nq=["duration","easing","delay"],jq={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Fq={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function mh(e){return`${Math.round(e)}ms`}function Oq(e){if(!e)return 0;const t=e/36;return Math.round((4+15*t**.25+t/5)*10)}function Mq(e){const t=q({},jq,e.easing),a=q({},Fq,e.duration);return q({getAutoHeightDuration:Oq,create:(n=["all"],r={})=>{const{duration:s=a.standard,easing:o=t.easeInOut,delay:l=0}=r;return $(r,Nq),(Array.isArray(n)?n:[n]).map(d=>`${d} ${typeof s=="string"?s:mh(s)} ${o} ${typeof l=="string"?l:mh(l)}`).join(",")}},e,{easing:t,duration:a})}const Lq={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},Bq=Lq,Wq=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];function Uv(e={},...t){const{mixins:a={},palette:i={},transitions:n={},typography:r={}}=e,s=$(e,Wq);if(e.vars&&e.generateCssVars===void 0)throw new Error(Mi(18));const o=Dq(i),l=Bp(e);let d=Dt(l,{mixins:XD(l.breakpoints,a),palette:o,shadows:Eq.slice(),typography:Sq(o,r),transitions:Mq(n),zIndex:q({},Bq)});return d=Dt(d,s),d=t.reduce((c,f)=>Dt(c,f),d),d.unstable_sxConfig=q({},ls,s==null?void 0:s.unstable_sxConfig),d.unstable_sx=function(f){return $l({sx:f,theme:this})},d}const zq=Uv(),Kp=zq,Ul="$$material";function Kv(e){return e!=="ownerState"&&e!=="theme"&&e!=="sx"&&e!=="as"}const $q=e=>Kv(e)&&e!=="classes",At=$q,Uq=jD({themeId:Ul,defaultTheme:Kp,rootShouldForwardProp:At}),z=Uq;function Kq(e){return pe("MuiSvgIcon",e)}se("MuiSvgIcon",["root","colorPrimary","colorSecondary","colorAction","colorError","colorDisabled","fontSizeInherit","fontSizeSmall","fontSizeMedium","fontSizeLarge"]);const Vq=["children","className","color","component","fontSize","htmlColor","inheritViewBox","titleAccess","viewBox"],Gq=e=>{const{color:t,fontSize:a,classes:i}=e,n={root:["root",t!=="inherit"&&`color${J(t)}`,`fontSize${J(a)}`]};return me(n,Kq,i)},Hq=z("svg",{name:"MuiSvgIcon",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.color!=="inherit"&&t[`color${J(a.color)}`],t[`fontSize${J(a.fontSize)}`]]}})(({theme:e,ownerState:t})=>{var a,i,n,r,s,o,l,d,c,f,g,w,v;return{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:t.hasSvgAsChild?void 0:"currentColor",flexShrink:0,transition:(a=e.transitions)==null||(i=a.create)==null?void 0:i.call(a,"fill",{duration:(n=e.transitions)==null||(n=n.duration)==null?void 0:n.shorter}),fontSize:{inherit:"inherit",small:((r=e.typography)==null||(s=r.pxToRem)==null?void 0:s.call(r,20))||"1.25rem",medium:((o=e.typography)==null||(l=o.pxToRem)==null?void 0:l.call(o,24))||"1.5rem",large:((d=e.typography)==null||(c=d.pxToRem)==null?void 0:c.call(d,35))||"2.1875rem"}[t.fontSize],color:(f=(g=(e.vars||e).palette)==null||(g=g[t.color])==null?void 0:g.main)!=null?f:{action:(w=(e.vars||e).palette)==null||(w=w.action)==null?void 0:w.active,disabled:(v=(e.vars||e).palette)==null||(v=v.action)==null?void 0:v.disabled,inherit:void 0}[t.color]}}),Vv=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiSvgIcon"}),{children:n,className:r,color:s="inherit",component:o="svg",fontSize:l="medium",htmlColor:d,inheritViewBox:c=!1,titleAccess:f,viewBox:g="0 0 24 24"}=i,w=$(i,Vq),v=b.isValidElement(n)&&n.type==="svg",y=q({},i,{color:s,component:o,fontSize:l,instanceFontSize:t.fontSize,inheritViewBox:c,viewBox:g,hasSvgAsChild:v}),T={};c||(T.viewBox=g);const u=Gq(y);return h.jsxs(Hq,q({as:o,className:G(u.root,r),focusable:"false",color:d,"aria-hidden":f?void 0:!0,role:f?"img":void 0,ref:a},T,w,v&&n.props,{ownerState:y,children:[v?n.props.children:n,f?h.jsx("title",{children:f}):null]}))});Vv.muiName="SvgIcon";const hh=Vv;function zi(e,t){function a(i,n){return h.jsx(hh,q({"data-testid":`${t}Icon`,ref:n},i,{children:e}))}return a.muiName=hh.muiName,b.memo(b.forwardRef(a))}const Xq={configure:e=>{Dp.configure(e)}},Jq=Object.freeze(Object.defineProperty({__proto__:null,capitalize:J,createChainedFunction:Yu,createSvgIcon:zi,debounce:bl,deprecatedPropType:Jk,isMuiElement:to,ownerDocument:yt,ownerWindow:ha,requirePropFactory:Yk,setRef:Fo,unstable_ClassNameGenerator:Xq,unstable_useEnhancedEffect:Ia,unstable_useId:xp,unsupportedProp:eT,useControlled:Qu,useEventCallback:Za,useForkRef:Ke,useIsFocusVisible:tv},Symbol.toStringTag,{value:"Module"})),Yq=Fa(Jq);var gh;function Vp(){return gh||(gh=1,function(e){"use client";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return t.createSvgIcon}});var t=Yq}(Ad)),Ad}var Qq=ts;Object.defineProperty(wp,"__esModule",{value:!0});var Gv=wp.default=void 0,Zq=Qq(Vp()),eC=h;Gv=wp.default=(0,Zq.default)((0,eC.jsx)("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14"}),"Search");var Gp={},tC=ts;Object.defineProperty(Gp,"__esModule",{value:!0});var Hv=Gp.default=void 0,aC=tC(Vp()),iC=h;Hv=Gp.default=(0,aC.default)((0,iC.jsx)("path",{d:"M19 7v4H5.83l3.58-3.59L8 6l-6 6 6 6 1.41-1.41L5.83 13H21V7z"}),"KeyboardReturn");function Na(e){return Array.isArray?Array.isArray(e):Yv(e)==="[object Array]"}const nC=1/0;function rC(e){if(typeof e=="string")return e;let t=e+"";return t=="0"&&1/e==-nC?"-0":t}function sC(e){return e==null?"":rC(e)}function ca(e){return typeof e=="string"}function Xv(e){return typeof e=="number"}function oC(e){return e===!0||e===!1||lC(e)&&Yv(e)=="[object Boolean]"}function Jv(e){return typeof e=="object"}function lC(e){return Jv(e)&&e!==null}function wt(e){return e!=null}function Md(e){return!e.trim().length}function Yv(e){return e==null?e===void 0?"[object Undefined]":"[object Null]":Object.prototype.toString.call(e)}const dC="Incorrect 'index' type",uC=e=>`Invalid value for key ${e}`,cC=e=>`Pattern length exceeds max of ${e}.`,pC=e=>`Missing ${e} property in key`,fC=e=>`Property 'weight' in key '${e}' must be a positive integer`,yh=Object.prototype.hasOwnProperty;class mC{constructor(t){this._keys=[],this._keyMap={};let a=0;t.forEach(i=>{let n=Qv(i);a+=n.weight,this._keys.push(n),this._keyMap[n.id]=n,a+=n.weight}),this._keys.forEach(i=>{i.weight/=a})}get(t){return this._keyMap[t]}keys(){return this._keys}toJSON(){return JSON.stringify(this._keys)}}function Qv(e){let t=null,a=null,i=null,n=1,r=null;if(ca(e)||Na(e))i=e,t=_h(e),a=lc(e);else{if(!yh.call(e,"name"))throw new Error(pC("name"));const s=e.name;if(i=s,yh.call(e,"weight")&&(n=e.weight,n<=0))throw new Error(fC(s));t=_h(s),a=lc(s),r=e.getFn}return{path:t,id:a,weight:n,src:i,getFn:r}}function _h(e){return Na(e)?e:e.split(".")}function lc(e){return Na(e)?e.join("."):e}function hC(e,t){let a=[],i=!1;const n=(r,s,o)=>{if(wt(r))if(!s[o])a.push(r);else{let l=s[o];const d=r[l];if(!wt(d))return;if(o===s.length-1&&(ca(d)||Xv(d)||oC(d)))a.push(sC(d));else if(Na(d)){i=!0;for(let c=0,f=d.length;c<f;c+=1)n(d[c],s,o+1)}else s.length&&n(d,s,o+1)}};return n(e,ca(t)?t.split("."):t,0),i?a:a[0]}const gC={includeMatches:!1,findAllMatches:!1,minMatchCharLength:1},yC={isCaseSensitive:!1,includeScore:!1,keys:[],shouldSort:!0,sortFn:(e,t)=>e.score===t.score?e.idx<t.idx?-1:1:e.score<t.score?-1:1},_C={location:0,threshold:.6,distance:100},vC={useExtendedSearch:!1,getFn:hC,ignoreLocation:!1,ignoreFieldNorm:!1,fieldNormWeight:1};var H={...yC,...gC,..._C,...vC};const bC=/[^ ]+/g;function wC(e=1,t=3){const a=new Map,i=Math.pow(10,t);return{get(n){const r=n.match(bC).length;if(a.has(r))return a.get(r);const s=1/Math.pow(r,.5*e),o=parseFloat(Math.round(s*i)/i);return a.set(r,o),o},clear(){a.clear()}}}class Hp{constructor({getFn:t=H.getFn,fieldNormWeight:a=H.fieldNormWeight}={}){this.norm=wC(a,3),this.getFn=t,this.isCreated=!1,this.setIndexRecords()}setSources(t=[]){this.docs=t}setIndexRecords(t=[]){this.records=t}setKeys(t=[]){this.keys=t,this._keysMap={},t.forEach((a,i)=>{this._keysMap[a.id]=i})}create(){this.isCreated||!this.docs.length||(this.isCreated=!0,ca(this.docs[0])?this.docs.forEach((t,a)=>{this._addString(t,a)}):this.docs.forEach((t,a)=>{this._addObject(t,a)}),this.norm.clear())}add(t){const a=this.size();ca(t)?this._addString(t,a):this._addObject(t,a)}removeAt(t){this.records.splice(t,1);for(let a=t,i=this.size();a<i;a+=1)this.records[a].i-=1}getValueForItemAtKeyId(t,a){return t[this._keysMap[a]]}size(){return this.records.length}_addString(t,a){if(!wt(t)||Md(t))return;let i={v:t,i:a,n:this.norm.get(t)};this.records.push(i)}_addObject(t,a){let i={i:a,$:{}};this.keys.forEach((n,r)=>{let s=n.getFn?n.getFn(t):this.getFn(t,n.path);if(wt(s)){if(Na(s)){let o=[];const l=[{nestedArrIndex:-1,value:s}];for(;l.length;){const{nestedArrIndex:d,value:c}=l.pop();if(wt(c))if(ca(c)&&!Md(c)){let f={v:c,i:d,n:this.norm.get(c)};o.push(f)}else Na(c)&&c.forEach((f,g)=>{l.push({nestedArrIndex:g,value:f})})}i.$[r]=o}else if(ca(s)&&!Md(s)){let o={v:s,n:this.norm.get(s)};i.$[r]=o}}}),this.records.push(i)}toJSON(){return{keys:this.keys,records:this.records}}}function Zv(e,t,{getFn:a=H.getFn,fieldNormWeight:i=H.fieldNormWeight}={}){const n=new Hp({getFn:a,fieldNormWeight:i});return n.setKeys(e.map(Qv)),n.setSources(t),n.create(),n}function kC(e,{getFn:t=H.getFn,fieldNormWeight:a=H.fieldNormWeight}={}){const{keys:i,records:n}=e,r=new Hp({getFn:t,fieldNormWeight:a});return r.setKeys(i),r.setIndexRecords(n),r}function js(e,{errors:t=0,currentLocation:a=0,expectedLocation:i=0,distance:n=H.distance,ignoreLocation:r=H.ignoreLocation}={}){const s=t/e.length;if(r)return s;const o=Math.abs(i-a);return n?s+o/n:o?1:s}function TC(e=[],t=H.minMatchCharLength){let a=[],i=-1,n=-1,r=0;for(let s=e.length;r<s;r+=1){let o=e[r];o&&i===-1?i=r:!o&&i!==-1&&(n=r-1,n-i+1>=t&&a.push([i,n]),i=-1)}return e[r-1]&&r-i>=t&&a.push([i,r-1]),a}const Ti=32;function xC(e,t,a,{location:i=H.location,distance:n=H.distance,threshold:r=H.threshold,findAllMatches:s=H.findAllMatches,minMatchCharLength:o=H.minMatchCharLength,includeMatches:l=H.includeMatches,ignoreLocation:d=H.ignoreLocation}={}){if(t.length>Ti)throw new Error(cC(Ti));const c=t.length,f=e.length,g=Math.max(0,Math.min(i,f));let w=r,v=g;const y=o>1||l,T=y?Array(f):[];let u;for(;(u=e.indexOf(t,v))>-1;){let x=js(t,{currentLocation:u,expectedLocation:g,distance:n,ignoreLocation:d});if(w=Math.min(x,w),v=u+c,y){let S=0;for(;S<c;)T[u+S]=1,S+=1}}v=-1;let m=[],p=1,_=c+f;const k=1<<c-1;for(let x=0;x<c;x+=1){let S=0,R=_;for(;S<R;)js(t,{errors:x,currentLocation:g+R,expectedLocation:g,distance:n,ignoreLocation:d})<=w?S=R:_=R,R=Math.floor((_-S)/2+S);_=R;let P=Math.max(1,g-R+1),A=s?f:Math.min(g+R,f)+c,I=Array(A+2);I[A+1]=(1<<x)-1;for(let j=A;j>=P;j-=1){let O=j-1,M=a[e.charAt(O)];if(y&&(T[O]=+!!M),I[j]=(I[j+1]<<1|1)&M,x&&(I[j]|=(m[j+1]|m[j])<<1|1|m[j+1]),I[j]&k&&(p=js(t,{errors:x,currentLocation:O,expectedLocation:g,distance:n,ignoreLocation:d}),p<=w)){if(w=p,v=O,v<=g)break;P=Math.max(1,2*g-v)}}if(js(t,{errors:x+1,currentLocation:g,expectedLocation:g,distance:n,ignoreLocation:d})>w)break;m=I}const D={isMatch:v>=0,score:Math.max(.001,p)};if(y){const x=TC(T,o);x.length?l&&(D.indices=x):D.isMatch=!1}return D}function DC(e){let t={};for(let a=0,i=e.length;a<i;a+=1){const n=e.charAt(a);t[n]=(t[n]||0)|1<<i-a-1}return t}class eb{constructor(t,{location:a=H.location,threshold:i=H.threshold,distance:n=H.distance,includeMatches:r=H.includeMatches,findAllMatches:s=H.findAllMatches,minMatchCharLength:o=H.minMatchCharLength,isCaseSensitive:l=H.isCaseSensitive,ignoreLocation:d=H.ignoreLocation}={}){if(this.options={location:a,threshold:i,distance:n,includeMatches:r,findAllMatches:s,minMatchCharLength:o,isCaseSensitive:l,ignoreLocation:d},this.pattern=l?t:t.toLowerCase(),this.chunks=[],!this.pattern.length)return;const c=(g,w)=>{this.chunks.push({pattern:g,alphabet:DC(g),startIndex:w})},f=this.pattern.length;if(f>Ti){let g=0;const w=f%Ti,v=f-w;for(;g<v;)c(this.pattern.substr(g,Ti),g),g+=Ti;if(w){const y=f-Ti;c(this.pattern.substr(y),y)}}else c(this.pattern,0)}searchIn(t){const{isCaseSensitive:a,includeMatches:i}=this.options;if(a||(t=t.toLowerCase()),this.pattern===t){let v={isMatch:!0,score:0};return i&&(v.indices=[[0,t.length-1]]),v}const{location:n,distance:r,threshold:s,findAllMatches:o,minMatchCharLength:l,ignoreLocation:d}=this.options;let c=[],f=0,g=!1;this.chunks.forEach(({pattern:v,alphabet:y,startIndex:T})=>{const{isMatch:u,score:m,indices:p}=xC(t,v,y,{location:n+T,distance:r,threshold:s,findAllMatches:o,minMatchCharLength:l,includeMatches:i,ignoreLocation:d});u&&(g=!0),f+=m,u&&p&&(c=[...c,...p])});let w={isMatch:g,score:g?f/this.chunks.length:1};return g&&i&&(w.indices=c),w}}class hi{constructor(t){this.pattern=t}static isMultiMatch(t){return vh(t,this.multiRegex)}static isSingleMatch(t){return vh(t,this.singleRegex)}search(){}}function vh(e,t){const a=e.match(t);return a?a[1]:null}class qC extends hi{constructor(t){super(t)}static get type(){return"exact"}static get multiRegex(){return/^="(.*)"$/}static get singleRegex(){return/^=(.*)$/}search(t){const a=t===this.pattern;return{isMatch:a,score:a?0:1,indices:[0,this.pattern.length-1]}}}class CC extends hi{constructor(t){super(t)}static get type(){return"inverse-exact"}static get multiRegex(){return/^!"(.*)"$/}static get singleRegex(){return/^!(.*)$/}search(t){const i=t.indexOf(this.pattern)===-1;return{isMatch:i,score:i?0:1,indices:[0,t.length-1]}}}class SC extends hi{constructor(t){super(t)}static get type(){return"prefix-exact"}static get multiRegex(){return/^\^"(.*)"$/}static get singleRegex(){return/^\^(.*)$/}search(t){const a=t.startsWith(this.pattern);return{isMatch:a,score:a?0:1,indices:[0,this.pattern.length-1]}}}class PC extends hi{constructor(t){super(t)}static get type(){return"inverse-prefix-exact"}static get multiRegex(){return/^!\^"(.*)"$/}static get singleRegex(){return/^!\^(.*)$/}search(t){const a=!t.startsWith(this.pattern);return{isMatch:a,score:a?0:1,indices:[0,t.length-1]}}}class RC extends hi{constructor(t){super(t)}static get type(){return"suffix-exact"}static get multiRegex(){return/^"(.*)"\$$/}static get singleRegex(){return/^(.*)\$$/}search(t){const a=t.endsWith(this.pattern);return{isMatch:a,score:a?0:1,indices:[t.length-this.pattern.length,t.length-1]}}}class AC extends hi{constructor(t){super(t)}static get type(){return"inverse-suffix-exact"}static get multiRegex(){return/^!"(.*)"\$$/}static get singleRegex(){return/^!(.*)\$$/}search(t){const a=!t.endsWith(this.pattern);return{isMatch:a,score:a?0:1,indices:[0,t.length-1]}}}class tb extends hi{constructor(t,{location:a=H.location,threshold:i=H.threshold,distance:n=H.distance,includeMatches:r=H.includeMatches,findAllMatches:s=H.findAllMatches,minMatchCharLength:o=H.minMatchCharLength,isCaseSensitive:l=H.isCaseSensitive,ignoreLocation:d=H.ignoreLocation}={}){super(t),this._bitapSearch=new eb(t,{location:a,threshold:i,distance:n,includeMatches:r,findAllMatches:s,minMatchCharLength:o,isCaseSensitive:l,ignoreLocation:d})}static get type(){return"fuzzy"}static get multiRegex(){return/^"(.*)"$/}static get singleRegex(){return/^(.*)$/}search(t){return this._bitapSearch.searchIn(t)}}class ab extends hi{constructor(t){super(t)}static get type(){return"include"}static get multiRegex(){return/^'"(.*)"$/}static get singleRegex(){return/^'(.*)$/}search(t){let a=0,i;const n=[],r=this.pattern.length;for(;(i=t.indexOf(this.pattern,a))>-1;)a=i+r,n.push([i,a-1]);const s=!!n.length;return{isMatch:s,score:s?0:1,indices:n}}}const dc=[qC,ab,SC,PC,AC,RC,CC,tb],bh=dc.length,IC=/ +(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/,EC="|";function NC(e,t={}){return e.split(EC).map(a=>{let i=a.trim().split(IC).filter(r=>r&&!!r.trim()),n=[];for(let r=0,s=i.length;r<s;r+=1){const o=i[r];let l=!1,d=-1;for(;!l&&++d<bh;){const c=dc[d];let f=c.isMultiMatch(o);f&&(n.push(new c(f,t)),l=!0)}if(!l)for(d=-1;++d<bh;){const c=dc[d];let f=c.isSingleMatch(o);if(f){n.push(new c(f,t));break}}}return n})}const jC=new Set([tb.type,ab.type]);class FC{constructor(t,{isCaseSensitive:a=H.isCaseSensitive,includeMatches:i=H.includeMatches,minMatchCharLength:n=H.minMatchCharLength,ignoreLocation:r=H.ignoreLocation,findAllMatches:s=H.findAllMatches,location:o=H.location,threshold:l=H.threshold,distance:d=H.distance}={}){this.query=null,this.options={isCaseSensitive:a,includeMatches:i,minMatchCharLength:n,findAllMatches:s,ignoreLocation:r,location:o,threshold:l,distance:d},this.pattern=a?t:t.toLowerCase(),this.query=NC(this.pattern,this.options)}static condition(t,a){return a.useExtendedSearch}searchIn(t){const a=this.query;if(!a)return{isMatch:!1,score:1};const{includeMatches:i,isCaseSensitive:n}=this.options;t=n?t:t.toLowerCase();let r=0,s=[],o=0;for(let l=0,d=a.length;l<d;l+=1){const c=a[l];s.length=0,r=0;for(let f=0,g=c.length;f<g;f+=1){const w=c[f],{isMatch:v,indices:y,score:T}=w.search(t);if(v){if(r+=1,o+=T,i){const u=w.constructor.type;jC.has(u)?s=[...s,...y]:s.push(y)}}else{o=0,r=0,s.length=0;break}}if(r){let f={isMatch:!0,score:o/r};return i&&(f.indices=s),f}}return{isMatch:!1,score:1}}}const uc=[];function OC(...e){uc.push(...e)}function cc(e,t){for(let a=0,i=uc.length;a<i;a+=1){let n=uc[a];if(n.condition(e,t))return new n(e,t)}return new eb(e,t)}const zo={AND:"$and",OR:"$or"},pc={PATH:"$path",PATTERN:"$val"},fc=e=>!!(e[zo.AND]||e[zo.OR]),MC=e=>!!e[pc.PATH],LC=e=>!Na(e)&&Jv(e)&&!fc(e),wh=e=>({[zo.AND]:Object.keys(e).map(t=>({[t]:e[t]}))});function ib(e,t,{auto:a=!0}={}){const i=n=>{let r=Object.keys(n);const s=MC(n);if(!s&&r.length>1&&!fc(n))return i(wh(n));if(LC(n)){const l=s?n[pc.PATH]:r[0],d=s?n[pc.PATTERN]:n[l];if(!ca(d))throw new Error(uC(l));const c={keyId:lc(l),pattern:d};return a&&(c.searcher=cc(d,t)),c}let o={children:[],operator:r[0]};return r.forEach(l=>{const d=n[l];Na(d)&&d.forEach(c=>{o.children.push(i(c))})}),o};return fc(e)||(e=wh(e)),i(e)}function BC(e,{ignoreFieldNorm:t=H.ignoreFieldNorm}){e.forEach(a=>{let i=1;a.matches.forEach(({key:n,norm:r,score:s})=>{const o=n?n.weight:null;i*=Math.pow(s===0&&o?Number.EPSILON:s,(o||1)*(t?1:r))}),a.score=i})}function WC(e,t){const a=e.matches;t.matches=[],wt(a)&&a.forEach(i=>{if(!wt(i.indices)||!i.indices.length)return;const{indices:n,value:r}=i;let s={indices:n,value:r};i.key&&(s.key=i.key.src),i.idx>-1&&(s.refIndex=i.idx),t.matches.push(s)})}function zC(e,t){t.score=e.score}function $C(e,t,{includeMatches:a=H.includeMatches,includeScore:i=H.includeScore}={}){const n=[];return a&&n.push(WC),i&&n.push(zC),e.map(r=>{const{idx:s}=r,o={item:t[s],refIndex:s};return n.length&&n.forEach(l=>{l(r,o)}),o})}class Bn{constructor(t,a={},i){this.options={...H,...a},this.options.useExtendedSearch,this._keyStore=new mC(this.options.keys),this.setCollection(t,i)}setCollection(t,a){if(this._docs=t,a&&!(a instanceof Hp))throw new Error(dC);this._myIndex=a||Zv(this.options.keys,this._docs,{getFn:this.options.getFn,fieldNormWeight:this.options.fieldNormWeight})}add(t){wt(t)&&(this._docs.push(t),this._myIndex.add(t))}remove(t=()=>!1){const a=[];for(let i=0,n=this._docs.length;i<n;i+=1){const r=this._docs[i];t(r,i)&&(this.removeAt(i),i-=1,n-=1,a.push(r))}return a}removeAt(t){this._docs.splice(t,1),this._myIndex.removeAt(t)}getIndex(){return this._myIndex}search(t,{limit:a=-1}={}){const{includeMatches:i,includeScore:n,shouldSort:r,sortFn:s,ignoreFieldNorm:o}=this.options;let l=ca(t)?ca(this._docs[0])?this._searchStringList(t):this._searchObjectList(t):this._searchLogical(t);return BC(l,{ignoreFieldNorm:o}),r&&l.sort(s),Xv(a)&&a>-1&&(l=l.slice(0,a)),$C(l,this._docs,{includeMatches:i,includeScore:n})}_searchStringList(t){const a=cc(t,this.options),{records:i}=this._myIndex,n=[];return i.forEach(({v:r,i:s,n:o})=>{if(!wt(r))return;const{isMatch:l,score:d,indices:c}=a.searchIn(r);l&&n.push({item:r,idx:s,matches:[{score:d,value:r,norm:o,indices:c}]})}),n}_searchLogical(t){const a=ib(t,this.options),i=(o,l,d)=>{if(!o.children){const{keyId:f,searcher:g}=o,w=this._findMatches({key:this._keyStore.get(f),value:this._myIndex.getValueForItemAtKeyId(l,f),searcher:g});return w&&w.length?[{idx:d,item:l,matches:w}]:[]}const c=[];for(let f=0,g=o.children.length;f<g;f+=1){const w=o.children[f],v=i(w,l,d);if(v.length)c.push(...v);else if(o.operator===zo.AND)return[]}return c},n=this._myIndex.records,r={},s=[];return n.forEach(({$:o,i:l})=>{if(wt(o)){let d=i(a,o,l);d.length&&(r[l]||(r[l]={idx:l,item:o,matches:[]},s.push(r[l])),d.forEach(({matches:c})=>{r[l].matches.push(...c)}))}}),s}_searchObjectList(t){const a=cc(t,this.options),{keys:i,records:n}=this._myIndex,r=[];return n.forEach(({$:s,i:o})=>{if(!wt(s))return;let l=[];i.forEach((d,c)=>{l.push(...this._findMatches({key:d,value:s[c],searcher:a}))}),l.length&&r.push({idx:o,item:s,matches:l})}),r}_findMatches({key:t,value:a,searcher:i}){if(!wt(a))return[];let n=[];if(Na(a))a.forEach(({v:r,i:s,n:o})=>{if(!wt(r))return;const{isMatch:l,score:d,indices:c}=i.searchIn(r);l&&n.push({score:d,key:t,value:r,idx:s,norm:o,indices:c})});else{const{v:r,n:s}=a,{isMatch:o,score:l,indices:d}=i.searchIn(r);o&&n.push({score:l,key:t,value:r,norm:s,indices:d})}return n}}Bn.version="6.6.2";Bn.createIndex=Zv;Bn.parseIndex=kC;Bn.config=H;Bn.parseQuery=ib;OC(FC);const nb=b.createContext(),ds=()=>b.useContext(nb),UC=({children:e})=>{const[t,a]=b.useState(""),[i,n]=b.useState(),[r,s]=b.useState(!1);return h.jsx(nb.Provider,{value:{searchQuery:t,setSearchQuery:a,searchResults:i,setSearchResults:n,isSearchSubmitted:r,setIsSearchSubmitted:s},children:e})};function rb(e,t){const a=JSON.parse(e);let i=[];function n(o,l){if(typeof l=="string"&&l.toLowerCase().includes(t.toLowerCase()))return l.trim();if(typeof l=="object")for(const d in l){const c=n(d,l[d]);d>0&&typeof c=="string"?i.push(o+": "+l[(d-"1").toString()]+" "+c):d==0&&l.length>1&&typeof c=="string"?i.push(o+": "+c+" "+l[1]):typeof c=="string"&&i.push(d+": "+c)}}for(const o in a)n(o,a[o]);const r=i[0];let s=[];try{const o=r.toLowerCase(),l=t.toLowerCase(),d=o.indexOf(l);if(d!==-1){const c=r.substring(0,d),f=r.substring(d,d+l.length),g=r.substring(d+l.length);s=[c,f,g]}}catch{s=[null,null,null]}return s}const KC=ya.plugins;let kh=["name","metadata.description","entry_point_prefix","metadata.author"];function VC(e){const t=[],a=JSON.parse(JSON.stringify(e));return Object.entries(a).forEach(([n,r])=>{Object.entries(r.entry_points).forEach(([s,o])=>{for(const l in o){let d=["entry_points",s,l];r.entry_points[s][l]=JSON.stringify(r.entry_points[s][l]),kh.push(d)}}),t.push(r)}),new Bn(t,{keys:kh,includeScore:!0,ignoreLocation:!0,threshold:.1,includeMatches:!0})}const GC=VC(KC);function HC(){const{searchQuery:e,setSearchQuery:t,setSearchResults:a,isSearchSubmitted:i,setIsSearchSubmitted:n}=ds(),r=l=>{t(l),document.querySelector(".suggestions-list").style.display="block",document.querySelector(".dropdown-search").style.display="block",(l==""||i==!0)&&(n(!1),document.querySelector(".dropdown-search").style.display="none");const d=document.querySelector(".enter-symbol");d&&(d.style.opacity=l?"1":"0")};let s=GC.search(e);const o=l=>{l.preventDefault(),e&&(a(s),n(!0),document.querySelector(".suggestions-list").style.display="none",document.querySelector(".dropdown-search").style.display="none")};return h.jsx(h.Fragment,{children:h.jsxs("div",{className:"search",children:[h.jsxs("form",{className:"search-form",children:[h.jsx("button",{style:{fontSize:"20px",minWidth:"90px",backgroundColor:"white",border:"1px solid #ccc",borderRadius:"4px"},onClick:l=>{o(l)},children:h.jsx(Gv,{})}),h.jsxs("div",{className:"input-container",children:[h.jsx("input",{type:"text",placeholder:"Search for plugins",value:e,label:"search",onChange:l=>r(l.target.value)}),h.jsx(Hv,{className:"enter-symbol"})]})]}),h.jsxs("ul",{className:"suggestions-list",children:[s.slice(0,3).map(l=>h.jsxs(h.Fragment,{children:[h.jsx(Oi,{to:`/${l.item.name}`,children:h.jsxs("h3",{className:"suggestion-item",children:[l.item.name," "]},l.item.name)}),h.jsx("ul",{children:l.matches.filter(d=>typeof d.key=="object").slice(0,1).map(d=>h.jsxs(h.Fragment,{children:[h.jsx(Oi,{to:`/${l.item.name}#${d.key[1]}.${d.key[2]}`,children:h.jsxs("li",{className:"suggestion-item",children:[d.key[2]," "]},d.key)}),h.jsx(sb,{match_value:d.value})]}))})]})),h.jsx("button",{className:"dropdown-search",onClick:l=>{o(l)},children:" Search"})]})]})})}function XC(){const{searchResults:e,searchQuery:t}=ds();return h.jsxs(h.Fragment,{children:[h.jsxs("h2",{children:["Showing ",e.length," pages matching the search query."]}),e.length===0&&h.jsx("div",{children:h.jsxs("h3",{className:"submenu-entry",style:{textAlign:"center",color:"black"},children:["Can't find what you're looking for?",h.jsx("br",{}),"Join the AiiDA community on Discourse and request a plugin ",h.jsx("a",{href:"https://aiida.discourse.group/new-topic?title=Request%20for%20Plugin...&category=community/plugin-requests",target:"_blank",children:"here."})]})}),e.map(a=>h.jsx(h.Fragment,{children:h.jsxs("div",{className:"submenu-entry",children:[h.jsx(Oi,{to:`/${a.item.name}`,children:h.jsx("h3",{className:"suggestion-item",children:a.item.name},a.item.name)}),h.jsx("ul",{children:a.matches.filter(i=>typeof i.key=="object").map(i=>h.jsx(h.Fragment,{children:rb(i.value,t)[0]!=null&&h.jsxs(h.Fragment,{children:[h.jsx(Oi,{to:`/${a.item.name}#${i.key[1]}.${i.key[2]}`,children:h.jsx("li",{className:"suggestion-item",children:i.key[2]},i.key)}),h.jsx(sb,{match_value:i.value})]})}))})]})}))]})}function sb({match_value:e}){const{searchQuery:t}=ds(),[a,i,n]=rb(e,t);return h.jsx(h.Fragment,{children:a!=null&&h.jsxs("p",{children:[a,h.jsx("span",{style:{backgroundColor:"yellow"},children:i}),n,"..."]})})}function JC(e){return Object.keys(e).length===0}function YC(e=null){const t=b.useContext(rs);return!t||JC(t)?e:t}const QC=Bp();function Xp(e=QC){return YC(e)}function Ld(e){const t=Rv(e);return e!==t&&t.styles?(t.styles.match(/^@layer\s+[^{]*$/)||(t.styles=`@layer global{${t.styles}}`),t):e}function ZC({styles:e,themeId:t,defaultTheme:a={}}){const i=Xp(a),n=t&&i[t]||i;let r=typeof e=="function"?e(n):e;return n.modularCssLayers&&(Array.isArray(r)?r=r.map(s=>Ld(typeof s=="function"?s(n):s)):r=Ld(r)),h.jsx(Sv,{styles:r})}const e2=["className","component"];function t2(e={}){const{themeId:t,defaultTheme:a,defaultClassName:i="MuiBox-root",generateClassName:n}=e,r=Pv("div",{shouldForwardProp:o=>o!=="theme"&&o!=="sx"&&o!=="as"})($l);return b.forwardRef(function(l,d){const c=Xp(a),f=Wp(l),{className:g,component:w="div"}=f,v=$(f,e2);return h.jsx(r,q({as:w,ref:d,className:G(g,n?n(i):i),theme:t&&c[t]||c},v))})}const a2=b.createContext(),ob=()=>{const e=b.useContext(a2);return e??!1};function us(){const e=Xp(Kp);return e[Ul]||e}const i2=e=>{let t;return e<1?t=5.11916*e**2:t=4.5*Math.log(e+1)+2,(t/100).toFixed(2)},Th=i2,n2=se("MuiBox",["root"]),r2=n2,s2=Uv(),o2=t2({themeId:Ul,defaultTheme:s2,defaultClassName:r2.root,generateClassName:Dp.generate}),l2=o2;function cs({props:e,states:t,muiFormControl:a}){return t.reduce((i,n)=>(i[n]=e[n],a&&typeof e[n]>"u"&&(i[n]=a[n]),i),{})}const d2=b.createContext(void 0),Jp=d2;function ps(){return b.useContext(Jp)}function u2(e){return pe("MuiFormLabel",e)}const c2=se("MuiFormLabel",["root","colorSecondary","focused","disabled","error","filled","required","asterisk"]),wr=c2,p2=["children","className","color","component","disabled","error","filled","focused","required"],f2=e=>{const{classes:t,color:a,focused:i,disabled:n,error:r,filled:s,required:o}=e,l={root:["root",`color${J(a)}`,n&&"disabled",r&&"error",s&&"filled",i&&"focused",o&&"required"],asterisk:["asterisk",r&&"error"]};return me(l,u2,t)},m2=z("label",{name:"MuiFormLabel",slot:"Root",overridesResolver:({ownerState:e},t)=>q({},t.root,e.color==="secondary"&&t.colorSecondary,e.filled&&t.filled)})(({theme:e,ownerState:t})=>q({color:(e.vars||e).palette.text.secondary},e.typography.body1,{lineHeight:"1.4375em",padding:0,position:"relative",[`&.${wr.focused}`]:{color:(e.vars||e).palette[t.color].main},[`&.${wr.disabled}`]:{color:(e.vars||e).palette.text.disabled},[`&.${wr.error}`]:{color:(e.vars||e).palette.error.main}})),h2=z("span",{name:"MuiFormLabel",slot:"Asterisk",overridesResolver:(e,t)=>t.asterisk})(({theme:e})=>({[`&.${wr.error}`]:{color:(e.vars||e).palette.error.main}})),g2=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiFormLabel"}),{children:n,className:r,component:s="label"}=i,o=$(i,p2),l=ps(),d=cs({props:i,muiFormControl:l,states:["color","required","focused","disabled","error","filled"]}),c=q({},i,{color:d.color||"primary",component:s,disabled:d.disabled,error:d.error,filled:d.filled,focused:d.focused,required:d.required}),f=f2(c);return h.jsxs(m2,q({as:s,ownerState:c,className:G(f.root,r),ref:a},o,{children:[n,d.required&&h.jsxs(h2,{ownerState:c,"aria-hidden":!0,className:f.asterisk,children:[" ","*"]})]}))}),y2=g2;function _2(e){return pe("MuiInputLabel",e)}se("MuiInputLabel",["root","focused","disabled","error","required","asterisk","formControl","sizeSmall","shrink","animated","standard","filled","outlined"]);const v2=["disableAnimation","margin","shrink","variant","className"],b2=e=>{const{classes:t,formControl:a,size:i,shrink:n,disableAnimation:r,variant:s,required:o}=e,l={root:["root",a&&"formControl",!r&&"animated",n&&"shrink",i&&i!=="normal"&&`size${J(i)}`,s],asterisk:[o&&"asterisk"]},d=me(l,_2,t);return q({},t,d)},w2=z(y2,{shouldForwardProp:e=>At(e)||e==="classes",name:"MuiInputLabel",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[{[`& .${wr.asterisk}`]:t.asterisk},t.root,a.formControl&&t.formControl,a.size==="small"&&t.sizeSmall,a.shrink&&t.shrink,!a.disableAnimation&&t.animated,a.focused&&t.focused,t[a.variant]]}})(({theme:e,ownerState:t})=>q({display:"block",transformOrigin:"top left",whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",maxWidth:"100%"},t.formControl&&{position:"absolute",left:0,top:0,transform:"translate(0, 20px) scale(1)"},t.size==="small"&&{transform:"translate(0, 17px) scale(1)"},t.shrink&&{transform:"translate(0, -1.5px) scale(0.75)",transformOrigin:"top left",maxWidth:"133%"},!t.disableAnimation&&{transition:e.transitions.create(["color","transform","max-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},t.variant==="filled"&&q({zIndex:1,pointerEvents:"none",transform:"translate(12px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},t.size==="small"&&{transform:"translate(12px, 13px) scale(1)"},t.shrink&&q({userSelect:"none",pointerEvents:"auto",transform:"translate(12px, 7px) scale(0.75)",maxWidth:"calc(133% - 24px)"},t.size==="small"&&{transform:"translate(12px, 4px) scale(0.75)"})),t.variant==="outlined"&&q({zIndex:1,pointerEvents:"none",transform:"translate(14px, 16px) scale(1)",maxWidth:"calc(100% - 24px)"},t.size==="small"&&{transform:"translate(14px, 9px) scale(1)"},t.shrink&&{userSelect:"none",pointerEvents:"auto",maxWidth:"calc(133% - 32px)",transform:"translate(14px, -9px) scale(0.75)"}))),k2=b.forwardRef(function(t,a){const i=he({name:"MuiInputLabel",props:t}),{disableAnimation:n=!1,shrink:r,className:s}=i,o=$(i,v2),l=ps();let d=r;typeof d>"u"&&l&&(d=l.filled||l.focused||l.adornedStart);const c=cs({props:i,muiFormControl:l,states:["size","variant","required","focused"]}),f=q({},i,{disableAnimation:n,formControl:l,shrink:d,size:c.size,variant:c.variant,required:c.required,focused:c.focused}),g=b2(f);return h.jsx(w2,q({"data-shrink":d,ownerState:f,ref:a,className:G(g.root,s)},o,{classes:g}))}),T2=k2,x2=b.createContext({}),mc=x2;function hc(e,t){return hc=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(a,i){return a.__proto__=i,a},hc(e,t)}function lb(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,hc(e,t)}const xh={disabled:!1},$o=Zt.createContext(null);var D2=function(t){return t.scrollTop},dr="unmounted",wi="exited",ki="entering",Yi="entered",gc="exiting",Ma=function(e){lb(t,e);function t(i,n){var r;r=e.call(this,i,n)||this;var s=n,o=s&&!s.isMounting?i.enter:i.appear,l;return r.appearStatus=null,i.in?o?(l=wi,r.appearStatus=ki):l=Yi:i.unmountOnExit||i.mountOnEnter?l=dr:l=wi,r.state={status:l},r.nextCallback=null,r}t.getDerivedStateFromProps=function(n,r){var s=n.in;return s&&r.status===dr?{status:wi}:null};var a=t.prototype;return a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(n){var r=null;if(n!==this.props){var s=this.state.status;this.props.in?s!==ki&&s!==Yi&&(r=ki):(s===ki||s===Yi)&&(r=gc)}this.updateStatus(!1,r)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var n=this.props.timeout,r,s,o;return r=s=o=n,n!=null&&typeof n!="number"&&(r=n.exit,s=n.enter,o=n.appear!==void 0?n.appear:s),{exit:r,enter:s,appear:o}},a.updateStatus=function(n,r){if(n===void 0&&(n=!1),r!==null)if(this.cancelNextCallback(),r===ki){if(this.props.unmountOnExit||this.props.mountOnEnter){var s=this.props.nodeRef?this.props.nodeRef.current:Is.findDOMNode(this);s&&D2(s)}this.performEnter(n)}else this.performExit();else this.props.unmountOnExit&&this.state.status===wi&&this.setState({status:dr})},a.performEnter=function(n){var r=this,s=this.props.enter,o=this.context?this.context.isMounting:n,l=this.props.nodeRef?[o]:[Is.findDOMNode(this),o],d=l[0],c=l[1],f=this.getTimeouts(),g=o?f.appear:f.enter;if(!n&&!s||xh.disabled){this.safeSetState({status:Yi},function(){r.props.onEntered(d)});return}this.props.onEnter(d,c),this.safeSetState({status:ki},function(){r.props.onEntering(d,c),r.onTransitionEnd(g,function(){r.safeSetState({status:Yi},function(){r.props.onEntered(d,c)})})})},a.performExit=function(){var n=this,r=this.props.exit,s=this.getTimeouts(),o=this.props.nodeRef?void 0:Is.findDOMNode(this);if(!r||xh.disabled){this.safeSetState({status:wi},function(){n.props.onExited(o)});return}this.props.onExit(o),this.safeSetState({status:gc},function(){n.props.onExiting(o),n.onTransitionEnd(s.exit,function(){n.safeSetState({status:wi},function(){n.props.onExited(o)})})})},a.cancelNextCallback=function(){this.nextCallback!==null&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(n,r){r=this.setNextCallback(r),this.setState(n,r)},a.setNextCallback=function(n){var r=this,s=!0;return this.nextCallback=function(o){s&&(s=!1,r.nextCallback=null,n(o))},this.nextCallback.cancel=function(){s=!1},this.nextCallback},a.onTransitionEnd=function(n,r){this.setNextCallback(r);var s=this.props.nodeRef?this.props.nodeRef.current:Is.findDOMNode(this),o=n==null&&!this.props.addEndListener;if(!s||o){setTimeout(this.nextCallback,0);return}if(this.props.addEndListener){var l=this.props.nodeRef?[this.nextCallback]:[s,this.nextCallback],d=l[0],c=l[1];this.props.addEndListener(d,c)}n!=null&&setTimeout(this.nextCallback,n)},a.render=function(){var n=this.state.status;if(n===dr)return null;var r=this.props,s=r.children;r.in,r.mountOnEnter,r.unmountOnExit,r.appear,r.enter,r.exit,r.timeout,r.addEndListener,r.onEnter,r.onEntering,r.onEntered,r.onExit,r.onExiting,r.onExited,r.nodeRef;var o=$(r,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]);return Zt.createElement($o.Provider,{value:null},typeof s=="function"?s(n,o):Zt.cloneElement(Zt.Children.only(s),o))},t}(Zt.Component);Ma.contextType=$o;Ma.propTypes={};function Ji(){}Ma.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Ji,onEntering:Ji,onEntered:Ji,onExit:Ji,onExiting:Ji,onExited:Ji};Ma.UNMOUNTED=dr;Ma.EXITED=wi;Ma.ENTERING=ki;Ma.ENTERED=Yi;Ma.EXITING=gc;const Yp=Ma;function q2(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Qp(e,t){var a=function(r){return t&&b.isValidElement(r)?t(r):r},i=Object.create(null);return e&&b.Children.map(e,function(n){return n}).forEach(function(n){i[n.key]=a(n)}),i}function C2(e,t){e=e||{},t=t||{};function a(c){return c in t?t[c]:e[c]}var i=Object.create(null),n=[];for(var r in e)r in t?n.length&&(i[r]=n,n=[]):n.push(r);var s,o={};for(var l in t){if(i[l])for(s=0;s<i[l].length;s++){var d=i[l][s];o[i[l][s]]=a(d)}o[l]=a(l)}for(s=0;s<n.length;s++)o[n[s]]=a(n[s]);return o}function Pi(e,t,a){return a[t]!=null?a[t]:e.props[t]}function S2(e,t){return Qp(e.children,function(a){return b.cloneElement(a,{onExited:t.bind(null,a),in:!0,appear:Pi(a,"appear",e),enter:Pi(a,"enter",e),exit:Pi(a,"exit",e)})})}function P2(e,t,a){var i=Qp(e.children),n=C2(t,i);return Object.keys(n).forEach(function(r){var s=n[r];if(b.isValidElement(s)){var o=r in t,l=r in i,d=t[r],c=b.isValidElement(d)&&!d.props.in;l&&(!o||c)?n[r]=b.cloneElement(s,{onExited:a.bind(null,s),in:!0,exit:Pi(s,"exit",e),enter:Pi(s,"enter",e)}):!l&&o&&!c?n[r]=b.cloneElement(s,{in:!1}):l&&o&&b.isValidElement(d)&&(n[r]=b.cloneElement(s,{onExited:a.bind(null,s),in:d.props.in,exit:Pi(s,"exit",e),enter:Pi(s,"enter",e)}))}}),n}var R2=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},A2={component:"div",childFactory:function(t){return t}},Zp=function(e){lb(t,e);function t(i,n){var r;r=e.call(this,i,n)||this;var s=r.handleExited.bind(q2(r));return r.state={contextValue:{isMounting:!0},handleExited:s,firstRender:!0},r}var a=t.prototype;return a.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},a.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(n,r){var s=r.children,o=r.handleExited,l=r.firstRender;return{children:l?S2(n,o):P2(n,s,o),firstRender:!1}},a.handleExited=function(n,r){var s=Qp(this.props.children);n.key in s||(n.props.onExited&&n.props.onExited(r),this.mounted&&this.setState(function(o){var l=q({},o.children);return delete l[n.key],{children:l}}))},a.render=function(){var n=this.props,r=n.component,s=n.childFactory,o=$(n,["component","childFactory"]),l=this.state.contextValue,d=R2(this.state.children).map(s);return delete o.appear,delete o.enter,delete o.exit,r===null?Zt.createElement($o.Provider,{value:l},d):Zt.createElement($o.Provider,{value:l},Zt.createElement(r,o,d))},t}(Zt.Component);Zp.propTypes={};Zp.defaultProps=A2;const I2=Zp;function E2(e){const{className:t,classes:a,pulsate:i=!1,rippleX:n,rippleY:r,rippleSize:s,in:o,onExited:l,timeout:d}=e,[c,f]=b.useState(!1),g=G(t,a.ripple,a.rippleVisible,i&&a.ripplePulsate),w={width:s,height:s,top:-(s/2)+r,left:-(s/2)+n},v=G(a.child,c&&a.childLeaving,i&&a.childPulsate);return!o&&!c&&f(!0),b.useEffect(()=>{if(!o&&l!=null){const y=setTimeout(l,d);return()=>{clearTimeout(y)}}},[l,o,d]),h.jsx("span",{className:g,style:w,children:h.jsx("span",{className:v})})}const N2=se("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),Ot=N2,j2=["center","classes","className"];let Kl=e=>e,Dh,qh,Ch,Sh;const yc=550,F2=80,O2=Fl(Dh||(Dh=Kl`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),M2=Fl(qh||(qh=Kl`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),L2=Fl(Ch||(Ch=Kl`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),B2=z("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),W2=z(E2,{name:"MuiTouchRipple",slot:"Ripple"})(Sh||(Sh=Kl`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),Ot.rippleVisible,O2,yc,({theme:e})=>e.transitions.easing.easeInOut,Ot.ripplePulsate,({theme:e})=>e.transitions.duration.shorter,Ot.child,Ot.childLeaving,M2,yc,({theme:e})=>e.transitions.easing.easeInOut,Ot.childPulsate,L2,({theme:e})=>e.transitions.easing.easeInOut),z2=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiTouchRipple"}),{center:n=!1,classes:r={},className:s}=i,o=$(i,j2),[l,d]=b.useState([]),c=b.useRef(0),f=b.useRef(null);b.useEffect(()=>{f.current&&(f.current(),f.current=null)},[l]);const g=b.useRef(!1),w=ev(),v=b.useRef(null),y=b.useRef(null),T=b.useCallback(_=>{const{pulsate:k,rippleX:D,rippleY:x,rippleSize:S,cb:R}=_;d(P=>[...P,h.jsx(W2,{classes:{ripple:G(r.ripple,Ot.ripple),rippleVisible:G(r.rippleVisible,Ot.rippleVisible),ripplePulsate:G(r.ripplePulsate,Ot.ripplePulsate),child:G(r.child,Ot.child),childLeaving:G(r.childLeaving,Ot.childLeaving),childPulsate:G(r.childPulsate,Ot.childPulsate)},timeout:yc,pulsate:k,rippleX:D,rippleY:x,rippleSize:S},c.current)]),c.current+=1,f.current=R},[r]),u=b.useCallback((_={},k={},D=()=>{})=>{const{pulsate:x=!1,center:S=n||k.pulsate,fakeElement:R=!1}=k;if((_==null?void 0:_.type)==="mousedown"&&g.current){g.current=!1;return}(_==null?void 0:_.type)==="touchstart"&&(g.current=!0);const P=R?null:y.current,A=P?P.getBoundingClientRect():{width:0,height:0,left:0,top:0};let I,E,j;if(S||_===void 0||_.clientX===0&&_.clientY===0||!_.clientX&&!_.touches)I=Math.round(A.width/2),E=Math.round(A.height/2);else{const{clientX:O,clientY:M}=_.touches&&_.touches.length>0?_.touches[0]:_;I=Math.round(O-A.left),E=Math.round(M-A.top)}if(S)j=Math.sqrt((2*A.width**2+A.height**2)/3),j%2===0&&(j+=1);else{const O=Math.max(Math.abs((P?P.clientWidth:0)-I),I)*2+2,M=Math.max(Math.abs((P?P.clientHeight:0)-E),E)*2+2;j=Math.sqrt(O**2+M**2)}_!=null&&_.touches?v.current===null&&(v.current=()=>{T({pulsate:x,rippleX:I,rippleY:E,rippleSize:j,cb:D})},w.start(F2,()=>{v.current&&(v.current(),v.current=null)})):T({pulsate:x,rippleX:I,rippleY:E,rippleSize:j,cb:D})},[n,T,w]),m=b.useCallback(()=>{u({},{pulsate:!0})},[u]),p=b.useCallback((_,k)=>{if(w.clear(),(_==null?void 0:_.type)==="touchend"&&v.current){v.current(),v.current=null,w.start(0,()=>{p(_,k)});return}v.current=null,d(D=>D.length>0?D.slice(1):D),f.current=k},[w]);return b.useImperativeHandle(a,()=>({pulsate:m,start:u,stop:p}),[m,u,p]),h.jsx(B2,q({className:G(Ot.root,r.root,s),ref:y},o,{children:h.jsx(I2,{component:null,exit:!0,children:l})}))}),$2=z2;function U2(e){return pe("MuiButtonBase",e)}const K2=se("MuiButtonBase",["root","disabled","focusVisible"]),V2=K2,G2=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],H2=e=>{const{disabled:t,focusVisible:a,focusVisibleClassName:i,classes:n}=e,s=me({root:["root",t&&"disabled",a&&"focusVisible"]},U2,n);return a&&i&&(s.root+=` ${i}`),s},X2=z("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${V2.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),J2=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiButtonBase"}),{action:n,centerRipple:r=!1,children:s,className:o,component:l="button",disabled:d=!1,disableRipple:c=!1,disableTouchRipple:f=!1,focusRipple:g=!1,LinkComponent:w="a",onBlur:v,onClick:y,onContextMenu:T,onDragLeave:u,onFocus:m,onFocusVisible:p,onKeyDown:_,onKeyUp:k,onMouseDown:D,onMouseLeave:x,onMouseUp:S,onTouchEnd:R,onTouchMove:P,onTouchStart:A,tabIndex:I=0,TouchRippleProps:E,touchRippleRef:j,type:O}=i,M=$(i,G2),L=b.useRef(null),C=b.useRef(null),F=Ke(C,j),{isFocusVisibleRef:B,onFocus:Y,onBlur:V,ref:ae}=tv(),[X,ue]=b.useState(!1);d&&X&&ue(!1),b.useImperativeHandle(n,()=>({focusVisible:()=>{ue(!0),L.current.focus()}}),[]);const[ie,Be]=b.useState(!1);b.useEffect(()=>{Be(!0)},[]);const It=ie&&!c&&!d;b.useEffect(()=>{X&&g&&!c&&ie&&C.current.pulsate()},[c,g,X,ie]);function Ee(K,ba,Wn=f){return Za(zn=>(ba&&ba(zn),!Wn&&C.current&&C.current[K](zn),!0))}const dt=Ee("start",D),oe=Ee("stop",T),De=Ee("stop",u),ee=Ee("stop",S),ce=Ee("stop",K=>{X&&K.preventDefault(),x&&x(K)}),we=Ee("start",A),La=Ee("stop",R),Et=Ee("stop",P),Nt=Ee("stop",K=>{V(K),B.current===!1&&ue(!1),v&&v(K)},!1),Ht=Za(K=>{L.current||(L.current=K.currentTarget),Y(K),B.current===!0&&(ue(!0),p&&p(K)),m&&m(K)}),jt=()=>{const K=L.current;return l&&l!=="button"&&!(K.tagName==="A"&&K.href)},qe=b.useRef(!1),_a=Za(K=>{g&&!qe.current&&X&&C.current&&K.key===" "&&(qe.current=!0,C.current.stop(K,()=>{C.current.start(K)})),K.target===K.currentTarget&&jt()&&K.key===" "&&K.preventDefault(),_&&_(K),K.target===K.currentTarget&&jt()&&K.key==="Enter"&&!d&&(K.preventDefault(),y&&y(K))}),ut=Za(K=>{g&&K.key===" "&&C.current&&X&&!K.defaultPrevented&&(qe.current=!1,C.current.stop(K,()=>{C.current.pulsate(K)})),k&&k(K),y&&K.target===K.currentTarget&&jt()&&K.key===" "&&!K.defaultPrevented&&y(K)});let ke=l;ke==="button"&&(M.href||M.to)&&(ke=w);const na={};ke==="button"?(na.type=O===void 0?"button":O,na.disabled=d):(!M.href&&!M.to&&(na.role="button"),d&&(na["aria-disabled"]=d));const Ba=Ke(a,ae,L),va=q({},i,{centerRipple:r,component:l,disabled:d,disableRipple:c,disableTouchRipple:f,focusRipple:g,tabIndex:I,focusVisible:X}),ge=H2(va);return h.jsxs(X2,q({as:ke,className:G(ge.root,o),ownerState:va,onBlur:Nt,onClick:y,onContextMenu:oe,onFocus:Ht,onKeyDown:_a,onKeyUp:ut,onMouseDown:dt,onMouseLeave:ce,onMouseUp:ee,onDragLeave:De,onTouchEnd:La,onTouchMove:Et,onTouchStart:we,ref:Ba,tabIndex:d?-1:I,type:O},na,M,{children:[s,It?h.jsx($2,q({ref:F,center:r},E)):null]}))}),db=J2;function Y2(e){return pe("MuiDivider",e)}const Q2=se("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),Ph=Q2,Z2=["absolute","children","className","component","flexItem","light","orientation","role","textAlign","variant"],eS=e=>{const{absolute:t,children:a,classes:i,flexItem:n,light:r,orientation:s,textAlign:o,variant:l}=e;return me({root:["root",t&&"absolute",l,r&&"light",s==="vertical"&&"vertical",n&&"flexItem",a&&"withChildren",a&&s==="vertical"&&"withChildrenVertical",o==="right"&&s!=="vertical"&&"textAlignRight",o==="left"&&s!=="vertical"&&"textAlignLeft"],wrapper:["wrapper",s==="vertical"&&"wrapperVertical"]},Y2,i)},tS=z("div",{name:"MuiDivider",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.absolute&&t.absolute,t[a.variant],a.light&&t.light,a.orientation==="vertical"&&t.vertical,a.flexItem&&t.flexItem,a.children&&t.withChildren,a.children&&a.orientation==="vertical"&&t.withChildrenVertical,a.textAlign==="right"&&a.orientation!=="vertical"&&t.textAlignRight,a.textAlign==="left"&&a.orientation!=="vertical"&&t.textAlignLeft]}})(({theme:e,ownerState:t})=>q({margin:0,flexShrink:0,borderWidth:0,borderStyle:"solid",borderColor:(e.vars||e).palette.divider,borderBottomWidth:"thin"},t.absolute&&{position:"absolute",bottom:0,left:0,width:"100%"},t.light&&{borderColor:e.vars?`rgba(${e.vars.palette.dividerChannel} / 0.08)`:qa(e.palette.divider,.08)},t.variant==="inset"&&{marginLeft:72},t.variant==="middle"&&t.orientation==="horizontal"&&{marginLeft:e.spacing(2),marginRight:e.spacing(2)},t.variant==="middle"&&t.orientation==="vertical"&&{marginTop:e.spacing(1),marginBottom:e.spacing(1)},t.orientation==="vertical"&&{height:"100%",borderBottomWidth:0,borderRightWidth:"thin"},t.flexItem&&{alignSelf:"stretch",height:"auto"}),({ownerState:e})=>q({},e.children&&{display:"flex",whiteSpace:"nowrap",textAlign:"center",border:0,borderTopStyle:"solid",borderLeftStyle:"solid","&::before, &::after":{content:'""',alignSelf:"center"}}),({theme:e,ownerState:t})=>q({},t.children&&t.orientation!=="vertical"&&{"&::before, &::after":{width:"100%",borderTop:`thin solid ${(e.vars||e).palette.divider}`,borderTopStyle:"inherit"}}),({theme:e,ownerState:t})=>q({},t.children&&t.orientation==="vertical"&&{flexDirection:"column","&::before, &::after":{height:"100%",borderLeft:`thin solid ${(e.vars||e).palette.divider}`,borderLeftStyle:"inherit"}}),({ownerState:e})=>q({},e.textAlign==="right"&&e.orientation!=="vertical"&&{"&::before":{width:"90%"},"&::after":{width:"10%"}},e.textAlign==="left"&&e.orientation!=="vertical"&&{"&::before":{width:"10%"},"&::after":{width:"90%"}})),aS=z("span",{name:"MuiDivider",slot:"Wrapper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.wrapper,a.orientation==="vertical"&&t.wrapperVertical]}})(({theme:e,ownerState:t})=>q({display:"inline-block",paddingLeft:`calc(${e.spacing(1)} * 1.2)`,paddingRight:`calc(${e.spacing(1)} * 1.2)`},t.orientation==="vertical"&&{paddingTop:`calc(${e.spacing(1)} * 1.2)`,paddingBottom:`calc(${e.spacing(1)} * 1.2)`})),ub=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDivider"}),{absolute:n=!1,children:r,className:s,component:o=r?"div":"hr",flexItem:l=!1,light:d=!1,orientation:c="horizontal",role:f=o!=="hr"?"separator":void 0,textAlign:g="center",variant:w="fullWidth"}=i,v=$(i,Z2),y=q({},i,{absolute:n,component:o,flexItem:l,light:d,orientation:c,role:f,textAlign:g,variant:w}),T=eS(y);return h.jsx(tS,q({as:o,className:G(T.root,s),role:f,ref:a,ownerState:y},v,{children:r?h.jsx(aS,{className:T.wrapper,ownerState:y,children:r}):null}))});ub.muiSkipListHighlight=!0;const Rh=ub,iS=se("MuiListItemIcon",["root","alignItemsFlexStart"]),Ah=iS;function nS(e){return pe("MuiTypography",e)}se("MuiTypography",["root","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","button","caption","overline","alignLeft","alignRight","alignCenter","alignJustify","noWrap","gutterBottom","paragraph"]);const rS=["align","className","component","gutterBottom","noWrap","paragraph","variant","variantMapping"],sS=e=>{const{align:t,gutterBottom:a,noWrap:i,paragraph:n,variant:r,classes:s}=e,o={root:["root",r,e.align!=="inherit"&&`align${J(t)}`,a&&"gutterBottom",i&&"noWrap",n&&"paragraph"]};return me(o,nS,s)},oS=z("span",{name:"MuiTypography",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.variant&&t[a.variant],a.align!=="inherit"&&t[`align${J(a.align)}`],a.noWrap&&t.noWrap,a.gutterBottom&&t.gutterBottom,a.paragraph&&t.paragraph]}})(({theme:e,ownerState:t})=>q({margin:0},t.variant==="inherit"&&{font:"inherit"},t.variant!=="inherit"&&e.typography[t.variant],t.align!=="inherit"&&{textAlign:t.align},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.paragraph&&{marginBottom:16})),Ih={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",inherit:"p"},lS={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"},dS=e=>lS[e]||e,uS=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiTypography"}),n=dS(i.color),r=Wp(q({},i,{color:n})),{align:s="inherit",className:o,component:l,gutterBottom:d=!1,noWrap:c=!1,paragraph:f=!1,variant:g="body1",variantMapping:w=Ih}=r,v=$(r,rS),y=q({},r,{align:s,color:n,className:o,component:l,gutterBottom:d,noWrap:c,paragraph:f,variant:g,variantMapping:w}),T=l||(f?"p":w[g]||Ih[g])||"span",u=sS(y);return h.jsx(oS,q({as:T,ref:a,ownerState:y,className:G(u.root,o)},v))}),cb=uS,cS=se("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]),Eh=cS;function pS(e){return pe("MuiMenuItem",e)}const fS=se("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),Zn=fS,mS=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex","className"],hS=(e,t)=>{const{ownerState:a}=e;return[t.root,a.dense&&t.dense,a.divider&&t.divider,!a.disableGutters&&t.gutters]},gS=e=>{const{disabled:t,dense:a,divider:i,disableGutters:n,selected:r,classes:s}=e,l=me({root:["root",a&&"dense",t&&"disabled",!n&&"gutters",i&&"divider",r&&"selected"]},pS,s);return q({},s,l)},yS=z(db,{shouldForwardProp:e=>At(e)||e==="classes",name:"MuiMenuItem",slot:"Root",overridesResolver:hS})(({theme:e,ownerState:t})=>q({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Zn.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:qa(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Zn.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:qa(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Zn.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:qa(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:qa(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${Zn.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Zn.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`& + .${Ph.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${Ph.inset}`]:{marginLeft:52},[`& .${Eh.root}`]:{marginTop:0,marginBottom:0},[`& .${Eh.inset}`]:{paddingLeft:36},[`& .${Ah.root}`]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&q({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${Ah.root} svg`]:{fontSize:"1.25rem"}}))),_S=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiMenuItem"}),{autoFocus:n=!1,component:r="li",dense:s=!1,divider:o=!1,disableGutters:l=!1,focusVisibleClassName:d,role:c="menuitem",tabIndex:f,className:g}=i,w=$(i,mS),v=b.useContext(mc),y=b.useMemo(()=>({dense:s||v.dense||!1,disableGutters:l}),[v.dense,s,l]),T=b.useRef(null);Ia(()=>{n&&T.current&&T.current.focus()},[n]);const u=q({},i,{dense:y.dense,divider:o,disableGutters:l}),m=gS(i),p=Ke(T,a);let _;return i.disabled||(_=f!==void 0?f:-1),h.jsx(mc.Provider,{value:y,children:h.jsx(yS,q({ref:p,role:c,tabIndex:_,component:r,focusVisibleClassName:G(m.focusVisible,d),className:G(m.root,g)},w,{ownerState:u,classes:m}))})}),Bd=_S;function Nh(e){return e!=null&&!(Array.isArray(e)&&e.length===0)}function Uo(e,t=!1){return e&&(Nh(e.value)&&e.value!==""||t&&Nh(e.defaultValue)&&e.defaultValue!=="")}function vS(e){return e.startAdornment}function bS(e){return pe("MuiFormControl",e)}se("MuiFormControl",["root","marginNone","marginNormal","marginDense","fullWidth","disabled"]);const wS=["children","className","color","component","disabled","error","focused","fullWidth","hiddenLabel","margin","required","size","variant"],kS=e=>{const{classes:t,margin:a,fullWidth:i}=e,n={root:["root",a!=="none"&&`margin${J(a)}`,i&&"fullWidth"]};return me(n,bS,t)},TS=z("div",{name:"MuiFormControl",slot:"Root",overridesResolver:({ownerState:e},t)=>q({},t.root,t[`margin${J(e.margin)}`],e.fullWidth&&t.fullWidth)})(({ownerState:e})=>q({display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},e.margin==="normal"&&{marginTop:16,marginBottom:8},e.margin==="dense"&&{marginTop:8,marginBottom:4},e.fullWidth&&{width:"100%"})),xS=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiFormControl"}),{children:n,className:r,color:s="primary",component:o="div",disabled:l=!1,error:d=!1,focused:c,fullWidth:f=!1,hiddenLabel:g=!1,margin:w="none",required:v=!1,size:y="medium",variant:T="outlined"}=i,u=$(i,wS),m=q({},i,{color:s,component:o,disabled:l,error:d,fullWidth:f,hiddenLabel:g,margin:w,required:v,size:y,variant:T}),p=kS(m),[_,k]=b.useState(()=>{let E=!1;return n&&b.Children.forEach(n,j=>{if(!to(j,["Input","Select"]))return;const O=to(j,["Select"])?j.props.input:j;O&&vS(O.props)&&(E=!0)}),E}),[D,x]=b.useState(()=>{let E=!1;return n&&b.Children.forEach(n,j=>{to(j,["Input","Select"])&&(Uo(j.props,!0)||Uo(j.props.inputProps,!0))&&(E=!0)}),E}),[S,R]=b.useState(!1);l&&S&&R(!1);const P=c!==void 0&&!l?c:S;let A;const I=b.useMemo(()=>({adornedStart:_,setAdornedStart:k,color:s,disabled:l,error:d,filled:D,focused:P,fullWidth:f,hiddenLabel:g,size:y,onBlur:()=>{R(!1)},onEmpty:()=>{x(!1)},onFilled:()=>{x(!0)},onFocus:()=>{R(!0)},registerEffect:A,required:v,variant:T}),[_,s,l,d,D,P,f,g,A,v,y,T]);return h.jsx(Jp.Provider,{value:I,children:h.jsx(TS,q({as:o,ownerState:m,className:G(p.root,r),ref:a},u,{children:n}))})}),DS=xS;function qS(e){return pe("MuiList",e)}se("MuiList",["root","padding","dense","subheader"]);const CS=["children","className","component","dense","disablePadding","subheader"],SS=e=>{const{classes:t,disablePadding:a,dense:i,subheader:n}=e;return me({root:["root",!a&&"padding",i&&"dense",n&&"subheader"]},qS,t)},PS=z("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,!a.disablePadding&&t.padding,a.dense&&t.dense,a.subheader&&t.subheader]}})(({ownerState:e})=>q({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0})),RS=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiList"}),{children:n,className:r,component:s="ul",dense:o=!1,disablePadding:l=!1,subheader:d}=i,c=$(i,CS),f=b.useMemo(()=>({dense:o}),[o]),g=q({},i,{component:s,dense:o,disablePadding:l}),w=SS(g);return h.jsx(mc.Provider,{value:f,children:h.jsxs(PS,q({as:s,className:G(w.root,r),ref:a,ownerState:g},c,{children:[d,n]}))})}),AS=RS,IS=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function Wd(e,t,a){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:a?null:e.firstChild}function jh(e,t,a){return e===t?a?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:a?null:e.lastChild}function pb(e,t){if(t===void 0)return!0;let a=e.innerText;return a===void 0&&(a=e.textContent),a=a.trim().toLowerCase(),a.length===0?!1:t.repeating?a[0]===t.keys[0]:a.indexOf(t.keys.join(""))===0}function er(e,t,a,i,n,r){let s=!1,o=n(e,t,t?a:!1);for(;o;){if(o===e.firstChild){if(s)return!1;s=!0}const l=i?!1:o.disabled||o.getAttribute("aria-disabled")==="true";if(!o.hasAttribute("tabindex")||!pb(o,r)||l)o=n(e,o,a);else return o.focus(),!0}return!1}const ES=b.forwardRef(function(t,a){const{actions:i,autoFocus:n=!1,autoFocusItem:r=!1,children:s,className:o,disabledItemsFocusable:l=!1,disableListWrap:d=!1,onKeyDown:c,variant:f="selectedMenu"}=t,g=$(t,IS),w=b.useRef(null),v=b.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});Ia(()=>{n&&w.current.focus()},[n]),b.useImperativeHandle(i,()=>({adjustStyleForScrollbar:(p,{direction:_})=>{const k=!w.current.style.width;if(p.clientHeight<w.current.clientHeight&&k){const D=`${av(yt(p))}px`;w.current.style[_==="rtl"?"paddingLeft":"paddingRight"]=D,w.current.style.width=`calc(100% + ${D})`}return w.current}}),[]);const y=p=>{const _=w.current,k=p.key,D=yt(_).activeElement;if(k==="ArrowDown")p.preventDefault(),er(_,D,d,l,Wd);else if(k==="ArrowUp")p.preventDefault(),er(_,D,d,l,jh);else if(k==="Home")p.preventDefault(),er(_,null,d,l,Wd);else if(k==="End")p.preventDefault(),er(_,null,d,l,jh);else if(k.length===1){const x=v.current,S=k.toLowerCase(),R=performance.now();x.keys.length>0&&(R-x.lastTime>500?(x.keys=[],x.repeating=!0,x.previousKeyMatched=!0):x.repeating&&S!==x.keys[0]&&(x.repeating=!1)),x.lastTime=R,x.keys.push(S);const P=D&&!x.repeating&&pb(D,x);x.previousKeyMatched&&(P||er(_,D,!1,l,Wd,x))?p.preventDefault():x.previousKeyMatched=!1}c&&c(p)},T=Ke(w,a);let u=-1;b.Children.forEach(s,(p,_)=>{if(!b.isValidElement(p)){u===_&&(u+=1,u>=s.length&&(u=-1));return}p.props.disabled||(f==="selectedMenu"&&p.props.selected||u===-1)&&(u=_),u===_&&(p.props.disabled||p.props.muiSkipListHighlight||p.type.muiSkipListHighlight)&&(u+=1,u>=s.length&&(u=-1))});const m=b.Children.map(s,(p,_)=>{if(_===u){const k={};return r&&(k.autoFocus=!0),p.props.tabIndex===void 0&&f==="selectedMenu"&&(k.tabIndex=0),b.cloneElement(p,k)}return p});return h.jsx(AS,q({role:"menu",ref:T,className:o,onKeyDown:y,tabIndex:n?0:-1},g,{children:m}))}),NS=ES,ef=e=>e.scrollTop;function Pn(e,t){var a,i;const{timeout:n,easing:r,style:s={}}=e;return{duration:(a=s.transitionDuration)!=null?a:typeof n=="number"?n:n[t.mode]||0,easing:(i=s.transitionTimingFunction)!=null?i:typeof r=="object"?r[t.mode]:r,delay:s.transitionDelay}}const jS=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function _c(e){return`scale(${e}, ${e**2})`}const FS={entering:{opacity:1,transform:_c(1)},entered:{opacity:1,transform:"none"}},zd=typeof navigator<"u"&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),fb=b.forwardRef(function(t,a){const{addEndListener:i,appear:n=!0,children:r,easing:s,in:o,onEnter:l,onEntered:d,onEntering:c,onExit:f,onExited:g,onExiting:w,style:v,timeout:y="auto",TransitionComponent:T=Yp}=t,u=$(t,jS),m=ev(),p=b.useRef(),_=us(),k=b.useRef(null),D=Ke(k,Fn(r),a),x=O=>M=>{if(O){const L=k.current;M===void 0?O(L):O(L,M)}},S=x(c),R=x((O,M)=>{ef(O);const{duration:L,delay:C,easing:F}=Pn({style:v,timeout:y,easing:s},{mode:"enter"});let B;y==="auto"?(B=_.transitions.getAutoHeightDuration(O.clientHeight),p.current=B):B=L,O.style.transition=[_.transitions.create("opacity",{duration:B,delay:C}),_.transitions.create("transform",{duration:zd?B:B*.666,delay:C,easing:F})].join(","),l&&l(O,M)}),P=x(d),A=x(w),I=x(O=>{const{duration:M,delay:L,easing:C}=Pn({style:v,timeout:y,easing:s},{mode:"exit"});let F;y==="auto"?(F=_.transitions.getAutoHeightDuration(O.clientHeight),p.current=F):F=M,O.style.transition=[_.transitions.create("opacity",{duration:F,delay:L}),_.transitions.create("transform",{duration:zd?F:F*.666,delay:zd?L:L||F*.333,easing:C})].join(","),O.style.opacity=0,O.style.transform=_c(.75),f&&f(O)}),E=x(g),j=O=>{y==="auto"&&m.start(p.current||0,O),i&&i(k.current,O)};return h.jsx(T,q({appear:n,in:o,nodeRef:k,onEnter:R,onEntered:P,onEntering:S,onExit:I,onExited:E,onExiting:A,addEndListener:j,timeout:y==="auto"?null:y},u,{children:(O,M)=>b.cloneElement(r,q({style:q({opacity:0,transform:_c(.75),visibility:O==="exited"&&!o?"hidden":void 0},FS[O],v,r.props.style),ref:D},M))}))});fb.muiSupportAuto=!0;const OS=fb;function MS(e){const t=yt(e);return t.body===e?ha(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}function kr(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Fh(e){return parseInt(ha(e).getComputedStyle(e).paddingRight,10)||0}function LS(e){const a=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(e.tagName)!==-1,i=e.tagName==="INPUT"&&e.getAttribute("type")==="hidden";return a||i}function Oh(e,t,a,i,n){const r=[t,a,...i];[].forEach.call(e.children,s=>{const o=r.indexOf(s)===-1,l=!LS(s);o&&l&&kr(s,n)})}function $d(e,t){let a=-1;return e.some((i,n)=>t(i)?(a=n,!0):!1),a}function BS(e,t){const a=[],i=e.container;if(!t.disableScrollLock){if(MS(i)){const s=av(yt(i));a.push({value:i.style.paddingRight,property:"padding-right",el:i}),i.style.paddingRight=`${Fh(i)+s}px`;const o=yt(i).querySelectorAll(".mui-fixed");[].forEach.call(o,l=>{a.push({value:l.style.paddingRight,property:"padding-right",el:l}),l.style.paddingRight=`${Fh(l)+s}px`})}let r;if(i.parentNode instanceof DocumentFragment)r=yt(i).body;else{const s=i.parentElement,o=ha(i);r=(s==null?void 0:s.nodeName)==="HTML"&&o.getComputedStyle(s).overflowY==="scroll"?s:i}a.push({value:r.style.overflow,property:"overflow",el:r},{value:r.style.overflowX,property:"overflow-x",el:r},{value:r.style.overflowY,property:"overflow-y",el:r}),r.style.overflow="hidden"}return()=>{a.forEach(({value:r,el:s,property:o})=>{r?s.style.setProperty(o,r):s.style.removeProperty(o)})}}function WS(e){const t=[];return[].forEach.call(e.children,a=>{a.getAttribute("aria-hidden")==="true"&&t.push(a)}),t}class zS{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(t,a){let i=this.modals.indexOf(t);if(i!==-1)return i;i=this.modals.length,this.modals.push(t),t.modalRef&&kr(t.modalRef,!1);const n=WS(a);Oh(a,t.mount,t.modalRef,n,!0);const r=$d(this.containers,s=>s.container===a);return r!==-1?(this.containers[r].modals.push(t),i):(this.containers.push({modals:[t],container:a,restore:null,hiddenSiblings:n}),i)}mount(t,a){const i=$d(this.containers,r=>r.modals.indexOf(t)!==-1),n=this.containers[i];n.restore||(n.restore=BS(n,a))}remove(t,a=!0){const i=this.modals.indexOf(t);if(i===-1)return i;const n=$d(this.containers,s=>s.modals.indexOf(t)!==-1),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(t),1),this.modals.splice(i,1),r.modals.length===0)r.restore&&r.restore(),t.modalRef&&kr(t.modalRef,a),Oh(r.container,t.mount,t.modalRef,r.hiddenSiblings,!1),this.containers.splice(n,1);else{const s=r.modals[r.modals.length-1];s.modalRef&&kr(s.modalRef,!1)}return i}isTopModal(t){return this.modals.length>0&&this.modals[this.modals.length-1]===t}}const $S=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function US(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?e.contentEditable==="true"||(e.nodeName==="AUDIO"||e.nodeName==="VIDEO"||e.nodeName==="DETAILS")&&e.getAttribute("tabindex")===null?0:e.tabIndex:t}function KS(e){if(e.tagName!=="INPUT"||e.type!=="radio"||!e.name)return!1;const t=i=>e.ownerDocument.querySelector(`input[type="radio"]${i}`);let a=t(`[name="${e.name}"]:checked`);return a||(a=t(`[name="${e.name}"]`)),a!==e}function VS(e){return!(e.disabled||e.tagName==="INPUT"&&e.type==="hidden"||KS(e))}function GS(e){const t=[],a=[];return Array.from(e.querySelectorAll($S)).forEach((i,n)=>{const r=US(i);r===-1||!VS(i)||(r===0?t.push(i):a.push({documentOrder:n,tabIndex:r,node:i}))}),a.sort((i,n)=>i.tabIndex===n.tabIndex?i.documentOrder-n.documentOrder:i.tabIndex-n.tabIndex).map(i=>i.node).concat(t)}function HS(){return!0}function XS(e){const{children:t,disableAutoFocus:a=!1,disableEnforceFocus:i=!1,disableRestoreFocus:n=!1,getTabbable:r=GS,isEnabled:s=HS,open:o}=e,l=b.useRef(!1),d=b.useRef(null),c=b.useRef(null),f=b.useRef(null),g=b.useRef(null),w=b.useRef(!1),v=b.useRef(null),y=Ke(Fn(t),v),T=b.useRef(null);b.useEffect(()=>{!o||!v.current||(w.current=!a)},[a,o]),b.useEffect(()=>{if(!o||!v.current)return;const p=yt(v.current);return v.current.contains(p.activeElement)||(v.current.hasAttribute("tabIndex")||v.current.setAttribute("tabIndex","-1"),w.current&&v.current.focus()),()=>{n||(f.current&&f.current.focus&&(l.current=!0,f.current.focus()),f.current=null)}},[o]),b.useEffect(()=>{if(!o||!v.current)return;const p=yt(v.current),_=x=>{T.current=x,!(i||!s()||x.key!=="Tab")&&p.activeElement===v.current&&x.shiftKey&&(l.current=!0,c.current&&c.current.focus())},k=()=>{const x=v.current;if(x===null)return;if(!p.hasFocus()||!s()||l.current){l.current=!1;return}if(x.contains(p.activeElement)||i&&p.activeElement!==d.current&&p.activeElement!==c.current)return;if(p.activeElement!==g.current)g.current=null;else if(g.current!==null)return;if(!w.current)return;let S=[];if((p.activeElement===d.current||p.activeElement===c.current)&&(S=r(v.current)),S.length>0){var R,P;const A=!!((R=T.current)!=null&&R.shiftKey&&((P=T.current)==null?void 0:P.key)==="Tab"),I=S[0],E=S[S.length-1];typeof I!="string"&&typeof E!="string"&&(A?E.focus():I.focus())}else x.focus()};p.addEventListener("focusin",k),p.addEventListener("keydown",_,!0);const D=setInterval(()=>{p.activeElement&&p.activeElement.tagName==="BODY"&&k()},50);return()=>{clearInterval(D),p.removeEventListener("focusin",k),p.removeEventListener("keydown",_,!0)}},[a,i,n,s,o,r]);const u=p=>{f.current===null&&(f.current=p.relatedTarget),w.current=!0,g.current=p.target;const _=t.props.onFocus;_&&_(p)},m=p=>{f.current===null&&(f.current=p.relatedTarget),w.current=!0};return h.jsxs(b.Fragment,{children:[h.jsx("div",{tabIndex:o?0:-1,onFocus:m,ref:d,"data-testid":"sentinelStart"}),b.cloneElement(t,{ref:y,onFocus:u}),h.jsx("div",{tabIndex:o?0:-1,onFocus:m,ref:c,"data-testid":"sentinelEnd"})]})}function JS(e){return typeof e=="function"?e():e}const YS=b.forwardRef(function(t,a){const{children:i,container:n,disablePortal:r=!1}=t,[s,o]=b.useState(null),l=Ke(b.isValidElement(i)?Fn(i):null,a);if(Ia(()=>{r||o(JS(n)||document.body)},[n,r]),Ia(()=>{if(s&&!r)return Fo(a,s),()=>{Fo(a,null)}},[a,s,r]),r){if(b.isValidElement(i)){const d={ref:l};return b.cloneElement(i,d)}return h.jsx(b.Fragment,{children:i})}return h.jsx(b.Fragment,{children:s&&_p.createPortal(i,s)})}),QS=YS,ZS=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],eP={entering:{opacity:1},entered:{opacity:1}},tP=b.forwardRef(function(t,a){const i=us(),n={enter:i.transitions.duration.enteringScreen,exit:i.transitions.duration.leavingScreen},{addEndListener:r,appear:s=!0,children:o,easing:l,in:d,onEnter:c,onEntered:f,onEntering:g,onExit:w,onExited:v,onExiting:y,style:T,timeout:u=n,TransitionComponent:m=Yp}=t,p=$(t,ZS),_=b.useRef(null),k=Ke(_,Fn(o),a),D=j=>O=>{if(j){const M=_.current;O===void 0?j(M):j(M,O)}},x=D(g),S=D((j,O)=>{ef(j);const M=Pn({style:T,timeout:u,easing:l},{mode:"enter"});j.style.webkitTransition=i.transitions.create("opacity",M),j.style.transition=i.transitions.create("opacity",M),c&&c(j,O)}),R=D(f),P=D(y),A=D(j=>{const O=Pn({style:T,timeout:u,easing:l},{mode:"exit"});j.style.webkitTransition=i.transitions.create("opacity",O),j.style.transition=i.transitions.create("opacity",O),w&&w(j)}),I=D(v),E=j=>{r&&r(_.current,j)};return h.jsx(m,q({appear:s,in:d,nodeRef:_,onEnter:S,onEntered:R,onEntering:x,onExit:A,onExited:I,onExiting:P,addEndListener:E,timeout:u},p,{children:(j,O)=>b.cloneElement(o,q({style:q({opacity:0,visibility:j==="exited"&&!d?"hidden":void 0},eP[j],T,o.props.style),ref:k},O))}))}),mb=tP;function aP(e){return pe("MuiBackdrop",e)}se("MuiBackdrop",["root","invisible"]);const iP=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],nP=e=>{const{classes:t,invisible:a}=e;return me({root:["root",a&&"invisible"]},aP,t)},rP=z("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.invisible&&t.invisible]}})(({ownerState:e})=>q({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"})),sP=b.forwardRef(function(t,a){var i,n,r;const s=he({props:t,name:"MuiBackdrop"}),{children:o,className:l,component:d="div",components:c={},componentsProps:f={},invisible:g=!1,open:w,slotProps:v={},slots:y={},TransitionComponent:T=mb,transitionDuration:u}=s,m=$(s,iP),p=q({},s,{component:d,invisible:g}),_=nP(p),k=(i=v.root)!=null?i:f.root;return h.jsx(T,q({in:w,timeout:u},m,{children:h.jsx(rP,q({"aria-hidden":!0},k,{as:(n=(r=y.root)!=null?r:c.Root)!=null?n:d,className:G(_.root,l,k==null?void 0:k.className),ownerState:q({},p,k==null?void 0:k.ownerState),classes:_,ref:a,children:o}))}))}),hb=sP;function oP(e){return typeof e=="function"?e():e}function lP(e){return e?e.props.hasOwnProperty("in"):!1}const dP=new zS;function uP(e){const{container:t,disableEscapeKeyDown:a=!1,disableScrollLock:i=!1,manager:n=dP,closeAfterTransition:r=!1,onTransitionEnter:s,onTransitionExited:o,children:l,onClose:d,open:c,rootRef:f}=e,g=b.useRef({}),w=b.useRef(null),v=b.useRef(null),y=Ke(v,f),[T,u]=b.useState(!c),m=lP(l);let p=!0;(e["aria-hidden"]==="false"||e["aria-hidden"]===!1)&&(p=!1);const _=()=>yt(w.current),k=()=>(g.current.modalRef=v.current,g.current.mount=w.current,g.current),D=()=>{n.mount(k(),{disableScrollLock:i}),v.current&&(v.current.scrollTop=0)},x=Za(()=>{const M=oP(t)||_().body;n.add(k(),M),v.current&&D()}),S=b.useCallback(()=>n.isTopModal(k()),[n]),R=Za(M=>{w.current=M,M&&(c&&S()?D():v.current&&kr(v.current,p))}),P=b.useCallback(()=>{n.remove(k(),p)},[p,n]);b.useEffect(()=>()=>{P()},[P]),b.useEffect(()=>{c?x():(!m||!r)&&P()},[c,P,m,r,x]);const A=M=>L=>{var C;(C=M.onKeyDown)==null||C.call(M,L),!(L.key!=="Escape"||L.which===229||!S())&&(a||(L.stopPropagation(),d&&d(L,"escapeKeyDown")))},I=M=>L=>{var C;(C=M.onClick)==null||C.call(M,L),L.target===L.currentTarget&&d&&d(L,"backdropClick")};return{getRootProps:(M={})=>{const L=rv(e);delete L.onTransitionEnter,delete L.onTransitionExited;const C=q({},L,M);return q({role:"presentation"},C,{onKeyDown:A(C),ref:y})},getBackdropProps:(M={})=>{const L=M;return q({"aria-hidden":!0},L,{onClick:I(L),open:c})},getTransitionProps:()=>{const M=()=>{u(!1),s&&s()},L=()=>{u(!0),o&&o(),r&&P()};return{onEnter:Yu(M,l==null?void 0:l.props.onEnter),onExited:Yu(L,l==null?void 0:l.props.onExited)}},rootRef:y,portalRef:R,isTopModal:S,exited:T,hasTransition:m}}function cP(e){return pe("MuiModal",e)}se("MuiModal",["root","hidden","backdrop"]);const pP=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","container","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","onTransitionEnter","onTransitionExited","open","slotProps","slots","theme"],fP=e=>{const{open:t,exited:a,classes:i}=e;return me({root:["root",!t&&a&&"hidden"],backdrop:["backdrop"]},cP,i)},mP=z("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,!a.open&&a.exited&&t.hidden]}})(({theme:e,ownerState:t})=>q({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"})),hP=z(hb,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),gP=b.forwardRef(function(t,a){var i,n,r,s,o,l;const d=he({name:"MuiModal",props:t}),{BackdropComponent:c=hP,BackdropProps:f,className:g,closeAfterTransition:w=!1,children:v,container:y,component:T,components:u={},componentsProps:m={},disableAutoFocus:p=!1,disableEnforceFocus:_=!1,disableEscapeKeyDown:k=!1,disablePortal:D=!1,disableRestoreFocus:x=!1,disableScrollLock:S=!1,hideBackdrop:R=!1,keepMounted:P=!1,onBackdropClick:A,open:I,slotProps:E,slots:j}=d,O=$(d,pP),M=q({},d,{closeAfterTransition:w,disableAutoFocus:p,disableEnforceFocus:_,disableEscapeKeyDown:k,disablePortal:D,disableRestoreFocus:x,disableScrollLock:S,hideBackdrop:R,keepMounted:P}),{getRootProps:L,getBackdropProps:C,getTransitionProps:F,portalRef:B,isTopModal:Y,exited:V,hasTransition:ae}=uP(q({},M,{rootRef:a})),X=q({},M,{exited:V}),ue=fP(X),ie={};if(v.props.tabIndex===void 0&&(ie.tabIndex="-1"),ae){const{onEnter:ee,onExited:ce}=F();ie.onEnter=ee,ie.onExited=ce}const Be=(i=(n=j==null?void 0:j.root)!=null?n:u.Root)!=null?i:mP,It=(r=(s=j==null?void 0:j.backdrop)!=null?s:u.Backdrop)!=null?r:c,Ee=(o=E==null?void 0:E.root)!=null?o:m.root,dt=(l=E==null?void 0:E.backdrop)!=null?l:m.backdrop,oe=Cn({elementType:Be,externalSlotProps:Ee,externalForwardedProps:O,getSlotProps:L,additionalProps:{ref:a,as:T},ownerState:X,className:G(g,Ee==null?void 0:Ee.className,ue==null?void 0:ue.root,!X.open&&X.exited&&(ue==null?void 0:ue.hidden))}),De=Cn({elementType:It,externalSlotProps:dt,additionalProps:f,getSlotProps:ee=>C(q({},ee,{onClick:ce=>{A&&A(ce),ee!=null&&ee.onClick&&ee.onClick(ce)}})),className:G(dt==null?void 0:dt.className,f==null?void 0:f.className,ue==null?void 0:ue.backdrop),ownerState:X});return!P&&!I&&(!ae||V)?null:h.jsx(QS,{ref:B,container:y,disablePortal:D,children:h.jsxs(Be,q({},oe,{children:[!R&&c?h.jsx(It,q({},De)):null,h.jsx(XS,{disableEnforceFocus:_,disableAutoFocus:p,disableRestoreFocus:x,isEnabled:Y,open:I,children:b.cloneElement(v,ie)})]}))})}),tf=gP;function yP(e){return pe("MuiPaper",e)}se("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const _P=["className","component","elevation","square","variant"],vP=e=>{const{square:t,elevation:a,variant:i,classes:n}=e,r={root:["root",i,!t&&"rounded",i==="elevation"&&`elevation${a}`]};return me(r,yP,n)},bP=z("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,t[a.variant],!a.square&&t.rounded,a.variant==="elevation"&&t[`elevation${a.elevation}`]]}})(({theme:e,ownerState:t})=>{var a;return q({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},t.variant==="outlined"&&{border:`1px solid ${(e.vars||e).palette.divider}`},t.variant==="elevation"&&q({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&e.palette.mode==="dark"&&{backgroundImage:`linear-gradient(${qa("#fff",Th(t.elevation))}, ${qa("#fff",Th(t.elevation))})`},e.vars&&{backgroundImage:(a=e.vars.overlays)==null?void 0:a[t.elevation]}))}),wP=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiPaper"}),{className:n,component:r="div",elevation:s=1,square:o=!1,variant:l="elevation"}=i,d=$(i,_P),c=q({},i,{component:r,elevation:s,square:o,variant:l}),f=vP(c);return h.jsx(bP,q({as:r,ownerState:c,className:G(f.root,n),ref:a},d))}),fs=wP;function kP(e){return pe("MuiPopover",e)}se("MuiPopover",["root","paper"]);const TP=["onEntering"],xP=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","slots","slotProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps","disableScrollLock"],DP=["slotProps"];function Mh(e,t){let a=0;return typeof t=="number"?a=t:t==="center"?a=e.height/2:t==="bottom"&&(a=e.height),a}function Lh(e,t){let a=0;return typeof t=="number"?a=t:t==="center"?a=e.width/2:t==="right"&&(a=e.width),a}function Bh(e){return[e.horizontal,e.vertical].map(t=>typeof t=="number"?`${t}px`:t).join(" ")}function Ud(e){return typeof e=="function"?e():e}const qP=e=>{const{classes:t}=e;return me({root:["root"],paper:["paper"]},kP,t)},CP=z(tf,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),gb=z(fs,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),SP=b.forwardRef(function(t,a){var i,n,r;const s=he({props:t,name:"MuiPopover"}),{action:o,anchorEl:l,anchorOrigin:d={vertical:"top",horizontal:"left"},anchorPosition:c,anchorReference:f="anchorEl",children:g,className:w,container:v,elevation:y=8,marginThreshold:T=16,open:u,PaperProps:m={},slots:p,slotProps:_,transformOrigin:k={vertical:"top",horizontal:"left"},TransitionComponent:D=OS,transitionDuration:x="auto",TransitionProps:{onEntering:S}={},disableScrollLock:R=!1}=s,P=$(s.TransitionProps,TP),A=$(s,xP),I=(i=_==null?void 0:_.paper)!=null?i:m,E=b.useRef(),j=Ke(E,I.ref),O=q({},s,{anchorOrigin:d,anchorReference:f,elevation:y,marginThreshold:T,externalPaperSlotProps:I,transformOrigin:k,TransitionComponent:D,transitionDuration:x,TransitionProps:P}),M=qP(O),L=b.useCallback(()=>{if(f==="anchorPosition")return c;const ee=Ud(l),we=(ee&&ee.nodeType===1?ee:yt(E.current).body).getBoundingClientRect();return{top:we.top+Mh(we,d.vertical),left:we.left+Lh(we,d.horizontal)}},[l,d.horizontal,d.vertical,c,f]),C=b.useCallback(ee=>({vertical:Mh(ee,k.vertical),horizontal:Lh(ee,k.horizontal)}),[k.horizontal,k.vertical]),F=b.useCallback(ee=>{const ce={width:ee.offsetWidth,height:ee.offsetHeight},we=C(ce);if(f==="none")return{top:null,left:null,transformOrigin:Bh(we)};const La=L();let Et=La.top-we.vertical,Nt=La.left-we.horizontal;const Ht=Et+ce.height,jt=Nt+ce.width,qe=ha(Ud(l)),_a=qe.innerHeight-T,ut=qe.innerWidth-T;if(T!==null&&Et<T){const ke=Et-T;Et-=ke,we.vertical+=ke}else if(T!==null&&Ht>_a){const ke=Ht-_a;Et-=ke,we.vertical+=ke}if(T!==null&&Nt<T){const ke=Nt-T;Nt-=ke,we.horizontal+=ke}else if(jt>ut){const ke=jt-ut;Nt-=ke,we.horizontal+=ke}return{top:`${Math.round(Et)}px`,left:`${Math.round(Nt)}px`,transformOrigin:Bh(we)}},[l,f,L,C,T]),[B,Y]=b.useState(u),V=b.useCallback(()=>{const ee=E.current;if(!ee)return;const ce=F(ee);ce.top!==null&&(ee.style.top=ce.top),ce.left!==null&&(ee.style.left=ce.left),ee.style.transformOrigin=ce.transformOrigin,Y(!0)},[F]);b.useEffect(()=>(R&&window.addEventListener("scroll",V),()=>window.removeEventListener("scroll",V)),[l,R,V]);const ae=(ee,ce)=>{S&&S(ee,ce),V()},X=()=>{Y(!1)};b.useEffect(()=>{u&&V()}),b.useImperativeHandle(o,()=>u?{updatePosition:()=>{V()}}:null,[u,V]),b.useEffect(()=>{if(!u)return;const ee=bl(()=>{V()}),ce=ha(l);return ce.addEventListener("resize",ee),()=>{ee.clear(),ce.removeEventListener("resize",ee)}},[l,u,V]);let ue=x;x==="auto"&&!D.muiSupportAuto&&(ue=void 0);const ie=v||(l?yt(Ud(l)).body:void 0),Be=(n=p==null?void 0:p.root)!=null?n:CP,It=(r=p==null?void 0:p.paper)!=null?r:gb,Ee=Cn({elementType:It,externalSlotProps:q({},I,{style:B?I.style:q({},I.style,{opacity:0})}),additionalProps:{elevation:y,ref:j},ownerState:O,className:G(M.paper,I==null?void 0:I.className)}),dt=Cn({elementType:Be,externalSlotProps:(_==null?void 0:_.root)||{},externalForwardedProps:A,additionalProps:{ref:a,slotProps:{backdrop:{invisible:!0}},container:ie,open:u},ownerState:O,className:G(M.root,w)}),{slotProps:oe}=dt,De=$(dt,DP);return h.jsx(Be,q({},De,!Oo(Be)&&{slotProps:oe,disableScrollLock:R},{children:h.jsx(D,q({appear:!0,in:u,onEntering:ae,onExited:X,timeout:ue},P,{children:h.jsx(It,q({},Ee,{children:g}))}))}))}),PP=SP;function RP(e){return pe("MuiMenu",e)}se("MuiMenu",["root","paper","list"]);const AP=["onEntering"],IP=["autoFocus","children","className","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant","slots","slotProps"],EP={vertical:"top",horizontal:"right"},NP={vertical:"top",horizontal:"left"},jP=e=>{const{classes:t}=e;return me({root:["root"],paper:["paper"],list:["list"]},RP,t)},FP=z(PP,{shouldForwardProp:e=>At(e)||e==="classes",name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),OP=z(gb,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),MP=z(NS,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),LP=b.forwardRef(function(t,a){var i,n;const r=he({props:t,name:"MuiMenu"}),{autoFocus:s=!0,children:o,className:l,disableAutoFocusItem:d=!1,MenuListProps:c={},onClose:f,open:g,PaperProps:w={},PopoverClasses:v,transitionDuration:y="auto",TransitionProps:{onEntering:T}={},variant:u="selectedMenu",slots:m={},slotProps:p={}}=r,_=$(r.TransitionProps,AP),k=$(r,IP),D=ob(),x=q({},r,{autoFocus:s,disableAutoFocusItem:d,MenuListProps:c,onEntering:T,PaperProps:w,transitionDuration:y,TransitionProps:_,variant:u}),S=jP(x),R=s&&!d&&g,P=b.useRef(null),A=(C,F)=>{P.current&&P.current.adjustStyleForScrollbar(C,{direction:D?"rtl":"ltr"}),T&&T(C,F)},I=C=>{C.key==="Tab"&&(C.preventDefault(),f&&f(C,"tabKeyDown"))};let E=-1;b.Children.map(o,(C,F)=>{b.isValidElement(C)&&(C.props.disabled||(u==="selectedMenu"&&C.props.selected||E===-1)&&(E=F))});const j=(i=m.paper)!=null?i:OP,O=(n=p.paper)!=null?n:w,M=Cn({elementType:m.root,externalSlotProps:p.root,ownerState:x,className:[S.root,l]}),L=Cn({elementType:j,externalSlotProps:O,ownerState:x,className:S.paper});return h.jsx(FP,q({onClose:f,anchorOrigin:{vertical:"bottom",horizontal:D?"right":"left"},transformOrigin:D?EP:NP,slots:{paper:j,root:m.root},slotProps:{root:M,paper:L},open:g,ref:a,transitionDuration:y,TransitionProps:q({onEntering:A},_),ownerState:x},k,{classes:v,children:h.jsx(MP,q({onKeyDown:I,actions:P,autoFocus:s&&(E===-1||d),autoFocusItem:R,variant:u},c,{className:G(S.list,c.className),children:o}))}))}),BP=LP;function WP(e){return pe("MuiNativeSelect",e)}const zP=se("MuiNativeSelect",["root","select","multiple","filled","outlined","standard","disabled","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),af=zP,$P=["className","disabled","error","IconComponent","inputRef","variant"],UP=e=>{const{classes:t,variant:a,disabled:i,multiple:n,open:r,error:s}=e,o={select:["select",a,i&&"disabled",n&&"multiple",s&&"error"],icon:["icon",`icon${J(a)}`,r&&"iconOpen",i&&"disabled"]};return me(o,WP,t)},yb=({ownerState:e,theme:t})=>q({MozAppearance:"none",WebkitAppearance:"none",userSelect:"none",borderRadius:0,cursor:"pointer","&:focus":q({},t.vars?{backgroundColor:`rgba(${t.vars.palette.common.onBackgroundChannel} / 0.05)`}:{backgroundColor:t.palette.mode==="light"?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)"},{borderRadius:0}),"&::-ms-expand":{display:"none"},[`&.${af.disabled}`]:{cursor:"default"},"&[multiple]":{height:"auto"},"&:not([multiple]) option, &:not([multiple]) optgroup":{backgroundColor:(t.vars||t).palette.background.paper},"&&&":{paddingRight:24,minWidth:16}},e.variant==="filled"&&{"&&&":{paddingRight:32}},e.variant==="outlined"&&{borderRadius:(t.vars||t).shape.borderRadius,"&:focus":{borderRadius:(t.vars||t).shape.borderRadius},"&&&":{paddingRight:32}}),KP=z("select",{name:"MuiNativeSelect",slot:"Select",shouldForwardProp:At,overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.select,t[a.variant],a.error&&t.error,{[`&.${af.multiple}`]:t.multiple}]}})(yb),_b=({ownerState:e,theme:t})=>q({position:"absolute",right:0,top:"calc(50% - .5em)",pointerEvents:"none",color:(t.vars||t).palette.action.active,[`&.${af.disabled}`]:{color:(t.vars||t).palette.action.disabled}},e.open&&{transform:"rotate(180deg)"},e.variant==="filled"&&{right:7},e.variant==="outlined"&&{right:7}),VP=z("svg",{name:"MuiNativeSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.icon,a.variant&&t[`icon${J(a.variant)}`],a.open&&t.iconOpen]}})(_b),GP=b.forwardRef(function(t,a){const{className:i,disabled:n,error:r,IconComponent:s,inputRef:o,variant:l="standard"}=t,d=$(t,$P),c=q({},t,{disabled:n,variant:l,error:r}),f=UP(c);return h.jsxs(b.Fragment,{children:[h.jsx(KP,q({ownerState:c,className:G(f.select,i),disabled:n,ref:o||a},d)),t.multiple?null:h.jsx(VP,{as:s,ownerState:c,className:f.icon})]})}),HP=GP;function XP(e){return pe("MuiSelect",e)}const JP=se("MuiSelect",["root","select","multiple","filled","outlined","standard","disabled","focused","icon","iconOpen","iconFilled","iconOutlined","iconStandard","nativeInput","error"]),tr=JP;var Wh;const YP=["aria-describedby","aria-label","autoFocus","autoWidth","children","className","defaultOpen","defaultValue","disabled","displayEmpty","error","IconComponent","inputRef","labelId","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","SelectDisplayProps","tabIndex","type","value","variant"],QP=z("div",{name:"MuiSelect",slot:"Select",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[{[`&.${tr.select}`]:t.select},{[`&.${tr.select}`]:t[a.variant]},{[`&.${tr.error}`]:t.error},{[`&.${tr.multiple}`]:t.multiple}]}})(yb,{[`&.${tr.select}`]:{height:"auto",minHeight:"1.4375em",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}}),ZP=z("svg",{name:"MuiSelect",slot:"Icon",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.icon,a.variant&&t[`icon${J(a.variant)}`],a.open&&t.iconOpen]}})(_b),eR=z("input",{shouldForwardProp:e=>Kv(e)&&e!=="classes",name:"MuiSelect",slot:"NativeInput",overridesResolver:(e,t)=>t.nativeInput})({bottom:0,left:0,position:"absolute",opacity:0,pointerEvents:"none",width:"100%",boxSizing:"border-box"});function zh(e,t){return typeof t=="object"&&t!==null?e===t:String(e)===String(t)}function tR(e){return e==null||typeof e=="string"&&!e.trim()}const aR=e=>{const{classes:t,variant:a,disabled:i,multiple:n,open:r,error:s}=e,o={select:["select",a,i&&"disabled",n&&"multiple",s&&"error"],icon:["icon",`icon${J(a)}`,r&&"iconOpen",i&&"disabled"],nativeInput:["nativeInput"]};return me(o,XP,t)},iR=b.forwardRef(function(t,a){var i;const{"aria-describedby":n,"aria-label":r,autoFocus:s,autoWidth:o,children:l,className:d,defaultOpen:c,defaultValue:f,disabled:g,displayEmpty:w,error:v=!1,IconComponent:y,inputRef:T,labelId:u,MenuProps:m={},multiple:p,name:_,onBlur:k,onChange:D,onClose:x,onFocus:S,onOpen:R,open:P,readOnly:A,renderValue:I,SelectDisplayProps:E={},tabIndex:j,value:O,variant:M="standard"}=t,L=$(t,YP),[C,F]=Qu({controlled:O,default:f,name:"Select"}),[B,Y]=Qu({controlled:P,default:c,name:"Select"}),V=b.useRef(null),ae=b.useRef(null),[X,ue]=b.useState(null),{current:ie}=b.useRef(P!=null),[Be,It]=b.useState(),Ee=Ke(a,T),dt=b.useCallback(U=>{ae.current=U,U&&ue(U)},[]),oe=X==null?void 0:X.parentNode;b.useImperativeHandle(Ee,()=>({focus:()=>{ae.current.focus()},node:V.current,value:C}),[C]),b.useEffect(()=>{c&&B&&X&&!ie&&(It(o?null:oe.clientWidth),ae.current.focus())},[X,o]),b.useEffect(()=>{s&&ae.current.focus()},[s]),b.useEffect(()=>{if(!u)return;const U=yt(ae.current).getElementById(u);if(U){const _e=()=>{getSelection().isCollapsed&&ae.current.focus()};return U.addEventListener("click",_e),()=>{U.removeEventListener("click",_e)}}},[u]);const De=(U,_e)=>{U?R&&R(_e):x&&x(_e),ie||(It(o?null:oe.clientWidth),Y(U))},ee=U=>{U.button===0&&(U.preventDefault(),ae.current.focus(),De(!0,U))},ce=U=>{De(!1,U)},we=b.Children.toArray(l),La=U=>{const _e=we.find(Ge=>Ge.props.value===U.target.value);_e!==void 0&&(F(_e.props.value),D&&D(U,_e))},Et=U=>_e=>{let Ge;if(_e.currentTarget.hasAttribute("tabindex")){if(p){Ge=Array.isArray(C)?C.slice():[];const $i=C.indexOf(U.props.value);$i===-1?Ge.push(U.props.value):Ge.splice($i,1)}else Ge=U.props.value;if(U.props.onClick&&U.props.onClick(_e),C!==Ge&&(F(Ge),D)){const $i=_e.nativeEvent||_e,bf=new $i.constructor($i.type,$i);Object.defineProperty(bf,"target",{writable:!0,value:{value:Ge,name:_}}),D(bf,U)}p||De(!1,_e)}},Nt=U=>{A||[" ","ArrowUp","ArrowDown","Enter"].indexOf(U.key)!==-1&&(U.preventDefault(),De(!0,U))},Ht=X!==null&&B,jt=U=>{!Ht&&k&&(Object.defineProperty(U,"target",{writable:!0,value:{value:C,name:_}}),k(U))};delete L["aria-invalid"];let qe,_a;const ut=[];let ke=!1;(Uo({value:C})||w)&&(I?qe=I(C):ke=!0);const na=we.map(U=>{if(!b.isValidElement(U))return null;let _e;if(p){if(!Array.isArray(C))throw new Error(Mi(2));_e=C.some(Ge=>zh(Ge,U.props.value)),_e&&ke&&ut.push(U.props.children)}else _e=zh(C,U.props.value),_e&&ke&&(_a=U.props.children);return b.cloneElement(U,{"aria-selected":_e?"true":"false",onClick:Et(U),onKeyUp:Ge=>{Ge.key===" "&&Ge.preventDefault(),U.props.onKeyUp&&U.props.onKeyUp(Ge)},role:"option",selected:_e,value:void 0,"data-value":U.props.value})});ke&&(p?ut.length===0?qe=null:qe=ut.reduce((U,_e,Ge)=>(U.push(_e),Ge<ut.length-1&&U.push(", "),U),[]):qe=_a);let Ba=Be;!o&&ie&&X&&(Ba=oe.clientWidth);let va;typeof j<"u"?va=j:va=g?null:0;const ge=E.id||(_?`mui-component-select-${_}`:void 0),K=q({},t,{variant:M,value:C,open:Ht,error:v}),ba=aR(K),Wn=q({},m.PaperProps,(i=m.slotProps)==null?void 0:i.paper),zn=xp();return h.jsxs(b.Fragment,{children:[h.jsx(QP,q({ref:dt,tabIndex:va,role:"combobox","aria-controls":zn,"aria-disabled":g?"true":void 0,"aria-expanded":Ht?"true":"false","aria-haspopup":"listbox","aria-label":r,"aria-labelledby":[u,ge].filter(Boolean).join(" ")||void 0,"aria-describedby":n,onKeyDown:Nt,onMouseDown:g||A?null:ee,onBlur:jt,onFocus:S},E,{ownerState:K,className:G(E.className,ba.select,d),id:ge,children:tR(qe)?Wh||(Wh=h.jsx("span",{className:"notranslate",children:"​"})):qe})),h.jsx(eR,q({"aria-invalid":v,value:Array.isArray(C)?C.join(","):C,name:_,ref:V,"aria-hidden":!0,onChange:La,tabIndex:-1,disabled:g,className:ba.nativeInput,autoFocus:s,ownerState:K},L)),h.jsx(ZP,{as:y,className:ba.icon,ownerState:K}),h.jsx(BP,q({id:`menu-${_||""}`,anchorEl:oe,open:Ht,onClose:ce,anchorOrigin:{vertical:"bottom",horizontal:"center"},transformOrigin:{vertical:"top",horizontal:"center"}},m,{MenuListProps:q({"aria-labelledby":u,role:"listbox","aria-multiselectable":p?"true":void 0,disableListWrap:!0,id:zn},m.MenuListProps),slotProps:q({},m.slotProps,{paper:q({},Wn,{style:q({minWidth:Ba},Wn!=null?Wn.style:null)})}),children:na}))]})}),nR=iR,rR=zi(h.jsx("path",{d:"M7 10l5 5 5-5z"}),"ArrowDropDown"),sR=["onChange","maxRows","minRows","style","value"];function Fs(e){return parseInt(e,10)||0}const oR={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}};function lR(e){for(const t in e)return!1;return!0}function $h(e){return lR(e)||e.outerHeightStyle===0&&!e.overflowing}const dR=b.forwardRef(function(t,a){const{onChange:i,maxRows:n,minRows:r=1,style:s,value:o}=t,l=$(t,sR),{current:d}=b.useRef(o!=null),c=b.useRef(null),f=Ke(a,c),g=b.useRef(null),w=b.useRef(null),v=b.useCallback(()=>{const p=c.current,_=w.current;if(!p||!_)return;const D=ha(p).getComputedStyle(p);if(D.width==="0px")return{outerHeightStyle:0,overflowing:!1};_.style.width=D.width,_.value=p.value||t.placeholder||"x",_.value.slice(-1)===`
`&&(_.value+=" ");const x=D.boxSizing,S=Fs(D.paddingBottom)+Fs(D.paddingTop),R=Fs(D.borderBottomWidth)+Fs(D.borderTopWidth),P=_.scrollHeight;_.value="x";const A=_.scrollHeight;let I=P;r&&(I=Math.max(Number(r)*A,I)),n&&(I=Math.min(Number(n)*A,I)),I=Math.max(I,A);const E=I+(x==="border-box"?S+R:0),j=Math.abs(I-P)<=1;return{outerHeightStyle:E,overflowing:j}},[n,r,t.placeholder]),y=Za(()=>{const p=c.current,_=v();if(!p||!_||$h(_))return!1;const k=_.outerHeightStyle;return g.current!=null&&g.current!==k}),T=b.useCallback(()=>{const p=c.current,_=v();if(!p||!_||$h(_))return;const k=_.outerHeightStyle;g.current!==k&&(g.current=k,p.style.height=`${k}px`),p.style.overflow=_.overflowing?"hidden":""},[v]),u=b.useRef(-1);Ia(()=>{const p=bl(T),_=c==null?void 0:c.current;if(!_)return;const k=ha(_);k.addEventListener("resize",p);let D;return typeof ResizeObserver<"u"&&(D=new ResizeObserver(()=>{y()&&(D.unobserve(_),cancelAnimationFrame(u.current),T(),u.current=requestAnimationFrame(()=>{D.observe(_)}))}),D.observe(_)),()=>{p.clear(),cancelAnimationFrame(u.current),k.removeEventListener("resize",p),D&&D.disconnect()}},[v,T,y]),Ia(()=>{T()});const m=p=>{d||T(),i&&i(p)};return h.jsxs(b.Fragment,{children:[h.jsx("textarea",q({value:o,onChange:m,ref:f,rows:r,style:s},l)),h.jsx("textarea",{"aria-hidden":!0,className:t.className,readOnly:!0,ref:w,tabIndex:-1,style:q({},oR.shadow,s,{paddingTop:0,paddingBottom:0})})]})}),uR=dR;function cR(e){return h.jsx(ZC,q({},e,{defaultTheme:Kp,themeId:Ul}))}function pR(e){return pe("MuiInputBase",e)}const fR=se("MuiInputBase",["root","formControl","focused","disabled","adornedStart","adornedEnd","error","sizeSmall","multiline","colorSecondary","fullWidth","hiddenLabel","readOnly","input","inputSizeSmall","inputMultiline","inputTypeSearch","inputAdornedStart","inputAdornedEnd","inputHiddenLabel"]),Rn=fR,mR=["aria-describedby","autoComplete","autoFocus","className","color","components","componentsProps","defaultValue","disabled","disableInjectingGlobalStyles","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","maxRows","minRows","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","size","slotProps","slots","startAdornment","type","value"],Vl=(e,t)=>{const{ownerState:a}=e;return[t.root,a.formControl&&t.formControl,a.startAdornment&&t.adornedStart,a.endAdornment&&t.adornedEnd,a.error&&t.error,a.size==="small"&&t.sizeSmall,a.multiline&&t.multiline,a.color&&t[`color${J(a.color)}`],a.fullWidth&&t.fullWidth,a.hiddenLabel&&t.hiddenLabel]},Gl=(e,t)=>{const{ownerState:a}=e;return[t.input,a.size==="small"&&t.inputSizeSmall,a.multiline&&t.inputMultiline,a.type==="search"&&t.inputTypeSearch,a.startAdornment&&t.inputAdornedStart,a.endAdornment&&t.inputAdornedEnd,a.hiddenLabel&&t.inputHiddenLabel]},hR=e=>{const{classes:t,color:a,disabled:i,error:n,endAdornment:r,focused:s,formControl:o,fullWidth:l,hiddenLabel:d,multiline:c,readOnly:f,size:g,startAdornment:w,type:v}=e,y={root:["root",`color${J(a)}`,i&&"disabled",n&&"error",l&&"fullWidth",s&&"focused",o&&"formControl",g&&g!=="medium"&&`size${J(g)}`,c&&"multiline",w&&"adornedStart",r&&"adornedEnd",d&&"hiddenLabel",f&&"readOnly"],input:["input",i&&"disabled",v==="search"&&"inputTypeSearch",c&&"inputMultiline",g==="small"&&"inputSizeSmall",d&&"inputHiddenLabel",w&&"inputAdornedStart",r&&"inputAdornedEnd",f&&"readOnly"]};return me(y,pR,t)},Hl=z("div",{name:"MuiInputBase",slot:"Root",overridesResolver:Vl})(({theme:e,ownerState:t})=>q({},e.typography.body1,{color:(e.vars||e).palette.text.primary,lineHeight:"1.4375em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center",[`&.${Rn.disabled}`]:{color:(e.vars||e).palette.text.disabled,cursor:"default"}},t.multiline&&q({padding:"4px 0 5px"},t.size==="small"&&{paddingTop:1}),t.fullWidth&&{width:"100%"})),Xl=z("input",{name:"MuiInputBase",slot:"Input",overridesResolver:Gl})(({theme:e,ownerState:t})=>{const a=e.palette.mode==="light",i=q({color:"currentColor"},e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:a?.42:.5},{transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})}),n={opacity:"0 !important"},r=e.vars?{opacity:e.vars.opacity.inputPlaceholder}:{opacity:a?.42:.5};return q({font:"inherit",letterSpacing:"inherit",color:"currentColor",padding:"4px 0 5px",border:0,boxSizing:"content-box",background:"none",height:"1.4375em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"mui-auto-fill-cancel",animationDuration:"10ms","&::-webkit-input-placeholder":i,"&::-moz-placeholder":i,"&:-ms-input-placeholder":i,"&::-ms-input-placeholder":i,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{WebkitAppearance:"none"},[`label[data-shrink=false] + .${Rn.formControl} &`]:{"&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus::-webkit-input-placeholder":r,"&:focus::-moz-placeholder":r,"&:focus:-ms-input-placeholder":r,"&:focus::-ms-input-placeholder":r},[`&.${Rn.disabled}`]:{opacity:1,WebkitTextFillColor:(e.vars||e).palette.text.disabled},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"mui-auto-fill"}},t.size==="small"&&{paddingTop:1},t.multiline&&{height:"auto",resize:"none",padding:0,paddingTop:0},t.type==="search"&&{MozAppearance:"textfield"})}),gR=h.jsx(cR,{styles:{"@keyframes mui-auto-fill":{from:{display:"block"}},"@keyframes mui-auto-fill-cancel":{from:{display:"block"}}}}),yR=b.forwardRef(function(t,a){var i;const n=he({props:t,name:"MuiInputBase"}),{"aria-describedby":r,autoComplete:s,autoFocus:o,className:l,components:d={},componentsProps:c={},defaultValue:f,disabled:g,disableInjectingGlobalStyles:w,endAdornment:v,fullWidth:y=!1,id:T,inputComponent:u="input",inputProps:m={},inputRef:p,maxRows:_,minRows:k,multiline:D=!1,name:x,onBlur:S,onChange:R,onClick:P,onFocus:A,onKeyDown:I,onKeyUp:E,placeholder:j,readOnly:O,renderSuffix:M,rows:L,slotProps:C={},slots:F={},startAdornment:B,type:Y="text",value:V}=n,ae=$(n,mR),X=m.value!=null?m.value:V,{current:ue}=b.useRef(X!=null),ie=b.useRef(),Be=b.useCallback(ge=>{},[]),It=Ke(ie,p,m.ref,Be),[Ee,dt]=b.useState(!1),oe=ps(),De=cs({props:n,muiFormControl:oe,states:["color","disabled","error","hiddenLabel","size","required","filled"]});De.focused=oe?oe.focused:Ee,b.useEffect(()=>{!oe&&g&&Ee&&(dt(!1),S&&S())},[oe,g,Ee,S]);const ee=oe&&oe.onFilled,ce=oe&&oe.onEmpty,we=b.useCallback(ge=>{Uo(ge)?ee&&ee():ce&&ce()},[ee,ce]);Ia(()=>{ue&&we({value:X})},[X,we,ue]);const La=ge=>{if(De.disabled){ge.stopPropagation();return}A&&A(ge),m.onFocus&&m.onFocus(ge),oe&&oe.onFocus?oe.onFocus(ge):dt(!0)},Et=ge=>{S&&S(ge),m.onBlur&&m.onBlur(ge),oe&&oe.onBlur?oe.onBlur(ge):dt(!1)},Nt=(ge,...K)=>{if(!ue){const ba=ge.target||ie.current;if(ba==null)throw new Error(Mi(1));we({value:ba.value})}m.onChange&&m.onChange(ge,...K),R&&R(ge,...K)};b.useEffect(()=>{we(ie.current)},[]);const Ht=ge=>{ie.current&&ge.currentTarget===ge.target&&ie.current.focus(),P&&P(ge)};let jt=u,qe=m;D&&jt==="input"&&(L?qe=q({type:void 0,minRows:L,maxRows:L},qe):qe=q({type:void 0,maxRows:_,minRows:k},qe),jt=uR);const _a=ge=>{we(ge.animationName==="mui-auto-fill-cancel"?ie.current:{value:"x"})};b.useEffect(()=>{oe&&oe.setAdornedStart(!!B)},[oe,B]);const ut=q({},n,{color:De.color||"primary",disabled:De.disabled,endAdornment:v,error:De.error,focused:De.focused,formControl:oe,fullWidth:y,hiddenLabel:De.hiddenLabel,multiline:D,size:De.size,startAdornment:B,type:Y}),ke=hR(ut),na=F.root||d.Root||Hl,Ba=C.root||c.root||{},va=F.input||d.Input||Xl;return qe=q({},qe,(i=C.input)!=null?i:c.input),h.jsxs(b.Fragment,{children:[!w&&gR,h.jsxs(na,q({},Ba,!Oo(na)&&{ownerState:q({},ut,Ba.ownerState)},{ref:a,onClick:Ht},ae,{className:G(ke.root,Ba.className,l,O&&"MuiInputBase-readOnly"),children:[B,h.jsx(Jp.Provider,{value:null,children:h.jsx(va,q({ownerState:ut,"aria-invalid":De.error,"aria-describedby":r,autoComplete:s,autoFocus:o,defaultValue:f,disabled:De.disabled,id:T,onAnimationStart:_a,name:x,placeholder:j,readOnly:O,required:De.required,rows:L,value:X,onKeyDown:I,onKeyUp:E,type:Y},qe,!Oo(va)&&{as:jt,ownerState:q({},ut,qe.ownerState)},{ref:It,className:G(ke.input,qe.className,O&&"MuiInputBase-readOnly"),onBlur:Et,onChange:Nt,onFocus:La}))}),v,M?M(q({},De,{startAdornment:B})):null]}))]})}),nf=yR;function _R(e){return pe("MuiInput",e)}const vR=q({},Rn,se("MuiInput",["root","underline","input"])),ar=vR,bR=["disableUnderline","components","componentsProps","fullWidth","inputComponent","multiline","slotProps","slots","type"],wR=e=>{const{classes:t,disableUnderline:a}=e,n=me({root:["root",!a&&"underline"],input:["input"]},_R,t);return q({},t,n)},kR=z(Hl,{shouldForwardProp:e=>At(e)||e==="classes",name:"MuiInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[...Vl(e,t),!a.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{let i=e.palette.mode==="light"?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return e.vars&&(i=`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`),q({position:"relative"},t.formControl&&{"label + &":{marginTop:16}},!t.disableUnderline&&{"&::after":{borderBottom:`2px solid ${(e.vars||e).palette[t.color].main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${ar.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${ar.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${i}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${ar.disabled}, .${ar.error}):before`]:{borderBottom:`2px solid ${(e.vars||e).palette.text.primary}`,"@media (hover: none)":{borderBottom:`1px solid ${i}`}},[`&.${ar.disabled}:before`]:{borderBottomStyle:"dotted"}})}),TR=z(Xl,{name:"MuiInput",slot:"Input",overridesResolver:Gl})({}),vb=b.forwardRef(function(t,a){var i,n,r,s;const o=he({props:t,name:"MuiInput"}),{disableUnderline:l,components:d={},componentsProps:c,fullWidth:f=!1,inputComponent:g="input",multiline:w=!1,slotProps:v,slots:y={},type:T="text"}=o,u=$(o,bR),m=wR(o),_={root:{ownerState:{disableUnderline:l}}},k=v??c?Dt(v??c,_):_,D=(i=(n=y.root)!=null?n:d.Root)!=null?i:kR,x=(r=(s=y.input)!=null?s:d.Input)!=null?r:TR;return h.jsx(nf,q({slots:{root:D,input:x},slotProps:k,fullWidth:f,inputComponent:g,multiline:w,ref:a,type:T},u,{classes:m}))});vb.muiName="Input";const xR=vb;function DR(e){return pe("MuiFilledInput",e)}const qR=q({},Rn,se("MuiFilledInput",["root","underline","input"])),_i=qR,CR=["disableUnderline","components","componentsProps","fullWidth","hiddenLabel","inputComponent","multiline","slotProps","slots","type"],SR=e=>{const{classes:t,disableUnderline:a}=e,n=me({root:["root",!a&&"underline"],input:["input"]},DR,t);return q({},t,n)},PR=z(Hl,{shouldForwardProp:e=>At(e)||e==="classes",name:"MuiFilledInput",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[...Vl(e,t),!a.disableUnderline&&t.underline]}})(({theme:e,ownerState:t})=>{var a;const i=e.palette.mode==="light",n=i?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=i?"rgba(0, 0, 0, 0.06)":"rgba(255, 255, 255, 0.09)",s=i?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.13)",o=i?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)";return q({position:"relative",backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r,borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:e.vars?e.vars.palette.FilledInput.hoverBg:s,"@media (hover: none)":{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r}},[`&.${_i.focused}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.bg:r},[`&.${_i.disabled}`]:{backgroundColor:e.vars?e.vars.palette.FilledInput.disabledBg:o}},!t.disableUnderline&&{"&::after":{borderBottom:`2px solid ${(a=(e.vars||e).palette[t.color||"primary"])==null?void 0:a.main}`,left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},[`&.${_i.focused}:after`]:{transform:"scaleX(1) translateX(0)"},[`&.${_i.error}`]:{"&::before, &::after":{borderBottomColor:(e.vars||e).palette.error.main}},"&::before":{borderBottom:`1px solid ${e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`:n}`,left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},[`&:hover:not(.${_i.disabled}, .${_i.error}):before`]:{borderBottom:`1px solid ${(e.vars||e).palette.text.primary}`},[`&.${_i.disabled}:before`]:{borderBottomStyle:"dotted"}},t.startAdornment&&{paddingLeft:12},t.endAdornment&&{paddingRight:12},t.multiline&&q({padding:"25px 12px 8px"},t.size==="small"&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.hiddenLabel&&t.size==="small"&&{paddingTop:8,paddingBottom:9}))}),RR=z(Xl,{name:"MuiFilledInput",slot:"Input",overridesResolver:Gl})(({theme:e,ownerState:t})=>q({paddingTop:25,paddingRight:12,paddingBottom:8,paddingLeft:12},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:e.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:e.palette.mode==="light"?null:"#fff",caretColor:e.palette.mode==="light"?null:"#fff",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},t.size==="small"&&{paddingTop:21,paddingBottom:4},t.hiddenLabel&&{paddingTop:16,paddingBottom:17},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0},t.hiddenLabel&&t.size==="small"&&{paddingTop:8,paddingBottom:9},t.multiline&&{paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0})),bb=b.forwardRef(function(t,a){var i,n,r,s;const o=he({props:t,name:"MuiFilledInput"}),{components:l={},componentsProps:d,fullWidth:c=!1,inputComponent:f="input",multiline:g=!1,slotProps:w,slots:v={},type:y="text"}=o,T=$(o,CR),u=q({},o,{fullWidth:c,inputComponent:f,multiline:g,type:y}),m=SR(o),p={root:{ownerState:u},input:{ownerState:u}},_=w??d?Dt(p,w??d):p,k=(i=(n=v.root)!=null?n:l.Root)!=null?i:PR,D=(r=(s=v.input)!=null?s:l.Input)!=null?r:RR;return h.jsx(nf,q({slots:{root:k,input:D},componentsProps:_,fullWidth:c,inputComponent:f,multiline:g,ref:a,type:y},T,{classes:m}))});bb.muiName="Input";const AR=bb;var Uh;const IR=["children","classes","className","label","notched"],ER=z("fieldset",{name:"MuiNotchedOutlined",shouldForwardProp:At})({textAlign:"left",position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:"0 8px",pointerEvents:"none",borderRadius:"inherit",borderStyle:"solid",borderWidth:1,overflow:"hidden",minWidth:"0%"}),NR=z("legend",{name:"MuiNotchedOutlined",shouldForwardProp:At})(({ownerState:e,theme:t})=>q({float:"unset",width:"auto",overflow:"hidden"},!e.withLabel&&{padding:0,lineHeight:"11px",transition:t.transitions.create("width",{duration:150,easing:t.transitions.easing.easeOut})},e.withLabel&&q({display:"block",padding:0,height:11,fontSize:"0.75em",visibility:"hidden",maxWidth:.01,transition:t.transitions.create("max-width",{duration:50,easing:t.transitions.easing.easeOut}),whiteSpace:"nowrap","& > span":{paddingLeft:5,paddingRight:5,display:"inline-block",opacity:0,visibility:"visible"}},e.notched&&{maxWidth:"100%",transition:t.transitions.create("max-width",{duration:100,easing:t.transitions.easing.easeOut,delay:50})})));function jR(e){const{className:t,label:a,notched:i}=e,n=$(e,IR),r=a!=null&&a!=="",s=q({},e,{notched:i,withLabel:r});return h.jsx(ER,q({"aria-hidden":!0,className:t,ownerState:s},n,{children:h.jsx(NR,{ownerState:s,children:r?h.jsx("span",{children:a}):Uh||(Uh=h.jsx("span",{className:"notranslate",children:"​"}))})}))}function FR(e){return pe("MuiOutlinedInput",e)}const OR=q({},Rn,se("MuiOutlinedInput",["root","notchedOutline","input"])),za=OR,MR=["components","fullWidth","inputComponent","label","multiline","notched","slots","type"],LR=e=>{const{classes:t}=e,i=me({root:["root"],notchedOutline:["notchedOutline"],input:["input"]},FR,t);return q({},t,i)},BR=z(Hl,{shouldForwardProp:e=>At(e)||e==="classes",name:"MuiOutlinedInput",slot:"Root",overridesResolver:Vl})(({theme:e,ownerState:t})=>{const a=e.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return q({position:"relative",borderRadius:(e.vars||e).shape.borderRadius,[`&:hover .${za.notchedOutline}`]:{borderColor:(e.vars||e).palette.text.primary},"@media (hover: none)":{[`&:hover .${za.notchedOutline}`]:{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:a}},[`&.${za.focused} .${za.notchedOutline}`]:{borderColor:(e.vars||e).palette[t.color].main,borderWidth:2},[`&.${za.error} .${za.notchedOutline}`]:{borderColor:(e.vars||e).palette.error.main},[`&.${za.disabled} .${za.notchedOutline}`]:{borderColor:(e.vars||e).palette.action.disabled}},t.startAdornment&&{paddingLeft:14},t.endAdornment&&{paddingRight:14},t.multiline&&q({padding:"16.5px 14px"},t.size==="small"&&{padding:"8.5px 14px"}))}),WR=z(jR,{name:"MuiOutlinedInput",slot:"NotchedOutline",overridesResolver:(e,t)=>t.notchedOutline})(({theme:e})=>{const t=e.palette.mode==="light"?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{borderColor:e.vars?`rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)`:t}}),zR=z(Xl,{name:"MuiOutlinedInput",slot:"Input",overridesResolver:Gl})(({theme:e,ownerState:t})=>q({padding:"16.5px 14px"},!e.vars&&{"&:-webkit-autofill":{WebkitBoxShadow:e.palette.mode==="light"?null:"0 0 0 100px #266798 inset",WebkitTextFillColor:e.palette.mode==="light"?null:"#fff",caretColor:e.palette.mode==="light"?null:"#fff",borderRadius:"inherit"}},e.vars&&{"&:-webkit-autofill":{borderRadius:"inherit"},[e.getColorSchemeSelector("dark")]:{"&:-webkit-autofill":{WebkitBoxShadow:"0 0 0 100px #266798 inset",WebkitTextFillColor:"#fff",caretColor:"#fff"}}},t.size==="small"&&{padding:"8.5px 14px"},t.multiline&&{padding:0},t.startAdornment&&{paddingLeft:0},t.endAdornment&&{paddingRight:0})),wb=b.forwardRef(function(t,a){var i,n,r,s,o;const l=he({props:t,name:"MuiOutlinedInput"}),{components:d={},fullWidth:c=!1,inputComponent:f="input",label:g,multiline:w=!1,notched:v,slots:y={},type:T="text"}=l,u=$(l,MR),m=LR(l),p=ps(),_=cs({props:l,muiFormControl:p,states:["color","disabled","error","focused","hiddenLabel","size","required"]}),k=q({},l,{color:_.color||"primary",disabled:_.disabled,error:_.error,focused:_.focused,formControl:p,fullWidth:c,hiddenLabel:_.hiddenLabel,multiline:w,size:_.size,type:T}),D=(i=(n=y.root)!=null?n:d.Root)!=null?i:BR,x=(r=(s=y.input)!=null?s:d.Input)!=null?r:zR;return h.jsx(nf,q({slots:{root:D,input:x},renderSuffix:S=>h.jsx(WR,{ownerState:k,className:m.notchedOutline,label:g!=null&&g!==""&&_.required?o||(o=h.jsxs(b.Fragment,{children:[g," ","*"]})):g,notched:typeof v<"u"?v:!!(S.startAdornment||S.filled||S.focused)}),fullWidth:c,inputComponent:f,multiline:w,ref:a,type:T},u,{classes:q({},m,{notchedOutline:null})}))});wb.muiName="Input";const $R=wb,UR=["autoWidth","children","classes","className","defaultOpen","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"],KR=["root"],VR=e=>{const{classes:t}=e;return t},rf={name:"MuiSelect",overridesResolver:(e,t)=>t.root,shouldForwardProp:e=>At(e)&&e!=="variant",slot:"Root"},GR=z(xR,rf)(""),HR=z($R,rf)(""),XR=z(AR,rf)(""),kb=b.forwardRef(function(t,a){const i=he({name:"MuiSelect",props:t}),{autoWidth:n=!1,children:r,classes:s={},className:o,defaultOpen:l=!1,displayEmpty:d=!1,IconComponent:c=rR,id:f,input:g,inputProps:w,label:v,labelId:y,MenuProps:T,multiple:u=!1,native:m=!1,onClose:p,onOpen:_,open:k,renderValue:D,SelectDisplayProps:x,variant:S="outlined"}=i,R=$(i,UR),P=m?HP:nR,A=ps(),I=cs({props:i,muiFormControl:A,states:["variant","error"]}),E=I.variant||S,j=q({},i,{variant:E,classes:s}),O=VR(j),M=$(O,KR),L=g||{standard:h.jsx(GR,{ownerState:j}),outlined:h.jsx(HR,{label:v,ownerState:j}),filled:h.jsx(XR,{ownerState:j})}[E],C=Ke(a,Fn(L));return h.jsx(b.Fragment,{children:b.cloneElement(L,q({inputComponent:P,inputProps:q({children:r,error:I.error,IconComponent:c,variant:E,type:void 0,multiple:u},m?{id:f}:{autoWidth:n,defaultOpen:l,displayEmpty:d,labelId:y,MenuProps:T,onClose:p,onOpen:_,open:k,renderValue:D,SelectDisplayProps:q({id:f},x)},w,{classes:w?Dt(M,w.classes):M},g?g.props.inputProps:{})},(u&&m||d)&&E==="outlined"?{notched:!0}:{},{ref:C,className:G(L.props.className,o,O.root)},!g&&{variant:E},R))})});kb.muiName="Select";const JR=kb,YR=ya.plugins,Tb=b.createContext(),xb=()=>b.useContext(Tb),QR=({children:e})=>{const[t,a]=b.useState("release"),[i,n]=b.useState(YR);return h.jsx(Tb.Provider,{value:{sortOption:t,setSortOption:a,sortedData:i,setSortedData:n},children:e})},Kd=ya.plugins;function ZR(){const{setSearchQuery:e,setIsSearchSubmitted:t}=ds(),{sortOption:a,setSortOption:i,setSortedData:n}=xb();b.useEffect(()=>{document.documentElement.style.scrollBehavior="auto",l(a),r()},[a]);function r(){var d=window.scrollY;window.onscroll=function(){var c=window.scrollY;d>c?document.querySelector("header").style.top="0":d>150&&(document.querySelector("header").style.top="-155px"),d=c}}function s(d){const c=Object.entries(d);return c.sort(([,f],[,g])=>g.commits_count-f.commits_count),Object.fromEntries(c)}function o(d){const c=Object.entries(d);return c.sort(([,f],[,g])=>!f.metadata.release_date&&!g.metadata.release_date?0:f.metadata.release_date?g.metadata.release_date?new Date(g.metadata.release_date)-new Date(f.metadata.release_date):-1:1),Object.fromEntries(c)}const l=d=>{i(d),e(""),t(!1);let c={};d==="commits"?c=s(Kd):d=="alpha"?c=Kd:d=="release"&&(c=o(Kd)),n(c)};return h.jsx(l2,{children:h.jsxs(DS,{children:[h.jsx(T2,{children:"Sort"}),h.jsxs(JR,{value:a,label:"Sort",onChange:d=>l(d.target.value),children:[h.jsx(Bd,{value:"commits",children:"Commits Count"}),h.jsx(Bd,{value:"alpha",children:"Alphabetical"}),h.jsx(Bd,{value:"release",children:"Recent Release"})]})]})})}var sf={},eA=ts;Object.defineProperty(sf,"__esModule",{value:!0});var Db=sf.default=void 0,tA=eA(Vp()),aA=h;Db=sf.default=(0,tA.default)((0,aA.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z"}),"CheckCircle");function iA(e){return pe("MuiDialog",e)}const nA=se("MuiDialog",["root","scrollPaper","scrollBody","container","paper","paperScrollPaper","paperScrollBody","paperWidthFalse","paperWidthXs","paperWidthSm","paperWidthMd","paperWidthLg","paperWidthXl","paperFullWidth","paperFullScreen"]),Vd=nA,rA=b.createContext({}),qb=rA,sA=["aria-describedby","aria-labelledby","BackdropComponent","BackdropProps","children","className","disableEscapeKeyDown","fullScreen","fullWidth","maxWidth","onBackdropClick","onClick","onClose","open","PaperComponent","PaperProps","scroll","TransitionComponent","transitionDuration","TransitionProps"],oA=z(hb,{name:"MuiDialog",slot:"Backdrop",overrides:(e,t)=>t.backdrop})({zIndex:-1}),lA=e=>{const{classes:t,scroll:a,maxWidth:i,fullWidth:n,fullScreen:r}=e,s={root:["root"],container:["container",`scroll${J(a)}`],paper:["paper",`paperScroll${J(a)}`,`paperWidth${J(String(i))}`,n&&"paperFullWidth",r&&"paperFullScreen"]};return me(s,iA,t)},dA=z(tf,{name:"MuiDialog",slot:"Root",overridesResolver:(e,t)=>t.root})({"@media print":{position:"absolute !important"}}),uA=z("div",{name:"MuiDialog",slot:"Container",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.container,t[`scroll${J(a.scroll)}`]]}})(({ownerState:e})=>q({height:"100%","@media print":{height:"auto"},outline:0},e.scroll==="paper"&&{display:"flex",justifyContent:"center",alignItems:"center"},e.scroll==="body"&&{overflowY:"auto",overflowX:"hidden",textAlign:"center","&::after":{content:'""',display:"inline-block",verticalAlign:"middle",height:"100%",width:"0"}})),cA=z(fs,{name:"MuiDialog",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.paper,t[`scrollPaper${J(a.scroll)}`],t[`paperWidth${J(String(a.maxWidth))}`],a.fullWidth&&t.paperFullWidth,a.fullScreen&&t.paperFullScreen]}})(({theme:e,ownerState:t})=>q({margin:32,position:"relative",overflowY:"auto","@media print":{overflowY:"visible",boxShadow:"none"}},t.scroll==="paper"&&{display:"flex",flexDirection:"column",maxHeight:"calc(100% - 64px)"},t.scroll==="body"&&{display:"inline-block",verticalAlign:"middle",textAlign:"left"},!t.maxWidth&&{maxWidth:"calc(100% - 64px)"},t.maxWidth==="xs"&&{maxWidth:e.breakpoints.unit==="px"?Math.max(e.breakpoints.values.xs,444):`max(${e.breakpoints.values.xs}${e.breakpoints.unit}, 444px)`,[`&.${Vd.paperScrollBody}`]:{[e.breakpoints.down(Math.max(e.breakpoints.values.xs,444)+32*2)]:{maxWidth:"calc(100% - 64px)"}}},t.maxWidth&&t.maxWidth!=="xs"&&{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`,[`&.${Vd.paperScrollBody}`]:{[e.breakpoints.down(e.breakpoints.values[t.maxWidth]+32*2)]:{maxWidth:"calc(100% - 64px)"}}},t.fullWidth&&{width:"calc(100% - 64px)"},t.fullScreen&&{margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"none",borderRadius:0,[`&.${Vd.paperScrollBody}`]:{margin:0,maxWidth:"100%"}})),pA=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDialog"}),n=us(),r={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{"aria-describedby":s,"aria-labelledby":o,BackdropComponent:l,BackdropProps:d,children:c,className:f,disableEscapeKeyDown:g=!1,fullScreen:w=!1,fullWidth:v=!1,maxWidth:y="sm",onBackdropClick:T,onClick:u,onClose:m,open:p,PaperComponent:_=fs,PaperProps:k={},scroll:D="paper",TransitionComponent:x=mb,transitionDuration:S=r,TransitionProps:R}=i,P=$(i,sA),A=q({},i,{disableEscapeKeyDown:g,fullScreen:w,fullWidth:v,maxWidth:y,scroll:D}),I=lA(A),E=b.useRef(),j=C=>{E.current=C.target===C.currentTarget},O=C=>{u&&u(C),E.current&&(E.current=null,T&&T(C),m&&m(C,"backdropClick"))},M=xp(o),L=b.useMemo(()=>({titleId:M}),[M]);return h.jsx(dA,q({className:G(I.root,f),closeAfterTransition:!0,components:{Backdrop:oA},componentsProps:{backdrop:q({transitionDuration:S,as:l},d)},disableEscapeKeyDown:g,onClose:m,open:p,ref:a,onClick:O,ownerState:A},P,{children:h.jsx(x,q({appear:!0,in:p,timeout:S,role:"presentation"},R,{children:h.jsx(uA,{className:G(I.container),onMouseDown:j,ownerState:A,children:h.jsx(cA,q({as:_,elevation:24,role:"dialog","aria-describedby":s,"aria-labelledby":M},k,{className:G(I.paper,k.className),ownerState:A,children:h.jsx(qb.Provider,{value:L,children:c})}))})}))}))}),fA=pA;function mA(e){return pe("MuiDialogContent",e)}se("MuiDialogContent",["root","dividers"]);function hA(e){return pe("MuiDialogTitle",e)}const gA=se("MuiDialogTitle",["root"]),yA=gA,_A=["className","dividers"],vA=e=>{const{classes:t,dividers:a}=e;return me({root:["root",a&&"dividers"]},mA,t)},bA=z("div",{name:"MuiDialogContent",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.dividers&&t.dividers]}})(({theme:e,ownerState:t})=>q({flex:"1 1 auto",WebkitOverflowScrolling:"touch",overflowY:"auto",padding:"20px 24px"},t.dividers?{padding:"16px 24px",borderTop:`1px solid ${(e.vars||e).palette.divider}`,borderBottom:`1px solid ${(e.vars||e).palette.divider}`}:{[`.${yA.root} + &`]:{paddingTop:0}})),wA=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDialogContent"}),{className:n,dividers:r=!1}=i,s=$(i,_A),o=q({},i,{dividers:r}),l=vA(o);return h.jsx(bA,q({className:G(l.root,n),ownerState:o,ref:a},s))}),kA=wA;function TA(e){return pe("MuiDialogContentText",e)}se("MuiDialogContentText",["root"]);const xA=["children","className"],DA=e=>{const{classes:t}=e,i=me({root:["root"]},TA,t);return q({},t,i)},qA=z(cb,{shouldForwardProp:e=>At(e)||e==="classes",name:"MuiDialogContentText",slot:"Root",overridesResolver:(e,t)=>t.root})({}),CA=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDialogContentText"}),{className:n}=i,r=$(i,xA),s=DA(r);return h.jsx(qA,q({component:"p",variant:"body1",color:"text.secondary",ref:a,ownerState:r,className:G(s.root,n)},i,{classes:s}))}),SA=CA,PA=["className","id"],RA=e=>{const{classes:t}=e;return me({root:["root"]},hA,t)},AA=z(cb,{name:"MuiDialogTitle",slot:"Root",overridesResolver:(e,t)=>t.root})({padding:"16px 24px",flex:"0 0 auto"}),IA=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDialogTitle"}),{className:n,id:r}=i,s=$(i,PA),o=i,l=RA(o),{titleId:d=r}=b.useContext(qb);return h.jsx(AA,q({component:"h2",className:G(l.root,n),ownerState:o,ref:a,variant:"h6",id:r??d},s))}),EA=IA,Cb="data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAACMAAAAhCAYAAABTERJSAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAFhgAABYYBG6Yz4AAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAUbSURBVFiFzZhrbFRVEMd%2Fc%2B5uu6UUbIFC%2FUAUVEQCLbQJBIiBDyiImJiIhmohYNCkqJAQxASLF8tDgYRHBLXRhIcKNtFEhVDgAxBJqgmVh4JEKg3EIn2QYqBlt917xg%2BFss%2ByaDHOtzsz5z%2B%2FuZl7ztmF%2F5HJvxVQN6cPYX8%2FPLnOmsvNAvqfwuib%2FbNIk9cQeQnLcKRL5xLIV%2Fic9eJeunjPYbRs4FjQSpTB3aS1IpRKeeOOewajy%2FKKEO8Q0DuVdKy8IqsbPulxGHUfCBBu%2BwUYGuFuBTK7wQnht6PEbf4tlRomVRjCbXNjQEB0AyrFQOL5ENIJm7dTLZE6DPJCnEtFZVXDLny%2B4Sjv0PmmYu1ZdUek9RiMgoDmJ8V0L7XJqsZ3UW8YsBOwEeHeeFce7jEYXBy0m9m4BbXqSj2%2Bxnkg26MCVrN6DEZcwggtd8pTFx%2Fh3B9B50YLaFOPwXQKUt0tBLegtSomfBlfY13PwijbEnhztGzgJsK5h9W9qeWwBqjvyhB2iBs1Qz0AU974DciRGO8CVN8AJhAeMAdA3KbrKEtvxhsI%2B9emWiJlGBEU680Cfk%2BSsVqXZvcFYGXjF8ABVJ%2BTNfVXehyms1zzn1gmIOxLEB6E31%2FWBe5rnCarmo7elf7dJEeaLh80GasliI5F6Q9cAz1GY1OJVNDxTzQTw7iY%2FHEZRQY7xqJ9RU2LFe%2FYqakdP911ha0XhjjiTVAkDwgatWfCGeYocx8M3glG8g8EXhSrLrHnEFJ5Ymow%2FkhIYv6ttYUW1iFmEqqxdVoUs9FmsDYSqmtmJh3Cl1%2BVtl2s7owDUdocR5bceiyoSivGTT5vzpbzL1uoBpmcAAQgW7ArnKD9ng9rc%2BNgrobSNwpSkkhcRN%2BvmXLjIsDovYHHEfmsYFygPAnIDEQrQPzJYCOaLHLUfIt7Oq0LJn9fxkSgNCb1qEIQ5UKgT%2Fs6gJmVOOroJhQBXVqw118QtWLdyUxEP45sUpSzqP7RDdFYMyB9UReMiF1MzPwoUqHt8hjGFFeP5wZAbZ%2F0%2BcAtAAcji6LeSq%2FMYiAvSsdw3GtrfVSVFUBbIhwRWYR7yOcr%2FBi%2FB1MSJZ16JlgH1AGM3EO2QnmMyrSbTSiACgFBv4yCUapZkt9qwWVL7aeOyHvArJjm8%2Fz9BhdI4XcZgz2%2FvRALosjsk1ODOyMcJn9%2FYI6IrkS5vxMGdUwou2YKfyVqJpn5t9aNs3gbQMbdbkxnGdsr4bTHm2AxWo9yNZK4PXR3uzhAh%2BM0AZejnCrGdy0UvJxl0oMKgWSLR%2B1LH2aE9ViejiFs%2BXn6bTjng3MlIhJ1I1TkuLdg6OcAbD7Xx%2Bc3y9TrWAiSHqVkbZ2v9ilCo6s4AjwZCzFyD9mOL305nV9aonvsQeT2L0gVk4OwOJqXXVRW7naaxswDKVdlYLyMXAnntteYmws2xcVVZzq%2BtHPAooQggmJkc6TLSusOiL4RKgwzzYU1iFQgiUBA1H7E8yPau%2BZl9P7AblVNebtHqTgxLfRqrNvZWjsHZFuqMqKcDWdlFjF7UGvX8Jn24DyEAykJwNcdg0OvJ4p5pQ9tV6SMlP4A0PNh8aYze1ArROyUNTNouy8tNF3Rt0CSXb6bRFl4%2FIfQzNMjaE9WwpYOWQnOdEF%2BTdJNO0iFh7%2BI0kfORzQZb6P2kymS9oTxzBiM9rUqLWr1WE5G6ODhycQd%2FUnNVeMbcH68hYkGycNoUNWc8fxaxfwhDbHpfwM5oeTY7rUX8QAAAABJRU5ErkJggg%3D%3D";const Kh=ya.status_dict,NA={}.VITE_PR_PREVIEW_PATH||"/aiida-registry/";function jA(){const{sortOption:e,sortedData:t}=xb();return h.jsx(h.Fragment,{children:Object.entries(t).map(([a,i])=>h.jsxs("div",{className:"submenu-entry",children:[h.jsx(Oi,{to:`/${a}`,children:h.jsxs("h2",{style:{display:"inline"},children:[a," "]})}),i.is_installable==="True"&&h.jsx(FA,{}),h.jsxs("p",{className:"currentstate",children:[h.jsx("img",{className:"svg-badge",src:`${NA}${Kh[i.development_status][1]}`,title:Kh[i.development_status][0]})," ",i.aiida_version&&h.jsx("img",{className:"svg-badge",title:`Compatible with aiida-core ${i.aiida_version}`,src:`https://img.shields.io/badge/AiiDA-${i.aiida_version}-007ec6.svg?logo=${Cb}`}),e==="commits"&&h.jsx("img",{className:"svg-badge",style:{padding:"3px"},src:`https://img.shields.io/badge/Yearly%20Commits-${i.commits_count}-007ec6.svg`}),e==="release"&&i.metadata.release_date&&h.jsx("img",{className:"svg-badge",style:{padding:"3px"},src:`https://img.shields.io/badge/Recent%20Release-${i.metadata.release_date.replace(/-/g,"/")}-007ec6.svg`})]}),h.jsx("p",{children:i.metadata.description}),h.jsxs("ul",{className:"plugin-info",children:[h.jsx("li",{children:h.jsx("a",{href:i.code_home,children:"Source Code"})}),i.documentation_url&&h.jsx("li",{children:h.jsx("a",{href:i.documentation_url,children:"Documentation"})}),h.jsx("li",{children:h.jsx(Oi,{to:`/${a}`,children:"Plugin details"})})]}),i.summaryinfo&&h.jsx(h.Fragment,{children:h.jsx("p",{className:"summaryinfo",children:i.summaryinfo.map(n=>h.jsxs("span",{className:"badge",children:[h.jsx("span",{className:`badge-left ${n.colorclass}`,children:n.text}),h.jsx("span",{className:"badge-right",children:n.count})]},n.text))})})]},a))})}function FA(){const[e,t]=b.useState(!1),a=()=>{t(!0)},i=()=>{t(!1)};return h.jsxs(h.Fragment,{children:[h.jsxs("div",{className:"classbox",style:{backgroundColor:"transparent"},children:[h.jsx(Db,{onClick:a,style:{color:"green",cursor:"pointer",marginBottom:"-5"}}),h.jsx("span",{className:"tooltiptext",children:"Plugin successfully installed"})]}),h.jsxs(fA,{open:e,onClose:i,children:[h.jsx(EA,{children:"This plugin can be installed with the latest aiida-core version."}),h.jsx(kA,{children:h.jsxs(SA,{children:["This check mark indicates that this plugin was installed successfully inside the latest",h.jsxs("a",{rel:"noopener noreferrer",target:"_blank",href:"https://hub.docker.com/r/aiidateam/aiida-core-with-services",children:[h.jsx("code",{children:"aiida-core-with-services"})," docker image"]}),". For in-depth compatibility tests see ",h.jsx("a",{rel:"noopener noreferrer",target:"_blank",href:"https://github.com/aiidateam/aiida-registry/tree/master#how-to-fix-registry-warnings-and-errors",children:"how to reproduce it locally"}),"."]})})]})]})}const OA=ya.globalsummary,MA=ya.plugins,LA=Object.keys(MA).length;function BA(){return h.jsxs(h.Fragment,{children:[h.jsxs("h2",{children:["Registered plugin packages: ",LA]}),h.jsx("div",{className:"globalsummary-box",children:h.jsx("div",{style:{display:"table"},children:OA.map(e=>h.jsxs("span",{className:"badge",style:{display:"table-row",lineHeight:2},children:[h.jsx("span",{style:{display:"table-cell",float:"none",textAlign:"right"},children:h.jsxs("span",{className:`badge-left ${e.colorclass} tooltip`,style:{float:"none",display:"inline",textAlign:"right",border:"none"},children:[e.name,e.tooltip&&h.jsx("span",{className:"tooltiptext",children:e.tooltip})]})}),h.jsx("span",{style:{display:"table-cell",float:"none",textAlign:"left"},children:h.jsxs("span",{className:"badge-right",style:{float:"none",display:"inline",textAlign:"left",border:"none"},children:[e.total_num," plugin",e.total_num!==1?"s":""," in ",e.num_entries," package",e.num_entries!==1?"s":""]})})]},e.name))})})]})}function WA(){const{isSearchSubmitted:e}=ds();return h.jsxs("main",{className:"fade-enter",children:[h.jsx(BA,{}),h.jsxs("div",{id:"entrylist",children:[h.jsx("h1",{children:"Package list"}),h.jsxs("div",{className:"bar-container",children:[h.jsx("div",{style:{flex:"1",marginRight:"10px"},children:h.jsx(HC,{})}),h.jsx(ZR,{})]}),e===!0?h.jsx(XC,{}):h.jsx(jA,{})]})]})}function xi(){return xi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e},xi.apply(this,arguments)}const zA=["children","options"],Vh=["allowFullScreen","allowTransparency","autoComplete","autoFocus","autoPlay","cellPadding","cellSpacing","charSet","classId","colSpan","contentEditable","contextMenu","crossOrigin","encType","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","hrefLang","inputMode","keyParams","keyType","marginHeight","marginWidth","maxLength","mediaGroup","minLength","noValidate","radioGroup","readOnly","rowSpan","spellCheck","srcDoc","srcLang","srcSet","tabIndex","useMap"].reduce((e,t)=>(e[t.toLowerCase()]=t,e),{class:"className",for:"htmlFor"}),Gh={amp:"&",apos:"'",gt:">",lt:"<",nbsp:" ",quot:"“"},$A=["style","script","pre"],UA=["src","href","data","formAction","srcDoc","action"],KA=/([-A-Z0-9_:]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|(?:\{((?:\\.|{[^}]*?}|[^}])*)\})))?/gi,VA=/mailto:/i,GA=/\n{2,}$/,Hh=/^(\s*>[\s\S]*?)(?=\n\n|$)/,HA=/^ *> ?/gm,XA=/^(?:\[!([^\]]*)\]\n)?([\s\S]*)/,JA=/^ {2,}\n/,YA=/^(?:( *[-*_])){3,} *(?:\n *)+\n/,Xh=/^(?: {1,3})?(`{3,}|~{3,}) *(\S+)? *([^\n]*?)?\n([\s\S]*?)(?:\1\n?|$)/,Jh=/^(?: {4}[^\n]+\n*)+(?:\n *)+\n?/,QA=/^(`+)((?:\\`|(?!\1)`|[^`])+)\1/,ZA=/^(?:\n *)*\n/,e3=/\r\n?/g,t3=/^\[\^([^\]]+)](:(.*)((\n+ {4,}.*)|(\n(?!\[\^).+))*)/,a3=/^\[\^([^\]]+)]/,i3=/\f/g,n3=/^---[ \t]*\n(.|\n)*\n---[ \t]*\n/,r3=/^\s*?\[(x|\s)\]/,Yh=/^ *(#{1,6}) *([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,Qh=/^ *(#{1,6}) +([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,Zh=/^([^\n]+)\n *(=|-){3,} *\n/,Gd=/^ *(?!<[a-z][^ >/]* ?\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\n?(\s*(?:<\1[^>]*?>[\s\S]*?<\/\1>|(?!<\1\b)[\s\S])*?)<\/\1>(?!<\/\1>)\n*/i,s3=/&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,eg=/^<!--[\s\S]*?(?:-->)/,o3=/^(data|aria|x)-[a-z_][a-z\d_.-]*$/,Hd=/^ *<([a-z][a-z0-9:]*)(?:\s+((?:<.*?>|[^>])*))?\/?>(?!<\/\1>)(\s*\n)?/i,l3=/^\{.*\}$/,d3=/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,u3=/^<([^ >]+@[^ >]+)>/,c3=/^<([^ >]+:\/[^ >]+)>/,p3=/-([a-z])?/gi,tg=/^(\|.*)\n(?: *(\|? *[-:]+ *\|[-| :]*)\n((?:.*\|.*\n)*))?\n?/,f3=/^[^\n]+(?:  \n|\n{2,})/,m3=/^\[([^\]]*)\]:\s+<?([^\s>]+)>?\s*("([^"]*)")?/,h3=/^!\[([^\]]*)\] ?\[([^\]]*)\]/,g3=/^\[([^\]]*)\] ?\[([^\]]*)\]/,y3=/(\n|^[-*]\s|^#|^ {2,}|^-{2,}|^>\s)/,_3=/\t/g,v3=/(^ *\||\| *$)/g,b3=/^ *:-+: *$/,w3=/^ *:-+ *$/,k3=/^ *-+: *$/,Jl="((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\1|[\\s\\S])+?)",T3=RegExp(`^([*_])\\1${Jl}\\1\\1(?!\\1)`),x3=RegExp(`^([*_])${Jl}\\1(?!\\1)`),D3=RegExp(`^(==)${Jl}\\1`),q3=RegExp(`^(~~)${Jl}\\1`),C3=/^\\([^0-9A-Za-z\s])/,S3=/\\([^0-9A-Za-z\s])/g,P3=/^[\s\S](?:(?!  |[0-9]\.|http)[^=*_~\-\n<`\\\[!])*/,R3=/^\n+/,A3=/^([ \t]*)/,I3=/(?:^|\n)( *)$/,of="(?:\\d+\\.)",lf="(?:[*+-])";function Sb(e){return"( *)("+(e===1?of:lf)+") +"}const Pb=Sb(1),Rb=Sb(2);function Ab(e){return RegExp("^"+(e===1?Pb:Rb))}const E3=Ab(1),N3=Ab(2);function Ib(e){return RegExp("^"+(e===1?Pb:Rb)+"[^\\n]*(?:\\n(?!\\1"+(e===1?of:lf)+" )[^\\n]*)*(\\n|$)","gm")}const j3=Ib(1),F3=Ib(2);function Eb(e){const t=e===1?of:lf;return RegExp("^( *)("+t+") [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1"+t+" (?!"+t+" ))\\n*|\\s*\\n*$)")}const Nb=Eb(1),jb=Eb(2);function ag(e,t){const a=t===1,i=a?Nb:jb,n=a?j3:F3,r=a?E3:N3;return{t:s=>r.test(s),o:ms(function(s,o){const l=I3.exec(o.prevCapture);return l&&(o.list||!o.inline&&!o.simple)?i.exec(s=l[1]+s):null}),i:1,u(s,o,l){const d=a?+s[2]:void 0,c=s[0].replace(GA,`
`).match(n);let f=!1;return{items:c.map(function(g,w){const v=r.exec(g)[0].length,y=RegExp("^ {1,"+v+"}","gm"),T=g.replace(y,"").replace(r,""),u=w===c.length-1,m=T.indexOf(`

`)!==-1||u&&f;f=m;const p=l.inline,_=l.list;let k;l.list=!0,m?(l.inline=!1,k=Tr(T)+`

`):(l.inline=!0,k=Tr(T));const D=o(k,l);return l.inline=p,l.list=_,D}),ordered:a,start:d}},l:(s,o,l)=>e(s.ordered?"ol":"ul",{key:l.key,start:s.type==="20"?s.start:void 0},s.items.map(function(d,c){return e("li",{key:c},o(d,l))}))}}const O3=RegExp(`^\\[((?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*)\\]\\(\\s*<?((?:\\([^)]*\\)|[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['"]([\\s\\S]*?)['"])?\\s*\\)`),M3=/^!\[(.*?)\]\( *((?:\([^)]*\)|[^() ])*) *"?([^)"]*)?"?\)/;function Tr(e){let t=e.length;for(;t>0&&e[t-1]<=" ";)t--;return e.slice(0,t)}function vc(e,t){return e.startsWith(t)}function L3(e,t,a){if(Array.isArray(a)){for(let i=0;i<a.length;i++)if(vc(e,a[i]))return!0;return!1}return a(e,t)}function ir(e){return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g,"a").replace(/[çÇ]/g,"c").replace(/[ðÐ]/g,"d").replace(/[ÈÉÊËéèêë]/g,"e").replace(/[ÏïÎîÍíÌì]/g,"i").replace(/[Ññ]/g,"n").replace(/[øØœŒÕõÔôÓóÒò]/g,"o").replace(/[ÜüÛûÚúÙù]/g,"u").replace(/[ŸÿÝý]/g,"y").replace(/[^a-z0-9- ]/gi,"").replace(/ /gi,"-").toLowerCase()}function B3(e){return k3.test(e)?"right":b3.test(e)?"center":w3.test(e)?"left":null}function ig(e,t,a,i){const n=a.inTable;a.inTable=!0;let r=[[]],s="";function o(){if(!s)return;const l=r[r.length-1];l.push.apply(l,t(s,a)),s=""}return e.trim().split(/(`[^`]*`|\\\||\|)/).filter(Boolean).forEach((l,d,c)=>{l.trim()==="|"&&(o(),i)?d!==0&&d!==c.length-1&&r.push([]):s+=l}),o(),a.inTable=n,r}function W3(e,t,a){a.inline=!0;const i=e[2]?e[2].replace(v3,"").split("|").map(B3):[],n=e[3]?function(s,o,l){return s.trim().split(`
`).map(function(d){return ig(d,o,l,!0)})}(e[3],t,a):[],r=ig(e[1],t,a,!!n.length);return a.inline=!1,n.length?{align:i,cells:n,header:r,type:"25"}:{children:r,type:"21"}}function ng(e,t){return e.align[t]==null?{}:{textAlign:e.align[t]}}function ms(e){return e.inline=1,e}function $a(e){return ms(function(t,a){return a.inline?e.exec(t):null})}function Ua(e){return ms(function(t,a){return a.inline||a.simple?e.exec(t):null})}function wa(e){return function(t,a){return a.inline||a.simple?null:e.exec(t)}}function nr(e){return ms(function(t){return e.exec(t)})}const z3=/(javascript|vbscript|data(?!:image)):/i;function $3(e){try{const t=decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g,"");if(z3.test(t))return null}catch{return null}return e}function sa(e){return e&&e.replace(S3,"$1")}function oo(e,t,a){const i=a.inline||!1,n=a.simple||!1;a.inline=!0,a.simple=!0;const r=e(t,a);return a.inline=i,a.simple=n,r}function U3(e,t,a){const i=a.inline||!1,n=a.simple||!1;a.inline=!1,a.simple=!0;const r=e(t,a);return a.inline=i,a.simple=n,r}function K3(e,t,a){const i=a.inline||!1;a.inline=!1;const n=e(t,a);return a.inline=i,n}const Xd=(e,t,a)=>({children:oo(t,e[2],a)});function Jd(){return{}}function Yd(){return null}function V3(...e){return e.filter(Boolean).join(" ")}function Qd(e,t,a){let i=e;const n=t.split(".");for(;n.length&&(i=i[n[0]],i!==void 0);)n.shift();return i||a}function G3(e="",t={}){t.overrides=t.overrides||{},t.namedCodesToUnicode=t.namedCodesToUnicode?xi({},Gh,t.namedCodesToUnicode):Gh;const a=t.slugify||ir,i=t.sanitizer||$3,n=t.createElement||b.createElement,r=[Hh,Xh,Jh,t.enforceAtxHeadings?Qh:Yh,Zh,tg,Nb,jb],s=[...r,f3,Gd,eg,Hd];function o(u,m,...p){const _=Qd(t.overrides,u+".props",{});return n(function(k,D){const x=Qd(D,k);return x?typeof x=="function"||typeof x=="object"&&"render"in x?x:Qd(D,k+".component",k):k}(u,t.overrides),xi({},m,_,{className:V3(m==null?void 0:m.className,_.className)||void 0}),...p)}function l(u){u=u.replace(n3,"");let m=!1;t.forceInline?m=!0:t.forceBlock||(m=y3.test(u)===!1);const p=v(w(m?u:Tr(u).replace(R3,"")+`

`,{inline:m}));for(;typeof p[p.length-1]=="string"&&!p[p.length-1].trim();)p.pop();if(t.wrapper===null)return p;const _=t.wrapper||(m?"span":"div");let k;if(p.length>1||t.forceWrapper)k=p;else{if(p.length===1)return k=p[0],typeof k=="string"?o("span",{key:"outer"},k):k;k=null}return n(_,{key:"outer"},k)}function d(u,m){if(!m||!m.trim())return null;const p=m.match(KA);return p?p.reduce(function(_,k){const D=k.indexOf("=");if(D!==-1){const x=function(A){return A.indexOf("-")!==-1&&A.match(o3)===null&&(A=A.replace(p3,function(I,E){return E.toUpperCase()})),A}(k.slice(0,D)).trim(),S=function(A){const I=A[0];return(I==='"'||I==="'")&&A.length>=2&&A[A.length-1]===I?A.slice(1,-1):A}(k.slice(D+1).trim()),R=Vh[x]||x;if(R==="ref")return _;const P=_[R]=function(A,I,E,j){return I==="style"?function(O){const M=[];let L="",C=!1,F=!1,B="";if(!O)return M;for(let V=0;V<O.length;V++){const ae=O[V];if(ae!=='"'&&ae!=="'"||C||(F?ae===B&&(F=!1,B=""):(F=!0,B=ae)),ae==="("&&L.endsWith("url")?C=!0:ae===")"&&C&&(C=!1),ae!==";"||F||C)L+=ae;else{const X=L.trim();if(X){const ue=X.indexOf(":");if(ue>0){const ie=X.slice(0,ue).trim(),Be=X.slice(ue+1).trim();M.push([ie,Be])}}L=""}}const Y=L.trim();if(Y){const V=Y.indexOf(":");if(V>0){const ae=Y.slice(0,V).trim(),X=Y.slice(V+1).trim();M.push([ae,X])}}return M}(E).reduce(function(O,[M,L]){return O[M.replace(/(-[a-z])/g,C=>C[1].toUpperCase())]=j(L,A,M),O},{}):UA.indexOf(I)!==-1?j(sa(E),A,I):(E.match(l3)&&(E=sa(E.slice(1,E.length-1))),E==="true"||E!=="false"&&E)}(u,x,S,i);typeof P=="string"&&(Gd.test(P)||Hd.test(P))&&(_[R]=l(P.trim()))}else k!=="style"&&(_[Vh[k]||k]=!0);return _},{}):null}const c=[],f={},g={0:{t:[">"],o:wa(Hh),i:1,u(u,m,p){const[,_,k]=u[0].replace(HA,"").match(XA);return{alert:_,children:m(k,p)}},l(u,m,p){const _={key:p.key};return u.alert&&(_.className="markdown-alert-"+a(u.alert.toLowerCase(),ir),u.children.unshift({attrs:{},children:[{type:"27",text:u.alert}],noInnerParse:!0,type:"11",tag:"header"})),o("blockquote",_,m(u.children,p))}},1:{o:nr(JA),i:1,u:Jd,l:(u,m,p)=>o("br",{key:p.key})},2:{t:u=>{const m=u[0];return m==="-"||m==="*"||m==="_"},o:wa(YA),i:1,u:Jd,l:(u,m,p)=>o("hr",{key:p.key})},3:{t:["    "],o:wa(Jh),i:0,u:u=>({lang:void 0,text:sa(Tr(u[0].replace(/^ {4}/gm,"")))}),l:(u,m,p)=>o("pre",{key:p.key},o("code",xi({},u.attrs,{className:u.lang?"lang-"+u.lang:""}),u.text))},4:{t:["```","~~~"],o:wa(Xh),i:0,u:u=>({attrs:d("code",u[3]||""),lang:u[2]||void 0,text:u[4],type:"3"})},5:{t:["`"],o:Ua(QA),i:3,u:u=>({text:sa(u[2])}),l:(u,m,p)=>o("code",{key:p.key},u.text)},6:{t:["[^"],o:wa(t3),i:0,u:u=>(c.push({footnote:u[2],identifier:u[1]}),{}),l:Yd},7:{t:["[^"],o:$a(a3),i:1,u:u=>({target:"#"+a(u[1],ir),text:u[1]}),l:(u,m,p)=>o("a",{key:p.key,href:i(u.target,"a","href")},o("sup",{key:p.key},u.text))},8:{t:["[ ]","[x]"],o:$a(r3),i:1,u:u=>({completed:u[1].toLowerCase()==="x"}),l:(u,m,p)=>o("input",{checked:u.completed,key:p.key,readOnly:!0,type:"checkbox"})},9:{t:["#"],o:wa(t.enforceAtxHeadings?Qh:Yh),i:1,u:(u,m,p)=>({children:oo(m,u[2],p),id:a(u[2],ir),level:u[1].length}),l:(u,m,p)=>o("h"+u.level,{id:u.id,key:p.key},m(u.children,p))},10:{o:wa(Zh),i:0,u:(u,m,p)=>({children:oo(m,u[1],p),level:u[2]==="="?1:2,type:"9"})},11:{t:["<"],o:nr(Gd),i:1,u(u,m,p){const[,_]=u[3].match(A3),k=RegExp("^"+_,"gm"),D=u[3].replace(k,""),x=(S=D,s.some(E=>E.test(S))?K3:oo);var S;const R=u[1].toLowerCase(),P=$A.indexOf(R)!==-1,A=(P?R:u[1]).trim(),I={attrs:d(A,u[2]),noInnerParse:P,tag:A};if(p.inAnchor=p.inAnchor||R==="a",P)I.text=u[3];else{const E=p.inHTML;p.inHTML=!0,I.children=x(m,D,p),p.inHTML=E}return p.inAnchor=!1,I},l:(u,m,p)=>o(u.tag,xi({key:p.key},u.attrs),u.text||(u.children?m(u.children,p):""))},13:{t:["<"],o:nr(Hd),i:1,u(u){const m=u[1].trim();return{attrs:d(m,u[2]||""),tag:m}},l:(u,m,p)=>o(u.tag,xi({},u.attrs,{key:p.key}))},12:{t:["<!--"],o:nr(eg),i:1,u:()=>({}),l:Yd},14:{t:["!["],o:Ua(M3),i:1,u:u=>({alt:sa(u[1]),target:sa(u[2]),title:sa(u[3])}),l:(u,m,p)=>o("img",{key:p.key,alt:u.alt||void 0,title:u.title||void 0,src:i(u.target,"img","src")})},15:{t:["["],o:$a(O3),i:3,u:(u,m,p)=>({children:U3(m,u[1],p),target:sa(u[2]),title:sa(u[3])}),l:(u,m,p)=>o("a",{key:p.key,href:i(u.target,"a","href"),title:u.title},m(u.children,p))},16:{t:["<"],o:$a(c3),i:0,u:u=>({children:[{text:u[1],type:"27"}],target:u[1],type:"15"})},17:{t:(u,m)=>!m.inAnchor&&!t.disableAutoLink&&(vc(u,"http://")||vc(u,"https://")),o:$a(d3),i:0,u:u=>({children:[{text:u[1],type:"27"}],target:u[1],title:void 0,type:"15"})},18:{t:["<"],o:$a(u3),i:0,u(u){let m=u[1],p=u[1];return VA.test(p)||(p="mailto:"+p),{children:[{text:m.replace("mailto:",""),type:"27"}],target:p,type:"15"}}},20:ag(o,1),33:ag(o,2),19:{o:wa(ZA),i:3,u:Jd,l:()=>`
`},21:{o:ms(function(u,m){if(m.inline||m.simple||m.inHTML&&u.indexOf(`

`)===-1&&m.prevCapture.indexOf(`

`)===-1)return null;let p="";u.split(`
`).every(k=>(k+=`
`,!r.some(D=>D.test(k))&&(p+=k,!!k.trim())));const _=Tr(p);return _===""?null:[p,,_]}),i:3,u:Xd,l:(u,m,p)=>o("p",{key:p.key},m(u.children,p))},22:{t:["["],o:$a(m3),i:0,u:u=>(f[u[1]]={target:u[2],title:u[4]},{}),l:Yd},23:{t:["!["],o:Ua(h3),i:0,u:u=>({alt:u[1]?sa(u[1]):void 0,ref:u[2]}),l:(u,m,p)=>f[u.ref]?o("img",{key:p.key,alt:u.alt,src:i(f[u.ref].target,"img","src"),title:f[u.ref].title}):null},24:{t:["["],o:$a(g3),i:0,u:(u,m,p)=>({children:m(u[1],p),fallbackChildren:u[0],ref:u[2]}),l:(u,m,p)=>f[u.ref]?o("a",{key:p.key,href:i(f[u.ref].target,"a","href"),title:f[u.ref].title},m(u.children,p)):o("span",{key:p.key},u.fallbackChildren)},25:{t:["|"],o:wa(tg),i:1,u:W3,l(u,m,p){const _=u;return o("table",{key:p.key},o("thead",null,o("tr",null,_.header.map(function(k,D){return o("th",{key:D,style:ng(_,D)},m(k,p))}))),o("tbody",null,_.cells.map(function(k,D){return o("tr",{key:D},k.map(function(x,S){return o("td",{key:S,style:ng(_,S)},m(x,p))}))})))}},27:{o:nr(P3),i:4,u(u){const m=u[0];return{text:m.indexOf("&")===-1?m:m.replace(s3,(p,_)=>t.namedCodesToUnicode[_]||p)}},l:u=>u.text},28:{t:["**","__"],o:Ua(T3),i:2,u:(u,m,p)=>({children:m(u[2],p)}),l:(u,m,p)=>o("strong",{key:p.key},m(u.children,p))},29:{t:u=>{const m=u[0];return(m==="*"||m==="_")&&u[1]!==m},o:Ua(x3),i:3,u:(u,m,p)=>({children:m(u[2],p)}),l:(u,m,p)=>o("em",{key:p.key},m(u.children,p))},30:{t:["\\"],o:Ua(C3),i:1,u:u=>({text:u[1],type:"27"})},31:{t:["=="],o:Ua(D3),i:3,u:Xd,l:(u,m,p)=>o("mark",{key:p.key},m(u.children,p))},32:{t:["~~"],o:Ua(q3),i:3,u:Xd,l:(u,m,p)=>o("del",{key:p.key},m(u.children,p))}};t.disableParsingRawHTML===!0&&(delete g[11],delete g[13]);const w=function(u){var m=Object.keys(u);function p(_,k){var D=[];if(k.prevCapture=k.prevCapture||"",_.trim())for(;_;)for(var x=0;x<m.length;){var S=m[x],R=u[S];if(!R.t||L3(_,k,R.t)){var P=R.o(_,k);if(P&&P[0]){_=_.substring(P[0].length);var A=R.u(P,p,k);k.prevCapture+=P[0],A.type||(A.type=S),D.push(A);break}x++}else x++}return k.prevCapture="",D}return m.sort(function(_,k){return u[_].i-u[k].i||(_<k?-1:1)}),function(_,k){return p(function(D){return D.replace(e3,`
`).replace(i3,"").replace(_3,"    ")}(_),k)}}(g),v=(y=function(u,m){return function(p,_,k){const D=u[p.type].l;return m?m(()=>D(p,_,k),p,_,k):D(p,_,k)}}(g,t.renderRule),function u(m,p={}){if(Array.isArray(m)){const _=p.key,k=[];let D=!1;for(let x=0;x<m.length;x++){p.key=x;const S=u(m[x],p),R=typeof S=="string";R&&D?k[k.length-1]+=S:S!==null&&k.push(S),D=R}return p.key=_,k}return y(m,u,p)});var y;const T=l(e);return c.length?o("div",null,T,o("footer",{key:"footer"},c.map(function(u){return o("div",{id:a(u.identifier,ir),key:u.identifier},u.identifier,v(w(u.footnote,{inline:!0})))}))):T}const bc=e=>{let{children:t="",options:a}=e,i=function(n,r){if(n==null)return{};var s,o,l={},d=Object.keys(n);for(o=0;o<d.length;o++)r.indexOf(s=d[o])>=0||(l[s]=n[s]);return l}(e,zA);return b.cloneElement(G3(t,a),i)};const H3=["className","elementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps"],X3=["component","slots","slotProps"],J3=["component"];function rg(e,t){const{className:a,elementType:i,ownerState:n,externalForwardedProps:r,getSlotOwnerState:s,internalForwardedProps:o}=t,l=$(t,H3),{component:d,slots:c={[e]:void 0},slotProps:f={[e]:void 0}}=r,g=$(r,X3),w=c[e]||i,v=ov(f[e],n),y=sv(q({className:a},l,{externalForwardedProps:e==="root"?g:void 0,externalSlotProps:v})),{props:{component:T},internalRef:u}=y,m=$(y.props,J3),p=Ke(u,v==null?void 0:v.ref,t.ref),_=s?s(m):{},k=q({},n,_),D=e==="root"?T||d:T,x=iv(w,q({},e==="root"&&!d&&!c[e]&&o,e!=="root"&&!c[e]&&o,m,D&&{as:D},{ref:p}),k);return Object.keys(_).forEach(S=>{delete x[S]}),[w,x]}function Y3(e){return pe("MuiAlert",e)}const Q3=se("MuiAlert",["root","action","icon","message","filled","colorSuccess","colorInfo","colorWarning","colorError","filledSuccess","filledInfo","filledWarning","filledError","outlined","outlinedSuccess","outlinedInfo","outlinedWarning","outlinedError","standard","standardSuccess","standardInfo","standardWarning","standardError"]),sg=Q3;function Z3(e){return pe("MuiIconButton",e)}const eI=se("MuiIconButton",["root","disabled","colorInherit","colorPrimary","colorSecondary","colorError","colorInfo","colorSuccess","colorWarning","edgeStart","edgeEnd","sizeSmall","sizeMedium","sizeLarge"]),tI=eI,aI=["edge","children","className","color","disabled","disableFocusRipple","size"],iI=e=>{const{classes:t,disabled:a,color:i,edge:n,size:r}=e,s={root:["root",a&&"disabled",i!=="default"&&`color${J(i)}`,n&&`edge${J(n)}`,`size${J(r)}`]};return me(s,Z3,t)},nI=z(db,{name:"MuiIconButton",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,a.color!=="default"&&t[`color${J(a.color)}`],a.edge&&t[`edge${J(a.edge)}`],t[`size${J(a.size)}`]]}})(({theme:e,ownerState:t})=>q({textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:8,borderRadius:"50%",overflow:"visible",color:(e.vars||e).palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest})},!t.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})`:qa(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},t.edge==="start"&&{marginLeft:t.size==="small"?-3:-12},t.edge==="end"&&{marginRight:t.size==="small"?-3:-12}),({theme:e,ownerState:t})=>{var a;const i=(a=(e.vars||e).palette)==null?void 0:a[t.color];return q({},t.color==="inherit"&&{color:"inherit"},t.color!=="inherit"&&t.color!=="default"&&q({color:i==null?void 0:i.main},!t.disableRipple&&{"&:hover":q({},i&&{backgroundColor:e.vars?`rgba(${i.mainChannel} / ${e.vars.palette.action.hoverOpacity})`:qa(i.main,e.palette.action.hoverOpacity)},{"@media (hover: none)":{backgroundColor:"transparent"}})}),t.size==="small"&&{padding:5,fontSize:e.typography.pxToRem(18)},t.size==="large"&&{padding:12,fontSize:e.typography.pxToRem(28)},{[`&.${tI.disabled}`]:{backgroundColor:"transparent",color:(e.vars||e).palette.action.disabled}})}),rI=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiIconButton"}),{edge:n=!1,children:r,className:s,color:o="default",disabled:l=!1,disableFocusRipple:d=!1,size:c="medium"}=i,f=$(i,aI),g=q({},i,{edge:n,color:o,disabled:l,disableFocusRipple:d,size:c}),w=iI(g);return h.jsx(nI,q({className:G(w.root,s),centerRipple:!0,focusRipple:!d,disabled:l,ref:a},f,{ownerState:g,children:r}))}),sI=rI,oI=zi(h.jsx("path",{d:"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"}),"SuccessOutlined"),lI=zi(h.jsx("path",{d:"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"}),"ReportProblemOutlined"),dI=zi(h.jsx("path",{d:"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}),"ErrorOutline"),uI=zi(h.jsx("path",{d:"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"}),"InfoOutlined"),cI=zi(h.jsx("path",{d:"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"}),"Close"),pI=["action","children","className","closeText","color","components","componentsProps","icon","iconMapping","onClose","role","severity","slotProps","slots","variant"],fI=e=>{const{variant:t,color:a,severity:i,classes:n}=e,r={root:["root",`color${J(a||i)}`,`${t}${J(a||i)}`,`${t}`],icon:["icon"],message:["message"],action:["action"]};return me(r,Y3,n)},mI=z(fs,{name:"MuiAlert",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.root,t[a.variant],t[`${a.variant}${J(a.color||a.severity)}`]]}})(({theme:e})=>{const t=e.palette.mode==="light"?sc:oc,a=e.palette.mode==="light"?oc:sc;return q({},e.typography.body2,{backgroundColor:"transparent",display:"flex",padding:"6px 16px",variants:[...Object.entries(e.palette).filter(([,i])=>i.main&&i.light).map(([i])=>({props:{colorSeverity:i,variant:"standard"},style:{color:e.vars?e.vars.palette.Alert[`${i}Color`]:t(e.palette[i].light,.6),backgroundColor:e.vars?e.vars.palette.Alert[`${i}StandardBg`]:a(e.palette[i].light,.9),[`& .${sg.icon}`]:e.vars?{color:e.vars.palette.Alert[`${i}IconColor`]}:{color:e.palette[i].main}}})),...Object.entries(e.palette).filter(([,i])=>i.main&&i.light).map(([i])=>({props:{colorSeverity:i,variant:"outlined"},style:{color:e.vars?e.vars.palette.Alert[`${i}Color`]:t(e.palette[i].light,.6),border:`1px solid ${(e.vars||e).palette[i].light}`,[`& .${sg.icon}`]:e.vars?{color:e.vars.palette.Alert[`${i}IconColor`]}:{color:e.palette[i].main}}})),...Object.entries(e.palette).filter(([,i])=>i.main&&i.dark).map(([i])=>({props:{colorSeverity:i,variant:"filled"},style:q({fontWeight:e.typography.fontWeightMedium},e.vars?{color:e.vars.palette.Alert[`${i}FilledColor`],backgroundColor:e.vars.palette.Alert[`${i}FilledBg`]}:{backgroundColor:e.palette.mode==="dark"?e.palette[i].dark:e.palette[i].main,color:e.palette.getContrastText(e.palette[i].main)})}))]})}),hI=z("div",{name:"MuiAlert",slot:"Icon",overridesResolver:(e,t)=>t.icon})({marginRight:12,padding:"7px 0",display:"flex",fontSize:22,opacity:.9}),gI=z("div",{name:"MuiAlert",slot:"Message",overridesResolver:(e,t)=>t.message})({padding:"8px 0",minWidth:0,overflow:"auto"}),og=z("div",{name:"MuiAlert",slot:"Action",overridesResolver:(e,t)=>t.action})({display:"flex",alignItems:"flex-start",padding:"4px 0 0 16px",marginLeft:"auto",marginRight:-8}),lg={success:h.jsx(oI,{fontSize:"inherit"}),warning:h.jsx(lI,{fontSize:"inherit"}),error:h.jsx(dI,{fontSize:"inherit"}),info:h.jsx(uI,{fontSize:"inherit"})},yI=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiAlert"}),{action:n,children:r,className:s,closeText:o="Close",color:l,components:d={},componentsProps:c={},icon:f,iconMapping:g=lg,onClose:w,role:v="alert",severity:y="success",slotProps:T={},slots:u={},variant:m="standard"}=i,p=$(i,pI),_=q({},i,{color:l,severity:y,variant:m,colorSeverity:l||y}),k=fI(_),D={slots:q({closeButton:d.CloseButton,closeIcon:d.CloseIcon},u),slotProps:q({},c,T)},[x,S]=rg("closeButton",{elementType:sI,externalForwardedProps:D,ownerState:_}),[R,P]=rg("closeIcon",{elementType:cI,externalForwardedProps:D,ownerState:_});return h.jsxs(mI,q({role:v,elevation:0,ownerState:_,className:G(k.root,s),ref:a},p,{children:[f!==!1?h.jsx(hI,{ownerState:_,className:k.icon,children:f||g[y]||lg[y]}):null,h.jsx(gI,{ownerState:_,className:k.message,children:r}),n!=null?h.jsx(og,{ownerState:_,className:k.action,children:n}):null,n==null&&w?h.jsx(og,{ownerState:_,className:k.action,children:h.jsx(x,q({size:"small","aria-label":o,title:o,color:"inherit",onClick:w},S,{children:h.jsx(R,q({fontSize:"small"},P))}))}):null]}))}),Os=yI;var df={},uf={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.Doctype=e.CDATA=e.Tag=e.Style=e.Script=e.Comment=e.Directive=e.Text=e.Root=e.isTag=e.ElementType=void 0;var t;(function(i){i.Root="root",i.Text="text",i.Directive="directive",i.Comment="comment",i.Script="script",i.Style="style",i.Tag="tag",i.CDATA="cdata",i.Doctype="doctype"})(t=e.ElementType||(e.ElementType={}));function a(i){return i.type===t.Tag||i.type===t.Script||i.type===t.Style}e.isTag=a,e.Root=t.Root,e.Text=t.Text,e.Directive=t.Directive,e.Comment=t.Comment,e.Script=t.Script,e.Style=t.Style,e.Tag=t.Tag,e.CDATA=t.CDATA,e.Doctype=t.Doctype})(uf);var Q={},gi=pt&&pt.__extends||function(){var e=function(t,a){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,n){i.__proto__=n}||function(i,n){for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(i[r]=n[r])},e(t,a)};return function(t,a){if(typeof a!="function"&&a!==null)throw new TypeError("Class extends value "+String(a)+" is not a constructor or null");e(t,a);function i(){this.constructor=t}t.prototype=a===null?Object.create(a):(i.prototype=a.prototype,new i)}}(),xr=pt&&pt.__assign||function(){return xr=Object.assign||function(e){for(var t,a=1,i=arguments.length;a<i;a++){t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},xr.apply(this,arguments)};Object.defineProperty(Q,"__esModule",{value:!0});Q.cloneNode=Q.hasChildren=Q.isDocument=Q.isDirective=Q.isComment=Q.isText=Q.isCDATA=Q.isTag=Q.Element=Q.Document=Q.CDATA=Q.NodeWithChildren=Q.ProcessingInstruction=Q.Comment=Q.Text=Q.DataNode=Q.Node=void 0;var _t=uf,cf=function(){function e(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent},set:function(t){this.parent=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){return this.prev},set:function(t){this.prev=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){return this.next},set:function(t){this.next=t},enumerable:!1,configurable:!0}),e.prototype.cloneNode=function(t){return t===void 0&&(t=!1),pf(this,t)},e}();Q.Node=cf;var Yl=function(e){gi(t,e);function t(a){var i=e.call(this)||this;return i.data=a,i}return Object.defineProperty(t.prototype,"nodeValue",{get:function(){return this.data},set:function(a){this.data=a},enumerable:!1,configurable:!0}),t}(cf);Q.DataNode=Yl;var Fb=function(e){gi(t,e);function t(){var a=e!==null&&e.apply(this,arguments)||this;return a.type=_t.ElementType.Text,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 3},enumerable:!1,configurable:!0}),t}(Yl);Q.Text=Fb;var Ob=function(e){gi(t,e);function t(){var a=e!==null&&e.apply(this,arguments)||this;return a.type=_t.ElementType.Comment,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 8},enumerable:!1,configurable:!0}),t}(Yl);Q.Comment=Ob;var Mb=function(e){gi(t,e);function t(a,i){var n=e.call(this,i)||this;return n.name=a,n.type=_t.ElementType.Directive,n}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),t}(Yl);Q.ProcessingInstruction=Mb;var Ql=function(e){gi(t,e);function t(a){var i=e.call(this)||this;return i.children=a,i}return Object.defineProperty(t.prototype,"firstChild",{get:function(){var a;return(a=this.children[0])!==null&&a!==void 0?a:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return this.children.length>0?this.children[this.children.length-1]:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this.children},set:function(a){this.children=a},enumerable:!1,configurable:!0}),t}(cf);Q.NodeWithChildren=Ql;var Lb=function(e){gi(t,e);function t(){var a=e!==null&&e.apply(this,arguments)||this;return a.type=_t.ElementType.CDATA,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 4},enumerable:!1,configurable:!0}),t}(Ql);Q.CDATA=Lb;var Bb=function(e){gi(t,e);function t(){var a=e!==null&&e.apply(this,arguments)||this;return a.type=_t.ElementType.Root,a}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 9},enumerable:!1,configurable:!0}),t}(Ql);Q.Document=Bb;var Wb=function(e){gi(t,e);function t(a,i,n,r){n===void 0&&(n=[]),r===void 0&&(r=a==="script"?_t.ElementType.Script:a==="style"?_t.ElementType.Style:_t.ElementType.Tag);var s=e.call(this,n)||this;return s.name=a,s.attribs=i,s.type=r,s}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tagName",{get:function(){return this.name},set:function(a){this.name=a},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){var a=this;return Object.keys(this.attribs).map(function(i){var n,r;return{name:i,value:a.attribs[i],namespace:(n=a["x-attribsNamespace"])===null||n===void 0?void 0:n[i],prefix:(r=a["x-attribsPrefix"])===null||r===void 0?void 0:r[i]}})},enumerable:!1,configurable:!0}),t}(Ql);Q.Element=Wb;function zb(e){return(0,_t.isTag)(e)}Q.isTag=zb;function $b(e){return e.type===_t.ElementType.CDATA}Q.isCDATA=$b;function Ub(e){return e.type===_t.ElementType.Text}Q.isText=Ub;function Kb(e){return e.type===_t.ElementType.Comment}Q.isComment=Kb;function Vb(e){return e.type===_t.ElementType.Directive}Q.isDirective=Vb;function Gb(e){return e.type===_t.ElementType.Root}Q.isDocument=Gb;function _I(e){return Object.prototype.hasOwnProperty.call(e,"children")}Q.hasChildren=_I;function pf(e,t){t===void 0&&(t=!1);var a;if(Ub(e))a=new Fb(e.data);else if(Kb(e))a=new Ob(e.data);else if(zb(e)){var i=t?Zd(e.children):[],n=new Wb(e.name,xr({},e.attribs),i);i.forEach(function(l){return l.parent=n}),e.namespace!=null&&(n.namespace=e.namespace),e["x-attribsNamespace"]&&(n["x-attribsNamespace"]=xr({},e["x-attribsNamespace"])),e["x-attribsPrefix"]&&(n["x-attribsPrefix"]=xr({},e["x-attribsPrefix"])),a=n}else if($b(e)){var i=t?Zd(e.children):[],r=new Lb(i);i.forEach(function(d){return d.parent=r}),a=r}else if(Gb(e)){var i=t?Zd(e.children):[],s=new Bb(i);i.forEach(function(d){return d.parent=s}),e["x-mode"]&&(s["x-mode"]=e["x-mode"]),a=s}else if(Vb(e)){var o=new Mb(e.name,e.data);e["x-name"]!=null&&(o["x-name"]=e["x-name"],o["x-publicId"]=e["x-publicId"],o["x-systemId"]=e["x-systemId"]),a=o}else throw new Error("Not implemented yet: ".concat(e.type));return a.startIndex=e.startIndex,a.endIndex=e.endIndex,e.sourceCodeLocation!=null&&(a.sourceCodeLocation=e.sourceCodeLocation),a}Q.cloneNode=pf;function Zd(e){for(var t=e.map(function(i){return pf(i,!0)}),a=1;a<t.length;a++)t[a].prev=t[a-1],t[a-1].next=t[a];return t}(function(e){var t=pt&&pt.__createBinding||(Object.create?function(o,l,d,c){c===void 0&&(c=d);var f=Object.getOwnPropertyDescriptor(l,d);(!f||("get"in f?!l.__esModule:f.writable||f.configurable))&&(f={enumerable:!0,get:function(){return l[d]}}),Object.defineProperty(o,c,f)}:function(o,l,d,c){c===void 0&&(c=d),o[c]=l[d]}),a=pt&&pt.__exportStar||function(o,l){for(var d in o)d!=="default"&&!Object.prototype.hasOwnProperty.call(l,d)&&t(l,o,d)};Object.defineProperty(e,"__esModule",{value:!0}),e.DomHandler=void 0;var i=uf,n=Q;a(Q,e);var r={withStartIndices:!1,withEndIndices:!1,xmlMode:!1},s=function(){function o(l,d,c){this.dom=[],this.root=new n.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,typeof d=="function"&&(c=d,d=r),typeof l=="object"&&(d=l,l=void 0),this.callback=l??null,this.options=d??r,this.elementCB=c??null}return o.prototype.onparserinit=function(l){this.parser=l},o.prototype.onreset=function(){this.dom=[],this.root=new n.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null},o.prototype.onend=function(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))},o.prototype.onerror=function(l){this.handleCallback(l)},o.prototype.onclosetag=function(){this.lastNode=null;var l=this.tagStack.pop();this.options.withEndIndices&&(l.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(l)},o.prototype.onopentag=function(l,d){var c=this.options.xmlMode?i.ElementType.Tag:void 0,f=new n.Element(l,d,void 0,c);this.addNode(f),this.tagStack.push(f)},o.prototype.ontext=function(l){var d=this.lastNode;if(d&&d.type===i.ElementType.Text)d.data+=l,this.options.withEndIndices&&(d.endIndex=this.parser.endIndex);else{var c=new n.Text(l);this.addNode(c),this.lastNode=c}},o.prototype.oncomment=function(l){if(this.lastNode&&this.lastNode.type===i.ElementType.Comment){this.lastNode.data+=l;return}var d=new n.Comment(l);this.addNode(d),this.lastNode=d},o.prototype.oncommentend=function(){this.lastNode=null},o.prototype.oncdatastart=function(){var l=new n.Text(""),d=new n.CDATA([l]);this.addNode(d),l.parent=d,this.lastNode=l},o.prototype.oncdataend=function(){this.lastNode=null},o.prototype.onprocessinginstruction=function(l,d){var c=new n.ProcessingInstruction(l,d);this.addNode(c)},o.prototype.handleCallback=function(l){if(typeof this.callback=="function")this.callback(l,this.dom);else if(l)throw l},o.prototype.addNode=function(l){var d=this.tagStack[this.tagStack.length-1],c=d.children[d.children.length-1];this.options.withStartIndices&&(l.startIndex=this.parser.startIndex),this.options.withEndIndices&&(l.endIndex=this.parser.endIndex),d.children.push(l),c&&(l.prev=c,c.next=l),l.parent=d,this.lastNode=null},o}();e.DomHandler=s,e.default=s})(df);var ff={},mf={};Object.defineProperty(mf,"__esModule",{value:!0});var dg="html",ug="head",Ms="body",vI=/<([a-zA-Z]+[0-9]?)/,cg=/<head[^]*>/i,pg=/<body[^]*>/i,Ko=function(e,t){throw new Error("This browser does not support `document.implementation.createHTMLDocument`")},wc=function(e,t){throw new Error("This browser does not support `DOMParser.prototype.parseFromString`")},fg=typeof window=="object"&&window.DOMParser;if(typeof fg=="function"){var bI=new fg,wI="text/html";wc=function(e,t){return t&&(e="<".concat(t,">").concat(e,"</").concat(t,">")),bI.parseFromString(e,wI)},Ko=wc}if(typeof document=="object"&&document.implementation){var Ls=document.implementation.createHTMLDocument();Ko=function(e,t){if(t){var a=Ls.documentElement.querySelector(t);return a&&(a.innerHTML=e),Ls}return Ls.documentElement.innerHTML=e,Ls}}var Bs=typeof document=="object"&&document.createElement("template"),kc;Bs&&Bs.content&&(kc=function(e){return Bs.innerHTML=e,Bs.content.childNodes});function kI(e){var t,a,i=e.match(vI),n=i&&i[1]?i[1].toLowerCase():"";switch(n){case dg:{var r=wc(e);if(!cg.test(e)){var s=r.querySelector(ug);(t=s==null?void 0:s.parentNode)===null||t===void 0||t.removeChild(s)}if(!pg.test(e)){var s=r.querySelector(Ms);(a=s==null?void 0:s.parentNode)===null||a===void 0||a.removeChild(s)}return r.querySelectorAll(dg)}case ug:case Ms:{var o=Ko(e).querySelectorAll(n);return pg.test(e)&&cg.test(e)?o[0].parentNode.childNodes:o}default:{if(kc)return kc(e);var s=Ko(e,Ms).querySelector(Ms);return s.childNodes}}}mf.default=kI;var An={},Hb={};(function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.CASE_SENSITIVE_TAG_NAMES_MAP=e.CASE_SENSITIVE_TAG_NAMES=void 0,e.CASE_SENSITIVE_TAG_NAMES=["animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","linearGradient","radialGradient","textPath"],e.CASE_SENSITIVE_TAG_NAMES_MAP=e.CASE_SENSITIVE_TAG_NAMES.reduce(function(t,a){return t[a.toLowerCase()]=a,t},{})})(Hb);Object.defineProperty(An,"__esModule",{value:!0});An.formatDOM=An.formatAttributes=void 0;var Ws=df,TI=Hb;function xI(e){return TI.CASE_SENSITIVE_TAG_NAMES_MAP[e]}function Xb(e){for(var t={},a=0,i=e.length;a<i;a++){var n=e[a];t[n.name]=n.value}return t}An.formatAttributes=Xb;function DI(e){e=e.toLowerCase();var t=xI(e);return t||e}function Jb(e,t,a){t===void 0&&(t=null);for(var i=[],n,r=0,s=e.length;r<s;r++){var o=e[r];switch(o.nodeType){case 1:{var l=DI(o.nodeName);n=new Ws.Element(l,Xb(o.attributes)),n.children=Jb(l==="template"?o.content.childNodes:o.childNodes,n);break}case 3:n=new Ws.Text(o.nodeValue);break;case 8:n=new Ws.Comment(o.nodeValue);break;default:continue}var d=i[r-1]||null;d&&(d.next=n),n.parent=t,n.prev=d,n.next=null,i.push(n)}return a&&(n=new Ws.ProcessingInstruction(a.substring(0,a.indexOf(" ")).toLowerCase(),a),n.next=i[0]||null,n.parent=t,i.unshift(n),i[1]&&(i[1].prev=i[0])),i}An.formatDOM=Jb;var qI=pt&&pt.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ff,"__esModule",{value:!0});var CI=qI(mf),SI=An,PI=/<(![a-zA-Z\s]+)>/;function RI(e){if(typeof e!="string")throw new TypeError("First argument must be a string");if(!e)return[];var t=e.match(PI),a=t?t[1]:void 0;return(0,SI.formatDOM)((0,CI.default)(e),null,a)}ff.default=RI;var ia={},Zl={},AI=0;Zl.SAME=AI;var II=1;Zl.CAMELCASE=II;Zl.possibleStandardNames={accept:0,acceptCharset:1,"accept-charset":"acceptCharset",accessKey:1,action:0,allowFullScreen:1,alt:0,as:0,async:0,autoCapitalize:1,autoComplete:1,autoCorrect:1,autoFocus:1,autoPlay:1,autoSave:1,capture:0,cellPadding:1,cellSpacing:1,challenge:0,charSet:1,checked:0,children:0,cite:0,class:"className",classID:1,className:1,cols:0,colSpan:1,content:0,contentEditable:1,contextMenu:1,controls:0,controlsList:1,coords:0,crossOrigin:1,dangerouslySetInnerHTML:1,data:0,dateTime:1,default:0,defaultChecked:1,defaultValue:1,defer:0,dir:0,disabled:0,disablePictureInPicture:1,disableRemotePlayback:1,download:0,draggable:0,encType:1,enterKeyHint:1,for:"htmlFor",form:0,formMethod:1,formAction:1,formEncType:1,formNoValidate:1,formTarget:1,frameBorder:1,headers:0,height:0,hidden:0,high:0,href:0,hrefLang:1,htmlFor:1,httpEquiv:1,"http-equiv":"httpEquiv",icon:0,id:0,innerHTML:1,inputMode:1,integrity:0,is:0,itemID:1,itemProp:1,itemRef:1,itemScope:1,itemType:1,keyParams:1,keyType:1,kind:0,label:0,lang:0,list:0,loop:0,low:0,manifest:0,marginWidth:1,marginHeight:1,max:0,maxLength:1,media:0,mediaGroup:1,method:0,min:0,minLength:1,multiple:0,muted:0,name:0,noModule:1,nonce:0,noValidate:1,open:0,optimum:0,pattern:0,placeholder:0,playsInline:1,poster:0,preload:0,profile:0,radioGroup:1,readOnly:1,referrerPolicy:1,rel:0,required:0,reversed:0,role:0,rows:0,rowSpan:1,sandbox:0,scope:0,scoped:0,scrolling:0,seamless:0,selected:0,shape:0,size:0,sizes:0,span:0,spellCheck:1,src:0,srcDoc:1,srcLang:1,srcSet:1,start:0,step:0,style:0,summary:0,tabIndex:1,target:0,title:0,type:0,useMap:1,value:0,width:0,wmode:0,wrap:0,about:0,accentHeight:1,"accent-height":"accentHeight",accumulate:0,additive:0,alignmentBaseline:1,"alignment-baseline":"alignmentBaseline",allowReorder:1,alphabetic:0,amplitude:0,arabicForm:1,"arabic-form":"arabicForm",ascent:0,attributeName:1,attributeType:1,autoReverse:1,azimuth:0,baseFrequency:1,baselineShift:1,"baseline-shift":"baselineShift",baseProfile:1,bbox:0,begin:0,bias:0,by:0,calcMode:1,capHeight:1,"cap-height":"capHeight",clip:0,clipPath:1,"clip-path":"clipPath",clipPathUnits:1,clipRule:1,"clip-rule":"clipRule",color:0,colorInterpolation:1,"color-interpolation":"colorInterpolation",colorInterpolationFilters:1,"color-interpolation-filters":"colorInterpolationFilters",colorProfile:1,"color-profile":"colorProfile",colorRendering:1,"color-rendering":"colorRendering",contentScriptType:1,contentStyleType:1,cursor:0,cx:0,cy:0,d:0,datatype:0,decelerate:0,descent:0,diffuseConstant:1,direction:0,display:0,divisor:0,dominantBaseline:1,"dominant-baseline":"dominantBaseline",dur:0,dx:0,dy:0,edgeMode:1,elevation:0,enableBackground:1,"enable-background":"enableBackground",end:0,exponent:0,externalResourcesRequired:1,fill:0,fillOpacity:1,"fill-opacity":"fillOpacity",fillRule:1,"fill-rule":"fillRule",filter:0,filterRes:1,filterUnits:1,floodOpacity:1,"flood-opacity":"floodOpacity",floodColor:1,"flood-color":"floodColor",focusable:0,fontFamily:1,"font-family":"fontFamily",fontSize:1,"font-size":"fontSize",fontSizeAdjust:1,"font-size-adjust":"fontSizeAdjust",fontStretch:1,"font-stretch":"fontStretch",fontStyle:1,"font-style":"fontStyle",fontVariant:1,"font-variant":"fontVariant",fontWeight:1,"font-weight":"fontWeight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:1,"glyph-name":"glyphName",glyphOrientationHorizontal:1,"glyph-orientation-horizontal":"glyphOrientationHorizontal",glyphOrientationVertical:1,"glyph-orientation-vertical":"glyphOrientationVertical",glyphRef:1,gradientTransform:1,gradientUnits:1,hanging:0,horizAdvX:1,"horiz-adv-x":"horizAdvX",horizOriginX:1,"horiz-origin-x":"horizOriginX",ideographic:0,imageRendering:1,"image-rendering":"imageRendering",in2:0,in:0,inlist:0,intercept:0,k1:0,k2:0,k3:0,k4:0,k:0,kernelMatrix:1,kernelUnitLength:1,kerning:0,keyPoints:1,keySplines:1,keyTimes:1,lengthAdjust:1,letterSpacing:1,"letter-spacing":"letterSpacing",lightingColor:1,"lighting-color":"lightingColor",limitingConeAngle:1,local:0,markerEnd:1,"marker-end":"markerEnd",markerHeight:1,markerMid:1,"marker-mid":"markerMid",markerStart:1,"marker-start":"markerStart",markerUnits:1,markerWidth:1,mask:0,maskContentUnits:1,maskUnits:1,mathematical:0,mode:0,numOctaves:1,offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:1,"overline-position":"overlinePosition",overlineThickness:1,"overline-thickness":"overlineThickness",paintOrder:1,"paint-order":"paintOrder",panose1:0,"panose-1":"panose1",pathLength:1,patternContentUnits:1,patternTransform:1,patternUnits:1,pointerEvents:1,"pointer-events":"pointerEvents",points:0,pointsAtX:1,pointsAtY:1,pointsAtZ:1,prefix:0,preserveAlpha:1,preserveAspectRatio:1,primitiveUnits:1,property:0,r:0,radius:0,refX:1,refY:1,renderingIntent:1,"rendering-intent":"renderingIntent",repeatCount:1,repeatDur:1,requiredExtensions:1,requiredFeatures:1,resource:0,restart:0,result:0,results:0,rotate:0,rx:0,ry:0,scale:0,security:0,seed:0,shapeRendering:1,"shape-rendering":"shapeRendering",slope:0,spacing:0,specularConstant:1,specularExponent:1,speed:0,spreadMethod:1,startOffset:1,stdDeviation:1,stemh:0,stemv:0,stitchTiles:1,stopColor:1,"stop-color":"stopColor",stopOpacity:1,"stop-opacity":"stopOpacity",strikethroughPosition:1,"strikethrough-position":"strikethroughPosition",strikethroughThickness:1,"strikethrough-thickness":"strikethroughThickness",string:0,stroke:0,strokeDasharray:1,"stroke-dasharray":"strokeDasharray",strokeDashoffset:1,"stroke-dashoffset":"strokeDashoffset",strokeLinecap:1,"stroke-linecap":"strokeLinecap",strokeLinejoin:1,"stroke-linejoin":"strokeLinejoin",strokeMiterlimit:1,"stroke-miterlimit":"strokeMiterlimit",strokeWidth:1,"stroke-width":"strokeWidth",strokeOpacity:1,"stroke-opacity":"strokeOpacity",suppressContentEditableWarning:1,suppressHydrationWarning:1,surfaceScale:1,systemLanguage:1,tableValues:1,targetX:1,targetY:1,textAnchor:1,"text-anchor":"textAnchor",textDecoration:1,"text-decoration":"textDecoration",textLength:1,textRendering:1,"text-rendering":"textRendering",to:0,transform:0,typeof:0,u1:0,u2:0,underlinePosition:1,"underline-position":"underlinePosition",underlineThickness:1,"underline-thickness":"underlineThickness",unicode:0,unicodeBidi:1,"unicode-bidi":"unicodeBidi",unicodeRange:1,"unicode-range":"unicodeRange",unitsPerEm:1,"units-per-em":"unitsPerEm",unselectable:0,vAlphabetic:1,"v-alphabetic":"vAlphabetic",values:0,vectorEffect:1,"vector-effect":"vectorEffect",version:0,vertAdvY:1,"vert-adv-y":"vertAdvY",vertOriginX:1,"vert-origin-x":"vertOriginX",vertOriginY:1,"vert-origin-y":"vertOriginY",vHanging:1,"v-hanging":"vHanging",vIdeographic:1,"v-ideographic":"vIdeographic",viewBox:1,viewTarget:1,visibility:0,vMathematical:1,"v-mathematical":"vMathematical",vocab:0,widths:0,wordSpacing:1,"word-spacing":"wordSpacing",writingMode:1,"writing-mode":"writingMode",x1:0,x2:0,x:0,xChannelSelector:1,xHeight:1,"x-height":"xHeight",xlinkActuate:1,"xlink:actuate":"xlinkActuate",xlinkArcrole:1,"xlink:arcrole":"xlinkArcrole",xlinkHref:1,"xlink:href":"xlinkHref",xlinkRole:1,"xlink:role":"xlinkRole",xlinkShow:1,"xlink:show":"xlinkShow",xlinkTitle:1,"xlink:title":"xlinkTitle",xlinkType:1,"xlink:type":"xlinkType",xmlBase:1,"xml:base":"xmlBase",xmlLang:1,"xml:lang":"xmlLang",xmlns:0,"xml:space":"xmlSpace",xmlnsXlink:1,"xmlns:xlink":"xmlnsXlink",xmlSpace:1,y1:0,y2:0,y:0,yChannelSelector:1,z:0,zoomAndPan:1};const Yb=0,yi=1,ed=2,td=3,hf=4,Qb=5,Zb=6;function EI(e){return Qe.hasOwnProperty(e)?Qe[e]:null}function lt(e,t,a,i,n,r,s){this.acceptsBooleans=t===ed||t===td||t===hf,this.attributeName=i,this.attributeNamespace=n,this.mustUseProperty=a,this.propertyName=e,this.type=t,this.sanitizeURL=r,this.removeEmptyString=s}const Qe={},NI=["children","dangerouslySetInnerHTML","defaultValue","defaultChecked","innerHTML","suppressContentEditableWarning","suppressHydrationWarning","style"];NI.forEach(e=>{Qe[e]=new lt(e,Yb,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(([e,t])=>{Qe[e]=new lt(e,yi,!1,t,null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(e=>{Qe[e]=new lt(e,ed,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(e=>{Qe[e]=new lt(e,ed,!1,e,null,!1,!1)});["allowFullScreen","async","autoFocus","autoPlay","controls","default","defer","disabled","disablePictureInPicture","disableRemotePlayback","formNoValidate","hidden","loop","noModule","noValidate","open","playsInline","readOnly","required","reversed","scoped","seamless","itemScope"].forEach(e=>{Qe[e]=new lt(e,td,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(e=>{Qe[e]=new lt(e,td,!0,e,null,!1,!1)});["capture","download"].forEach(e=>{Qe[e]=new lt(e,hf,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(e=>{Qe[e]=new lt(e,Zb,!1,e,null,!1,!1)});["rowSpan","start"].forEach(e=>{Qe[e]=new lt(e,Qb,!1,e.toLowerCase(),null,!1,!1)});const gf=/[\-\:]([a-z])/g,yf=e=>e[1].toUpperCase();["accent-height","alignment-baseline","arabic-form","baseline-shift","cap-height","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","dominant-baseline","enable-background","fill-opacity","fill-rule","flood-color","flood-opacity","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-name","glyph-orientation-horizontal","glyph-orientation-vertical","horiz-adv-x","horiz-origin-x","image-rendering","letter-spacing","lighting-color","marker-end","marker-mid","marker-start","overline-position","overline-thickness","paint-order","panose-1","pointer-events","rendering-intent","shape-rendering","stop-color","stop-opacity","strikethrough-position","strikethrough-thickness","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","underline-position","underline-thickness","unicode-bidi","unicode-range","units-per-em","v-alphabetic","v-hanging","v-ideographic","v-mathematical","vector-effect","vert-adv-y","vert-origin-x","vert-origin-y","word-spacing","writing-mode","xmlns:xlink","x-height"].forEach(e=>{const t=e.replace(gf,yf);Qe[t]=new lt(t,yi,!1,e,null,!1,!1)});["xlink:actuate","xlink:arcrole","xlink:role","xlink:show","xlink:title","xlink:type"].forEach(e=>{const t=e.replace(gf,yf);Qe[t]=new lt(t,yi,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(e=>{const t=e.replace(gf,yf);Qe[t]=new lt(t,yi,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(e=>{Qe[e]=new lt(e,yi,!1,e.toLowerCase(),null,!1,!1)});const jI="xlinkHref";Qe[jI]=new lt("xlinkHref",yi,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(e=>{Qe[e]=new lt(e,yi,!1,e.toLowerCase(),null,!0,!0)});const{CAMELCASE:FI,SAME:OI,possibleStandardNames:mg}=Zl,MI=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",LI=MI+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",BI=RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+LI+"]*$")),WI=Object.keys(mg).reduce((e,t)=>{const a=mg[t];return a===OI?e[t]=t:a===FI?e[t.toLowerCase()]=t:e[t]=a,e},{});ia.BOOLEAN=td;ia.BOOLEANISH_STRING=ed;ia.NUMERIC=Qb;ia.OVERLOADED_BOOLEAN=hf;ia.POSITIVE_NUMERIC=Zb;ia.RESERVED=Yb;ia.STRING=yi;ia.getPropertyInfo=EI;ia.isCustomAttribute=BI;ia.possibleStandardNames=WI;var _f={},vf={},hg=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//g,zI=/\n/g,$I=/^\s*/,UI=/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/,KI=/^:\s*/,VI=/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/,GI=/^[;\s]*/,HI=/^\s+|\s+$/g,XI=`
`,gg="/",yg="*",Di="",JI="comment",YI="declaration",QI=function(e,t){if(typeof e!="string")throw new TypeError("First argument must be a string");if(!e)return[];t=t||{};var a=1,i=1;function n(v){var y=v.match(zI);y&&(a+=y.length);var T=v.lastIndexOf(XI);i=~T?v.length-T:i+v.length}function r(){var v={line:a,column:i};return function(y){return y.position=new s(v),d(),y}}function s(v){this.start=v,this.end={line:a,column:i},this.source=t.source}s.prototype.content=e;function o(v){var y=new Error(t.source+":"+a+":"+i+": "+v);if(y.reason=v,y.filename=t.source,y.line=a,y.column=i,y.source=e,!t.silent)throw y}function l(v){var y=v.exec(e);if(y){var T=y[0];return n(T),e=e.slice(T.length),y}}function d(){l($I)}function c(v){var y;for(v=v||[];y=f();)y!==!1&&v.push(y);return v}function f(){var v=r();if(!(gg!=e.charAt(0)||yg!=e.charAt(1))){for(var y=2;Di!=e.charAt(y)&&(yg!=e.charAt(y)||gg!=e.charAt(y+1));)++y;if(y+=2,Di===e.charAt(y-1))return o("End of comment missing");var T=e.slice(2,y-2);return i+=2,n(T),e=e.slice(y),i+=2,v({type:JI,comment:T})}}function g(){var v=r(),y=l(UI);if(y){if(f(),!l(KI))return o("property missing ':'");var T=l(VI),u=v({type:YI,property:_g(y[0].replace(hg,Di)),value:T?_g(T[0].replace(hg,Di)):Di});return l(GI),u}}function w(){var v=[];c(v);for(var y;y=g();)y!==!1&&(v.push(y),c(v));return v}return d(),w()};function _g(e){return e?e.replace(HI,Di):Di}var ZI=pt&&pt.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(vf,"__esModule",{value:!0});var eE=ZI(QI);function tE(e,t){var a=null;if(!e||typeof e!="string")return a;var i=(0,eE.default)(e),n=typeof t=="function";return i.forEach(function(r){if(r.type==="declaration"){var s=r.property,o=r.value;n?t(s,o,r):o&&(a=a||{},a[s]=o)}}),a}vf.default=tE;var ad={};Object.defineProperty(ad,"__esModule",{value:!0});ad.camelCase=void 0;var aE=/^--[a-zA-Z0-9-]+$/,iE=/-([a-z])/g,nE=/^[^-]+$/,rE=/^-(webkit|moz|ms|o|khtml)-/,sE=/^-(ms)-/,oE=function(e){return!e||nE.test(e)||aE.test(e)},lE=function(e,t){return t.toUpperCase()},vg=function(e,t){return"".concat(t,"-")},dE=function(e,t){return t===void 0&&(t={}),oE(e)?e:(e=e.toLowerCase(),t.reactCompat?e=e.replace(sE,vg):e=e.replace(rE,vg),e.replace(iE,lE))};ad.camelCase=dE;var uE=pt&&pt.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(_f,"__esModule",{value:!0});var cE=uE(vf),pE=ad;function fE(e,t){var a={};return!e||typeof e!="string"||(0,cE.default)(e,function(i,n){i&&n&&(a[(0,pE.camelCase)(i,t)]=n)}),a}_f.default=fE;var mE=b,hE=_f.default,gE=new Set(["annotation-xml","color-profile","font-face","font-face-src","font-face-uri","font-face-format","font-face-name","missing-glyph"]);function yE(e,t){return e.indexOf("-")===-1?t&&typeof t.is=="string":!gE.has(e)}var _E={reactCompat:!0};function vE(e,t){if(e!=null)try{t.style=hE(e,_E)}catch{t.style={}}}var bE=mE.version.split(".")[0]>=16,e0=new Set(["tr","tbody","thead","tfoot","colgroup","table","head","html","frameset"]);function wE(e){return!e0.has(e.name)}function kE(e){return e}var t0={PRESERVE_CUSTOM_ATTRIBUTES:bE,ELEMENTS_WITH_NO_TEXT_CHILDREN:e0,isCustomComponent:yE,setStyleProp:vE,canTextBeChildOfNode:wE,returnFirstArg:kE},ur=ia,bg=t0,TE=["checked","value"],xE=["input","select","textarea"],DE={reset:!0,submit:!0},a0=function(t,a){t=t||{};var i,n,r,s,o,l={},d=t.type&&DE[t.type];for(i in t){if(r=t[i],ur.isCustomAttribute(i)){l[i]=r;continue}if(n=i.toLowerCase(),s=wg(n),s){switch(o=ur.getPropertyInfo(s),TE.indexOf(s)!==-1&&xE.indexOf(a)!==-1&&!d&&(s=wg("default"+n)),l[s]=r,o&&o.type){case ur.BOOLEAN:l[s]=!0;break;case ur.OVERLOADED_BOOLEAN:r===""&&(l[s]=!0);break}continue}bg.PRESERVE_CUSTOM_ATTRIBUTES&&(l[i]=r)}return bg.setStyleProp(t.style,l),l};function wg(e){return ur.possibleStandardNames[e]}var qE=b,CE=a0,Hr=t0,SE=Hr.setStyleProp,PE=Hr.canTextBeChildOfNode;function i0(e,t){t=t||{};for(var a=t.library||qE,i=a.cloneElement,n=a.createElement,r=a.isValidElement,s=[],o,l,d=typeof t.replace=="function",c=t.transform||Hr.returnFirstArg,f,g,w,v=t.trim,y=0,T=e.length;y<T;y++){if(o=e[y],d&&(f=t.replace(o),r(f))){T>1&&(f=i(f,{key:f.key||y})),s.push(c(f,o,y));continue}if(o.type==="text"){if(l=!o.data.trim().length,l&&o.parent&&!PE(o.parent)||v&&l)continue;s.push(c(o.data,o,y));continue}switch(g=o.attribs,RE(o)?SE(g.style,g):g&&(g=CE(g,o.name)),w=null,o.type){case"script":case"style":o.children[0]&&(g.dangerouslySetInnerHTML={__html:o.children[0].data});break;case"tag":o.name==="textarea"&&o.children[0]?g.defaultValue=o.children[0].data:o.children&&o.children.length&&(w=i0(o.children,t));break;default:continue}T>1&&(g.key=y),s.push(c(n(o.name,g,w),o,y))}return s.length===1?s[0]:s}function RE(e){return Hr.PRESERVE_CUSTOM_ATTRIBUTES&&e.type==="tag"&&Hr.isCustomComponent(e.name,e.attribs)}var AE=i0,id=df,cn=ff.default,IE=a0,n0=AE;cn=typeof cn.default=="function"?cn.default:cn;var EE={lowerCaseAttributeNames:!1};function ga(e,t){if(typeof e!="string")throw new TypeError("First argument must be a string");return e===""?[]:(t=t||{},n0(cn(e,t.htmlparser2||EE),t))}ga.domToReact=n0;ga.htmlToDOM=cn;ga.attributesToProps=IE;ga.Comment=id.Comment;ga.Element=id.Element;ga.ProcessingInstruction=id.ProcessingInstruction;ga.Text=id.Text;var NE=ga;ga.default=ga;const ja=Tc(NE);ja.domToReact;ja.htmlToDOM;ja.attributesToProps;ja.Comment;ja.Element;ja.ProcessingInstruction;ja.Text;const kg=ya.entrypointtypes,jE=ya.plugins,Tg=ya.status_dict,FE={}.VITE_PR_PREVIEW_PATH||"/aiida-registry/";function OE({pluginKey:e}){const t=jE[e];return b.useEffect(()=>{window.scrollTo(0,0),document.documentElement.style.scrollBehavior="smooth",(()=>{const i=window.location.hash;if(i){let n=window.location.href;window.location.href=n+" ",window.location.href=n;const r=document.getElementById(i);r&&r.scrollIntoView()}})()},[]),h.jsx(h.Fragment,{children:h.jsxs("div",{id:"details",className:"fade-enter",children:[h.jsxs("h1",{className:"plugin-header",children:['AiiDA plugin package "',h.jsx("a",{href:t.code_home,children:t.name}),'"']}),h.jsx(Oi,{to:"/",children:h.jsx("p",{style:{display:"inline"},children:"< back to the registry index"})}),h.jsx("h2",{id:"general.information",children:"General information"}),h.jsxs("div",{children:[h.jsxs("p",{children:[h.jsx("strong",{children:"Current state: "}),h.jsx("img",{className:"svg-badge",src:`${FE}${Tg[t.development_status][1]}`,title:Tg[t.development_status][0]})]}),t.metadata.description&&h.jsxs("p",{children:[h.jsx("strong",{children:"Short description"}),": ",t.metadata.description]}),t.pip_url&&h.jsxs("p",{children:[h.jsx("strong",{children:"How to install"}),": ",h.jsx("code",{children:t.pip_install_cmd})]}),h.jsxs("p",{children:[h.jsx("strong",{children:"Source code"}),": ",h.jsx("a",{href:t.code_home,target:"_blank",children:"Go to the source code repository"})]}),t.documentation_url?h.jsxs("p",{children:[h.jsx("strong",{children:"Documentation"}),": ",h.jsx("a",{href:t.documentation_url,target:"_blank",children:"Go to plugin documentation"})]}):h.jsxs("p",{children:[h.jsx("strong",{children:"Documentation"}),": No documentation provided by the package author"]})]}),h.jsx("h3",{children:"Registry checks"}),t.warnings.length!==0||t.errors.length!==0?h.jsxs(h.Fragment,{children:[t.warnings&&h.jsx(h.Fragment,{children:t.warnings.map(a=>h.jsx(Os,{severity:"warning",children:ja(`${a}`)}))}),t.errors&&h.jsx(h.Fragment,{children:t.errors.map(a=>h.jsx(Os,{severity:"error",children:ja(`${a}`)}))}),h.jsxs(Os,{severity:"info",children:["Click the warning/error code will redirect to ",h.jsx("a",{href:"https://github.com/aiidateam/aiida-registry#how-to-fix-registry-warnings-and-errors",children:"troubleshooting section"})," for the fix of the issue."]})]}):h.jsx(Os,{severity:"success",children:"All checks passed!"}),h.jsx("h2",{id:"detailed.information",children:"Detailed information"}),Object.keys(t.metadata).length!==0?h.jsxs(h.Fragment,{children:[t.metadata.author&&h.jsxs("p",{children:[h.jsx("strong",{children:"Author(s)"}),": ",t.metadata.author]}),t.metadata.author_email&&h.jsxs("p",{children:[h.jsx("strong",{children:"Contact"}),":",t.metadata.author_email.split(",").map(a=>h.jsxs("span",{children:[h.jsx("a",{href:`mailto:${a.trim()}`,children:a.trim()}),", "]},a))]}),h.jsxs("p",{children:[h.jsx("strong",{children:"How to use from python"}),":"," ",h.jsxs("code",{children:["import ",t.package_name]})]}),h.jsxs("p",{children:[h.jsx("strong",{children:"Most recent version"}),": ",t.metadata.version]}),t.aiida_version&&h.jsxs("p",{children:[h.jsx("strong",{children:"Compatibility: "}),h.jsx("img",{className:"svg-badge",src:`https://img.shields.io/badge/AiiDA-${t.aiida_version}-007ec6.svg?logo=${Cb}`})]}),t.summaryinfo.length!==0&&h.jsxs(h.Fragment,{children:[h.jsx("h3",{id:"plugins",children:"Plugins provided by the package"}),t.summaryinfo.map(a=>h.jsxs("span",{className:"badge",children:[h.jsx("span",{className:`badge-left ${a.colorclass}`,children:a.text}),h.jsx("span",{className:"badge-right",children:a.count})]},a.text))]}),t.entry_points?Object.entries(t.entry_points).map(([a,i])=>h.jsx(h.Fragment,{children:h.jsxs("div",{children:[h.jsx("h2",{style:{color:"black"},id:a,children:a in kg?h.jsxs(h.Fragment,{children:[kg[a]," ",h.jsxs("span",{className:"entrypointraw",children:["(",a,")"]})]}):a}),h.jsx("ul",{children:Object.entries(i).map(([n,r])=>h.jsxs("li",{children:[h.jsx("h2",{style:{color:"black"},id:`${a}.${n}`,children:n}),typeof r=="string"?h.jsxs("div",{className:"classbox",children:["class",h.jsxs("span",{className:"tooltiptext",children:[" ",r]})]}):h.jsx(ME,{entryPoints:r})]},n))})]},a)})):h.jsx("p",{children:"No entry points defined for this plugin."})]}):h.jsx("div",{id:"description",children:h.jsxs("p",{children:["Detailed information for this package could not be obtained. Ask the plugin author to add a ",h.jsx("code",{children:"setup.json"})," file to the plugin source code."]})})]})})}const ME=({entryPoints:e})=>h.jsxs("div",{style:{overflow:"auto"},children:[h.jsx("table",{children:h.jsx("tbody",{children:h.jsxs("tr",{children:[h.jsx("th",{children:"Class"}),h.jsx("td",{children:h.jsx("code",{children:e.class})})]})})}),h.jsxs("table",{children:[h.jsx("tr",{children:h.jsx("th",{children:"Description"})}),e.description.map(t=>h.jsx("tr",{className:"ep_description",children:h.jsx(bc,{children:t.trim()})}))]}),h.jsxs("table",{children:[h.jsxs("tr",{children:[h.jsx("th",{children:"Inputs"}),h.jsx("th",{children:"Required"}),h.jsx("th",{children:"Valid Types"}),h.jsx("th",{children:"Description"})]}),h.jsx(xg,{spec:e.spec.inputs}),h.jsxs("tr",{children:[h.jsx("th",{children:"Outputs"}),h.jsx("th",{children:"Required"}),h.jsx("th",{children:"Valid Types"}),h.jsx("th",{children:"Description"})]}),h.jsx(xg,{spec:e.spec.outputs})]}),h.jsxs("table",{children:[h.jsx("tr",{children:h.jsx("th",{children:"Exit Codes"})}),h.jsxs("tr",{children:[h.jsx("th",{children:"Status"}),h.jsx("th",{children:"Message"})]}),e.spec.exit_codes.map(t=>h.jsxs("tr",{className:"ep_description",children:[h.jsx("td",{children:t.status}),h.jsx(bc,{children:t.message})]}))]})]}),xg=({spec:e})=>h.jsx(h.Fragment,{children:e.map(t=>h.jsxs("tr",{className:"ep_description",children:[h.jsx("td",{children:t.name}),h.jsx("td",{children:t.required.toString()}),h.jsx("td",{children:t.valid_types}),h.jsx(bc,{children:t.info})]}))});const LE=["addEndListener","appear","children","container","direction","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function BE(e,t,a){const i=t.getBoundingClientRect(),n=a&&a.getBoundingClientRect(),r=ha(t);let s;if(t.fakeTransform)s=t.fakeTransform;else{const d=r.getComputedStyle(t);s=d.getPropertyValue("-webkit-transform")||d.getPropertyValue("transform")}let o=0,l=0;if(s&&s!=="none"&&typeof s=="string"){const d=s.split("(")[1].split(")")[0].split(",");o=parseInt(d[4],10),l=parseInt(d[5],10)}return e==="left"?n?`translateX(${n.right+o-i.left}px)`:`translateX(${r.innerWidth+o-i.left}px)`:e==="right"?n?`translateX(-${i.right-n.left-o}px)`:`translateX(-${i.left+i.width-o}px)`:e==="up"?n?`translateY(${n.bottom+l-i.top}px)`:`translateY(${r.innerHeight+l-i.top}px)`:n?`translateY(-${i.top-n.top+i.height-l}px)`:`translateY(-${i.top+i.height-l}px)`}function WE(e){return typeof e=="function"?e():e}function zs(e,t,a){const i=WE(a),n=BE(e,t,i);n&&(t.style.webkitTransform=n,t.style.transform=n)}const zE=b.forwardRef(function(t,a){const i=us(),n={enter:i.transitions.easing.easeOut,exit:i.transitions.easing.sharp},r={enter:i.transitions.duration.enteringScreen,exit:i.transitions.duration.leavingScreen},{addEndListener:s,appear:o=!0,children:l,container:d,direction:c="down",easing:f=n,in:g,onEnter:w,onEntered:v,onEntering:y,onExit:T,onExited:u,onExiting:m,style:p,timeout:_=r,TransitionComponent:k=Yp}=t,D=$(t,LE),x=b.useRef(null),S=Ke(Fn(l),x,a),R=C=>F=>{C&&(F===void 0?C(x.current):C(x.current,F))},P=R((C,F)=>{zs(c,C,d),ef(C),w&&w(C,F)}),A=R((C,F)=>{const B=Pn({timeout:_,style:p,easing:f},{mode:"enter"});C.style.webkitTransition=i.transitions.create("-webkit-transform",q({},B)),C.style.transition=i.transitions.create("transform",q({},B)),C.style.webkitTransform="none",C.style.transform="none",y&&y(C,F)}),I=R(v),E=R(m),j=R(C=>{const F=Pn({timeout:_,style:p,easing:f},{mode:"exit"});C.style.webkitTransition=i.transitions.create("-webkit-transform",F),C.style.transition=i.transitions.create("transform",F),zs(c,C,d),T&&T(C)}),O=R(C=>{C.style.webkitTransition="",C.style.transition="",u&&u(C)}),M=C=>{s&&s(x.current,C)},L=b.useCallback(()=>{x.current&&zs(c,x.current,d)},[c,d]);return b.useEffect(()=>{if(g||c==="down"||c==="right")return;const C=bl(()=>{x.current&&zs(c,x.current,d)}),F=ha(x.current);return F.addEventListener("resize",C),()=>{C.clear(),F.removeEventListener("resize",C)}},[c,g,d]),b.useEffect(()=>{g||L()},[g,L]),h.jsx(k,q({nodeRef:x,onEnter:P,onEntered:I,onEntering:A,onExit:j,onExited:O,onExiting:E,addEndListener:M,appear:o,in:g,timeout:_},D,{children:(C,F)=>b.cloneElement(l,q({ref:S,style:q({visibility:C==="exited"&&!g?"hidden":void 0},p,l.props.style)},F))}))}),$E=zE;function UE(e){return pe("MuiDrawer",e)}se("MuiDrawer",["root","docked","paper","paperAnchorLeft","paperAnchorRight","paperAnchorTop","paperAnchorBottom","paperAnchorDockedLeft","paperAnchorDockedRight","paperAnchorDockedTop","paperAnchorDockedBottom","modal"]);const KE=["BackdropProps"],VE=["anchor","BackdropProps","children","className","elevation","hideBackdrop","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"],r0=(e,t)=>{const{ownerState:a}=e;return[t.root,(a.variant==="permanent"||a.variant==="persistent")&&t.docked,t.modal]},GE=e=>{const{classes:t,anchor:a,variant:i}=e,n={root:["root"],docked:[(i==="permanent"||i==="persistent")&&"docked"],modal:["modal"],paper:["paper",`paperAnchor${J(a)}`,i!=="temporary"&&`paperAnchorDocked${J(a)}`]};return me(n,UE,t)},HE=z(tf,{name:"MuiDrawer",slot:"Root",overridesResolver:r0})(({theme:e})=>({zIndex:(e.vars||e).zIndex.drawer})),Dg=z("div",{shouldForwardProp:At,name:"MuiDrawer",slot:"Docked",skipVariantsResolver:!1,overridesResolver:r0})({flex:"0 0 auto"}),XE=z(fs,{name:"MuiDrawer",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:a}=e;return[t.paper,t[`paperAnchor${J(a.anchor)}`],a.variant!=="temporary"&&t[`paperAnchorDocked${J(a.anchor)}`]]}})(({theme:e,ownerState:t})=>q({overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:(e.vars||e).zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},t.anchor==="left"&&{left:0},t.anchor==="top"&&{top:0,left:0,right:0,height:"auto",maxHeight:"100%"},t.anchor==="right"&&{right:0},t.anchor==="bottom"&&{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},t.anchor==="left"&&t.variant!=="temporary"&&{borderRight:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="top"&&t.variant!=="temporary"&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="right"&&t.variant!=="temporary"&&{borderLeft:`1px solid ${(e.vars||e).palette.divider}`},t.anchor==="bottom"&&t.variant!=="temporary"&&{borderTop:`1px solid ${(e.vars||e).palette.divider}`})),s0={left:"right",right:"left",top:"down",bottom:"up"};function JE(e){return["left","right"].indexOf(e)!==-1}function YE({direction:e},t){return e==="rtl"&&JE(t)?s0[t]:t}const QE=b.forwardRef(function(t,a){const i=he({props:t,name:"MuiDrawer"}),n=us(),r=ob(),s={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{anchor:o="left",BackdropProps:l,children:d,className:c,elevation:f=16,hideBackdrop:g=!1,ModalProps:{BackdropProps:w}={},onClose:v,open:y=!1,PaperProps:T={},SlideProps:u,TransitionComponent:m=$E,transitionDuration:p=s,variant:_="temporary"}=i,k=$(i.ModalProps,KE),D=$(i,VE),x=b.useRef(!1);b.useEffect(()=>{x.current=!0},[]);const S=YE({direction:r?"rtl":"ltr"},o),P=q({},i,{anchor:o,elevation:f,open:y,variant:_},D),A=GE(P),I=h.jsx(XE,q({elevation:_==="temporary"?f:0,square:!0},T,{className:G(A.paper,T.className),ownerState:P,children:d}));if(_==="permanent")return h.jsx(Dg,q({className:G(A.root,A.docked,c),ownerState:P,ref:a},D,{children:I}));const E=h.jsx(m,q({in:y,direction:s0[S],timeout:p,appear:x.current},u,{children:I}));return _==="persistent"?h.jsx(Dg,q({className:G(A.root,A.docked,c),ownerState:P,ref:a},D,{children:E})):h.jsx(HE,q({BackdropProps:q({},l,w,{transitionDuration:p}),className:G(A.root,A.modal,c),open:y,ownerState:P,onClose:v,hideBackdrop:g,ref:a},D,k,{children:E}))}),ZE=QE,eN=ya.plugins;function tN({pluginKey:e}){const t=eN[e];function a(){function n(){document.querySelector("header").style.top="-155px",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="0"}setTimeout(n,800)}const i=h.jsxs("div",{style:{paddingLeft:"10px"},children:[h.jsx("h1",{children:"Plugin content"}),h.jsx(Rh,{}),h.jsx("p",{children:h.jsx("a",{style:{color:"black"},href:"#general.information",onClick:a,children:"General Information"})}),h.jsx("p",{children:h.jsx("a",{style:{color:"black"},href:"#detailed.information",onClick:a,children:"Detailed Information"})}),h.jsx("p",{children:h.jsx("a",{style:{color:"black"},href:"#plugins",onClick:a,children:"Plugins provided by the package"})}),t.entry_points&&Object.entries(t.entry_points).map(([n,r])=>h.jsx(h.Fragment,{children:h.jsx("ul",{children:h.jsxs("li",{children:[h.jsx("a",{style:{color:"black"},href:`#${n}`,onClick:a,children:n}),Object.entries(r).map(([s,o])=>h.jsx("ul",{children:h.jsx("li",{children:h.jsx("a",{style:{color:"black"},href:`#${n}.${s}`,onClick:a,children:s})})},s))]})})})),h.jsx(Rh,{})]});return h.jsx(ZE,{variant:"permanent",id:"sidebar",anchor:"right",sx:{display:{xs:"none",sm:"block"}},open:!0,children:i})}function aN(){return h.jsxs(h.Fragment,{children:[h.jsx(iN,{}),h.jsx("div",{style:{marginTop:"155px"},children:h.jsx(QR,{children:h.jsx(UC,{children:h.jsxs(xk,{children:[h.jsx(Hu,{path:"/",element:h.jsx(WA,{})}),h.jsx(Hu,{path:"/:key",element:h.jsx(rN,{})})]})})})}),h.jsx(nN,{})]})}function iN(){return h.jsx("header",{children:h.jsxs("div",{style:{paddingLeft:"20px"},children:[h.jsx("h1",{children:h.jsx("a",{href:"http://aiidateam.github.io/aiida-registry",children:h.jsx("img",{src:jk,height:"70px"})})}),h.jsx("p",{style:{fontSize:"90%"},children:h.jsx("a",{href:"http://github.com/aiidateam/aiida-registry",style:{color:"#999"},children:"[View on GitHub/register your package]"})})]})})}function nN(){return h.jsxs("footer",{className:"footer",children:[h.jsx("hr",{}),"The official ",h.jsx("a",{href:"http://aiidateam.github.io/aiida-registry",children:"registry"})," of ",h.jsx("a",{href:"http://www.aiida.net",children:"AiiDA"})," plugins.",h.jsx("br",{}),"This work is supported by the ",h.jsx("a",{href:"http://nccr-marvel.ch",target:"_blank",children:"MARVEL National Centre for Competence in Research"})," funded by the ",h.jsx("a",{href:"http://www.snf.ch/en",target:"_blank",children:"Swiss National Science Foundation"}),", as well as by the ",h.jsx("a",{href:"http://www.max-centre.eu",target:"_blank",children:"MaX European Centre of Excellence"})," funded by the Horizon 2020 EINFRA-5 program, Grant No. 676598.",h.jsx("br",{}),h.jsx("br",{}),h.jsxs("div",{style:{textAlign:"center"},children:[h.jsx("img",{src:Fk,height:"70px"}),"    ",h.jsx("img",{src:Ok,height:"70px"})]})]})}function rN(){const{key:e}=lk();b.useEffect(()=>(document.querySelector("footer").style.width="calc(100% - 380px)",()=>{document.querySelector("footer").style.width="calc(100% - 64px)"}),[]);function t(){var a=window.scrollY;window.onscroll=function(){var i=window.scrollY;a>i?(document.querySelector("header").style.top="0",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="155px"):a>150&&(document.querySelector("header").style.top="-155px",document.querySelector("#sidebar .MuiDrawer-paper").style.marginTop="0"),a=i}}return t(),h.jsx(h.Fragment,{children:h.jsxs("div",{id:"detailsContainer",children:[h.jsx(OE,{pluginKey:e}),h.jsx(tN,{pluginKey:e})]})})}const sN={}.VITE_PR_PREVIEW_PATH||"/aiida-registry/";eu.createRoot(document.getElementById("root")).render(h.jsx(Zt.StrictMode,{children:h.jsx(Ak,{basename:sN,children:h.jsx(aN,{})})}));
